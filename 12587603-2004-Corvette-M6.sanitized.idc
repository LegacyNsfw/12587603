
#define UNLOADED_FILE   1
#include <idc.idc>

static main(void)
{
  // set 'loading idc file' mode
  SetCharPrm(INF_GENFLAGS, INFFL_LOADIDC|GetCharPrm(INF_GENFLAGS));
  GenInfo();            // various settings
  Segments();           // segmentation
  Enums();              // enumerations
  Structures();         // structure types
  Patches();            // manual patches
  SegRegs();            // segment register values
  Bytes();              // individual bytes (code,data)
  Functions();          // function definitions
  // clear 'loading idc file' mode
  SetCharPrm(INF_GENFLAGS, ~INFFL_LOADIDC&GetCharPrm(INF_GENFLAGS));
}


static GenInfo(void) {

        DeleteAll();    // purge database
	SetPrcsr("68330");
	SetCharPrm(INF_COMPILER, 0);
	StringStp(0xA);
	Tabs(1);
	Comments(0);
	Voids(0);
	XrefShow(2);
	AutoShow(1);
	Indent(16);
	CmtIndent(40);
	TailDepth(0x10);
}


static Segments(void) {
	SetSelector(0X1,0);
	;
	SegCreate(0,0X3FFF,0,1,1,2);
	SegRename(0,"Boot");
	SegClass (0,"");
	SegCreate(0X3FFF,0X4000,0,1,1,2);
	SegRename(0X3FFF,"ROM");
	SegClass (0X3FFF,"CODE");
	SetSegmentType(0X3FFF,2);
	SegCreate(0X4000,0X5FFF,0,1,1,2);
	SegRename(0X4000,"Param1");
	SegClass (0X4000,"");
	SegCreate(0X6000,0X7FFF,0,1,1,2);
	SegRename(0X6000,"Param2");
	SegClass (0X6000,"");
	SegCreate(0X8000,0X1FFFF,0,1,1,2);
	SegRename(0X8000,"Calibration");
	SegClass (0X8000,"");
	SegCreate(0X20000,0X3FFFF,0,1,1,2);
	SegRename(0X20000,"OS1");
	SegClass (0X20000,"");
	SegCreate(0X40000,0X5FFFF,0,1,1,2);
	SegRename(0X40000,"OS2");
	SegClass (0X40000,"");
	SegCreate(0X60000,0X7FFFF,0,1,1,2);
	SegRename(0X60000,"OS3");
	SegClass (0X60000,"");
	SegCreate(0X80000,0X8FFFF,0,1,1,2);
	SegRename(0X80000,"OS4");
	SegClass (0X80000,"");
	SegCreate(0XA0000,0XAFFFF,0,1,1,2);
	SegRename(0XA0000,"OS5");
	SegClass (0XA0000,"");
	SegCreate(0XC0000,0XCFFFF,0,1,1,2);
	SegRename(0XC0000,"OS6");
	SegClass (0XC0000,"");
	SegCreate(0XE0000,0XEFFFF,0,1,1,2);
	SegRename(0XE0000,"OS7");
	SegClass (0XE0000,"");
	SegCreate(0XFF0000,0XFFFFFF,0,1,1,2);
	SegRename(0XFF0000,"RAM_00");
	SegClass (0XFF0000,"");
	SegCreate(0XFFFF0000,0XFFFFFFFF,0,1,1,2);
	SegRename(0XFFFF0000,"RAM_FF");
	SegClass (0XFFFF0000,"");
	LowVoids(0x0);
	HighVoids(0xFFFFD000);
}


static Enums(void) {
        auto id;
        BeginTypeUpdating(UTP_ENUM);
        EndTypeUpdating(UTP_ENUM);
}

static Structures_0(id) {
        auto mid;

	id = AddStrucEx(-1,"PidAndFunction",0);
	id = AddStrucEx(-1,"struct_0",0);
	
	id = GetStrucIdByName("PidAndFunction");
	mid = AddStrucMember(id,"PID",	0,	0x20504500,	0,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = AddStrucMember(id,"anonymous_0",	0X4,	0x20500500,	0,	4,	0XFFFFFFFF,	0,	0x000002);
	
	id = GetStrucIdByName("struct_0");
	mid = AddStrucMember(id,"PID",	0,	0x10004500,	-1,	2);
	mid = AddStrucMember(id,"PidFlags",	0X2,	0x10000500,	-1,	2);
	mid = AddStrucMember(id,"Function",	0X4,	0x20500500,	0,	4,	0XFFFFFFFF,	0,	0x000002);
	return id;
}


static Structures(void) {
        auto id;
        BeginTypeUpdating(UTP_STRUCT);	id = Structures_0(id);
}


static Bytes_0(void) {
        auto x;
#define id x

	MakeRptCmt	(0,	"The first value is the stack pointer, and loc_440 is the reset vector.\nOther values are pointers to interrupt handlers. See the data sheet for specifics.");
	MakeDword	(x=0);
	MakeArray	(x,	0X10F);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X43C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X440);
	MakeName	(0X440,	"Reset");
	MakeCode	(0X4BA);
	MakeCode	(x=0X4D2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(0X4FE);
	MakeDword	(0X500);
	MakeName	(0X500,	"Constant16_Operating_System_Checksum");
	MakeDword	(0X504);
	MakeName	(0X504,	"CurveTable_8_Rows_Calibration_Segment_Checksum");
	MakeDword	(0X508);
	MakeName	(0X508,	"CurveTable_2_Columns_Operating_System_Level_ID");
	MakeCode	(0X54C);
	MakeCode	(0X55C);
	MakeCode	(0X57E);
	MakeCode	(0X590);
	MakeDword	(x=0X640);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X6C2);
	MakeCode	(0X6D2);
	MakeCode	(0X6EC);
	MakeCode	(0X704);
	MakeCode	(0X718);
	MakeCode	(0X72A);
	MakeCode	(0X75A);
	MakeCode	(0X76A);
	MakeCode	(0X77A);
	MakeCode	(x=0X794);
	OpSign		(x,	1);
	MakeCode	(x=0X7A0);
	OpStkvar	(x,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7A6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7AA);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7B6);
	OpSign		(x,	1);
	MakeCode	(x=0X7C0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7C4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7C8);
	OpStkvar	(x,	0);
	MakeCode	(0X7D4);
	MakeCode	(0X7E2);
	MakeByte	(0X808);
	MakeByte	(0X80A);
	MakeByte	(0X80B);
	MakeByte	(0X80C);
	MakeByte	(0X80D);
	MakeCode	(0X80E);
	MakeCode	(x=0X850);
	OpSign		(x,	1);
	MakeCode	(x=0X864);
	OpStkvar	(x,	1);
	MakeCode	(x=0X876);
	OpStkvar	(x,	1);
	MakeCode	(x=0X880);
	OpStkvar	(x,	0);
	MakeCode	(0X89C);
	MakeCode	(x=0X8AC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X8B2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X8B8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X8BE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X8C6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8CC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X8D2);
	OpStkvar	(x,	0);
	MakeCode	(0X8D8);
	MakeCode	(x=0X8F2);
	OpStkvar	(x,	0);
	MakeCode	(0X98C);
	MakeCode	(x=0X9A8);
	OpStkvar	(x,	1);
	MakeCode	(0X9E4);
	MakeCode	(x=0X9EA);
	OpStkvar	(x,	1);
	MakeCode	(x=0XA12);
	OpStkvar	(x,	1);
	MakeCode	(0XA1A);
	MakeCode	(x=0XA2A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0XA38);
	OpStkvar	(x,	0);
	MakeCode	(0XA52);
	MakeCode	(x=0XAA0);
	OpSign		(x,	1);
	MakeCode	(x=0XACC);
	OpStkvar	(x,	0);
	MakeCode	(x=0XADE);
	OpStkvar	(x,	0);
	MakeCode	(x=0XAE2);
	OpStkvar	(x,	1);
	MakeCode	(x=0XB20);
	OpStkvar	(x,	1);
	MakeCode	(x=0XB24);
	OpStkvar	(x,	1);
	MakeCode	(0XB2A);
	MakeCode	(x=0XB30);
	OpStkvar	(x,	0);
	MakeCode	(x=0XB3A);
	OpStkvar	(x,	0);
	MakeCode	(x=0XB3E);
	OpStkvar	(x,	1);
	MakeCode	(x=0XB44);
	OpStkvar	(x,	1);
	MakeCode	(x=0XB7E);
	OpStkvar	(x,	1);
	MakeCode	(x=0XB84);
	OpStkvar	(x,	1);
	MakeCode	(x=0XB8A);
	OpStkvar	(x,	1);
	MakeCode	(x=0XB8E);
	OpStkvar	(x,	1);
	MakeCode	(x=0XB94);
	OpStkvar	(x,	0);
	MakeCode	(0XC22);
	MakeCode	(x=0XC34);
	OpStkvar	(x,	1);
	MakeCode	(x=0XC3C);
	OpStkvar	(x,	0);
	MakeCode	(x=0XC4E);
	OpStkvar	(x,	0);
	MakeCode	(x=0XC54);
	OpStkvar	(x,	1);
	MakeCode	(0XC5C);
	MakeCode	(x=0XC5E);
	OpStkvar	(x,	1);
	MakeCode	(x=0XC64);
	OpStkvar	(x,	0);
	MakeCode	(x=0XC78);
	OpStkvar	(x,	0);
	MakeCode	(x=0XC80);
	OpStkvar	(x,	0);
	MakeCode	(0XC8C);
	MakeCode	(x=0XC92);
	OpStkvar	(x,	1);
	MakeCode	(x=0XC98);
	OpStkvar	(x,	1);
	MakeCode	(x=0XC9E);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCA2);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCA8);
	OpStkvar	(x,	1);
	MakeCode	(0XCB4);
	MakeCode	(0XCCE);
	MakeCode	(x=0XCD4);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCDA);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCE0);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCE4);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCEA);
	OpStkvar	(x,	0);
	MakeCode	(0XCF0);
	MakeCode	(x=0XCF6);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCFC);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD02);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD06);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD14);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD18);
	OpStkvar	(x,	0);
	MakeCode	(x=0XD1C);
	OpStkvar	(x,	0);
	MakeCode	(x=0XD24);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD2A);
	OpStkvar	(x,	1);
	MakeCode	(0XD32);
	MakeCode	(x=0XD38);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD3E);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD44);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD48);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD4E);
	OpStkvar	(x,	0);
	MakeCode	(x=0XD52);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD5A);
	OpStkvar	(x,	0);
	MakeCode	(0XD6E);
	MakeCode	(0XDBE);
	MakeCode	(0XDEA);
	MakeWord	(0XE04);
	MakeWord	(0XE06);
	MakeByte	(0XE08);
	MakeByte	(0XE09);
	MakeByte	(0XE0A);
	MakeByte	(0XE0B);
	MakeCode	(0XE0C);
	MakeByte	(0XE2C);
	MakeArray	(0XE2C,	0X4);
	MakeCode	(0XE32);
	MakeCode	(0XE42);
	MakeCode	(0XE4E);
	MakeCode	(0XE52);
	MakeCode	(0XEEE);
	MakeCode	(0XEF4);
	MakeCode	(0XF1C);
	MakeCode	(0XF30);
	MakeCode	(0XF46);
	MakeCode	(x=0XF50);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0XF90);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0XF94);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0XF98);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0XF9C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0XFA0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0XFA4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0XFA8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0XFAC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0XFB0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0XFB4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0XFB8);
	MakeCode	(x=0XFC0);
	OpSign		(x,	1);
	MakeCode	(0XFE8);
	MakeCode	(x=0X1002);
	OpStkvar	(x,	1);
	MakeCode	(x=0X100A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1020);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1024);
	OpStkvar	(x,	0);
	MakeCode	(x=0X102A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1030);
	OpStkvar	(x,	1);
	MakeCode	(x=0X103A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1050);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1054);
	OpStkvar	(x,	0);
	MakeCode	(x=0X105A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1060);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1066);
	OpStkvar	(x,	1);
	MakeCode	(x=0X106C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1072);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1078);
	OpStkvar	(x,	0);
	MakeCode	(0X1082);
	MakeCode	(0X10C2);
	MakeCode	(0X10D4);
	MakeCode	(0X10DC);
	MakeCode	(0X10EE);
	MakeCode	(0X10F6);
	MakeCode	(0X1106);
	MakeCode	(0X1114);
	MakeCode	(0X111A);
	MakeCode	(0X1122);
	MakeCode	(0X1156);
	MakeCode	(0X1210);
	MakeCode	(0X1216);
	MakeCode	(0X1246);
	MakeDword	(x=0X1258);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X125C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1260);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1264);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1268);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X126C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1270);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1274);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1278);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X127C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1280);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1284);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1288);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X128C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1290);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1294);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1298);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X129C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X12A0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X12A4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X12A8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X12AC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X12B0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X12B4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X12B8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X12BC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X12C0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X12C4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X12C8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X12CC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X12D0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X12D4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X12D8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X12DC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X12E0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X12E4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X12E8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X12EC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X12F0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X12F4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X12F8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X12FC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1300);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1304);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1308);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X130C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1328);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X132C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1330);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X134C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeByte	(0X1368);
	MakeByte	(0X1369);
	MakeCode	(0X136A);
	MakeCode	(0X138E);
	MakeCode	(0X149C);
	MakeCode	(0X14AA);
	MakeCode	(0X1570);
	MakeCode	(0X159C);
	MakeCode	(x=0X15AE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X15B8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X15C2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X15CC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X15D6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X15E0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X15EA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X15F4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X15FE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X1608);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X1612);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X1626);
	MakeCode	(0X1634);
	MakeByte	(0X1642);
	MakeByte	(0X1643);
	MakeByte	(0X1644);
	MakeByte	(0X1645);
	MakeByte	(0X1646);
	MakeWord	(0X1648);
	MakeWord	(0X164A);
	MakeByte	(0X164C);
	MakeWord	(0X164E);
	MakeByte	(0X1650);
	MakeByte	(0X1651);
	MakeWord	(0X1654);
	MakeByte	(0X1656);
	MakeByte	(0X1659);
	MakeByte	(0X165A);
	MakeByte	(0X165B);
	MakeByte	(0X165C);
	MakeWord	(0X165E);
	MakeWord	(0X1660);
	MakeByte	(0X1662);
	MakeWord	(0X1664);
	MakeWord	(0X1666);
	MakeWord	(0X1668);
	MakeWord	(0X166A);
	MakeWord	(0X166C);
	MakeWord	(0X166E);
	MakeWord	(0X1670);
	MakeWord	(0X1672);
	MakeWord	(0X1674);
	MakeWord	(0X1676);
	MakeWord	(0X1678);
	MakeWord	(0X167A);
	MakeWord	(0X167C);
	MakeWord	(0X167E);
	MakeWord	(0X1680);
	MakeWord	(0X1682);
	MakeWord	(0X1684);
	MakeWord	(0X1686);
	MakeWord	(0X1688);
	MakeWord	(0X168A);
	MakeWord	(0X168C);
	MakeWord	(0X168E);
	MakeWord	(0X1690);
	MakeWord	(0X1692);
	MakeWord	(0X1694);
	MakeWord	(0X1696);
	MakeWord	(0X1698);
	MakeWord	(0X169A);
	MakeWord	(0X169C);
	MakeWord	(0X169E);
	MakeWord	(0X16A0);
	MakeByte	(0X16A2);
	MakeByte	(0X16A3);
	MakeWord	(0X16A4);
	MakeWord	(0X16A6);
	MakeByte	(0X16A8);
	MakeByte	(0X16A9);
	MakeWord	(0X16AA);
	MakeWord	(0X16AC);
	MakeWord	(0X16AE);
	MakeByte	(0X16B0);
	MakeByte	(0X16B1);
	MakeByte	(0X16B2);
	MakeByte	(0X16B3);
	MakeWord	(0X16B4);
	MakeWord	(0X16B8);
	MakeWord	(0X16BA);
	MakeDword	(0X16BC);
	MakeDword	(0X16C0);
	MakeDword	(0X16C4);
	MakeDword	(0X16C8);
	MakeByte	(0X16CC);
	MakeWord	(0X16CE);
	MakeWord	(0X16D2);
	MakeWord	(0X16D4);
	MakeCode	(0X16D6);
	MakeCode	(0X16FA);
	MakeCode	(0X1742);
	MakeCode	(0X1748);
	MakeCode	(0X174E);
	MakeCode	(0X1792);
	MakeCode	(0X17B2);
	MakeCode	(0X17C6);
	MakeCode	(0X17F2);
	MakeCode	(0X17F8);
	MakeCode	(0X17FE);
	MakeCode	(0X1816);
	MakeCode	(0X1854);
	MakeCode	(0X1872);
	MakeCode	(0X1890);
	MakeCode	(0X18AE);
	MakeCode	(0X18B4);
	MakeDword	(x=0X18B6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(0X18BA);
	MakeByte	(0X18BD);
	MakeWord	(0X18BE);
	MakeDword	(x=0X18C0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X18C4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X18C8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X18CC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X18D0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X18D4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X18D8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X18DC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X1958);
	OpSign		(x,	1);
	MakeCode	(x=0X19CA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X19D2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X19D8);
	OpStkvar	(x,	0);
	MakeCode	(x=0X19E0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X19E8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X19EE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1A28);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X1A2E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X1A4C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X1A52);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X1A64);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1A6A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1A74);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1A9C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1AA0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1AAC);
	OpStkvar	(x,	0);
	MakeCode	(0X1AB4);
	MakeCode	(x=0X1AB6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1ABA);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1AC6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1ACC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1AD2);
	OpStkvar	(x,	0);
	OpStkvar	(x,	1);
	MakeCode	(0X1B24);
	MakeCode	(0X1B2C);
	MakeCode	(x=0X1B54);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1B5A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1B60);
	OpStkvar	(x,	0);
	MakeCode	(0X1B84);
	MakeCode	(0X1B9E);
	MakeDword	(x=0X1BAE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(0X1BB2);
	MakeCode	(0X1BB4);
	MakeCode	(x=0X1BD4);
	OpSign		(x,	1);
	MakeCode	(x=0X1BD8);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1BDC);
	OpStkvar	(x,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1BE2);
	OpStkvar	(x,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1BE8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1BEE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1BF4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1BFA);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1C00);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1C04);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1C08);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1C12);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1C26);
	OpSign		(x,	1);
	MakeCode	(x=0X1C36);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X1C72);
	MakeCode	(0X1C90);
	MakeCode	(x=0X1D10);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1D14);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1D22);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1D30);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1D3E);
	OpStkvar	(x,	0);
	MakeCode	(0X1D7A);
	MakeCode	(0X1DBC);
	MakeCode	(0X1DD4);
	MakeWord	(0X1DEA);
	MakeWord	(0X1DEC);
	MakeWord	(0X1DEE);
	MakeWord	(0X1DF0);
	MakeWord	(0X1DF2);
	MakeWord	(0X1DF4);
	MakeDword	(0X1DF6);
	MakeDword	(0X1DFA);
	MakeDword	(0X1DFE);
	MakeDword	(0X1E02);
	MakeDword	(x=0X1E06);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1E0A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(0X1E0E);
	MakeDword	(0X1E12);
	MakeDword	(0X1E16);
	MakeDword	(0X1E1A);
	MakeDword	(0X1E1E);
	MakeDword	(0X1E22);
	MakeDword	(0X1E26);
	MakeWord	(0X1E2A);
	MakeWord	(0X1E2C);
	MakeWord	(0X1E2E);
	MakeWord	(0X1E30);
	MakeWord	(0X1E32);
	MakeWord	(0X1E34);
	MakeWord	(0X1E36);
	MakeWord	(0X1E38);
	MakeWord	(0X1E3A);
	MakeWord	(0X1E3C);
	MakeWord	(0X1E3E);
	MakeWord	(0X1E40);
	MakeWord	(0X1E42);
	MakeDword	(0X1E44);
	MakeDword	(0X1E48);
	MakeWord	(0X1E4C);
	MakeWord	(0X1E4E);
	MakeDword	(x=0X1E80);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1E84);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1E88);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1E8C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1E90);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1E94);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1E98);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1E9C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1EA0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1EA4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1EA8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1EAC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1EB0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1EB4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1EB8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1EBC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1EC0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1EC4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X1EC8);
	MakeCode	(0X1EEC);
	MakeCode	(0X1EF4);
	MakeCode	(0X1EFC);
	MakeWord	(0X1F0E);
	MakeByte	(0X1F10);
	MakeByte	(0X1F14);
	MakeByte	(0X1F18);
	MakeByte	(0X1F20);
	MakeDword	(x=0X2154);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X2158);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X215C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X2160);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X2168);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeByte	(0X2175);
	MakeByte	(0X2176);
	MakeCode	(x=0X2178);
	OpSign		(x,	1);
	MakeCode	(x=0X218C);
	OpStkvar	(x,	1);
	MakeCode	(0X21E2);
	MakeCode	(x=0X21F0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X21F6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X2216);
	MakeCode	(0X2238);
	MakeCode	(0X2252);
	MakeCode	(x=0X2280);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeStruct	(0X22A4,	"struct_0");
	MakeArray	(0X22A4,	0X133);
	MakeName	(0X22A4,	"PID_jump_table");
	MakeDword	(0X2C3C);
	MakeDword	(0X2C40);
	MakeDword	(0X2C44);
	MakeDword	(0X2C48);
	MakeDword	(0X2C4C);
	MakeDword	(0X2C50);
	MakeDword	(0X2C54);
	MakeDword	(0X2C58);
	MakeDword	(0X2C5C);
	MakeDword	(0X2C60);
	MakeDword	(0X2C64);
	MakeDword	(0X2C68);
	MakeDword	(0X2C6C);
	MakeDword	(0X2C70);
	MakeDword	(0X2C74);
	MakeDword	(0X2C78);
	MakeDword	(0X2C7C);
	MakeDword	(0X2C80);
	MakeDword	(0X2C84);
	MakeDword	(0X2C88);
	MakeDword	(0X2C8C);
	MakeDword	(0X2C90);
	MakeDword	(0X2C94);
	MakeDword	(0X2C98);
	MakeDword	(0X2C9C);
	MakeDword	(0X2CA0);
	MakeDword	(0X2CA4);
	MakeDword	(0X2CA8);
	MakeDword	(0X2CAC);
	MakeDword	(0X2CB0);
	MakeDword	(0X2CB4);
	MakeDword	(0X2CB8);
	MakeDword	(0X2CBC);
	MakeDword	(0X2CC0);
	MakeDword	(0X2CC4);
	MakeDword	(0X2CC8);
	MakeDword	(0X2CCC);
	MakeDword	(0X2CD0);
	MakeDword	(0X2CD4);
	MakeDword	(0X2CD8);
	MakeDword	(0X2CDC);
	MakeDword	(0X2CE0);
	MakeDword	(0X2CE4);
	MakeDword	(0X2CE8);
	MakeDword	(0X2CEC);
	MakeDword	(0X2CF0);
	MakeDword	(0X2CF4);
	MakeDword	(0X2CF8);
	MakeDword	(0X2CFC);
	MakeDword	(0X2D00);
	MakeDword	(0X2D04);
	MakeDword	(0X2D08);
	MakeByte	(0X2D0C);
	MakeByte	(0X2D10);
	MakeDword	(x=0X2D44);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X2D48);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X2D4C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X2D50);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X2D54);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X2D58);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X2D5C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X2D60);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X2D64);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X2D68);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X2D6C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X2D70);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X2D74);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X2D78);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X2D7C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X2D80);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X2D84);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X2D88);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X2D8C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X2D90);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X2D94);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X2D98);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X2D9C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X2DA0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X2DA4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X2DA8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X2DAC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X2DB0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X2DB4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X2DB8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X2DBC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X2DC0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X2DC4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X2DC8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X2DCC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X2DE0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X2DE4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X2E92);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X301E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X3C00);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X3FF4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X3FF8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeByte	(0X3FFF);
	MakeName	(0X4004,	"Constant32_PCM_Hardware_number_1");
	MakeName	(0X4008,	"CurveTable_12_Columns_PCM_Serial_Number_1");
	MakeName	(0X4018,	"Constant32_Calibration_ID_1");
	MakeStr		(0X401C,	0X4021);
	MakeName	(0X401C,	"CurveTable_4_Columns_Broadcast_Code_(BCC)_1");
	MakeStr		(0X4021,	0X4035);
	MakeName	(0X4021,	"CurveTable_17_Columns_VIN_1");
	MakeWord	(0X5830);
	MakeName	(0X6004,	"Constant32_PCM_Hardware_number_2");
	MakeName	(0X6008,	"CurveTable_12_Columns_PCM_Serial_Number_2");
	MakeName	(0X6018,	"Constant32_Calibration_ID_2");
	MakeName	(0X601C,	"CurveTable_4_Columns_Broadcast_Code_(BCC)_2");
	MakeName	(0X6021,	"CurveTable_17_Columns_VIN_2");
	MakeRptCmt	(0X8000,	"Use this cal to identify the engine calibration\nCal_ID_Record");
	MakeName	(0X8000,	"ENG_CALIBRATIONS_HEADER");
	MakeName	(0X8004,	"Constant32_Engine_Calibration_ID");
	MakeName	(0X8008,	"CurveTable_2_Columns_Engine_Calibration_Level");
	MakeStr		(0X800C,	0X8015);
	MakeName	(0X800C,	"CurveTable_8_Columns_Engine_Calibration_ID_ASCII");
	MakeByte	(0X8015);
	MakeArray	(0X8015,	0XB);
	MakeByte	(0X8020);
	MakeName	(0X8020,	"FLASH_KE_SERVICE_CALIBRATION");
	MakeByte	(0X8021);
	MakeName	(0X8021,	"CIC_KE_CIC_MEDIUM_RES_REF_FILTER");
	MakeRptCmt	(0X8022,	"Special calibration location written to by ETAS when ETAS instrumentation is hooked up.\nCARDINAL");
	MakeWord	(0X8022);
	MakeName	(0X8022,	"ETAS_KE_ETAS_PRESENCE_PATTERN");
	MakeRptCmt	(0X8024,	"ETAS Pad Byte is used to place slew cals on the proper byte boundry. Changing it's value does nothing.\nByte");
	MakeName	(0X8024,	"ETAS_KE_ETAS_PAD_BYTE_1");
	MakeRptCmt	(0X8025,	"ETAS Pad Byte is used to place slew cals on the proper byte boundry. Changing it's value does nothing.\nByte");
	MakeName	(0X8025,	"ETAS_KE_ETAS_PAD_BYTE_2");
	MakeRptCmt	(0X8026,	"ETAS Pad Byte is used to place slew cals on the proper byte boundry. Changing it's value does nothing.\nByte");
	MakeName	(0X8026,	"ETAS_KE_ETAS_PAD_BYTE_3");
	MakeByte	(0X8027);
	MakeName	(0X8027,	"ETAS_KE_ETAS_DATA_ACQUIRE_RATE_GROUP");
	MakeRptCmt	(0X8028,	"Use this cal when slewing with ETAS to select thedesired mode.\nSlew_Modes");
	MakeByte	(0X8028);
	MakeName	(0X8028,	"ETAS_KE_ETAS_SLEW_CCP_MODE");
	MakeName	(0X802A,	"ETAS_KE_ETAS_SLEW_CCP_ABS");
	MakeName	(0X802B,	"CurveTable_2_Rows_Ambiguous_Cam_Transition_Thresholds_??");
	MakeRptCmt	(0X802C,	"This cal is modifiable at runtime when using ETAS instrumentation and is added to a variables contents when in Modify mode.\nPercent");
	MakeName	(0X802C,	"ETAS_KE_ETAS_SLEW_CCP_MOD");
	MakeName	(0X802D,	"Flag_0x01_ETC_Present_Flag_??");
	MakeRptCmt	(0X802E,	"Use this cal when slewing with ETAS to select thedesired mode.\nSlew_Modes");
	MakeDword	(x=0X802E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X802E,	"ETAS_KE_ETAS_SLEW_EQVR_MODE");
	MakeRptCmt	(0X8032,	"This cal is modifiable at runtime when using ETAS instrumentation and is added to a variables contents when in Modify mode.\nEquiv_Ratio");
	MakeDword	(x=0X8032);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X8032,	"ETAS_KE_ETAS_SLEW_EQVR_MOD");
	MakeWord	(0X8036);
	MakeName	(0X8036,	"ETAS_KE_ETAS_SLEW_EGR_ABS");
	MakeRptCmt	(0X8038,	"This cal is modifiable at runtime when using ETAS instrumentation and is added to a variables contents when in Modify mode.\nPercent");
	MakeWord	(0X8038);
	MakeName	(0X8038,	"ETAS_KE_ETAS_SLEW_EGR_MOD");
	MakeRptCmt	(0X803A,	"Use this cal when slewing with ETAS to select thedesired mode.\nSlew_Modes");
	MakeByte	(0X803A);
	MakeName	(0X803A,	"ETAS_KE_ETAS_SLEW_FANHZ_MODE");
	MakeWord	(0X803C);
	MakeName	(0X803C,	"ETAS_KE_ETAS_SLEW_FANHZ_ABS");
	MakeRptCmt	(0X803E,	"This cal is modifiable at runtime when using ETAS instrumentation and is added to a variables contents when in Modify mode.\nHertz");
	MakeWord	(0X803E);
	MakeName	(0X803E,	"ETAS_KE_ETAS_SLEW_FANHZ_MOD");
	MakeRptCmt	(0X8040,	"Use this cal when slewing with ETAS to select thedesired mode.\nSlew_Modes");
	MakeByte	(0X8040);
	MakeName	(0X8040,	"ETAS_KE_ETAS_SLEW_FFS_HZ_MODE");
	MakeWord	(0X8042);
	MakeName	(0X8042,	"ETAS_KE_ETAS_SLEW_FFS_HZ_ABS");
	MakeRptCmt	(0X8044,	"This cal is modifiable at runtime when using ETAS instrumentation and is added to a variables contents when in Modify mode.\nHertz");
	MakeWord	(0X8044);
	MakeName	(0X8044,	"ETAS_KE_ETAS_SLEW_FFS_HZ_MOD");
	MakeRptCmt	(0X8046,	"Use this cal when slewing with ETAS to select thedesired mode.\nSlew_Modes");
	MakeByte	(0X8046);
	MakeName	(0X8046,	"ETAS_KE_ETAS_SLEW_FFS_LOW_TIME_MODE");
	MakeWord	(0X8048);
	MakeName	(0X8048,	"ETAS_KE_ETAS_SLEW_FFS_LOW_TIME_ABS");
	MakeRptCmt	(0X804A,	"This cal is modifiable at runtime when using ETAS instrumentation and is added to a variables contents when in Modify mode.\nMilliseconds");
	MakeWord	(0X804A);
	MakeName	(0X804A,	"ETAS_KE_ETAS_SLEW_FFS_LOW_TIME_MOD");
	MakeRptCmt	(0X804C,	"Use this cal when slewing with ETAS to select thedesired mode.\nSlew_Modes");
	MakeByte	(0X804C);
	MakeName	(0X804C,	"ETAS_KE_ETAS_SLEW_FUEL_ECON_MODE");
	MakeByte	(0X804D);
	MakeName	(0X804D,	"ETAS_KE_ETAS_SLEW_FUEL_ECON_SIGN");
	MakeRptCmt	(0X804E,	"Use this cal when slewing with ETAS to select thedesired mode.\nSlew_Modes");
	MakeByte	(0X804E);
	MakeName	(0X804E,	"ETAS_KE_ETAS_SLEW_NVMEM_MODE");
	MakeByte	(0X804F);
	MakeName	(0X804F,	"ETAS_KE_ETAS_SLEW_NVMEM_ABS");
	MakeByte	(0X8050);
	MakeName	(0X8050,	"ETAS_KE_ETAS_SLEW_NVMEM_MOD");
	MakeRptCmt	(0X8051,	"Use this cal when slewing with ETAS to select thedesired mode.\nSlew_Modes");
	MakeByte	(0X8051);
	MakeName	(0X8051,	"ETAS_KE_ETAS_SLEW_TCS_DISCRETE_MODE");
	MakeByte	(0X8052);
	MakeName	(0X8052,	"ETAS_KE_ETAS_SLEW_TCS_DISCRETE_ABS");
	MakeRptCmt	(0X8053,	"This cal is modifiable at runtime when using ETAS instrumentation and is added to a variables contents when in Modify mode.\nBOOLEAN");
	MakeByte	(0X8053);
	MakeName	(0X8053,	"ETAS_KE_ETAS_SLEW_TCS_DISCRETE_MOD");
	MakeRptCmt	(0X8054,	"Use this cal when slewing with ETAS to select thedesired mode.\nSlew_Modes");
	MakeByte	(0X8054);
	MakeName	(0X8054,	"ETAS_KE_ETAS_SLEW_TCS_DC_MODE");
	MakeWord	(0X8056);
	MakeName	(0X8056,	"ETAS_KE_ETAS_SLEW_TCS_DC_ABS");
	MakeRptCmt	(0X8058,	"This cal is modifiable at runtime when using ETAS instrumentation and is added to a variables contents when in Modify mode.\nPercent");
	MakeWord	(0X8058);
	MakeName	(0X8058,	"ETAS_KE_ETAS_SLEW_TCS_DC_MOD");
	MakeRptCmt	(0X805A,	"Use this cal when slewing with ETAS to select thedesired mode.\nSlew_Modes");
	MakeByte	(0X805A);
	MakeName	(0X805A,	"ETAS_KE_ETAS_SLEW_SPARK_CRANK_MODE");
	MakeWord	(0X805C);
	MakeName	(0X805C,	"ETAS_KE_ETAS_SLEW_SPARK_CRANK_ABS");
	MakeRptCmt	(0X805E,	"This cal is modifiable at runtime when using ETAS instrumentation and is added to a variables contents when in Modify mode.\nDegrees");
	MakeWord	(0X805E);
	MakeName	(0X805E,	"ETAS_KE_ETAS_SLEW_SPARK_CRANK_MOD");
	MakeRptCmt	(0X8060,	"Use this cal when slewing with ETAS to select thedesired mode.\nSlew_Modes");
	MakeByte	(0X8060);
	MakeName	(0X8060,	"ETAS_KE_ETAS_SLEW_SPARK_RUN_MODE");
	MakeWord	(0X8062);
	MakeName	(0X8062,	"ETAS_KE_ETAS_SLEW_SPARK_RUN_ABS");
	MakeRptCmt	(0X8064,	"This cal is modifiable at runtime when using ETAS instrumentation and is added to a variables contents when in Modify mode.\nDegrees");
	MakeWord	(0X8064);
	MakeName	(0X8064,	"ETAS_KE_ETAS_SLEW_SPARK_RUN_MOD");
	MakeRptCmt	(0X8066,	"Use this cal when slewing with ETAS to select thedesired mode.\nSlew_Modes");
	MakeByte	(0X8066);
	MakeName	(0X8066,	"ETAS_KE_ETAS_SLEW_IAC_AIRFLOW_MODE");
	MakeWord	(0X8068);
	MakeName	(0X8068,	"ETAS_KE_ETAS_SLEW_IAC_AIRFLOW_ABS");
	MakeRptCmt	(0X806A,	"This cal is modifiable at runtime when using ETAS instrumentation and is added to a variables contents when in Modify mode.\nGrams/Second");
	MakeWord	(0X806A);
	MakeName	(0X806A,	"ETAS_KE_ETAS_SLEW_IAC_AIRFLOW_MOD");
	MakeRptCmt	(0X806C,	"Use this cal when slewing with ETAS to select thedesired mode.\nSlew_Modes");
	MakeByte	(0X806C);
	MakeName	(0X806C,	"ETAS_KE_ETAS_SLEW_IAC_RPM_MODE");
	MakeWord	(0X806E);
	MakeName	(0X806E,	"ETAS_KE_ETAS_SLEW_IAC_RPM_ABS");
	MakeRptCmt	(0X8070,	"This cal is modifiable at runtime when using ETAS instrumentation and is added to a variables contents when in Modify mode.\nRPM");
	MakeWord	(0X8070);
	MakeName	(0X8070,	"ETAS_KE_ETAS_SLEW_IAC_RPM_MOD");
	MakeRptCmt	(0X8072,	"Use this cal when slewing with ETAS to select thedesired mode.\nSlew_Modes");
	MakeByte	(0X8072);
	MakeName	(0X8072,	"ETAS_KE_ETAS_SLEW_IAC_POSITION_MODE");
	MakeWord	(0X8074);
	MakeName	(0X8074,	"ETAS_KE_ETAS_SLEW_IAC_POSITION_ABS");
	MakeRptCmt	(0X8076,	"This cal is modifiable at runtime when using ETAS instrumentation and is added to a variables contents when in Modify mode.\nSteps");
	MakeWord	(0X8076);
	MakeName	(0X8076,	"ETAS_KE_ETAS_SLEW_IAC_POSITION_MOD");
	MakeRptCmt	(0X8078,	"Use this cal when slewing with ETAS to select thedesired mode.\nSlew_Modes");
	MakeByte	(0X8078);
	MakeName	(0X8078,	"ETAS_KE_ETAS_SLEW_OIL_LEVEL_MODE");
	MakeByte	(0X8079);
	MakeName	(0X8079,	"ETAS_KE_ETAS_SLEW_OIL_LEVEL_ABS");
	MakeRptCmt	(0X807A,	"This cal is modifiable at runtime when using ETAS instrumentation and is added to a variables contents when in Modify mode.\nBOOLEAN");
	MakeByte	(0X807A);
	MakeName	(0X807A,	"ETAS_KE_ETAS_SLEW_OIL_LEVEL_MOD");
	MakeRptCmt	(0X807B,	"Use this cal when slewing with ETAS to select the desired mode.\nSlew_Modes");
	MakeName	(0X807B,	"ETAS_KE_ETAS_SLEW_TCC_CONTROL_MODE");
	MakeName	(0X807C,	"ETAS_KE_ETAS_SLEW_TCC_CONTROL_ABS");
	MakeRptCmt	(0X807D,	"Use this cal when slewing with ETAS to select thedesired mode.\nSlew_Modes");
	MakeName	(0X807D,	"ETAS_KE_ETAS_SLEW_DES_TORQ_REDUC_MODE");
	MakeName	(0X807E,	"ETAS_KE_ETAS_SLEW_DES_TORQ_REDUC_ABS");
	MakeRptCmt	(0X8080,	"Use this cal when slewing with ETAS to select thedesired mode.\nSlew_Modes");
	MakeName	(0X8080,	"ETAS_KE_ETAS_SLEW_FREEZE_ADAPT_MODE");
	MakeName	(0X8081,	"ETAS_KE_ETAS_SLEW_FREEZE_ADAPT_ABS");
	MakeRptCmt	(0X8082,	"Use this cal when slewing with ETAS to select thedesired mode.\nSlew_Modes");
	MakeName	(0X8082,	"ETAS_KE_ETAS_SLEW_PRESSURE_MAN_MODE");
	MakeName	(0X8084,	"ETAS_KE_ETAS_SLEW_PRESSURE_MAN_ABS");
	MakeRptCmt	(0X8086,	"This cal is modifiable at runtime when using ETAS instrumentation and is added to a variables contents when in Modify mode.\nPSI");
	MakeName	(0X8086,	"ETAS_KE_ETAS_SLEW_PRESSURE_MAN_MOD");
	MakeRptCmt	(0X8088,	"Use this cal when slewing with ETAS to select thedesired mode.\nSlew_Modes");
	MakeName	(0X8088,	"ETAS_KE_ETAS_SLEW_BASE_PRESSURE_MODE");
	MakeName	(0X808A,	"ETAS_KE_ETAS_SLEW_BASE_PRESSURE_ABS");
	MakeRptCmt	(0X808C,	"This cal is modifiable at runtime when using ETAS instrumentation and is added to a variables contents when in Modify mode.\nPSI");
	MakeName	(0X808C,	"ETAS_KE_ETAS_SLEW_BASE_PRESSURE_MOD");
	MakeRptCmt	(0X808E,	"Use this cal when slewing with ETAS to select thedesired mode.\nSlew_Modes");
	MakeName	(0X808E,	"ETAS_KE_ETAS_SLEW_SHIFT_PRESSURE_MODE");
	MakeName	(0X8090,	"ETAS_KE_ETAS_SLEW_SHIFT_PRESSURE_ABS");
	MakeRptCmt	(0X8092,	"This cal is modifiable at runtime when using ETAS instrumentation and is added to a variables contents when in Modify mode.\nPSI");
	MakeName	(0X8092,	"ETAS_KE_ETAS_SLEW_SHIFT_PRESSURE_MOD");
	MakeRptCmt	(0X8094,	"Use this cal when slewing with ETAS to select thedesired mode.\nSlew_Modes");
	MakeName	(0X8094,	"ETAS_KE_ETAS_SLEW_TCC_APP_2_SLEW_MODE");
	MakeName	(0X8096,	"ETAS_KE_ETAS_SLEW_TCC_APP_2_SLEW_ABS");
	MakeRptCmt	(0X8098,	"Use this cal when slewing with ETAS to select thedesired mode.\nSlew_Modes");
	MakeName	(0X8098,	"ETAS_KE_ETAS_SLEW_TCC_APP_3_SLEW_MODE");
	MakeName	(0X809A,	"ETAS_KE_ETAS_SLEW_TCC_APP_3_SLEW_ABS");
	MakeRptCmt	(0X809C,	"Use this cal when slewing with ETAS to select thedesired mode.\nSlew_Modes");
	MakeName	(0X809C,	"ETAS_KE_ETAS_SLEW_TCC_APP_4_SLEW_MODE");
	MakeName	(0X809E,	"ETAS_KE_ETAS_SLEW_TCC_APP_4_SLEW_ABS");
	MakeRptCmt	(0X80A0,	"Use this cal when slewing with ETAS to select thedesired mode.\nSlew_Modes");
	MakeName	(0X80A0,	"ETAS_KE_ETAS_SLEW_TCC_REL_2_SLEW_MODE");
	MakeName	(0X80A2,	"ETAS_KE_ETAS_SLEW_TCC_REL_2_SLEW_ABS");
	MakeRptCmt	(0X80A4,	"Use this cal when slewing with ETAS to select thedesired mode.\nSlew_Modes");
	MakeName	(0X80A4,	"ETAS_KE_ETAS_SLEW_TCC_REL_3_SLEW_MODE");
	MakeName	(0X80A6,	"ETAS_KE_ETAS_SLEW_TCC_REL_3_SLEW_ABS");
	MakeRptCmt	(0X80A8,	"Use this cal when slewing with ETAS to select thedesired mode.\nSlew_Modes");
	MakeName	(0X80A8,	"ETAS_KE_ETAS_SLEW_TCC_REL_4_SLEW_MODE");
	MakeName	(0X80AA,	"ETAS_KE_ETAS_SLEW_TCC_REL_4_SLEW_ABS");
	MakeRptCmt	(0X80AC,	"This cal is modifiable at runtime when using ETAS instrumentation and is added to a variables contents when in Modify mode.\nMPH");
	MakeName	(0X80AC,	"ETAS_KE_ETAS_SLEW_TCC_REL_4_SLEW_MOD");
	MakeRptCmt	(0X80AE,	"Use this cal when slewing with ETAS to select thedesired mode.\nSlew_Modes");
	MakeName	(0X80AE,	"ETAS_KE_ETAS_SLEW_TCC_APP_OP_PT_MODE");
	MakeName	(0X80B0,	"ETAS_KE_ETAS_SLEW_TCC_APP_OP_PT_ABS");
	MakeRptCmt	(0X80B2,	"This cal is modifiable at runtime when using ETAS instrumentation and is added to a variables contents when in Modify mode.\nPSI");
	MakeName	(0X80B2,	"ETAS_KE_ETAS_SLEW_TCC_APP_OP_PT_MOD");
	MakeRptCmt	(0X80B4,	"Use this cal when slewing with ETAS to select thedesired mode.\nSlew_Modes");
	MakeName	(0X80B4,	"ETAS_KE_ETAS_SLEW_TCC_APPLY_RATE_MODE");
	MakeName	(0X80B6,	"ETAS_KE_ETAS_SLEW_TCC_APPLY_RATE_ABS");
	MakeRptCmt	(0X80B8,	"This cal is modifiable at runtime when using ETAS instrumentation and is added to a variables contents when in Modify mode.\nPSI/Sec");
	MakeName	(0X80B8,	"ETAS_KE_ETAS_SLEW_TCC_APPLY_RATE_MOD");
	MakeRptCmt	(0X80BA,	"Use this cal when slewing with ETAS to select thedesired mode.\nSlew_Modes");
	MakeName	(0X80BA,	"ETAS_KE_ETAS_SLEW_TCC_ON_REF_SLP_MODE");
	MakeName	(0X80BC,	"ETAS_KE_ETAS_SLEW_TCC_ON_REF_SLP_ABS");
	MakeRptCmt	(0X80BE,	"This cal is modifiable at runtime when using ETAS instrumentation and is added to a variables contents when in Modify mode.\nRPM");
	MakeName	(0X80BE,	"ETAS_KE_ETAS_SLEW_TCC_ON_REF_SLP_MOD");
	MakeRptCmt	(0X80C0,	"Use this cal when slewing with ETAS to select thedesired mode.\nSlew_Modes");
	MakeName	(0X80C0,	"ETAS_KE_ETAS_SLEW_TCC_REL_TIME_MODE");
	MakeName	(0X80C2,	"ETAS_KE_ETAS_SLEW_TCC_REL_TIME_ABS");
	MakeRptCmt	(0X80C4,	"This cal is modifiable at runtime when using ETAS instrumentation and is added to a variables contents when in Modify mode.\nSeconds");
	MakeName	(0X80C4,	"ETAS_KE_ETAS_SLEW_TCC_REL_TIME_MOD");
	MakeRptCmt	(0X80C6,	"Use this cal when slewing with ETAS to select thedesired mode.\nSlew_Modes");
	MakeName	(0X80C6,	"ETAS_KE_ETAS_SLEW_TCC_CAPACITY_MODE");
	MakeName	(0X80C8,	"ETAS_KE_ETAS_SLEW_TCC_CAPACITY_ABS");
	MakeRptCmt	(0X80CA,	"This cal is modifiable at runtime when using ETAS instrumentation and is added to a variables contents when in Modify mode.\nPercent");
	MakeName	(0X80CA,	"ETAS_KE_ETAS_SLEW_TCC_CAPACITY_MOD");
	MakeRptCmt	(0X80CC,	"Use this cal when slewing with ETAS to select thedesired mode.\nSlew_Modes");
	MakeName	(0X80CC,	"ETAS_KE_ETAS_SLEW_THR_REL_OP_PT_MODE");
	MakeName	(0X80CE,	"ETAS_KE_ETAS_SLEW_THR_REL_OP_PT_ABS");
	MakeRptCmt	(0X80D0,	"This cal is modifiable at runtime when using ETAS instrumentation and is added to a variables contents when in Modify mode.\nCapacity");
	MakeName	(0X80D0,	"ETAS_KE_ETAS_SLEW_THR_REL_OP_PT_MOD");
	MakeRptCmt	(0X80D2,	"Use this cal when slewing with ETAS to select thedesired mode.\nSlew_Modes");
	MakeName	(0X80D2,	"ETAS_KE_ETAS_SLEW_THR_REL_RATE_MODE");
	MakeName	(0X80D4,	"ETAS_KE_ETAS_SLEW_THR_REL_RATE_ABS");
	MakeRptCmt	(0X80D6,	"This cal is modifiable at runtime when using ETAS instrumentation and is added to a variables contents when in Modify mode.\nCapacity/Sec");
	MakeName	(0X80D6,	"ETAS_KE_ETAS_SLEW_THR_REL_RATE_MOD");
	MakeRptCmt	(0X80D8,	"Use this cal when slewing with ETAS to select thedesired mode.\nSlew_Modes");
	MakeName	(0X80D8,	"ETAS_KE_ETAS_SLEW_1_2_NORM_LINE_MODE");
	MakeName	(0X80DA,	"ETAS_KE_ETAS_SLEW_1_2_NORM_LINE_ABS");
	MakeRptCmt	(0X80DC,	"Use this cal when slewing with ETAS to select thedesired mode.\nSlew_Modes");
	MakeName	(0X80DC,	"ETAS_KE_ETAS_SLEW_2_3_NORM_LINE_MODE");
	MakeName	(0X80DE,	"ETAS_KE_ETAS_SLEW_2_3_NORM_LINE_ABS");
	MakeRptCmt	(0X80E0,	"Use this cal when slewing with ETAS to select thedesired mode.\nSlew_Modes");
	MakeName	(0X80E0,	"ETAS_KE_ETAS_SLEW_3_4_NORM_LINE_MODE");
	MakeName	(0X80E2,	"ETAS_KE_ETAS_SLEW_3_4_NORM_LINE_ABS");
	MakeRptCmt	(0X80E4,	"Use this cal when slewing with ETAS to select thedesired mode.\nSlew_Modes");
	MakeName	(0X80E4,	"ETAS_KE_ETAS_SLEW_2_1_NORM_LINE_MODE");
	MakeName	(0X80E6,	"ETAS_KE_ETAS_SLEW_2_1_NORM_LINE_ABS");
	MakeRptCmt	(0X80E8,	"Use this cal when slewing with ETAS to select thedesired mode.\nSlew_Modes");
	MakeName	(0X80E8,	"ETAS_KE_ETAS_SLEW_3_2_NORM_LINE_MODE");
	MakeName	(0X80EA,	"ETAS_KE_ETAS_SLEW_3_2_NORM_LINE_ABS");
	MakeRptCmt	(0X80EC,	"Use this cal when slewing with ETAS to select thedesired mode.\nSlew_Modes");
	MakeName	(0X80EC,	"ETAS_KE_ETAS_SLEW_4_3_NORM_LINE_MODE");
	MakeName	(0X80EE,	"ETAS_KE_ETAS_SLEW_4_3_NORM_LINE_ABS");
	MakeRptCmt	(0X80F0,	"Use this cal when slewing with ETAS to select thedesired mode.\nSlew_Modes");
	MakeName	(0X80F0,	"ETAS_KE_ETAS_SLEW_ADAPT_K_FACTOR_MODE");
	MakeName	(0X80F2,	"ETAS_KE_ETAS_SLEW_ADAPT_K_FACTOR_ABS");
	MakeRptCmt	(0X80F4,	"Use this cal when slewing with ETAS to select thedesired mode.\nSlew_Modes");
	MakeName	(0X80F4,	"ETAS_KE_ETAS_SLEW_TCC_ADAP_CELLS_MODE");
	MakeName	(0X80F5,	"ETAS_KE_ETAS_SLEW_TCC_ADAP_CELLS_ABS");
	MakeRptCmt	(0X80F6,	"Use this cal when slewing with ETAS to select thedesired mode.\nSlew_Modes");
	MakeName	(0X80F6,	"ETAS_KE_ETAS_SLEW_ETC_S_S_STAB_MODE");
	MakeName	(0X80F7,	"ETAS_KE_ETAS_SLEW_ETC_S_S_STAB_ABS");
	MakeRptCmt	(0X80F8,	"Use this cal when slewing with ETAS to select thedesired mode.\nSlew_Modes");
	MakeName	(0X80F8,	"ETAS_KE_ETAS_SLEW_TCC_AD_CNF_FCT_MODE");
	MakeName	(0X80F9,	"ETAS_KE_ETAS_SLEW_TCC_AD_CNF_FCT_ABS");
	MakeRptCmt	(0X80FA,	"Use this cal when slewing with ETAS to select thedesired mode.\nSlew_Modes");
	MakeName	(0X80FA,	"ETAS_KE_ETAS_SLEW_ALT_PATTERN_SW_MODE");
	MakeName	(0X80FB,	"ETAS_KE_ETAS_SLEW_ALT_PATTERN_SW_ABS");
	MakeRptCmt	(0X80FC,	"Use this cal when slewing with ETAS to select thedesired mode.\nSlew_Modes");
	MakeByte	(0X80FC);
	MakeName	(0X80FC,	"ETAS_KE_ETAS_SLEW_GEAR_OVERRIDE_MODE");
	MakeByte	(0X80FD);
	MakeName	(0X80FD,	"ETAS_KE_ETAS_SLEW_GEAR_OVERRIDE_ABS");
	MakeRptCmt	(0X80FE,	"Use this cal when slewing with ETAS to select thedesired mode.\nSlew_Modes");
	MakeByte	(0X80FE);
	MakeName	(0X80FE,	"ETAS_KE_ETAS_SLEW_PRELD_ADP_CEL_MODE");
	MakeByte	(0X80FF);
	MakeName	(0X80FF,	"ETAS_KE_ETAS_SLEW_PRELD_ADP_CEL_ABS");
	MakeName	(0X8100,	"ETAS_KE_ETAS_SLEW_DUMMY_ABS");
	MakeName	(0X8101,	"ETAS_KE_ETAS_SLEW_DUMMY_MOD");
	MakeRptCmt	(0X8102,	"ETAS Pad Byte is used to place slew cals on the proper byte boundry. Changing it's value does nothing.\nByte");
	MakeName	(0X8102,	"ETAS_KE_ETAS_PAD_BYTE_4");
	MakeRptCmt	(0X8103,	"ETAS Pad Byte is used to place slew cals on the proper byte boundry. Changing it's value does nothing.\nByte");
	MakeName	(0X8103,	"ETAS_KE_ETAS_PAD_BYTE_5");
	MakeRptCmt	(0X8104,	"The engine speed above which some of the sync. code activation rate is changed.\nRPM");
	MakeWord	(0X8104);
	MakeName	(0X8104,	"ENG_CONSTANTS_KE_ENGINE_SCHEDULE_RPM_HI");
	MakeRptCmt	(0X8106,	"The engine speed below which some of the sync. code activation rate is changed.\nRPM");
	MakeWord	(0X8106);
	MakeName	(0X8106,	"ENG_CONSTANTS_KE_ENGINE_SCHEDULE_RPM_LO");
	MakeRptCmt	(0X8108,	"Describes the type of engine associated with the vehicle including the engine displacement and valve train geometry.\nEngine_Identifier_Type");
	MakeByte	(0X8108);
	MakeName	(0X8108,	"ENG_CONSTANTS_KE_ENGINE_IDENTIFIER");
	MakeRptCmt	(0X8109,	"Number of cylinders for this engine application.\nSHORTCARD");
	MakeByte	(0X8109);
	MakeName	(0X8109,	"ENG_CONSTANTS_KE_NUMBER_CYLINDERS");
	MakeRptCmt	(0X810A,	"Identifies the number of degrees from a low resolution pulse to Top Dead Center of the cylinder.\nDegrees");
	MakeWord	(0X810A);
	MakeName	(0X810A,	"ENG_CONSTANTS_KE_LOW_RESOLUTION_REFERENCE_ANGL");
	MakeRptCmt	(0X810C,	"Identifies whether the engine is equipped with resonant( 0 ) or flat response( 1 ) knock sensors.\nKnock_Sensor_Type");
	MakeDword	(x=0X810C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X810C,	"ENG_CONSTANTS_KE_TYPE_OF_KNOCK_SENSORS");
	MakeRptCmt	(0X8110,	"EGR air flow through the EGR valve.\nGrams Per Second");
	MakeName	(0X8110,	"AIRFLOW_KA_EGR_AIR_FLOW");
	MakeRptCmt	(0X81D6,	"The calculated EGRflow for Dyna-Air will be filtered using this coefficient.\nNONE 0-1");
	MakeWord	(0X81D6);
	MakeName	(0X81D6,	"AIRFLOW_KE_EGR_AIR_FLOW_FILT_COEF");
	MakeRptCmt	(0X81D8,	"The commanded EGR duty cycle must be at least this value to enable calculation of EGR air mass.\nPercent");
	MakeWord	(0X81D8);
	MakeName	(0X81D8,	"AIRFLOW_KE_EGR_DUTY_CYCLE_DYNAAIR");
	MakeWord	(0X81DA);
	MakeName	(0X81DA,	"AIRFLOW_KE_VE_TEMPERATURE");
	MakeName	(0X81DC,	"AIRFLOW_KV_VOLUMETRIC_EFFICIENCY_BARO_CO");
	MakeRptCmt	(0X81F0,	"Volumetric efficiency at cranking speeds.\nPercent");
	MakeName	(0X81F0,	"AIRFLOW_KA_VOLUMETRIC_EFFICIENCY_CRANK");
	MakeRptCmt	(0X8442,	"The volumetric efficiency term used for modeling the air per cylinder for Dyna-Air calculations.\ngm*K/kPa");
	MakeName	(0X8442,	"AIRFLOW_K_MAIN_VOLUMETRIC_EFFICIENCY");
	MakeRptCmt	(0X873A,	"Breakpoints for selection coolant zone for initializing Filtered_VE_Correction_Factor.\nDeg C");
	MakeWord	(0X873A);
	MakeName	(0X873A,	"AIRFLOW_KV_GAMMA_INIT_COOLANT_BREAKPOINT");
	MakeWord	(0X873C);
	MakeRptCmt	(0X873E,	"Initialize Filtered_VE_Correction_Factor to this value.\nNONE 0-2");
	MakeName	(0X873E,	"AIRFLOW_KA_GAMMA_INIT_TABLE");
	MakeRptCmt	(0X875C,	"Volume of each cylinder in the engine.\nLiter");
	MakeWord	(0X875C);
	MakeName	(0X875C,	"AIRFLOW_K_CYLINDER_VOLUME");
	MakeRptCmt	(0X875E,	"Use this to filter air flow sensor reading to generate air flow 'prediction' in response to MAP OR TPS failure.\nNONE 0-1");
	MakeWord	(0X875E);
	MakeName	(0X875E,	"AIRFLOW_KE_BACKUP_AIR_FLOW_FILTER_COEF");
	MakeRptCmt	(0X8760,	"Engine speed above which a filtered value OF Sensed_Air_Per_Cylinder is used instead of the Dyna-Air prediction.\nRPM");
	MakeWord	(0X8760);
	MakeName	(0X8760,	"AIRFLOW_KE_HI_SPEED_DYNA_AIR_THRESH");
	MakeRptCmt	(0X8762,	"Amount by which engine speed must drop below KE_Hi_Speed_Dyna_Air_Thresh before the Dyna_Air prediction is used again.\nRPM");
	MakeWord	(0X8762);
	MakeName	(0X8762,	"AIRFLOW_KE_HI_SPEED_DYNA_AIR_HYSTERESIS");
	MakeByte	(0X8764);
	MakeName	(0X8764,	"AIRFLOW_KE_USE_CHARGE_TEMPERATURE");
	MakeRptCmt	(0X8766,	"Array of corrective factors used to adjust the predicted volume of air that will get into the cylinder.\nVarious");
	MakeName	(0X8766,	"AIRFLOW_K_DYNA_AIR_COEFFICIENT");
	MakeRptCmt	(0X88CE,	"Initial engine operating zone.\nOp. Zone #");
	MakeByte	(0X88CE);
	MakeName	(0X88CE,	"AIRFLOW_K_INITIAL_OPERATING_ZONE");
	MakeRptCmt	(0X88D0,	"Minumum throttle percentage that is still considered wide open throttle.\nPercent");
	MakeWord	(0X88D0);
	MakeName	(0X88D0,	"AIRFLOW_K_WIDE_OPEN_THROTTLE_LO");
	MakeRptCmt	(0X88D2,	"Maximum vehicle speed that is still considered idle conditions.\nMPH");
	MakeWord	(0X88D2);
	MakeName	(0X88D2,	"AIRFLOW_K_IDLE_VEHICLE_SPEED_HI");
	MakeRptCmt	(0X88D4,	"Maximum throttle percentage that is still considered idle conditions.\nPercent");
	MakeWord	(0X88D4);
	MakeName	(0X88D4,	"AIRFLOW_K_IDLE_THROTTLE_HI");
	MakeRptCmt	(0X88D6,	"RPM boundaries between engine speed zones in the operating zones grid.\nRPM");
	MakeWord	(0X88D6);
	MakeName	(0X88D6,	"AIRFLOW_K_ENGINE_SPEED_UPPER_BOUND");
	MakeWord	(0X88DA);
	MakeRptCmt	(0X88DC,	"RPM boundary hysteresis for changing engine speed zones.\nRPM");
	MakeWord	(0X88DC);
	MakeName	(0X88DC,	"AIRFLOW_KE_ENGINE_SPEED_HYSTERESIS");
	MakeRptCmt	(0X88DE,	"Pressure boundaries between manifold pressure zones in the operating zones grid.\nkPa");
	MakeName	(0X88DE,	"AIRFLOW_K_MANIFOLD_PRESSURE_UPPER_BOUND");
	MakeRptCmt	(0X88F6,	"Pressure boundary hysteresis for changing manifold pressure zones.\nkPa");
	MakeWord	(0X88F6);
	MakeName	(0X88F6,	"AIRFLOW_KE_MANIFOLD_PRESSURE_HYSTERESIS");
	MakeRptCmt	(0X88F8,	"A safety factor multiplied by the calculated maximum air flow limit used on the air flow variables used by the fuel logic.\nNONE 0-2");
	MakeWord	(0X88F8);
	MakeName	(0X88F8,	"AIRFLOW_K_MAXFLOW_SAFETY_FACTOR");
	MakeRptCmt	(0X88FA,	"MAP threshold below which the engine is considered to be in deep deceleration.\nkPa");
	MakeWord	(0X88FA);
	MakeName	(0X88FA,	"AIRFLOW_K_DEEP_DECEL_MAP_THRESHOLD");
	MakeRptCmt	(0X88FC,	"Filter coefficient for the Model_Of_Air_Per_Cylinder term.\nNONE 0-1");
	MakeWord	(0X88FC);
	MakeName	(0X88FC,	"AIRFLOW_K_MODEL_OF_AIR_FILTER_COEF");
	MakeRptCmt	(0X88FE,	"Steady state enable/disable threshold.  Used to determine if high MAP or low MAP conditions will be used.\nkPa");
	MakeWord	(0X88FE);
	MakeName	(0X88FE,	"AIRFLOW_K_STEADY_STATE_RPM_THRESHOLD");
	MakeRptCmt	(0X8900,	"Steady state enable/disable threshold.  Used to determine if high MAP or low MAP conditions will be used.\nkPa");
	MakeWord	(0X8900);
	MakeName	(0X8900,	"AIRFLOW_K_STEADY_STATE_MAP_THRESHOLD");
	MakeRptCmt	(0X8902,	"If low MAP conditions, delta MAP must equal this to enter steady state.\nkPa");
	MakeWord	(0X8902);
	MakeName	(0X8902,	"AIRFLOW_K_STEADY_STATE_LOW_MAP_DELTA");
	MakeRptCmt	(0X8904,	"Delta MAP criteria for enable/disable of steady state if high MAP conditions.\nkPa");
	MakeWord	(0X8904);
	MakeName	(0X8904,	"AIRFLOW_K_STEADY_STATE_HIGH_MAP_DELTA");
	MakeRptCmt	(0X8906,	"Delta TPS for disable of steady state if low MAP conditions.\nPercent");
	MakeWord	(0X8906);
	MakeName	(0X8906,	"AIRFLOW_K_STEADY_STATE_LOW_TPS_DELTA");
	MakeRptCmt	(0X8908,	"Delta TPS for disable of steady state if high MAP conditions.\nPercent");
	MakeWord	(0X8908);
	MakeName	(0X8908,	"AIRFLOW_K_STEADY_STATE_HIGH_TPS_DELTA");
	MakeByte	(0X890A);
	MakeName	(0X890A,	"AIRFLOW_KE_IDLE_SS_COUNTER_THRESH");
	MakeRptCmt	(0X890C,	"Change in MAP integrator required to disable steady state IF engine is currently in the steady state condition.\nkPa");
	MakeWord	(0X890C);
	MakeName	(0X890C,	"AIRFLOW_KE_IDLE_SS_INT_THRESH");
	MakeRptCmt	(0X890E,	"Vehicle must be < this to enable the idle steady STATE detection algorithm.\nMPH");
	MakeWord	(0X890E);
	MakeName	(0X890E,	"AIRFLOW_KE_IDLE_SS_MPH_THRESH");
	MakeRptCmt	(0X8910,	"Throttle position must be < this to enable the idle steady STATE detection algorithm.\nPercent");
	MakeWord	(0X8910);
	MakeName	(0X8910,	"AIRFLOW_KE_IDLE_SS_TPS_THRESH");
	MakeByte	(0X8912);
	MakeName	(0X8912,	"AIRFLOW_KE_IDLE_TRANS_COUNTER_THRESH");
	MakeRptCmt	(0X8914,	"Change in MAP integrator required to disable steady state IF engine is currently NOT in the steady state condition.\nkPa");
	MakeWord	(0X8914);
	MakeName	(0X8914,	"AIRFLOW_KE_IDLE_TRANS_INT_THRESH");
	MakeRptCmt	(0X8916,	"Filter coefficient for Filtered_VE_Correction_Factor.\nFilt Coef");
	MakeWord	(0X8916);
	MakeName	(0X8916,	"AIRFLOW_K_VE_CORR_FACTOR_FILTER_COEF");
	MakeRptCmt	(0X8918,	"Lower limit of the Filtered_VE_Correction_Factor term.\nNONE 0-2");
	MakeWord	(0X8918);
	MakeName	(0X8918,	"AIRFLOW_K_VE_CORR_FACTOR_LOW_LIMIT");
	MakeRptCmt	(0X891A,	"Upper limit of the Filtered_VE_Correction_Factor term.\nNONE 0-2");
	MakeWord	(0X891A);
	MakeName	(0X891A,	"AIRFLOW_K_VE_CORR_FACTOR_HIGH_LIMIT");
	MakeRptCmt	(0X891C,	"TRUE if Air_Per_Cylinder 1 and 2 ahead are to be set to Maximum_Air_Per_Cylinder when zone 1 is entered.\nBOOLEAN");
	MakeByte	(0X891C);
	MakeName	(0X891C,	"AIRFLOW_K_USE_MAX_AIR_FIRST_TIME_IN_1");
	MakeRptCmt	(0X891E,	"Reset Filtered_VE_Correction_Factor to 1.0 if it is less than this calibration when exiting deep deceleration.\nNONE 0-2");
	MakeWord	(0X891E);
	MakeName	(0X891E,	"AIRFLOW_K_VE_CORR_FACTOR_RESET_THRESH");
	MakeRptCmt	(0X8920,	"Dyna-Air learn is disabled during an intrusive EGR test and for this long after the intrusive EGR test has finished.\nSeconds");
	MakeWord	(0X8920);
	MakeName	(0X8920,	"AIRFLOW_KE_EGR_DIAG_FINISHED_TIME");
	MakeWord	(0X8922);
	MakeName	(0X8922,	"AIRFLOW_KE_CRANK_TO_RUN_RATIO");
	MakeWord	(0X8924);
	MakeName	(0X8924,	"AIR_PUMP_KE_AIR_HOT_RESTART_TIME_ON");
	MakeRptCmt	(0X8926,	"AIR system is forced off for the rest of this ignition cycle after being on for a total of this long in this ignition cycle.\nSeconds");
	MakeWord	(0X8926);
	MakeName	(0X8926,	"AIR_PUMP_KE_MAX_TOTAL_PUMP_TIME_ON");
	MakeRptCmt	(0X8928,	"AIR system is not allowed on until engine has run for this long.\nSeconds");
	MakeWord	(0X8928);
	MakeName	(0X8928,	"AIR_PUMP_KE_AIR_DELAY_AFTER_START");
	MakeRptCmt	(0X892A,	"AIR system is not allowed on at this time if coolant temperature is below this.\nDeg C");
	MakeWord	(0X892A);
	MakeName	(0X892A,	"AIR_PUMP_KE_AIR_ECT_DISABLE");
	MakeRptCmt	(0X892C,	"AIR system is disabled when Manifold Pressure is < this AND remains diabled for KE_AIR_Extended_Overrun_Time thereafter.\nkPa");
	MakeWord	(0X892C);
	MakeName	(0X892C,	"AIR_PUMP_KE_AIR_OVERRUN_DISABLE_THRESHOLD");
	MakeWord	(0X892E);
	MakeName	(0X892E,	"AIR_PUMP_KE_AIR_EXTENDED_OVERRUN_TIME");
	MakeRptCmt	(0X8930,	"AIR system is disabled when Engine Speed is > this FOR KE_AIR_High_RPM_Time and remains diabled until Engine Speed is <= this.\nRPM");
	MakeWord	(0X8930);
	MakeName	(0X8930,	"AIR_PUMP_KE_AIR_HIGH_RPM_DISABLE_THRESHOL");
	MakeWord	(0X8932);
	MakeName	(0X8932,	"AIR_PUMP_KE_AIR_HIGH_RPM_TIME");
	MakeWord	(0X8934);
	MakeName	(0X8934,	"AIR_PUMP_KE_AIR_HIGH_VSS_DISABLE_THRESHOL");
	MakeRptCmt	(0X8936,	"\nkPa");
	MakeWord	(0X8936);
	MakeName	(0X8936,	"AIR_PUMP_KE_AIR_HIGH_MAP_DISABLE_THRESHOL");
	MakeRptCmt	(0X8938,	"Delay turning on AIR pump for this long after turning on AIR solenoid.\nSeconds");
	MakeWord	(0X8938);
	MakeName	(0X8938,	"AIR_PUMP_KE_AIR_PUMP_TURN_ON_DELAY");
	MakeRptCmt	(0X893A,	"Delay turning off AIR pump for this long after turning off AIR solenoid.\nSeconds");
	MakeWord	(0X893A);
	MakeName	(0X893A,	"AIR_PUMP_KE_AIR_PUMP_TURN_OFF_DELAY");
	MakeRptCmt	(0X893C,	"Default barometric pressure used if MAP sensor fails.\nkPa");
	MakeWord	(0X893C);
	MakeName	(0X893C,	"BAROMETER_KE_BARO_DEFAULT_MAP_FAILED");
	MakeRptCmt	(0X893E,	"Minimum throttle position to allow a part throttle barometer update.\nPercent");
	MakeWord	(0X893E);
	MakeName	(0X893E,	"BAROMETER_KE_BARO_TPS_LIMIT");
	MakeRptCmt	(0X8940,	"Minimum change in throttle position during last 100 mS to allow a part throttle barometer update.\nPercent");
	MakeWord	(0X8940);
	MakeName	(0X8940,	"BAROMETER_KE_BARO_TPS_DELTA_LIMIT");
	MakeRptCmt	(0X8942,	"Maximum change in manifold pressure during last 100 mS to allow a part throttle barometer update.\nkPa");
	MakeWord	(0X8942);
	MakeName	(0X8942,	"BAROMETER_KE_BARO_MAP_DELTA_LIMIT");
	MakeRptCmt	(0X8944,	"Minimum time MAP and throttle must be stable to allow a part throttle barometer update.\nSeconds");
	MakeWord	(0X8944);
	MakeName	(0X8944,	"BAROMETER_KE_BARO_STABILITY_TIME");
	MakeRptCmt	(0X8946,	"Minimum RPM at which to allow a barometric pressure update.\nRPM");
	MakeWord	(0X8946);
	MakeName	(0X8946,	"BAROMETER_KE_MIN_RPM_FOR_BARO_UPDATE");
	MakeRptCmt	(0X8948,	"Maximum RPM at which to allow a barometric pressure update.\nRPM");
	MakeWord	(0X8948);
	MakeName	(0X8948,	"BAROMETER_KE_MAX_RPM_FOR_BARO_UPDATE");
	MakeRptCmt	(0X894A,	"Maximum calculated barometric pressure offset to allow baro update.\nkPa");
	MakeWord	(0X894A);
	MakeName	(0X894A,	"BAROMETER_KE_MAX_BARO_OFFSET_FOR_UPDATE");
	MakeRptCmt	(0X894C,	"Barometer value update rate lag filter time constant.\nCoefficient");
	MakeByte	(0X894C);
	MakeName	(0X894C,	"BAROMETER_KE_BARO_FILTER_COEFFICIENT");
	MakeRptCmt	(0X894E,	"Scaling factor used to correct the barometer offset value for altitude changes.\nFactor");
	MakeName	(0X894E,	"BAROMETER_KV_BARO_OFFSET_FACTOR");
	MakeRptCmt	(0X8960,	"Sea level pressure offset to be added to the part throttle manifold pressure to correct the barometric pressure.\nkPA");
	MakeName	(0X8960,	"BAROMETER_KA_BARO_OFFSET");
	MakeRptCmt	(0X8AEC,	"Transfer case gear ratio in 4WDLO for calibration application.\nScaler_8");
	MakeWord	(0X8AEC);
	MakeName	(0X8AEC,	"BRAKE_TORQUE_CONTROL_KE_TRANSFER_CASE_RATIO");
	MakeRptCmt	(0X8AEE,	"Efficiency of transmission and axle gear multiplication for torque transfer.\nScaler_1");
	MakeWord	(0X8AEE);
	MakeName	(0X8AEE,	"BRAKE_TORQUE_CONTROL_KE_DRIVELINE_EFFICIENCY");
	MakeRptCmt	(0X8AF0,	"Scale factor applied to the Engine_Torque_Allowed parameterwhen traction control is known to be inactive.\nScaler 0-1");
	MakeWord	(0X8AF0);
	MakeName	(0X8AF0,	"BRAKE_TORQUE_CONTROL_KE_TCS_FAIL_TRQ_ALLOWED_FACTOR");
	MakeRptCmt	(0X8AF2,	"Once Brake Torque Management is enabled, engine speed must be at least this amount above desired idle speed to maintain BTM.\nRPM");
	MakeWord	(0X8AF2);
	MakeName	(0X8AF2,	"BRAKE_TORQUE_CONTROL_KE_BTM_RPM_OVERSPEED_ENABLE_LO");
	MakeRptCmt	(0X8AF4,	"Current engine speed must be at least this amount above desired idle speed to initially enable brake torque management.\nRPM");
	MakeWord	(0X8AF4);
	MakeName	(0X8AF4,	"BRAKE_TORQUE_CONTROL_KE_BTM_RPM_OVERSPEED_ENABLE_HI");
	MakeRptCmt	(0X8AF6,	"Hysteresis on the torque limit applied to prevent cycling in and out of limiting.\nFoot Pounds");
	MakeWord	(0X8AF6);
	MakeName	(0X8AF6,	"BRAKE_TORQUE_CONTROL_KE_BTM_TORQUE_HYSTERESIS");
	MakeRptCmt	(0X8AF8,	"Number of loops to wait between increases in the ramp out.\nCounts");
	MakeByte	(0X8AF8);
	MakeName	(0X8AF8,	"BRAKE_TORQUE_CONTROL_KE_LOOPS_BETWEEN_RAMP_STEPS");
	MakeRptCmt	(0X8AFA,	"Torque offset below the maximum that will set the control target.\nFoot Pounds");
	MakeWord	(0X8AFA);
	MakeName	(0X8AFA,	"BRAKE_TORQUE_CONTROL_KE_TORQUE_ALLOW_OFFSET");
	MakeRptCmt	(0X8AFC,	"Step size of torque when ramping out of brake torque management.\nFoot Pounds");
	MakeWord	(0X8AFC);
	MakeName	(0X8AFC,	"BRAKE_TORQUE_CONTROL_KE_TORQUE_RAMP");
	MakeWord	(0X8AFE);
	MakeName	(0X8AFE,	"BRAKE_TORQUE_CONTROL_KE_BTM_THROTTLE_OPEN");
	MakeWord	(0X8B00);
	MakeName	(0X8B00,	"BRAKE_TORQUE_CONTROL_KE_BTM_THROTTLE_CLOSED");
	MakeRptCmt	(0X8B02,	"This defines the maximum torque the vehicle brakes can absorb. It should be entered as an average torque for a single wheel.\nFt_lbs_vs_kPa");
	MakeName	(0X8B02,	"BRAKE_TORQUE_CONTROL_KV_BRAKE_CAPACITY_VACUUM");
	MakeName	(0X8B14,	"BRAKE_TORQUE_CONTROL_KV_EFFECTIVE_GEAR_RATIO");
	MakeRptCmt	(0X8B22,	"Filter used to predict current catalytic converter bed temperature when the predicted converter temperature is increasing.\nMultiplier 0-1");
	MakeName	(0X8B22,	"CONVERTER_KV_COT_INC_TEMPERATURE_FILTER_CO");
	MakeRptCmt	(0X8B4C,	"Filter used to predict current catalytic converter bed temperature when the predicted converter temperature is decreasing.\nMultiplier 0-1");
	MakeName	(0X8B4C,	"CONVERTER_KV_COT_DEC_TEMPERATURE_FILTER_CO");
	MakeName	(0X8B76,	"CONVERTER_KV_COT_DFCO_TEMPERATURE_OFFSET");
	MakeName	(0X8B88,	"CONVERTER_KV_COT_EQ_RATIO_TEMP_OFFSET");
	MakeRptCmt	(0X8BAA,	"Multiplier to compensate the stabilized temperature for any fuel composition effects on exhaust temperatures\nScaler 1");
	MakeWord	(0X8BAA);
	MakeName	(0X8BAA,	"CONVERTER_KV_COT_FFS_MULTIPLIER");
	MakeRptCmt	(0X8BB4,	"soak timer modifier for Converter temperature prediction\nScaler_2");
	MakeWord	(0X8BB4);
	MakeName	(0X8BB4,	"CONVERTER_KV_COT_INITIAL_TEMP_SOAK_MULT");
	MakeDword	(x=0X8BC2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X8BC2,	"CONVERTER_KV_COT_RETARDED_SPARK_OFFSET");
	MakeRptCmt	(0X8BD8,	"A prediction of the difference in stabilized catalytic converterbed temperature relative to the speed of the vehicle.\nDegrees_C");
	MakeName	(0X8BD8,	"CONVERTER_KV_COT_VEH_SPEED_TEMP_OFFSET");
	MakeWord	(0X8BEA);
	MakeName	(0X8BEA,	"CONVERTER_KE_COT_TEMPERATURE_COOL_THRESHOL");
	MakeRptCmt	(0X8BEC,	"If the coolant temperature is larger than this calibration, thenthe converter temperature is initialized to this calibration.\nDegrees_C_S");
	MakeWord	(0X8BEC);
	MakeName	(0X8BEC,	"CONVERTER_KE_COT_TEMPERATURE_INITIAL");
	MakeRptCmt	(0X8BEE,	"A prediction of the stabilized catalytic converter bed .temperature based on air-fuel ratio.\nDegrees_C");
	MakeName	(0X8BEE,	"CONVERTER_KA_COT_TEMPERATURE_STOICH_STABLE");
	MakeName	(0X8D84,	"Flag_0x01_B0701___Catalytic_Converter_Protection_Enable");
	MakeName	(0X8D8E,	"Constant16_B0702___Catalytic_Converter_Protection_Low_Temp");
	MakeName	(0X8D90,	"Constant16_B0703___Catalytic_Converter_Protection_Medium_Temp");
	MakeName	(0X8D92,	"Constant16_B0704___Catalytic_Converter_Protection_High_Temp");
	MakeName	(0X8D94,	"Constant16_B0705___Catalytic_Converter_Protection_Extreme_Temp");
	MakeName	(0X8D96,	"Constant16______________Catalytic_Converter_Protection_Minimal_Enrichment");
	MakeName	(0X8D98,	"Constant16______________Catalytic_Converter_Protection_Maximal_Enrichment");
	MakeName	(0X8DD0,	"Constant16_B0501___Canister_Purge_Min_Temp");
	MakeName	(0X8DD2,	"Constant16_B0502___Canister_Purge_Min_Speed_KPH");
	MakeName	(0X8DD4,	"Constant16_B0503___Canister_Purge_Min_Airflow");
	MakeName	(0X8DD6,	"Constant32_B0504___Canister_Purge_Min_Run_Time");
	MakeName	(0X8DE6,	"Flag_0x01_B0505___Canister_Purge_During_Open_Loop");
	MakeName	(0X8E2A,	"CurveTable_17_Rows_B0506___Canister_Purge_Flow_vs_Vacuum");
	MakeRptCmt	(0X8E64,	"Throttle position >= this allows immediate update OF catalytic converter temperature.\nPercent");
	MakeWord	(0X8E64);
	MakeName	(0X8E64,	"CONVERTER_KE_COT_THROTTLE_OPENED");
	MakeRptCmt	(0X8E66,	"Throttle position <= this causes airflow to determine timing of catalytic converter temperature update.\nPercent");
	MakeWord	(0X8E66);
	MakeName	(0X8E66,	"CONVERTER_KE_COT_THROTTLE_CLOSED");
	MakeRptCmt	(0X8E68,	"Airflow dropping >= this IN one seconds causes delay OF catalytic converter temperature update.\ngm/S");
	MakeWord	(0X8E68);
	MakeName	(0X8E68,	"CONVERTER_KE_COT_AIRFLOW_DELTA");
	MakeRptCmt	(0X8E6A,	"Overrun causes delay of this length in catalytic converter temperature update.\nSeconds");
	MakeWord	(0X8E6A);
	MakeName	(0X8E6A,	"CONVERTER_KE_COT_TEMPERATURE_DELAY_TIME");
	MakeWord	(0X8E6C);
	MakeName	(0X8E6C,	"CONVERTER_KE_COT_EQ_RATIO_DEC_FILTER_LIMIT");
	MakeWord	(0X8E6E);
	MakeName	(0X8E6E,	"CONVERTER_KE_COT_DEC_TEMP_FILTER_RICH_RATE");
	MakeRptCmt	(0X8E70,	"COT hot determination is activated IFF this is TRUE.\nBOOLEAN");
	MakeByte	(0X8E70);
	MakeName	(0X8E70,	"CONVERTER_KE_COT_HOT_DETERMINATION_ENABLE");
	MakeRptCmt	(0X8E72,	"If the catalytic converter temperature is above KE_COT_Temperature_High for this time, then the converter is too high.\nSeconds");
	MakeWord	(0X8E72);
	MakeName	(0X8E72,	"CONVERTER_KE_COT_HOT_TIME_THRESHOLD");
	MakeWord	(0X8E74);
	MakeName	(0X8E74,	"CONVERTER_KE_COT_1PERCENT_TIME_THRESHOLD");
	MakeDword	(x=0X8E76);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X8E76,	"CONVERTER_KE_COT_1PERCENT_CYCLE_TIME");
	MakeRptCmt	(0X8E7A,	"The lowest catalytic converter temperature protection threshold.\nDegrees_C_S");
	MakeWord	(0X8E7A);
	MakeName	(0X8E7A,	"CONVERTER_KE_COT_TEMPERATURE_LOW");
	MakeRptCmt	(0X8E7C,	"The second catalytic converter temperature protection threshold.\nDegrees_C_S");
	MakeWord	(0X8E7C);
	MakeName	(0X8E7C,	"CONVERTER_KE_COT_TEMPERATURE_MEDIUM");
	MakeRptCmt	(0X8E7E,	"The third catalytic converter temperature protection threshold.\nDegrees_C_S");
	MakeWord	(0X8E7E);
	MakeName	(0X8E7E,	"CONVERTER_KE_COT_TEMPERATURE_HIGH");
	MakeRptCmt	(0X8E80,	"The Highest catalytic converter temperature protection threshold.\nDegrees_C_S");
	MakeWord	(0X8E80);
	MakeName	(0X8E80,	"CONVERTER_KE_COT_TEMPERATURE_EXTREME");
	MakeRptCmt	(0X8E82,	"Minimum amount of fueling that COT will try to deliver. Have this minimum help to get back to closed loop fuel sooner.\nEquiv_Ratio_Type");
	MakeWord	(0X8E82);
	MakeName	(0X8E82,	"CONVERTER_KE_COT_MIN_EQ_ALLOWED");
	MakeRptCmt	(0X8E84,	"Maximum amount of authority the COT EQ offset can have.\nEquiv_Ratio_Type");
	MakeWord	(0X8E84);
	MakeName	(0X8E84,	"CONVERTER_KE_COT_MAX_EQ_ALLOWED");
	MakeName	(0X8E86,	"CONVERTER_KV_COT_BARO_MULTIPLIER");
	MakeRptCmt	(0X8E90,	"Multiplier on the COT increasing filter coeff based on delta between COT stabilized and 1 second old converter temperature.\nMult_0_to_1");
	MakeName	(0X8E90,	"CONVERTER_KV_COT_INC_COEF_TEMP_DELTA_MULT");
	MakeRptCmt	(0X8E9C,	"???.\nEquiv_Ratio_Type");
	MakeDword	(x=0X8E9C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X8E9C,	"CONVERTER_KV_COT_EQ_RATIO_OFFSET");
	MakeRptCmt	(0X8EBC,	"Coolant Temperature threshold above which purge may beenabled\nDegrees_C");
	MakeWord	(0X8EBC);
	MakeName	(0X8EBC,	"CCP_KE_CCP_COOLANT_TEMPERATURE");
	MakeRptCmt	(0X8EBE,	"Vehicle Speed threshold above which purge may be enabled\nMPH");
	MakeWord	(0X8EBE);
	MakeName	(0X8EBE,	"CCP_KE_CCP_VEHICLE_SPEED_FILTERED");
	MakeRptCmt	(0X8EC0,	"Mass Airflow threshold above which purge may be enabled\nGrams Per Second");
	MakeWord	(0X8EC0);
	MakeName	(0X8EC0,	"CCP_KE_CCP_MASS_AIRFLOW");
	MakeRptCmt	(0X8EC2,	"Continuous Engine Run Time threshold above whichPurge may be enabled\nSeconds");
	MakeDword	(x=0X8EC2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X8EC2,	"CCP_KE_CCP_ENGINE_RUN_TIME");
	MakeRptCmt	(0X8EC6,	"Coolant Threshold for determining purge enable delay startfrom closed loop entry.\nDegrees_C");
	MakeWord	(0X8EC6);
	MakeName	(0X8EC6,	"CCP_KE_COOLANT_TEMPERATURE_STARTRUN");
	MakeRptCmt	(0X8EC8,	"Purge Enable Delay after going closed loop if a coldstart occurred.\nSeconds");
	MakeWord	(0X8EC8);
	MakeName	(0X8EC8,	"CCP_KE_COLD_START_CLOSED_LOOP_TIME");
	MakeRptCmt	(0X8ECA,	"Purge Enable Delay after closed loop if a warm start occurred.\nSeconds");
	MakeWord	(0X8ECA);
	MakeName	(0X8ECA,	"CCP_KE_WARM_START_CLOSED_LOOP_TIME");
	MakeRptCmt	(0X8ECC,	"Coolant Threshold for determining purge enable delay from closed loop or open loop fuel control if selected.\nDegrees_C");
	MakeWord	(0X8ECC);
	MakeName	(0X8ECC,	"CCP_KE_CCP_COOLANT_STARTRUN");
	MakeRptCmt	(0X8ECE,	"Purge Enable Delay after engine run if a cold startoccurred.\nSeconds");
	MakeWord	(0X8ECE);
	MakeName	(0X8ECE,	"CCP_KE_CCP_COLD_OPEN_LOOP_TIME");
	MakeRptCmt	(0X8ED0,	"Purge Enable Delay after engine run if a warm startoccurred.\nSeconds");
	MakeWord	(0X8ED0);
	MakeName	(0X8ED0,	"CCP_KE_CCP_WARM_OPEN_LOOP_TIME");
	MakeRptCmt	(0X8ED2,	"Bit selectable flag for purging when fuel control is in openloop. To be used primarily for exports without oxygensensors.\nBOOLEAN");
	MakeByte	(0X8ED2);
	MakeName	(0X8ED2,	"CCP_KE_CCP_OPEN_LOOP_PURGE_ENABLE");
	MakeRptCmt	(0X8ED3,	"Number of cylinders that must be enabled to allowCanister Purge.\n");
	MakeByte	(0X8ED3);
	MakeName	(0X8ED3,	"CCP_KE_CYLINDERS_ENABLED_ALLOW_CCP");
	MakeRptCmt	(0X8ED4,	"Initial Value of Oxygen Multiplier\nUnitless");
	MakeWord	(0X8ED4);
	MakeName	(0X8ED4,	"CCP_KE_CANISTER_PURGE_OXYGEN_INITIAL");
	MakeRptCmt	(0X8ED6,	"High Oxygen Sensor Voltage threshold used to set the direction of Oxygen Purge Adjustment to decrease and the rate of learning.\nMilliVolts");
	MakeName	(0X8ED6,	"CCP_KV_CANISTER_OXYGEN_VOLTAGE_HIGH");
	MakeRptCmt	(0X8EDA,	"Minimum allowable value of the Canister_Purge_Oxygen_Adjustmultiplier.\nUnitless");
	MakeWord	(0X8EDA);
	MakeName	(0X8EDA,	"CCP_KE_CCP_MIN_OXYGEN_ADJUST");
	MakeRptCmt	(0X8EDC,	"Default value of the Canister_Purge_Oxygen_Adjust factor whenpurge is being performed in open loop fuel control.\nUnitless 0-2");
	MakeWord	(0X8EDC);
	MakeName	(0X8EDC,	"CCP_KE_CCP_OPEN_LOOP_OXYGEN_ADJUST");
	MakeRptCmt	(0X8EDE,	"Short delay time between multiplier learns if oxygen voltage is high for a calibrated amount of time.\nSeconds");
	MakeWord	(0X8EDE);
	MakeName	(0X8EDE,	"CCP_KE_CCP_SHORT_DELAY_RATE");
	MakeRptCmt	(0X8EE0,	"Time delay between oxygen multiplier learns if the multiplier is increasing.\nSeconds");
	MakeWord	(0X8EE0);
	MakeName	(0X8EE0,	"CCP_KE_CCP_LEARN_RATE_NORMAL");
	MakeWord	(0X8EE2);
	MakeName	(0X8EE2,	"CCP_KE_CCP_LEARN_RATE_MULTIPLIER");
	MakeRptCmt	(0X8EE4,	"Low Oxygen voltage threshold that is used to determinethe direction of the oxygen multiplier.\nMillivolts");
	MakeName	(0X8EE4,	"CCP_KV_CANISTER_OXYGEN_VOLTAGE_LOW");
	MakeRptCmt	(0X8EE8,	"Step size for oxygen multiplier when the oxygen voltagehas not been high for a calibrated amount of time.\nUnitless");
	MakeName	(0X8EE8,	"CCP_KA_CCP_OXYGEN_ADJUST_SIZE");
	MakeRptCmt	(0X8EF0,	"Step size for oxygen multiplier when the oxygen voltagehas been high for a calibrated amount of time.\nUnitless");
	MakeDword	(x=0X8EF0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X8EF0,	"CCP_KV_CCP_OXYGEN_ADJUST_TIMED_SIZE");
	MakeRptCmt	(0X8EF4,	"Choose what oxygen data to be used if no oxygen faultsare present.\nUnitless");
	MakeByte	(0X8EF4);
	MakeName	(0X8EF4,	"CCP_KE_CCP_CHOOSE_OXYGEN_DATA");
	MakeRptCmt	(0X8EF6,	"Largest value in the KV_CCP_Max_Allowed_Purge_Flow table i.e. the maximum allowed purge flow at any manifold vacuum\nGPS");
	MakeWord	(0X8EF6);
	MakeName	(0X8EF6,	"CCP_KE_CCP_MAX_FLOW");
	MakeRptCmt	(0X8EF8,	"Manifold pressure upper threshold for enabling purge onceit has been disabled.\nkPa");
	MakeWord	(0X8EF8);
	MakeName	(0X8EF8,	"CCP_KE_CCP_PRESSURE_HIGH");
	MakeRptCmt	(0X8EFA,	"Manifold pressure lower threshold for disabling purge onceit has been enabled.\nkPa");
	MakeWord	(0X8EFA);
	MakeName	(0X8EFA,	"CCP_KE_CCP_PRESSURE_LOW");
	MakeRptCmt	(0X8EFC,	"Manifold vacuum upper threshold for enabling purge onceit has been disabled.\nkPa");
	MakeWord	(0X8EFC);
	MakeName	(0X8EFC,	"CCP_KE_CCP_VACUUM_HIGH");
	MakeRptCmt	(0X8EFE,	"Manifold vacuum lower threshold for disabling purge onceit has been enabled.\nkPa");
	MakeWord	(0X8EFE);
	MakeName	(0X8EFE,	"CCP_KE_CCP_VACUUM_LOW");
	MakeRptCmt	(0X8F00,	"Time of which the oxygen voltage must remain high to use a short delay rate for multiplier learning\nSeconds");
	MakeWord	(0X8F00);
	MakeName	(0X8F00,	"CCP_KV_CCP_OXYGEN_VOLTAGE_HIGH_TIME");
	MakeRptCmt	(0X8F22,	"Maximum allowed purge flow value as a function ofmanifold vacuum.\nGPS");
	MakeWord	(0X8F22);
	MakeName	(0X8F22,	"CCP_KV_CCP_MAX_ALLOWED_PURGE_FLOW");
	MakeRptCmt	(0X8F44,	"Determines the canister purge desired base flow\nGPS");
	MakeWord	(0X8F44);
	MakeName	(0X8F44,	"CCP_KV_CCP_BASE_DESIRED_PURGE_FLOW");
	MakeRptCmt	(0X8F86,	"Maximum allowed value for oxygen multiplier\nUnitless");
	MakeName	(0X8F86,	"CCP_KA_CCP_MAX_OXYGEN_ADJUST");
	MakeRptCmt	(0X8FD2,	"Default value of the BLM adjust factor whenpurge is being performed in open loop fuel control.\nUnitless 0-2");
	MakeWord	(0X8FD2);
	MakeName	(0X8FD2,	"CCP_KE_CCP_OPEN_LOOP_BLM_ADJUST");
	MakeRptCmt	(0X8FD4,	"Minimum allowed BLM multiplier for canister purge.\nUnitless");
	MakeWord	(0X8FD4);
	MakeName	(0X8FD4,	"CCP_KE_CCP_MAX_BLM_SENSOR_ADJUST");
	MakeRptCmt	(0X8FD6,	"\nUnitless");
	MakeWord	(0X8FD6);
	MakeName	(0X8FD6,	"CCP_KE_CCP_MIN_BLM_SENSOR_ADJUST");
	MakeRptCmt	(0X8FD8,	"BLM Threshold that must be exceeded to have BLMMultiplier to increase.\nUnitless");
	MakeName	(0X8FD8,	"CCP_KV_CANISTER_BLM_HIGH_THRESHOLD");
	MakeRptCmt	(0X8FDC,	"BLM purge learn multiplier initial value at powerup andstartrun.\nUnitless");
	MakeWord	(0X8FDC);
	MakeName	(0X8FDC,	"CCP_KE_CCP_INITIAL_BLM_ADJUST");
	MakeRptCmt	(0X8FDE,	"BLM must be below this threshold to have BLMMultiplier to decrease.\nUnitless");
	MakeName	(0X8FDE,	"CCP_KV_CANISTER_BLM_LOW_THRESHOLD");
	MakeRptCmt	(0X8FE2,	"BLM Purge Learn Multiplier step size\nUnitless");
	MakeDword	(x=0X8FE2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X8FE2,	"CCP_KV_CCP_BLM_ADJUST_SIZE");
	MakeRptCmt	(0X8FE6,	"Choose what BLM data is to be used if no closed loopresets are present.\nUnitless");
	MakeByte	(0X8FE6);
	MakeName	(0X8FE6,	"CCP_KE_CANISTER_PURGE_CHOOSE_BLM");
	MakeRptCmt	(0X8FE8,	"Value the BLM data will assume when Closed Loopreset for both banks occur\nScaler_2");
	MakeWord	(0X8FE8);
	MakeName	(0X8FE8,	"CCP_KE_BLM_INITIAL_VALUE");
	MakeRptCmt	(0X8FEA,	"Power enrichment multiplier for CCP total adjust.\nUnitless 0-1");
	MakeWord	(0X8FEA);
	MakeName	(0X8FEA,	"CCP_KE_CCP_PE_MULTIPLIER");
	MakeRptCmt	(0X8FEC,	"Converter Too Hot multiplier for CCP total adjust.\nUnitless 0-1");
	MakeWord	(0X8FEC);
	MakeName	(0X8FEC,	"CCP_KE_CCP_COT_MULTIPLIER");
	MakeRptCmt	(0X8FEE,	"Amount of time HRP is held active before decay to zero.\nSeconds");
	MakeWord	(0X8FEE);
	MakeName	(0X8FEE,	"CCP_KE_HRP_HOLD_ACTIVE_TIME");
	MakeRptCmt	(0X8FF0,	"HRP is decayed to zero in this amount of time.\nSeconds");
	MakeWord	(0X8FF0);
	MakeName	(0X8FF0,	"CCP_KE_HRP_EXIT_DECAY_TIME");
	MakeRptCmt	(0X8FF2,	"This is the calibrated Base Flow Off Idle based on Mass Airflow\nGPS");
	MakeWord	(0X8FF2);
	MakeName	(0X8FF2,	"CCP_KV_CCP_BASE_FLOW_OFF_IDLE_MAF");
	MakeRptCmt	(0X9034,	"Calibrated Base Flow Idle based on Mass Airflow\nGPS");
	MakeWord	(0X9034);
	MakeName	(0X9034,	"CCP_KV_CCP_BASE_FLOW_IDLE_MAF");
	MakeDword	(x=0X9036);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeRptCmt	(0X904A,	"Establishes the nonignition voltage limited canister purge duty cycle.\nPercent");
	MakeWord	(0X904A);
	MakeName	(0X904A,	"CCP_KV_CANISTER_PURGE_DUTY_CYCLE");
	MakeName	(0X9072,	"CurveTable_22_Rows_B0507___Canister_Purge_Flow_MAP_Multiplier");
	MakeRptCmt	(0X9146,	"Maximum delta the purge solenoid duty cycle can change eachloop by. If change exceeds this limit, the new value isfiltered in.\nPercent");
	MakeWord	(0X9146);
	MakeName	(0X9146,	"CCP_KE_CCP_DUTY_CYCLE_CHANGE_LIMIT");
	MakeRptCmt	(0X9148,	"Speed at which the CCP filter coefficient decides to use thehigh speed coefficient table or the low speed coefficienttable.\nMPH");
	MakeWord	(0X9148);
	MakeName	(0X9148,	"CCP_KE_CCP_VEHICLE_SPEED_THRESHOLD");
	MakeRptCmt	(0X914A,	"Filter coefficient based on a low vehicle speed and massairflow Calibration.\nCoeff.");
	MakeWord	(0X914A);
	MakeName	(0X914A,	"CCP_KV_CCP_LOW_SPEED_CCP_CLOSING_COE");
	MakeRptCmt	(0X915C,	"Filter coefficient based on a high vehicle speed and massairflow Calibration.\nCoeff.");
	MakeWord	(0X915C);
	MakeName	(0X915C,	"CCP_KV_CCP_HIGH_SPEED_CCP_CLOSING_CO");
	MakeRptCmt	(0X916E,	"Filter coefficient based on a low vehicle speed and massairflow Calibration.\nCoeff.");
	MakeWord	(0X916E);
	MakeName	(0X916E,	"CCP_KV_CCP_LOW_SPEED_CCP_OPENING_COE");
	MakeRptCmt	(0X9180,	"Filter coefficient based on a high vehicle speed and massairflow Calibration.\nCoeff.");
	MakeWord	(0X9180);
	MakeName	(0X9180,	"CCP_KV_CCP_HIGH_SPEED_CCP_OPENING_CO");
	MakeRptCmt	(0X9192,	"Minimum allowed canister purge duty cycle.\nPercent");
	MakeWord	(0X9192);
	MakeName	(0X9192,	"CCP_KV_CCP_DUTY_CYCLE_MINIMUM");
	MakeRptCmt	(0X91B0,	"Canister Purge compensation for Manifold Vacuum.\nUnitless");
	MakeWord	(0X91B0);
	MakeName	(0X91B0,	"CCP_KV_CCP_VACUUM_MULTIPLIER");
	MakeRptCmt	(0X91DC,	"Period for each extra close-open cycle of vent valve on open-to-closed transitions.\nSeconds");
	MakeWord	(0X91DC);
	MakeName	(0X91DC,	"CCP_KE_VENT_VALVE_STRIKE_CYCLE_PERIO");
	MakeRptCmt	(0X91DE,	"Number of extra close-open cycles of vent valve on open-to-closed transitions.\nUnitless");
	MakeByte	(0X91DE);
	MakeName	(0X91DE,	"CCP_KE_VENT_VALVE_STRIKE_CYCLE_LIMIT");
	MakeRptCmt	(0X91E0,	"Lower threshold of throttle position to disable purge.\nPercent");
	MakeWord	(0X91E0);
	MakeName	(0X91E0,	"CCP_KE_CCP_TPS_LOW_FOR_IDLE");
	MakeRptCmt	(0X91E2,	"Upper threshold of throttle position to re-enable purge.\nPercent");
	MakeWord	(0X91E2);
	MakeName	(0X91E2,	"CCP_KE_CCP_TPS_HIGH_FOR_IDLE");
	MakeRptCmt	(0X91E4,	"Upper threshold of vehicle speed which will re-enable purge.\nMPH");
	MakeDword	(x=0X91E4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X91E4,	"CCP_KV_PURGE_VEHICLE_SPEED_HYST_HIGH");
	MakeRptCmt	(0X91E8,	"Lower threshold of vehicle speed which will disable purge.\nMPH");
	MakeDword	(x=0X91E8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X91E8,	"CCP_KV_PURGE_VEHICLE_SPEED_HYST_LOW");
	MakeRptCmt	(0X91EC,	"Induction air temperature threshold above which is deemed warm enough to not delay idle purge at all.\nDegrees_C");
	MakeWord	(0X91EC);
	MakeName	(0X91EC,	"CCP_KE_IDLE_PURGE_PWRUP_IAT_THRESH");
	MakeWord	(0X91EE);
	MakeName	(0X91EE,	"CCP_KE_IDLE_PURGE_PWRUP_COOL_THRESH");
	MakeRptCmt	(0X91F0,	"Calibration time to delay purging if delay is desired and conditions are relatively warm.\nSeconds_L");
	MakeDword	(x=0X91F0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X91F0,	"CCP_KE_IDLE_PURGE_WARM_DELAY_TIME");
	MakeRptCmt	(0X91F4,	"Calibration time to delay purging if delay is desiredand conditions are relatively cold.\nSeconds_L");
	MakeDword	(x=0X91F4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X91F4,	"CCP_KV_IDLE_PURGE_COLD_DELAY_TIME");
	MakeDword	(x=0X91F8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X91FC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X9200);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X9204);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X9208);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X920C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X9210);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X9214);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X9218);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X921C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X9220);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X9224);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X9228);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X922C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X9230);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeRptCmt	(0X9234,	"Disable hot restart purge mode if engine has not soaked for atleast this amount of time.\nSeconds_L");
	MakeDword	(0X9234);
	MakeName	(0X9234,	"CCP_KE_HRP_MIN_SOAK_TIMER_TO_ENABLE");
	MakeRptCmt	(0X9238,	"Disable hot restart purge mode if engine has soaked for more than this time.\nSeconds_L");
	MakeDword	(0X9238);
	MakeName	(0X9238,	"CCP_KE_HRP_MAX_SOAK_TIMER_TO_DISABLE");
	MakeWord	(0X923C);
	MakeName	(0X923C,	"CCP_KE_HRP_MIN_PERCENTAGE_ETHANOL");
	MakeRptCmt	(0X923E,	"Enable hot restart purge mode if estimated oil temperature is greater than this value + other conditions must be satisfied.\nDegrees_C");
	MakeWord	(0X923E);
	MakeName	(0X923E,	"CCP_KE_HRP_ENGINE_OIL_TEMPERATURE");
	MakeRptCmt	(0X9240,	"Enable hot restart purge mode if coolant temperature is greater than this value + other conditions must be satisfied.\nDegrees_C");
	MakeWord	(0X9240);
	MakeName	(0X9240,	"CCP_KE_HRP_COOLANT_TEMPERATURE");
	MakeRptCmt	(0X9242,	"Enable hot restart purge mode if induction air temperature is greater than this value + other conditions must be satisfied.\nDegrees_C");
	MakeWord	(0X9242);
	MakeName	(0X9242,	"CCP_KE_HRP_INDUCTION_AIR_TEMPERATURE");
	MakeRptCmt	(0X9244,	"Enable hot restart purge mode if canister purge BLM adjust is <= this value + other conditions must be satisfied.\nScaler 0-2");
	MakeWord	(0X9244);
	MakeName	(0X9244,	"CCP_KE_HRP_BLM_ADJUST_LIMIT");
	MakeRptCmt	(0X9246,	"Enable hot restart purge mode if either Purge Learn Multiplier (Bank1/2) is <= this value + other conditions must be satisfied.\nScaler 0-2");
	MakeWord	(0X9246);
	MakeName	(0X9246,	"CCP_KE_HRP_PLM_LIMIT");
	MakeWord	(0X9248);
	MakeName	(0X9248,	"CCP_KE_HRP_IDLE_BLM_LIMIT");
	MakeRptCmt	(0X924A,	"IMPORTANT: Remember to ramp out. Purge flow based on engine run time and vacuum when hot restart purge mode is active.\nGram_Per_Second");
	MakeName	(0X924A,	"CCP_KA_HRP_PURGE_FLOW");
	MakeName	(0X9278,	"Constant16_B1201___Abuse_Management_Upper_RPM_Threshold_in_Gear");
	MakeName	(0X927A,	"Constant16_B1202___Abuse_Management_Lower_RPM_Threshold_in_Gear");
	MakeName	(0X927C,	"Constant16_B1203___Abuse_Management_Upper_RPM_Threshold_in_P_N");
	MakeName	(0X927E,	"Constant16_B1204___Abuse_Management_Lower_RPM_Threshold_in_P_N");
	MakeName	(0X9280,	"Constant16_B1205___Abuse_Management_TPS_Upper_Threshold");
	MakeName	(0X9282,	"Constant16_B1206___Abuse_Management_TPS_Lower_Threshold");
	MakeName	(0X9284,	"Constant16_B1207___Abuse_Management_Vehicle_Speed_Threshold");
	MakeName	(0X9286,	"Constant16_B1208___Abuse_Management_Commanded_Fuel");
	MakeName	(0X928A,	"CurveTable_16_Rows_B1209___Abuse_Management_Time");
	MakeRptCmt	(0X9292,	"Lower threshold of throttle position hysteresis for CCP Mode.\nPercent");
	MakeWord	(0X9292);
	MakeName	(0X9292,	"CCP_KE_CCP_MODE_TPS_LOW");
	MakeRptCmt	(0X9294,	"Upper threshold of throttle position hysteresis for CCP Mode.\nPercent");
	MakeWord	(0X9294);
	MakeName	(0X9294,	"CCP_KE_CCP_MODE_TPS_HIGH");
	MakeRptCmt	(0X9296,	"Lower threshold of vehicle speed hysteresis for CCP Mode.\nMPH");
	MakeWord	(0X9296);
	MakeName	(0X9296,	"CCP_KE_CCP_MODE_VSS_LOW");
	MakeRptCmt	(0X9298,	"Upper threshold of vehicle speed hysteresis for CCP Mode.\nMPH");
	MakeWord	(0X9298);
	MakeName	(0X9298,	"CCP_KE_CCP_MODE_VSS_HIGH");
	MakeRptCmt	(0X929A,	"Volume of purge flow which must accumulate before flow reduction can start\nGrams");
	MakeDword	(0X929A);
	MakeName	(0X929A,	"CCP_KE_CCP_REDUCTION_INTEGRAL");
	MakeRptCmt	(0X929E,	"Delta limit allowed between purge and non-purge fuel control cells.\nScaler_2");
	MakeWord	(0X929E);
	MakeName	(0X929E,	"CCP_KE_CCP_BLM_REDUCTION_DELTA");
	MakeRptCmt	(0X92A0,	"Hysteresis time for flow reduction mode.\nSeconds");
	MakeWord	(0X92A0);
	MakeName	(0X92A0,	"CCP_KE_CCP_FLOW_REDUCTION_HYST_TIME");
	MakeRptCmt	(0X92A2,	"Maximum allowed canister purge duty cycle during purge reduction.\nPercent");
	MakeWord	(0X92A2);
	MakeName	(0X92A2,	"CCP_KE_CCP_REDUCTION_LIMIT");
	MakeRptCmt	(0X92A4,	"Filtered vehicle speed below which transitional cruisemodes can not be established\nMPH");
	MakeWord	(0X92A4);
	MakeName	(0X92A4,	"CRUIS_CONTROL_KE_LOW_SPEED_INHIBIT");
	MakeRptCmt	(0X92A6,	"Filtered vehicle speed above which transitional cruisemodes can not be established\nMPH");
	MakeWord	(0X92A6);
	MakeName	(0X92A6,	"CRUIS_CONTROL_KE_HIGH_SPEED_INHIBIT");
	MakeRptCmt	(0X92A8,	"Integrator maximum value while cruise is engaged\nMPH");
	MakeWord	(0X92A8);
	MakeName	(0X92A8,	"CRUIS_CONTROL_KE_CRUISE_INTEGRATOR_HIGH");
	MakeRptCmt	(0X92AA,	"Integrator minimum value while cruise is engaged\nMPH");
	MakeWord	(0X92AA);
	MakeName	(0X92AA,	"CRUIS_CONTROL_KE_CRUISE_INTEGRATOR_LOW");
	MakeRptCmt	(0X92AC,	"Maximum desired power that cruise can request\nPercent");
	MakeWord	(0X92AC);
	MakeName	(0X92AC,	"CRUIS_CONTROL_KE_CRUISE_POWER_LIMIT");
	MakeRptCmt	(0X92AE,	"Hysteresis constant\nMPH");
	MakeWord	(0X92AE);
	MakeName	(0X92AE,	"CRUIS_CONTROL_KE_HYSTERESIS");
	MakeRptCmt	(0X92B0,	"Integrator gain when not in Resume or Accel modes.\nScaler 0-1");
	MakeWord	(0X92B0);
	MakeName	(0X92B0,	"CRUIS_CONTROL_KE_CRUISE_INTEGRATOR_GAIN");
	MakeRptCmt	(0X92B2,	"Overspeed scheduled acceleration rate gain\nMPH_PER_SECOND");
	MakeWord	(0X92B2);
	MakeName	(0X92B2,	"CRUIS_CONTROL_KE_SCHEDULED_ACCEL_GAIN_OVER");
	MakeRptCmt	(0X92B4,	"Underspeed scheduled acceleration rate gain\nMPH_PER_SECOND");
	MakeWord	(0X92B4);
	MakeName	(0X92B4,	"CRUIS_CONTROL_KE_SCHEDULED_ACCEL_GAIN_UNDER");
	MakeRptCmt	(0X92B6,	"The high limit that the Lockup_Integrator is clamped to\nMPH");
	MakeWord	(0X92B6);
	MakeName	(0X92B6,	"CRUIS_CONTROL_KE_LOCKUP_CLAMP_HIGH");
	MakeRptCmt	(0X92B8,	"The low limit that the Lockup_Integrator is clamped to\nMPH");
	MakeWord	(0X92B8);
	MakeName	(0X92B8,	"CRUIS_CONTROL_KE_LOCKUP_CLAMP_LOW");
	MakeRptCmt	(0X92BA,	"Filter coefficient for the lockup integrator for the cruisecontrol algorithm\nSeconds");
	MakeWord	(0X92BA);
	MakeName	(0X92BA,	"CRUIS_CONTROL_KE_LOCKUP_INT_FILTER");
	MakeRptCmt	(0X92BC,	"The percentage of desired power above which theLockup_Integrator should not be updated.\nPercent");
	MakeWord	(0X92BC);
	MakeName	(0X92BC,	"CRUIS_CONTROL_KE_LOCKUP_POWER_LIMIT");
	MakeRptCmt	(0X92BE,	"Acceleration error minimum value and maximum integratordecrement per 100ms\nMPH per 100ms");
	MakeWord	(0X92BE);
	MakeName	(0X92BE,	"CRUIS_CONTROL_KE_CRUISE_VEH_SPEED_DELTA_HIGH");
	MakeRptCmt	(0X92C0,	"Acceleration error maximum value and maximum integratorincrement per 100ms\nMPH per 100ms");
	MakeWord	(0X92C0);
	MakeName	(0X92C0,	"CRUIS_CONTROL_KE_CRUISE_VEH_SPEED_DELTA_LOW");
	MakeRptCmt	(0X92C2,	"DC offset to gear compensation term for cruise control\nMPH");
	MakeWord	(0X92C2);
	MakeName	(0X92C2,	"CRUIS_CONTROL_KE_CRUISE_GEAR_COMP_OFFSET");
	MakeRptCmt	(0X92C4,	"Length of time over which the gear compensation termfor cruise control will be ramped in.\nSeconds");
	MakeWord	(0X92C4);
	MakeName	(0X92C4,	"CRUIS_CONTROL_KE_CRUISE_GEAR_RAMP_IN");
	MakeWord	(0X92C6);
	MakeName	(0X92C6,	"CRUIS_CONTROL_KE_CRUISE_GEAR_RAMP_OUT");
	MakeRptCmt	(0X92C8,	"Gear to be compensated for, in the cruise control algorithm- normally highest gear in a manual vehicle.\nGear 1st to 6th");
	MakeByte	(0X92C8);
	MakeName	(0X92C8,	"CRUIS_CONTROL_KE_CRUISE_GEAR_COMPENSATION");
	MakeRptCmt	(0X92CA,	"Adjusts the cruise desired power to compensate for ambientpressure.\nScaler");
	MakeWord	(0X92CA);
	MakeName	(0X92CA,	"CRUIS_CONTROL_KV_CRUISE_BARO_COMPENSATION");
	MakeRptCmt	(0X92D4,	"Effective Speed Error vs Cruise Desired Power, Gain Table 0\nPercent");
	MakeName	(0X92D4,	"CRUIS_CONTROL_KV_GAIN_TABLE");
	MakeRptCmt	(0X92FC,	"The deceleration rate below which a cruise disengagewill be performed\nMPH_PER_SECOND_S");
	MakeName	(0X92FC,	"CRUIS_CONTROL_KV_HIGH_DECEL_RATE");
}


static Bytes_1(void) {
        auto x;
#define id x

	MakeRptCmt	(0X9314,	"The accel rate above which a cruise disengagewill be performed\nMPH_PER_SECOND");
	MakeName	(0X9314,	"CRUIS_CONTROL_KV_HIGH_ACCEL_RATE");
	MakeRptCmt	(0X932C,	"Speed error as a function of vehicle speed below whichcruise will be disengaged\nMPH_S");
	MakeName	(0X932C,	"CRUIS_CONTROL_KV_UNDER_SCHEDULE_DISENGAGE");
	MakeName	(0X9344,	"CRUIS_CONTROL_KV_VARIABLE_GAIN_WITH_SPEED");
	MakeRptCmt	(0X935C,	"Integrator multiplier used for gear compensation for cruisecontrol.\nScaler");
	MakeName	(0X935C,	"CRUIS_CONTROL_KV_CRUISE_GEAR_COMP_GAIN");
	MakeRptCmt	(0X9374,	"\nMPH");
	MakeDword	(x=0X9374);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X9374,	"CRUIS_CONTROL_KV_VELOCITY_COMPENSATION");
	MakeRptCmt	(0X938C,	"Filter coefficient for vehicle acceleration for the cruisecontrol algorithm\nSeconds");
	MakeWord	(0X938C);
	MakeName	(0X938C,	"CRUIS_CONTROL_KE_CRUISE_VEH_ACCEL_FILTER");
	MakeRptCmt	(0X938E,	"Filter coefficient for vehicle speed for the cruise controlalgorithm\nSeconds");
	MakeWord	(0X938E);
	MakeName	(0X938E,	"CRUIS_CONTROL_KE_CRUISE_VEH_SPEED_FILTER");
	MakeRptCmt	(0X9390,	"Maximum allowed cruise speed cruise disengage\nMPH");
	MakeWord	(0X9390);
	MakeName	(0X9390,	"CRUIS_CONTROL_KE_HIGH_SPEED_DISENGAGE");
	MakeRptCmt	(0X9392,	"Minimum allowed cruise speed cruise disengage\nMPH");
	MakeWord	(0X9392);
	MakeName	(0X9392,	"CRUIS_CONTROL_KE_LOW_SPEED_DISENGAGE");
	MakeRptCmt	(0X9394,	"Maximum overspeed value allowed without a cruise disengage\nMPH");
	MakeWord	(0X9394);
	MakeName	(0X9394,	"CRUIS_CONTROL_KE_OVERSPEED_DISENGAGE");
	MakeRptCmt	(0X9396,	"Brake before cruise security option. If TRUE, the brakeinput must be asserted before cruise can be enabled\nBOOLEAN");
	MakeByte	(0X9396);
	MakeName	(0X9396,	"CRUIS_CONTROL_KE_PERFORM_BRK_OR_CLUTCH_TEST");
	MakeRptCmt	(0X9398,	"Maximum value effective speed error can be.\nMPH");
	MakeWord	(0X9398);
	MakeName	(0X9398,	"CRUIS_CONTROL_KE_CRUISE_EFF_SPD_ERROR_MAX");
	MakeWord	(0X939A);
	MakeName	(0X939A,	"CRUIS_MANAGE_KE_TAP_UP_VS_ACCEL_TIME");
	MakeWord	(0X939C);
	MakeName	(0X939C,	"CRUIS_MANAGE_KE_ACCEL_TERMINATION_OVERSHOOT");
	MakeRptCmt	(0X939E,	"Calibration used to scale vehicle acceleration into Demand Register during a resume.\nScaler");
	MakeWord	(0X939E);
	MakeName	(0X939E,	"CRUIS_MANAGE_KE_ACCEL_COMP_R_A");
	MakeWord	(0X93A0);
	MakeName	(0X93A0,	"CRUIS_MANAGE_KE_RESUME_IGNORE_RA_TIME");
	MakeWord	(0X93A2);
	MakeName	(0X93A2,	"CRUIS_MANAGE_KE_RESUME_VS_ACCEL_TIME");
	MakeRptCmt	(0X93A4,	"The minimum amount of time the S/C switch must be depressedin order to move to engaged upon the release of the switch.\nSeconds");
	MakeWord	(0X93A4);
	MakeName	(0X93A4,	"CRUIS_MANAGE_KE_CRUISE_SET_TIME");
	MakeRptCmt	(0X93A6,	"If S/C or R/A switch is continuously depressed for greaterthan this amount of time, diagnostic P0567/P0568 will befailed.\nSeconds");
	MakeWord	(0X93A6);
	MakeName	(0X93A6,	"CRUIS_MANAGE_KE_CRUISE_SWITCH_FAIL_TIME");
	MakeWord	(0X93A8);
	MakeName	(0X93A8,	"CRUIS_MANAGE_KE_CRUISE_SWITCH_PASS_TIME");
	MakeRptCmt	(0X93AA,	"Calibration used to scale vehicle acceleration into Demand Register during a set.\nScaler");
	MakeWord	(0X93AA);
	MakeName	(0X93AA,	"CRUIS_MANAGE_KE_ACCEL_COMP_S_C");
	MakeWord	(0X93AC);
	MakeName	(0X93AC,	"CRUIS_MANAGE_KE_TAP_DOWN_TIMEOUT");
	MakeWord	(0X93AE);
	MakeName	(0X93AE,	"CRUIS_MANAGE_KE_TAP_DOWN_SPEED_HIGH");
	MakeWord	(0X93B0);
	MakeName	(0X93B0,	"CRUIS_MANAGE_KE_TAP_DOWN_VS_COAST_TIME");
	MakeWord	(0X93B2);
	MakeName	(0X93B2,	"CRUIS_MANAGE_KE_TAP_DOWN_WINS");
	MakeRptCmt	(0X93B4,	"The tap up/down increment to memory speed and demand register.\nMPH");
	MakeWord	(0X93B4);
	MakeName	(0X93B4,	"CRUIS_MANAGE_KE_TAP_INCREMENT");
	MakeWord	(0X93B6);
	MakeName	(0X93B6,	"CRUIS_MANAGE_KE_TAP_UP_SPEED_HIGH");
	MakeWord	(0X93B8);
	MakeName	(0X93B8,	"CRUIS_MANAGE_KE_TAP_UP_SPEED_LOW");
	MakeWord	(0X93BA);
	MakeName	(0X93BA,	"CRUIS_MANAGE_KE_TAP_UP_WINS");
	MakeRptCmt	(0X93BC,	"An additional term added to the Demand Register at the initiation of an Accel in order to obtain more Desired Power.\nMPH");
	MakeName	(0X93BC,	"CRUIS_MANAGE_KV_ACCEL_STEP_FROM_SBE");
	MakeRptCmt	(0X93D4,	"An additional term added to the Demand Register at the initiation of an Accel in order to obtain more Desired Power.\nMPH");
	MakeName	(0X93D4,	"CRUIS_MANAGE_KV_ACCEL_STEP_FROM_ENG");
	MakeRptCmt	(0X93EC,	"The resume rate increment per 100 ms.\nMPH");
	MakeName	(0X93EC,	"CRUIS_MANAGE_KV_RESUME_RATE");
	MakeRptCmt	(0X9404,	"The accel rate increment per 100 ms.\nMPH");
	MakeName	(0X9404,	"CRUIS_MANAGE_KV_ACCEL_RATE");
	MakeRptCmt	(0X941C,	"The coast rate increment per 100 ms.\nMPH");
	MakeWord	(0X941C);
	MakeName	(0X941C,	"CRUIS_MANAGE_KE_COAST_RATE");
	MakeRptCmt	(0X941E,	"The tap up/down rate increment per 100 ms.\nMPH");
	MakeWord	(0X941E);
	MakeName	(0X941E,	"CRUIS_MANAGE_KE_TAP_RATE");
	MakeRptCmt	(0X9420,	"The hysteresis rate increment per 100 ms.\nMPH");
	MakeWord	(0X9420);
	MakeName	(0X9420,	"CRUIS_MANAGE_KE_HYSTERESIS_RATE");
	MakeRptCmt	(0X9422,	"Maximum cruise speed error for which a full accel stepfrom SBE will be applied.\nMPH_S");
	MakeWord	(0X9422);
	MakeName	(0X9422,	"CRUIS_MANAGE_KE_ACCEL_STEP_FROM_SBE_SCALER");
	MakeRptCmt	(0X9424,	"Maximum cruise speed error for which accel from SBE modewill be entered when the R/A switch is applied.\nMPH_S");
	MakeWord	(0X9424);
	MakeName	(0X9424,	"CRUIS_MANAGE_KE_MAX_ACCEL_FROM_SBE_ERROR");
	MakeWord	(0X9426);
	MakeName	(0X9426,	"DT_ABUSE_MGMT_KE_ABUSE_DRIVE_RPM_HIGH");
	MakeWord	(0X9428);
	MakeName	(0X9428,	"DT_ABUSE_MGMT_KE_ABUSE_DRIVE_RPM_LOW");
	MakeWord	(0X942A);
	MakeName	(0X942A,	"DT_ABUSE_MGMT_KE_ABUSE_PN_RPM_HIGH");
	MakeWord	(0X942C);
	MakeName	(0X942C,	"DT_ABUSE_MGMT_KE_ABUSE_PN_RPM_LOW");
	MakeRptCmt	(0X942E,	"If the throttle position is greater than this hysteresis limit,drivetrain abuse can be enabled.\nPercent");
	MakeWord	(0X942E);
	MakeName	(0X942E,	"DT_ABUSE_MGMT_KE_ABUSE_THROTTLE_HIGH");
	MakeRptCmt	(0X9430,	"If the throttle position is greater than this hysteresis limit,drivetrain abuse can be enabled.\nPercent");
	MakeWord	(0X9430);
	MakeName	(0X9430,	"DT_ABUSE_MGMT_KE_ABUSE_THROTTLE_LOW");
	MakeRptCmt	(0X9432,	"If the vehicle speed is greater than or equal to this value,drivetrain abuse can not be enabled.\nMPH");
	MakeWord	(0X9432);
	MakeName	(0X9432,	"DT_ABUSE_MGMT_KE_ABUSE_VEHICLE_SPEED_THRESH");
	MakeRptCmt	(0X9434,	"If drivetrain abuse is active, the fuel equivalence ratiois commanded to this value.\nEquiv_Ratio_Type");
	MakeWord	(0X9434);
	MakeName	(0X9434,	"DT_ABUSE_MGMT_KE_ABUSE_EQUIVALENCE_RATIO");
	MakeRptCmt	(0X9436,	"Vector specifying which cylinders to disable in abuse managementwhen PSM indicates Park or Neutral. FALSE = DISABLED\nBOOLEAN");
	MakeByte	(0X9436);
	MakeName	(0X9436,	"DT_ABUSE_MGMT_KV_ABUSE_CYLINDER_DISABLE_PN");
	MakeRptCmt	(0X9437,	"Vector specifying which cylinders to disable in abuse managementwhen PSM does not indicate Park or Neutral. FALSE = DISABLED\nBOOLEAN");
	MakeByte	(0X9437);
	MakeName	(0X9437,	"DT_ABUSE_MGMT_KV_ABUSE_CYLINDER_DISABLE_NOT_PN");
	MakeWord	(0X9438);
	MakeName	(0X9438,	"DT_ABUSE_MGMT_KV_ABUSE_TIME");
	MakeRptCmt	(0X9458,	"controls execution of EGR logic\nBOOLEAN");
	MakeByte	(0X9458);
	MakeName	(0X9458,	"EGR_KE_EGR_ENABLED");
	MakeRptCmt	(0X945A,	"EGR position sensor scaling factor.\n% / Count");
	MakeWord	(0X945A);
	MakeName	(0X945A,	"EGR_KE_EGR_FULL_SCALE_GAIN");
	MakeRptCmt	(0X945C,	"First order filter coefficient used to reduce zero linear EGR position offset.\nSeconds");
	MakeByte	(0X945C);
	MakeName	(0X945C,	"EGR_KE_EGR_OFFSET_FILTER_COEFF");
	MakeRptCmt	(0X945E,	"Minimum allowable value of learned EGR closed position.\nA/D Counts");
	MakeWord	(0X945E);
	MakeName	(0X945E,	"EGR_KE_EGR_POSITION_CLOSED_MIN");
	MakeRptCmt	(0X9460,	"Maximum allowable value of learned EGR closed position.\nA/D Counts");
	MakeWord	(0X9460);
	MakeName	(0X9460,	"EGR_KE_EGR_POSITION_CLOSED_MAX");
	MakeRptCmt	(0X9462,	"First order lag filter coefficient for percent pintle opening.\nSeconds");
	MakeWord	(0X9462);
	MakeName	(0X9462,	"EGR_KE_EGR_POSITION_FILTER_COEF");
	MakeRptCmt	(0X9464,	"If desired EGR position is less than this calibration, desired EGR position is set to 0.0.\nPercent");
	MakeWord	(0X9464);
	MakeName	(0X9464,	"EGR_KE_DESIRED_EGR_POSITION_MINIMUM");
	MakeRptCmt	(0X9466,	"Hysteresis value which enables EGR from off state.\nkPa");
	MakeWord	(0X9466);
	MakeName	(0X9466,	"EGR_KE_EGR_OFF_VACUUM_HYST_THRES");
	MakeRptCmt	(0X9468,	"Disables EGR below this calibration and linearly interpolates from KE_EGR_Full_Vacuum_Threshold.\nkPa");
	MakeWord	(0X9468);
	MakeName	(0X9468,	"EGR_KE_EGR_OFF_VACUUM_THRESHOLD");
	MakeRptCmt	(0X946A,	"Enables full EGR above this calibration.\nkPa");
	MakeWord	(0X946A);
	MakeName	(0X946A,	"EGR_KE_EGR_FULL_VACUUM_THRESHOLD");
	MakeRptCmt	(0X946C,	"If Engine Speed is above this threshold, disable the TCC multiplier (Torque Converter Multiplier <- 1.0 ).\nRPM");
	MakeWord	(0X946C);
	MakeName	(0X946C,	"EGR_KE_EGR_TCC_RPM_HIGH_HYST");
	MakeRptCmt	(0X946E,	"If Engine Speed is below this threshold, enable the TCC multiplier using KV_Torque_Converter_Multiplier.\nRPM");
	MakeWord	(0X946E);
	MakeName	(0X946E,	"EGR_KE_EGR_TCC_RPM_LOW_HYST");
	MakeRptCmt	(0X9470,	"Defines the time required to allow the start of offset learning.\nSeconds");
	MakeWord	(0X9470);
	MakeName	(0X9470,	"EGR_KE_EGR_LEARN_ENABLE_TIME");
	MakeWord	(0X9472);
	MakeName	(0X9472,	"EGR_KE_EGR_INIT_LEARN_CMPT_TIME");
	MakeRptCmt	(0X9474,	"Minimum allowable value of the initial learned low EGR closed offset.\nA/D Counts");
	MakeWord	(0X9474);
	MakeName	(0X9474,	"EGR_KE_EGR_INIT_LOW_POSITION");
	MakeRptCmt	(0X9476,	"Maximum allowable value of the initial learned low EGR closed offset.\nA/D Counts");
	MakeWord	(0X9476);
	MakeName	(0X9476,	"EGR_KE_EGR_INIT_HIGH_POSITION");
	MakeRptCmt	(0X9478,	"Initial EGR initial offset is relearned when this ignition cycle counter expires.\nCount");
	MakeWord	(0X9478);
	MakeName	(0X9478,	"EGR_KE_EGR_OFFSET_IGN_COUNT_MAX");
	MakeRptCmt	(0X947A,	"Max allowable +/- change in the EGR offset relative to the initial learn position.\nA/D Counts");
	MakeWord	(0X947A);
	MakeName	(0X947A,	"EGR_KE_EGR_PINTLE_GROWTH_MAX");
	MakeRptCmt	(0X947C,	"Below this percent pintle position opening, the EGR valve is considered closed.\nPercent");
	MakeWord	(0X947C);
	MakeName	(0X947C,	"EGR_KE_EGR_MIN_NOISE_POSITION");
	MakeRptCmt	(0X947E,	"Coolant terperature multiplier modifying desired EGR position.\nMultiplier");
	MakeWord	(0X947E);
	MakeName	(0X947E,	"EGR_KV_COOLANT_TEMPERATURE_MULTIPLIE");
	MakeRptCmt	(0X94AA,	"Equivalence ratio multiplier modifying desired EGR position.\nMultiplier");
	MakeWord	(0X94AA);
	MakeName	(0X94AA,	"EGR_KV_EQUIVALENCE_RATIO_MULTIPLIER");
	MakeRptCmt	(0X94CC,	"Decreasing delta throttle position multiplier modifying desired EGR position.\nMultiplier");
	MakeWord	(0X94CC);
	MakeName	(0X94CC,	"EGR_KV_THROTTLE_POSITION_MULTIPLIER");
	MakeName	(0X94CE,	"CurveTable_37_Rows_EGR_Commanded_Position_Coolant_Temp_??_Multiplier");
	MakeRptCmt	(0X94E6,	"Torque converter clutch multiplier modifying desired EGR position.\nMultiplier");
	MakeName	(0X94E6,	"EGR_KV_TORQUE_CONVERTER_MULTIPLIER");
	MakeRptCmt	(0X9506,	"Barometer multiplier modifying desired EGR position.\nMultiplier");
	MakeName	(0X9506,	"EGR_KV_BAROMETER_MULTIPLIER");
	MakeRptCmt	(0X9518,	"EGR desired pintle position based on engine speed and Grams Air Per Cylinder.\nPercent");
	MakeName	(0X9518,	"EGR_KA_EGR_DESIRED_POSITION");
	MakeName	(0X97FC,	"Constant16_[97FC]_Change_Oil_Lamp_Startup_Test_Time");
	MakeName	(0X97FE,	"Constant16_Change_Oil_Request_Oil_Life_Threshold_2");
	MakeName	(0X9800,	"Constant16_Change_Oil_Request_Oil_Life_Threshold_1");
	MakeName	(0X9802,	"Constant16_[9802]_Change_Oil_Lamp_Blink_Time_??");
	MakeName	(0X9804,	"Flag_0x01_[9804]_Change_Oil_Request_For_Engine_Overheat_Enable");
	MakeName	(0X9805,	"Flag_0x01_[9805]_Change_Oil_Lamp_Startup_Test_Enable_??");
	MakeName	(0X9806,	"Flag_0x01_[9806]_Engine_very_low_oil_life_diagnostics_enable");
	MakeName	(0X9808,	"Constant16_[9808]_Change_Oil_Request_For_Engine_Overheat_Temp_Threshold");
	MakeRptCmt	(0X980A,	"Increasing desired EGR position filter coefficient MPH threshold.\nMPH");
	MakeWord	(0X980A);
	MakeName	(0X980A,	"EGR_KE_EGR_VEHICLE_SPEED_THRESHOLD");
	MakeRptCmt	(0X980C,	"Lag filter coefficient used only on increasing desired EGR position above KE_Vehicle_Speed_Threshold.\nCoeff.");
	MakeWord	(0X980C);
	MakeName	(0X980C,	"EGR_KV_HIGH_VEHICLE_SPEED_COEFFICIEN");
	MakeRptCmt	(0X9816,	"Lag filter coefficient used only on increasing desired EGR position below KE_Vehicle_Speed_Threshold.\nCoeff.");
	MakeWord	(0X9816);
	MakeName	(0X9816,	"EGR_KV_LOW_VEHICLE_SPEED_COEFFICIENT");
	MakeName	(0X981E,	"Flag_0x01_[981E]_Change_Oil_Lamp_Startup_Test_Enable_??");
	MakeName	(0X981F,	"Flag_0x01_[981F]_Engine_low_oil_life_enable_switch_??");
	MakeRptCmt	(0X9820,	"Lag filter coefficient used only on decreasing desired EGR position.\nCoeff.");
	MakeWord	(0X9820);
	MakeName	(0X9820,	"EGR_KV_EGR_VEHICLE_SPEED_COEFFICIENT");
	MakeRptCmt	(0X982A,	"The nominal duty cycle required to move the EGR valve from the closed position to the desired position.\nPercent");
	MakeWord	(0X982A);
	MakeName	(0X982A,	"EGR_KV_INITIAL_DUTY_CYCLE");
	MakeRptCmt	(0X9834,	"Multiplies initial EGR integrator term to correct for engine vacuum.\nMultiplier");
	MakeName	(0X9834,	"EGR_KV_INITIAL_INTEGRAL_VACUUM_CORRE");
	MakeRptCmt	(0X9854,	"Gain applied to the position error term to calculate the integral correction.\nMultiplier");
	MakeWord	(0X9854);
	MakeName	(0X9854,	"EGR_KV_POSITION_INTEGRAL_GAIN");
	MakeRptCmt	(0X986A,	"Multiplies EGR integral term to correct for engine vacuum.\nMultiplier");
	MakeName	(0X986A,	"EGR_KV_INTEGRAL_VACUUM_CORRECTION");
	MakeRptCmt	(0X988A,	"Gain applied to the position error term to calculate the proportional correction.\nMultiplier");
	MakeWord	(0X988A);
	MakeName	(0X988A,	"EGR_KV_POSITION_PROPORTIONAL_GAIN");
	MakeName	(0X988C,	"Constant16_[988C]_Oil_Temperature_Calculation_IAT_Factor");
	MakeName	(0X988E,	"Constant16_[988E]_Oil_Temperature_Calculation_CTS_Factor");
	MakeName	(0X9890,	"Constant16_[9890]_Oil_Temperature_Calculation_Engine_Speed_Scaler_??");
	MakeName	(0X9896,	"Constant32_[9896]_Oil_Life_Reset_Something_??");
	MakeName	(0X989A,	"Constant16_[989A]_Oil_Life_Reset_Something_??");
	MakeRptCmt	(0X98A0,	"Multiplies EGR proportional term to correct for engine vacuum.\nMultiplier");
	MakeName	(0X98A0,	"EGR_KV_PROPORTIONAL_VACUUM_CORRECTIO");
	MakeRptCmt	(0X98C0,	"MPH threshold below which EGR is disabled when enabled.\nMPH");
	MakeWord	(0X98C0);
	MakeName	(0X98C0,	"EGR_KE_VEHICLE_SPEED_DISABLE_THRESHO");
	MakeRptCmt	(0X98C2,	"MPH threshold above which EGR is enabled when disabled.\nMPH");
	MakeWord	(0X98C2);
	MakeName	(0X98C2,	"EGR_KE_VEHICLE_SPEED_ENABLE_THRESHOL");
	MakeRptCmt	(0X98C4,	"TPS threshold below which EGR is disabled when enabled.\nPercent");
	MakeWord	(0X98C4);
	MakeName	(0X98C4,	"EGR_KE_THROTTLE_POSITION_DISABLE_THR");
	MakeRptCmt	(0X98C6,	"TPS threshold above which EGR is enabled when disabled.\nPercent");
	MakeWord	(0X98C6);
	MakeName	(0X98C6,	"EGR_KE_THROTTLE_POSITION_ENABLE_THRE");
	MakeRptCmt	(0X98C8,	"Lower IAT threshold above which EGR is enabled when disabled.\nDegrees C");
	MakeWord	(0X98C8);
	MakeName	(0X98C8,	"EGR_KE_LOWER_IAT_ENABLE_THRESHOLD");
	MakeRptCmt	(0X98CA,	"Lower IAT threshold below which EGR is disabled when enabled.\nDegrees C");
	MakeWord	(0X98CA);
	MakeName	(0X98CA,	"EGR_KE_LOWER_IAT_DISABLE_THRESHOLD");
	MakeRptCmt	(0X98CC,	"High Mass Airflow threshold which EGR is disabled.\nGrams/Sec.");
	MakeWord	(0X98CC);
	MakeName	(0X98CC,	"EGR_KE_EGR_HIGH_AIRFLOW_THRESHOLD");
	MakeRptCmt	(0X98CE,	"Low Mass Airflow threshold which EGR is disabled.\nGrams/Sec.");
	MakeDword	(x=0X98CE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X98CE,	"EGR_KE_EGR_LOW_AIRFLOW_THRESHOLD");
	MakeRptCmt	(0X98D2,	"Lower MAP threshold below which EGR is disabled when enabled.\nkPa");
	MakeWord	(0X98D2);
	MakeName	(0X98D2,	"EGR_KE_LOWER_MAP_DISABLE_THRESHOLD");
	MakeRptCmt	(0X98D4,	"EGR disable time after air conditioner clutch engagement.\nSeconds");
	MakeWord	(0X98D4);
	MakeName	(0X98D4,	"EGR_KE_CLUTCH_TRANSITION_TIMER_THRES");
	MakeWord	(0X98D6);
	MakeName	(0X98D6,	"EGR_KE_EGR_PWRUP_COOLANT_DELAY_THRES");
	MakeWord	(0X98D8);
	MakeName	(0X98D8,	"EGR_KE_EGR_COOLANT_ENABLE_THRESHOLD");
	MakeRptCmt	(0X98DA,	"Time after coolant temperatures requirements have been met before enabling EGR.\nSeconds");
	MakeWord	(0X98DA);
	MakeName	(0X98DA,	"EGR_KE_EGR_ENABLE_COOLANT_TIME");
	MakeRptCmt	(0X98DC,	"Upper TPS threshold below which EGR is enabled when disabled.\nPercent");
	MakeWord	(0X98DC);
	MakeName	(0X98DC,	"EGR_KE_UPPER_TPS_ENABLE_THRESHOLD");
	MakeRptCmt	(0X98DE,	"Upper TPS threshold above which EGR is disabled when enabled.\nPercent");
	MakeWord	(0X98DE);
	MakeName	(0X98DE,	"EGR_KE_UPPER_TPS_DISABLE_THRESHOLD");
	MakeRptCmt	(0X98E0,	"Set this calibration TRUE to enable EGR Multi Stroke.\nTRUE/FALSE");
	MakeByte	(0X98E0);
	MakeName	(0X98E0,	"EGR_KE_EGR_MULTI_STROKE_ENABLED");
	MakeRptCmt	(0X98E2,	"Disable EGR Multi Stroke when coolant is colder than this.\nDegrees C");
	MakeWord	(0X98E2);
	MakeName	(0X98E2,	"EGR_KE_EGR_STRK_LOW_COOLANT_TEMP");
	MakeRptCmt	(0X98E4,	"Disable EGR Multi Stroke when coolant is warmer than this.\nDegrees C");
	MakeWord	(0X98E4);
	MakeName	(0X98E4,	"EGR_KE_EGR_STRK_HIGH_COOLANT_TEMP");
	MakeRptCmt	(0X98E6,	"Disable EGR Multi Stroke when Desired EGR is less than this.\nPercent");
	MakeWord	(0X98E6);
	MakeName	(0X98E6,	"EGR_KE_EGR_STRK_LOW_EGR_POSITION");
	MakeRptCmt	(0X98E8,	"Disable EGR Multi Stroke after this many strokes in normallentgh ignition cycle.\nStrokes");
	MakeByte	(0X98E8);
	MakeName	(0X98E8,	"EGR_KE_EGR_STROKE_COUNTER_LMT");
	MakeRptCmt	(0X98EA,	"Minimum amount of time the EGR valve is commanded opento max position to be considered an EGR stroke event.\nSeconds");
	MakeWord	(0X98EA);
	MakeName	(0X98EA,	"EGR_KE_EGR_STROKE_TIME_DELAY");
	MakeRptCmt	(0X98EC,	"Minimum time enabling conditions must hold before each stroke for EGR Multi Stroke.\nSeconds");
	MakeWord	(0X98EC);
	MakeName	(0X98EC,	"EGR_KE_EGR_STROKE_STABILIZATION");
	MakeRptCmt	(0X98EE,	"EGR Multi Stroke is re-enabled this often.\nSeconds");
	MakeDword	(x=0X98EE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X98EE,	"EGR_KE_EGR_STROKE_RESET_TIME_PERIOD");
	MakeRptCmt	(0X98F2,	"Time EGR valve is commanded on for each stroke for EGR Multi Stroke.\nSeconds");
	MakeWord	(0X98F2);
	MakeName	(0X98F2,	"EGR_KE_EGR_STRK_MAX_OPEN_TIME");
	MakeRptCmt	(0X98F4,	"Filter coefficient used to filter engine oil pressure.\nSeconds");
	MakeByte	(0X98F4);
	MakeName	(0X98F4,	"ENG_OIL_KE_ENGINE_OIL_PRESSURE_COEFF");
	MakeRptCmt	(0X98F6,	"The minimum allowed PWM signal to be sent to the oilpressure gage.\nPercent");
	MakeWord	(0X98F6);
	MakeName	(0X98F6,	"ENG_OIL_KE_OIL_PRESSURE_GAGE_PWM_MIN");
	MakeRptCmt	(0X98F8,	"The maximum allowed PWM signal to be sent to the oilpressure gage.\nPercent");
	MakeWord	(0X98F8);
	MakeName	(0X98F8,	"ENG_OIL_KE_OIL_PRESSURE_GAGE_PWM_MAX");
	MakeRptCmt	(0X98FA,	"The PWM signal to be sent to the oil pressure gage.\nPercent");
	MakeName	(0X98FA,	"ENG_OIL_KV_OIL_PRESSURE_TO_PWM_FOR_GAGE");
	MakeRptCmt	(0X994C,	"Decrement Oil Life interval when effective_engine_revolutions exceeds this.\nRevolutions");
	MakeWord	(0X994C);
	MakeName	(0X994C,	"ENG_OIL_KE_EFFECTIVE_REVOLUTION_LIMIT");
	MakeRptCmt	(0X994E,	"Engine oil pressure sensor scaling factor.\nFactor");
	MakeWord	(0X994E);
	MakeName	(0X994E,	"ENG_OIL_KE_ENG_OIL_PRES_SCALE_FACTOR");
	MakeRptCmt	(0X9950,	"Engine oil pressure sensor offset value.\nkPa");
	MakeDword	(0X9950);
	MakeName	(0X9950,	"ENG_OIL_KE_ENG_OIL_SENSOR_OFFSET");
	MakeRptCmt	(0X9954,	"Default value for engine oil pressure, if sensor has failed.\nkPa");
	MakeDword	(x=0X9954);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X9954,	"ENG_OIL_KE_ENGINE_OIL_PRESSURE_DEFAULT");
	MakeRptCmt	(0X9958,	"If the number of consecutive faults is greater than or equal to this value, it is considereded a fault.\ncounts");
	MakeByte	(0X9958);
	MakeName	(0X9958,	"ENG_OIL_KE_ENGINE_OIL_PRES_LOWER_FAULTS");
	MakeRptCmt	(0X9959,	"If the number of consecutive faults is greater than or equal to this value, it is considereded a fault.\ncounts");
	MakeByte	(0X9959);
	MakeName	(0X9959,	"ENG_OIL_KE_ENGINE_OIL_PRES_UPPER_FAULTS");
	MakeRptCmt	(0X995A,	"If the oil pressure reading is equal to or greater than this value, it is considered out of limits.\nA/D counts");
	MakeWord	(0X995A);
	MakeName	(0X995A,	"ENG_OIL_KE_ENGINE_OIL_PRES_MAX_LIMIT");
	MakeRptCmt	(0X995C,	"If the oil pressure reading is equal to or less than this value, it is considered out of limits.\nA/D counts");
	MakeWord	(0X995C);
	MakeName	(0X995C,	"ENG_OIL_KE_ENGINE_OIL_PRES_MIN_LIMIT");
	MakeRptCmt	(0X995E,	"First order lag filter coefficient for estimated oil temperature in equilibrium mode.\nMultiplier");
	MakeWord	(0X995E);
	MakeName	(0X995E,	"ENG_OIL_KV_OIL_EQUILIBRIUM_FILTER_COEF");
	MakeRptCmt	(0X9986,	"If TRUE and Oil Level is low turn on Oil Low Light.\nBOOLEAN");
	MakeByte	(0X9986);
	MakeName	(0X9986,	"ENG_OIL_KE_OIL_LEVEL_LIGHT_ON_FOR_RUN");
	MakeRptCmt	(0X9987,	"Number of Oil level samples reporting low needed to determine low oil level.\nCounts");
	MakeByte	(0X9987);
	MakeName	(0X9987,	"ENG_OIL_KE_OIL_LEVEL_LOW_SAMPLES");
	MakeRptCmt	(0X9988,	"Amount of oil level samples to be taken for a given period.\nCounts");
	MakeByte	(0X9988);
	MakeName	(0X9988,	"ENG_OIL_KE_OIL_LEVEL_SAMPLE_QUANTITY");
	MakeRptCmt	(0X998A,	"Value to be compared to Coolant_Stoprun - Coolant_Powerup.This value has Range 0 to 180, since it is a delta.\nDegrees C");
	MakeWord	(0X998A);
	MakeName	(0X998A,	"ENG_OIL_KV_OIL_LEVEL_DELTA");
	MakeRptCmt	(0X99AA,	"Length of time Bulb check should last.\nSeconds");
	MakeWord	(0X99AA);
	MakeName	(0X99AA,	"ENG_OIL_KE_OIL_LIFE_BULB_TIME");
	MakeRptCmt	(0X99AC,	"Determines when to turn on the Change Oil Now.\nPercent");
	MakeWord	(0X99AC);
	MakeName	(0X99AC,	"ENG_OIL_KE_OIL_LIFE_CHANGE_NOW");
	MakeRptCmt	(0X99AE,	"Determines when the Change Oil Soon lamp will be requested.\nPercent");
	MakeWord	(0X99AE);
	MakeName	(0X99AE,	"ENG_OIL_KE_OIL_LIFE_CHANGE_SOON");
	MakeRptCmt	(0X99B0,	"Determine how long to flash the NOW light during a reset.\nSeconds");
	MakeWord	(0X99B0);
	MakeName	(0X99B0,	"ENG_OIL_KE_OIL_LIFE_FLASH_LIGHT_TIME");
	MakeRptCmt	(0X99B2,	"Enables the option to kill oil life upon overheating.\nBOOLEAN");
	MakeByte	(0X99B2);
	MakeName	(0X99B2,	"ENG_OIL_KE_OIL_LIFE_HOT_ENABLE");
	MakeRptCmt	(0X99B3,	"If TRUE, Oil Life Now Bulb check will be run.\nBOOLEAN");
	MakeByte	(0X99B3);
	MakeName	(0X99B3,	"ENG_OIL_KE_OIL_LIFE_NOW_BULB_CHECK_REQ");
	MakeRptCmt	(0X99B4,	"Determine if the NOW lamp is used.\nBOOLEAN");
	MakeByte	(0X99B4);
	MakeName	(0X99B4,	"ENG_OIL_KE_OIL_LIFE_NOW_ENABLED");
	MakeRptCmt	(0X99B6,	"Determine when the engine oil is to be changed upon overheating.\nDegrees_C");
	MakeWord	(0X99B6);
	MakeName	(0X99B6,	"ENG_OIL_KE_OIL_LIFE_OVERTEMP");
	MakeRptCmt	(0X99B8,	"Engine revolution correction factor, based on estimated engine oil temperature.\nScale Factor");
	MakeByte	(0X99B8);
	MakeName	(0X99B8,	"ENG_OIL_KV_OIL_LIFE_PENALTY_FACTOR");
	MakeRptCmt	(0X99CC,	"If TRUE, Oil Life Soon Bulb check will be run.\nBOOLEAN");
	MakeByte	(0X99CC);
	MakeName	(0X99CC,	"ENG_OIL_KE_OIL_LIFE_SOON_BULB_CHECK_REQ");
	MakeRptCmt	(0X99CD,	"Determine if SOON lamp is used.\nBOOLEAN");
	MakeByte	(0X99CD);
	MakeName	(0X99CD,	"ENG_OIL_KE_OIL_LIFE_SOON_ENABLED");
	MakeRptCmt	(0X99CE,	"Hysteresis on low oil pressure.\nkPa");
	MakeDword	(x=0X99CE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X99CE,	"ENG_OIL_KE_OIL_PRESSURE_HYSTERESIS");
	MakeRptCmt	(0X99D2,	"Time oil pressure must be low to turn on the warning.\nSeconds");
	MakeWord	(0X99D2);
	MakeName	(0X99D2,	"ENG_OIL_KE_OIL_PRESSURE_LOW_TIME");
	MakeRptCmt	(0X99D4,	"Minimum allowed oil pressure for normal operation.\nkPa per RPM");
	MakeDword	(0X99D4);
	MakeName	(0X99D4,	"ENG_OIL_KV_OIL_PRESSURE_MINIMUM");
	MakeDword	(x=0X99D8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X99DC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X99E0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X99E4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X99E8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X99EC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X99F0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X99F4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X99F8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X99FC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X9A00);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X9A04);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X9A08);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X9A0C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X9A10);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X9A14);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(0X9A18);
	MakeName	(0X9A18,	"ENG_OIL_KE_OIL_TEMPERATURE_EQUILIBRIUM");
	MakeRptCmt	(0X9A1A,	"Oil temperature warm-up delay as a function of initial coolant temperature.\nRevs per Deg C");
	MakeWord	(0X9A1A);
	MakeName	(0X9A1A,	"ENG_OIL_KV_OIL_TEMPERATURE_REV_DELAY");
	MakeRptCmt	(0X9A3A,	"Factor to adjust the effect of induction air temperature on oil temperature.\nMultiplier");
	MakeWord	(0X9A3A);
	MakeName	(0X9A3A,	"ENG_OIL_KE_OL_AIR_TEMP_COEFFICIENT");
	MakeRptCmt	(0X9A3C,	"Factor to adjust the effect of coolant temperature on oil temperature.\nMultiplier");
	MakeWord	(0X9A3C);
	MakeName	(0X9A3C,	"ENG_OIL_KE_OL_COOLANT_COEFFICIENT");
	MakeRptCmt	(0X9A3E,	"Factor to adjust the effect of engine speed on oil temperature.\nMultiplier");
	MakeWord	(0X9A3E);
	MakeName	(0X9A3E,	"ENG_OIL_KE_OL_ENGINE_SPEED_COEFFICIENT");
	MakeRptCmt	(0X9A40,	"Factor to adjust the effect of vehicle speed on oil temperature.\nMultiplier");
	MakeDword	(0X9A40);
	MakeName	(0X9A40,	"ENG_OIL_KE_OL_VEHICLE_SPEED_COEFFICIENT");
	MakeRptCmt	(0X9A44,	"Maximum allowed distance between oil changes.  Immediate oil change will be requested if this value is exceeded.\nMiles");
	MakeDword	(0X9A44);
	MakeName	(0X9A44,	"ENG_OIL_KE_RECOMMENDED_MILEAGE");
	MakeRptCmt	(0X9A48,	"Maximum number of effective engine revolutions before an engine oil change is requested.\nRevolutions");
	MakeWord	(0X9A48);
	MakeName	(0X9A48,	"ENG_OIL_KE_REVOLUTION_UNTIL_SERVICE");
	MakeWord	(0X9A4A);
	MakeName	(0X9A4A,	"ENG_OIL_KE_WARMUP_COOLANT_COEFFICIENT");
	MakeRptCmt	(0X9A4C,	"Multiplier used to adjust the effect of coolant temp on estimated oil temp after termostat opens.\nMultiplier");
	MakeName	(0X9A4C,	"ENG_OIL_KE_WARMUP_STAT_OPEN_MULTIPLIER");
	MakeRptCmt	(0X9A4E,	"Determine how many ignition cycles to collect low oil levelsamples prior to turning on low oil level light\nSHORTCARD");
	MakeByte	(0X9A4E);
	MakeName	(0X9A4E,	"ENG_OIL_KE_OIL_LEVEL_IGN_CYCLES");
	MakeRptCmt	(0X9A4F,	"When set to TRUE a stop instruction will be used to fill up the dead time between tasks.\nBOOLEAN");
	MakeByte	(0X9A4F);
	MakeName	(0X9A4F,	"EXECUTIVE_KE_STOP_ENABLED");
	MakeRptCmt	(0X9A50,	"Coolant Temperature must rise above this threshold toenable engine overtemperature protection\nDegrees C");
	MakeWord	(0X9A50);
	MakeName	(0X9A50,	"ENG_PROTECTION_KE_ENGINE_PROTECTION_COOLANT_HIG");
	MakeRptCmt	(0X9A52,	"Coolant temperature threshold below which engine overtemperatureprotection is disabled\nDegrees C");
	MakeWord	(0X9A52);
	MakeName	(0X9A52,	"ENG_PROTECTION_KE_ENGINE_PROTECTION_COOLANT_LOW");
	MakeWord	(0X9A54);
	MakeName	(0X9A54,	"ENG_PROTECTION_KE_ENGINE_PROTECTION_DELAY_TIME");
	MakeRptCmt	(0X9A56,	"Number of engine cycles to run before ramping in or out another cylinder.\nUnitless");
	MakeWord	(0X9A56);
	MakeName	(0X9A56,	"ENG_PROTECTION_KE_CYCLES_BETWEEN_RAMP_STEPS");
	MakeRptCmt	(0X9A58,	"Number of engine cycles to run before switching cylinder groups.\nUnitless");
	MakeWord	(0X9A58);
	MakeName	(0X9A58,	"ENG_PROTECTION_KE_CYCLES_BETWEEN_SWITCHING");
	MakeRptCmt	(0X9A5A,	"Turn on 120 peeps per minute alarm and check gauges lamp when coolant temperature exceeds this value.\nDegrees C");
	MakeWord	(0X9A5A);
	MakeName	(0X9A5A,	"ENG_PROTECTION_KE_ENGINE_ALARM_COOLANT_TEMP");
	MakeRptCmt	(0X9A5C,	"Amount of time to delay engine overheat protection modeafter engine has been running\nSeconds");
	MakeWord	(0X9A5C);
	MakeName	(0X9A5C,	"ENG_PROTECTION_KE_ENGINE_PROTECTION_STARTUP_DEL");
	MakeWord	(0X9A5E);
	MakeName	(0X9A5E,	"ENG_PROTECTION_KE_ENG_SHUTDOWN_CLT_TEMP_OFFSET");
	MakeWord	(0X9A60);
	MakeName	(0X9A60,	"ENG_PROTECTION_KE_ENGINE_SHUTDOWN_COOLANT_TIME");
	MakeRptCmt	(0X9A62,	"Set TRUE to enable engine shutdown based on low coolant switch.\nBOOLEAN");
	MakeByte	(0X9A62);
	MakeName	(0X9A62,	"ENG_PROTECTION_KE_ENG_SHUTDOWN_LOW_CLT_ENABLE");
	MakeRptCmt	(0X9A64,	"Initiate engine shutdown when the 300 beeps per minute alarm has been sounding for this amount of time.\nSeconds");
	MakeWord	(0X9A64);
	MakeName	(0X9A64,	"ENG_PROTECTION_KE_ENGINE_SHUTDOWN_TIME");
	MakeRptCmt	(0X9A66,	"Hysteresis on the Torque_Percentage applied to prevent cyclingbetween the number of cylinders enabled.\nPercent");
	MakeWord	(0X9A66);
	MakeName	(0X9A66,	"ENG_PROTECTION_KE_CYLINDER_CUTOUT_HYSTERESIS");
	MakeRptCmt	(0X9A68,	"Vector specifying first set of cylinders to disable for engine overtemperature protection\nBOOLEAN");
	MakeByte	(0X9A68);
	MakeName	(0X9A68,	"ENG_PROTECTION_KV_CYLINDER_GROUP_ONE");
	MakeRptCmt	(0X9A69,	"Vector specifying second set of cylinders to disable for engine overtemperature protection\nBOOLEAN");
	MakeByte	(0X9A69);
	MakeName	(0X9A69,	"ENG_PROTECTION_KV_CYLINDER_GROUP_TWO");
	MakeRptCmt	(0X9A6A,	"Vector specifying which cylinders to disable for Engine protectionFALSE = DISABLED\nBOOLEAN");
	MakeByte	(0X9A6A);
	MakeName	(0X9A6A,	"ENG_PROTECTION_KV_ENG_PROT_CYLINDERS_TO_DISABLE");
	MakeRptCmt	(0X9A72,	"Vector specifying which cylinders to disable for brake torque management and ETC power management FALSE=DISABLED.\nBOOLEAN");
	MakeName	(0X9A72,	"ENG_PROTECTION_KV_BTM_PM_CYLINDERS_TO_DISABLE");
	MakeRptCmt	(0X9A7A,	"Vector specifing which cylinders to disable for power hop torque management, based on number of cylinders to be disabled.\nBOOLEAN");
	MakeName	(0X9A7A,	"ENG_PROTECTION_KV_POWER_HOP_PM_CYL_TO_DISABLE");
	MakeRptCmt	(0X9A82,	"Engine speed below which the ETC governor attemptsto keep the engine speed.\nRPM");
	MakeName	(0X9A82,	"PROTECTED_KV_ENGINE_SPEED_LIMIT");
	MakeRptCmt	(0X9A96,	"Engine speed threshold for lighting the engine overspeed lamp\nRPM");
	MakeWord	(0X9A96);
	MakeName	(0X9A96,	"PROTECTED_KE_ENGINE_OVERSPEED_LAMP");
	MakeRptCmt	(0X9A98,	"If TRUE the tachometer is pulled up internal to the PCM.\nBOOLEAN");
	MakeName	(0X9A98,	"PROTECTED_KE_TACH_PULLUP_ENABLE");
	MakeRptCmt	(0X9A99,	"Filter coefficient used to first order lag filter engine speed.\nUnitless");
	MakeByte	(0X9A99);
	MakeName	(0X9A99,	"PROTECTED_KE_ENGINE_SPEED_FILTER_COEF");
	MakeRptCmt	(0X9A9A,	"Calibration value at which the engine speed is limited to prevent fan failure due to rotational speed.\nRPM");
	MakeWord	(0X9A9A);
	MakeName	(0X9A9A,	"PROTECTED_KE_FANLOCKUPRPMLIMIT");
	MakeRptCmt	(0X9A9C,	"Engine is considered stopped if no ref pulses have occured in this amount of time.\nSeconds");
	MakeByte	(0X9A9C);
	MakeName	(0X9A9C,	"ENG_STATE_KE_NO_REF_TIME");
	MakeRptCmt	(0X9A9E,	"Ignition must be off for this period of time before the state changes due to ignition being off.\nSeconds");
	MakeWord	(0X9A9E);
	MakeName	(0X9A9E,	"CRITICAL_REGION_KE_IGNITION_OFF_TIME");
	MakeRptCmt	(0X9AA0,	"Amount of time the Engine will stay in the Extended Poweroff state to allow the EVAP diagnostic to run.\nSeconds_L");
	MakeDword	(x=0X9AA0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X9AA0,	"CRITICAL_REGION_KE_EXTENDED_POWEROFF_ON_TIME");
	MakeRptCmt	(0X9AA4,	"Number of consecutive low resolution reference pulses above KV_Startrun_RPM required for transition from Crank to Run.\nPulses");
	MakeDword	(x=0X9AA4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X9AA4,	"CRITICAL_REGION_KV_STARTRUN_PULSES");
	MakeRptCmt	(0X9AC4,	"Engine speed threshold for transition from Crank to Run. See KE_Startrun_Pulses for more information.\nRPM");
	MakeName	(0X9AC4,	"CRITICAL_REGION_KV_STARTRUN_RPM");
	MakeRptCmt	(0X9AE4,	"Maximum net torque output from the engine.\nft-lb");
	MakeWord	(0X9AE4);
	MakeName	(0X9AE4,	"ENG_TORQUE_KE_ENGINE_MAX_TORQUE");
	MakeRptCmt	(0X9AE6,	"Desired axle torque for rear axle protection\nMult0to2");
	MakeWord	(0X9AE6);
	MakeName	(0X9AE6,	"ENG_TORQUE_KE_ENGINE_INERTIA");
	MakeRptCmt	(0X9AE8,	"Interpolation fraction between E0 and E80 fuel for Indicated MBT Torque Efficiency tables.\nMult_0_to_1");
	MakeWord	(0X9AE8);
	MakeName	(0X9AE8,	"ENG_TORQUE_KV_THERMAL_EFF_BLEND_FACTOR");
	MakeDword	(x=0X9AF2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X9AF2,	"ENG_TORQUE_KV_AC_TURN_ON_DELAY");
	MakeRptCmt	(0X9B0E,	"AC compressor turn off delay to prevent engine flareF( AC_Torque_Adjusted ).\nSeconds");
	MakeName	(0X9B0E,	"ENG_TORQUE_KV_AC_TURN_OFF_DELAY");
	MakeName	(0X9B2A,	"ENG_TORQUE_KV_AC_BUMP_AIR_REF_DLY_OFF");
	MakeName	(0X9B38,	"ENG_TORQUE_KV_AC_BUMP_AIR_REF_DLY_ON");
	MakeName	(0X9B40,	"CurveTable_19_Rows_G0107___A_C_Turn_on_Delay_vs_IAT");
	MakeRptCmt	(0X9B46,	"Used to clip and hold the ac bump throttle area for ETC.\nPercent");
	MakeWord	(0X9B46);
	MakeName	(0X9B46,	"ENG_TORQUE_KE_MAXIMUM_AC_BUMP_THROTTLE_AREA");
	MakeRptCmt	(0X9B48,	"Maximum amount of spark retard allowed for AC Bump logic.\nDegrees");
	MakeName	(0X9B48,	"ENG_TORQUE_KA_AC_BUMP_SPARK_RETARD_LIMIT");
	MakeDword	(0X9CC2);
	MakeName	(0X9CC2,	"ENG_TORQUE_KE_UNITS_CONSTANT");
	MakeRptCmt	(0X9CC6,	"Thermal Efficiency factor used in calculating Indicated_MBT_Torque with E0 fuel.\nNONE 0-1");
	MakeDword	(x=0X9CC6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X9CC6,	"ENG_TORQUE_KA_INDICATED_MBT_TORQUE_EFF_E0");
	MakeRptCmt	(0X9F66,	"Thermal Efficiency factor used in calculating Indicated_MBT_Torque with E80 fuel.\nNONE 0-1");
	MakeDword	(x=0X9F66);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X9F66,	"ENG_TORQUE_KA_INDICATED_MBT_TORQUE_EFF_E80");
	MakeName	(0XA1AE,	"CurveTable_14_Rows_B4362___A_C_Clutch_Disengagement_Spark_Delay_??");
	MakeName	(0XA1CA,	"CurveTable_14_Rows_B4360___A_C_Inertia_Torque");
	MakeName	(0XA1E6,	"CurveTable_17_Rows_B4361___A_C_Inertia_Torque_Airflow_Ramp_Out_Rate");
	MakeName	(0XA206,	"ENG_TORQUE_KA_TORQUE_LOSS_FROM_SPARK_RETARD");
	MakeName	(0XA208,	"Flag_0x01_B4359___A_C_Torque_Loss_Spark_Correction_(Idle)_Disable");
	MakeName	(0XA20A,	"CurveTable_14_Rows_B4365___A_C_Clutch_Engagement_Added_Airflow_Time");
	MakeName	(0XA226,	"Constant16______________A_C_Clutch_Disengagement_Torque_Hold_Time");
	MakeRptCmt	(0XA2BA,	"Torque consumed by friction in AC compressor when AC compressor clutch is engaged.\nlb_ft");
	MakeWord	(0XA2BA);
	MakeName	(0XA2BA,	"ENG_TORQUE_KV_AC_COMPRESSOR_TORQUE");
	MakeRptCmt	(0XA2D0,	"AC compressor torque loss due to induction air temperature\nlb_ft");
	MakeName	(0XA2D0,	"ENG_TORQUE_KV_AC_COMP_IAT_TORQUE");
	MakeRptCmt	(0XA2F0,	"Parasitic torque due to powersteering pump and alternator\nlb_ft");
	MakeName	(0XA2F0,	"ENG_TORQUE_KV_ACCESSORY_DRIVE_TORQUE");
	MakeRptCmt	(0XA31A,	"Torque consumed by friction in engine -- base value.\nlb_ft");
	MakeName	(0XA31A,	"ENG_TORQUE_KA_FRICTION_TORQUE");
	MakeRptCmt	(0XA416,	"This is the change in the friction torque due to changesin oil temperature.\nNONE 0-4");
	MakeName	(0XA416,	"ENG_TORQUE_KA_OIL_TEMP_FRICTION_MODIFIER");
	MakeRptCmt	(0XA6B6,	"This is the filter coefficient for indicated MBT torque andindicated MBT torque all cylinders.\nSeconds");
	MakeWord	(0XA6B6);
	MakeName	(0XA6B6,	"ENG_TORQUE_KE_INDICATED_TORQUE_FILTER");
	MakeRptCmt	(0XA6B8,	"Duty cycle broadcast on the Delivered Torque PWM.\nPercent");
	MakeWord	(0XA6B8);
	MakeName	(0XA6B8,	"ENG_TORQUE_KE_STALL_PROTECTION_DUTY_CYCLE");
	MakeRptCmt	(0XA6BA,	"Enables spark for AC Bump logic when TRUE.\nBOOLEAN");
	MakeByte	(0XA6BA);
	MakeName	(0XA6BA,	"ENG_TORQUE_KE_AC_BUMP_SPARK_ENABLE");
	MakeRptCmt	(0XA6BC,	"Amount of time from AC_Commanded_On TRUE to when compressorload hits the engine.\nSeconds");
	MakeWord	(0XA6BC);
	MakeName	(0XA6BC,	"ENG_TORQUE_KE_AC_BUMP_CLUTCH_DELAY");
	MakeRptCmt	(0XA6BE,	"The rate at which the torque is ramped in when the AC compressorclutch engages.\nFoot Pounds");
	MakeWord	(0XA6BE);
	MakeName	(0XA6BE,	"ENG_TORQUE_KE_AC_BUMP_TORQUE_RAMP_IN");
	MakeRptCmt	(0XA6C0,	"The rate at which the torque is ramped out when the AC compressorclutch disengages.\nFoot Pounds");
	MakeWord	(0XA6C0);
	MakeName	(0XA6C0,	"ENG_TORQUE_KE_AC_BUMP_TORQUE_RAMP_OUT");
	MakeRptCmt	(0XA6C2,	"Any delta change in AC Flow Offset that is less than this amount, the variation correction cells will be reset.\nGrams per Second");
	MakeWord	(0XA6C2);
	MakeName	(0XA6C2,	"ENG_TORQUE_KE_AC_FLOW_OFFSET_DELTA");
	MakeRptCmt	(0XA6C4,	"Any non-zero AC_Bump_Torque value that persists for this amountof time will be set to zero.\nSeconds");
	MakeWord	(0XA6C4);
	MakeName	(0XA6C4,	"ENG_TORQUE_KE_AC_BUMP_SPARK_DURATION_LIMIT");
	MakeRptCmt	(0XA6C6,	"Duty cycle broadcast on the Delivered Torque PWM in the eventthat the PCM determines that a shift is in progress.\nPercent");
	MakeWord	(0XA6C6);
	MakeName	(0XA6C6,	"ENG_TORQUE_KE_TCS_SHIFT_DUTY_CYCLE");
	MakeRptCmt	(0XA6C8,	"Lowest duty cycle broadcast on the Delivered Torque PWM for normal conditions.\nPercent");
	MakeWord	(0XA6C8);
	MakeName	(0XA6C8,	"ENG_TORQUE_KE_TCS_DEL_TORQ_DUTY_CYCLE_LOW");
	MakeRptCmt	(0XA6CA,	"Engine speed below which stall protection mode will be enabledwhen TCS_Stall_Protection_Number is below a cal also.\nRPM");
	MakeWord	(0XA6CA);
	MakeName	(0XA6CA,	"ENG_TORQUE_KE_ENGINE_SPEED_STALL");
	MakeRptCmt	(0XA6CC,	"Gain on the derivative term for calculation ofTCS_Stall_Protection_Number.\nScaler 0-16");
	MakeWord	(0XA6CC);
	MakeName	(0XA6CC,	"ENG_TORQUE_KE_TCS_STALL_DELTA_GAIN");
	MakeWord	(0XA6CE);
	MakeName	(0XA6CE,	"ENG_TORQUE_KE_ENG_SPEED_STALL_ABSOLUTE_HI");
	MakeWord	(0XA6D0);
	MakeName	(0XA6D0,	"ENG_TORQUE_KE_ENG_SPEED_STALL_ABSOLUTE_LO");
	MakeRptCmt	(0XA6D2,	"Used to calculate torque PWM minimum\nFraction -1_to_1");
	MakeWord	(0XA6D2);
	MakeName	(0XA6D2,	"ENG_TORQUE_KE_MIN_TORQUE_NORM");
	MakeWord	(0XA6D4);
	MakeName	(0XA6D4,	"ENG_TORQUE_KE_LCT_TRQ_MNG_FAIL_DUTY_CYCLE");
	MakeRptCmt	(0XA6D6,	"Time from KE_HLD_AC_AIR_OFF expiring until AC Bump_Spark Retard is ramped out.  F( AC_Torque_Adjusted ).\nSeconds");
	MakeName	(0XA6D6,	"ENG_TORQUE_KV_AC_BUMP_CLUTCH_OFF_SPK_DLY");
	MakeRptCmt	(0XA6F2,	"The inertia Torque that compensates for the inertia load of the A/C Clutch. F( AC_Torque ).\nFt Pounds");
	MakeName	(0XA6F2,	"ENG_TORQUE_KV_AC_INERTIA_TORQUE");
	MakeRptCmt	(0XA70E,	"Amount of AC Inertia Torque air to ramp out per 12.5ms loop once KV_HLD_AC_AIR_ON timer expires. F( AC_Inertia_Torque ).\nGPS");
	MakeName	(0XA70E,	"ENG_TORQUE_KV_RAMP_INERTIA_AIRFLOW_OUT");
	MakeRptCmt	(0XA730,	"When TRUE, bump spark will not be calculated at idle.\nBOOLEAN");
	MakeByte	(0XA730);
	MakeName	(0XA730,	"ENG_TORQUE_KE_AC_BUMP_SPARK_IDLE_OFF");
	MakeRptCmt	(0XA732,	"Time to hold_AC_Inertia_Torque air following AC_Commanded_On is TRUE.  F( AC_Torque_Adjusted ).\nSeconds");
	MakeName	(0XA732,	"ENG_TORQUE_KV_HLD_AC_AIR_ON");
	MakeRptCmt	(0XA74E,	"Time to hold AC_Torque contribution to CIA beforeramping down to CIA without AC Torque\nSeconds");
	MakeWord	(0XA74E);
	MakeName	(0XA74E,	"ENG_TORQUE_KE_HLD_AC_AIR_OFF");
	MakeRptCmt	(0XA750,	"Lookup for engine accel threshold above which lead governing isenabled as a function of engine speed.\nEngine_Accel_Type_Vs_RPM_Table");
	MakeWord	(0XA750);
	MakeName	(0XA750,	"ETC_ENGINE_AIR_KV_ENG_ACCELERATION_THRESHOLD");
	MakeRptCmt	(0XA77A,	"Integral gain value for the PID engine speed governor indexed withEngine Speed Error.\nRPM_S_Vs_EngSpd_Int_Gain");
	MakeWord	(0XA77A);
	MakeName	(0XA77A,	"ETC_ENGINE_AIR_KV_ENGINE_SPEED_GOV_INT_GAIN");
	MakeRptCmt	(0XA7A4,	"Derivative gain value for the PID engine speed governor indexed with Engine_Speed_Error.\nRPM_S_Vs_EngSpd_Deriv_Gain");
	MakeWord	(0XA7A4);
	MakeName	(0XA7A4,	"ETC_ENGINE_AIR_KV_ENG_SPEED_GOV_DERIVATIVE_GAIN");
	MakeRptCmt	(0XA7CE,	"Proportional gain value for the PID engine speed governor indexed with Engine_Speed_Error.\nRPM_S_Vs_EngSpd_Prop_Gain");
	MakeWord	(0XA7CE);
	MakeName	(0XA7CE,	"ETC_ENGINE_AIR_KV_ENGINE_SPEED_GOV_PROP_GAIN");
	MakeRptCmt	(0XA7F8,	"Integral gain value for the PID vehicle speed governor indexed withDesired_Throttle_Position.\nPercent_Vs_VehSpd_Int_Gain");
	MakeByte	(0XA7F8);
	MakeName	(0XA7F8,	"ETC_ENGINE_AIR_KV_VEH_SPEED_GOV_INT_GAIN");
	MakeRptCmt	(0XA7FE,	"Proportional gain value for the PID vehicle speed governor indexedwith Vehicle speed error.\nMPH_S_Vs_VehSpd_Prop_Gain");
	MakeByte	(0XA7FE);
	MakeName	(0XA7FE,	"ETC_ENGINE_AIR_KV_VEH_SPEED_GOV_PROP_GAIN");
	MakeRptCmt	(0XA80E,	"Vehicle accel threshold above which lead governing is enabled asa function of Vehicle_Acceleration_Error\nMPH_Per_300ms_S_Vs_MPH_Table");
	MakeDword	(x=0XA80E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XA80E,	"ETC_ENGINE_AIR_KV_VEH_ACCELERATION_THRESHOLD");
	MakeDword	(x=0XA812);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0XA816);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeRptCmt	(0XA82E,	"Initial value used for throttle area if less than Desired_Throttle_Position.\nGear_Vs_Percent_Table");
	MakeName	(0XA82E,	"ETC_ENGINE_AIR_KV_ENG_SPEED_GOV_AREA_INITIAL");
	MakeRptCmt	(0XA842,	"Initial value used for throttle area if less than Desired_Throttle_Position and ETC Trans stablization is enabled.\nGear_Vs_Percent_Table");
	MakeName	(0XA842,	"ETC_ENGINE_AIR_KV_TRANS_STAB_GOV_AREA_INITIAL");
	MakeRptCmt	(0XA856,	"Specifies the number of control loops that the PID terms will be initialized upon activation of the engine speed governor.\nGear_Vs_Count_Table");
	MakeName	(0XA856,	"ETC_ENGINE_AIR_KV_ENG_SPD_GOV_PID_DELAY_CNT");
	MakeRptCmt	(0XA860,	"Exit Engine speed gov when speed drops this amout below Engine_ Speed_Max_Limit and RPM_Gov is not the throt cmd source\nRPM");
	MakeWord	(0XA860);
	MakeName	(0XA860,	"ETC_ENGINE_AIR_KE_ENG_SPD_GOV_EXIT_HYSTERESIS");
	MakeRptCmt	(0XA862,	"Lower clamp for engine speed governor speed area\nPercent");
	MakeWord	(0XA862);
	MakeName	(0XA862,	"ETC_ENGINE_AIR_KE_ENGINE_SPD_GOV_AREA_MIN");
	MakeRptCmt	(0XA864,	"Initial value used in lead mode if current throttle area is less than this calibration.\nPercent");
	MakeWord	(0XA864);
	MakeName	(0XA864,	"ETC_ENGINE_AIR_KE_VEH_SPEED_GOV_AREA_INITIAL");
	MakeRptCmt	(0XA866,	"The gain coefficient in the Vehicle speed gov derivative term\nVehicle_Spd_Gain_Type");
	MakeByte	(0XA866);
	MakeName	(0XA866,	"ETC_ENGINE_AIR_KE_VEH_SPEED_DERIVATIVE_GAIN");
	MakeRptCmt	(0XA868,	"Exit vehicle speed gov when speed drops this amout below Vehicle_ Speed_Max_Limit and MPH_Gov is not the throt cmd source\nMPH");
	MakeWord	(0XA868);
	MakeName	(0XA868,	"ETC_ENGINE_AIR_KE_VEH_SPD_GOV_EXIT_HYSTERESIS");
	MakeRptCmt	(0XA86A,	"Lower clamp for governor speed area\nPercent");
	MakeWord	(0XA86A);
	MakeName	(0XA86A,	"ETC_ENGINE_AIR_KE_VEHICLE_SPD_GOV_AREA_MIN");
	MakeRptCmt	(0XA86C,	"Programmed acceleration low vehicle speed.\nMPH");
	MakeWord	(0XA86C);
	MakeName	(0XA86C,	"ETC_ENGINE_AIR_KE_ACCEL_LOW_MPH_THRESHOLD");
	MakeRptCmt	(0XA86E,	"Programmed acceleration High vehicle speed.\nMPH");
	MakeWord	(0XA86E);
	MakeName	(0XA86E,	"ETC_ENGINE_AIR_KE_ACCEL_HIGH_MPH_THRESHOLD");
	MakeRptCmt	(0XA870,	"Programmed acceleration low vehicle speed acceleration rate.\nMPH_Per_Second_S");
	MakeWord	(0XA870);
	MakeName	(0XA870,	"ETC_ENGINE_AIR_KE_LOW_SPEED_ACCEL_RATE");
	MakeRptCmt	(0XA872,	"Programmed acceleration Medium vehicle speed acceleration rate.\nMPH_Per_Second_S");
	MakeWord	(0XA872);
	MakeName	(0XA872,	"ETC_ENGINE_AIR_KE_MEDIUM_SPEED_ACCEL_RATE");
	MakeRptCmt	(0XA874,	"Programmed acceleration High vehicle speed acceleration rate.\nMPH_Per_Second_S");
	MakeWord	(0XA874);
	MakeName	(0XA874,	"ETC_ENGINE_AIR_KE_HIGH_SPEED_ACCEL_RATE");
	MakeRptCmt	(0XA876,	"Programmed acceleration proportional gain term.\nPercent_S");
	MakeWord	(0XA876);
	MakeName	(0XA876,	"ETC_ENGINE_AIR_KE_ACCEL_GOVERNOR_PROPORTIONAL_G");
	MakeRptCmt	(0XA878,	"Programmed acceleration integral gain term.\nVehicle_Accel_Int_Gain_Type");
	MakeByte	(0XA878);
	MakeName	(0XA878,	"ETC_ENGINE_AIR_KE_ACCEL_GOVERNOR_INTEGRAL_GAIN");
	MakeRptCmt	(0XA87A,	"Clamp for max throttle commanded when vehicle speed is too low\nPercent");
	MakeWord	(0XA87A);
	MakeName	(0XA87A,	"ETC_ENGINE_AIR_KE_LOW_SPEED_MAX_AREA");
	MakeRptCmt	(0XA87C,	"Coefficient used to filter vehicle speed for core ETC algorithm\nCoefficient");
	MakeWord	(0XA87C);
	MakeName	(0XA87C,	"ETC_ENGINE_AIR_KE_VEHICLE_SPEED_FILT_COEF");
	MakeRptCmt	(0XA87E,	"Used to prevent engine speed governor from executing.\nBOOLEAN");
	MakeByte	(0XA87E);
	MakeName	(0XA87E,	"ETC_ENGINE_AIR_KE_ENGINE_SPEED_GOV_ENABLED");
	MakeRptCmt	(0XA87F,	"Used to determine if two bank fuel control is to be used or not.\nBOOLEAN");
	MakeByte	(0XA87F);
	MakeName	(0XA87F,	"FUEL_KE_TWO_BANK_FUEL_CONTROL");
	MakeRptCmt	(0XA880,	"Time period for transitioning to reduced or failed performance\nSeconds");
	MakeWord	(0XA880);
	MakeName	(0XA880,	"ETC_PEDAL_KE_PEDAL_TRANSITION_INTERVAL");
	MakeRptCmt	(0XA882,	"Indicated pedal position to load scaler.\nScaler_4");
	MakeWord	(0XA882);
	MakeName	(0XA882,	"ETC_PEDAL_KE_PEDAL_ROTATION_SCALER");
	MakeRptCmt	(0XA884,	"Deadband subrtracted from pedal position for pedal load\nPercent");
	MakeWord	(0XA884);
	MakeName	(0XA884,	"ETC_PEDAL_KE_RELAXED_PEDAL_DEADBAND");
	MakeRptCmt	(0XA886,	"Lookup reduced performance desired throttle area vs pedal load.\nPercent_Area_Vs_Percent_Table");
	MakeWord	(0XA886);
	MakeName	(0XA886,	"ETC_PEDAL_KV_PEDAL_AREA_REDUCED");
	MakeDword	(x=0XA888);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeRptCmt	(0XA8C8,	"Lookup for hysteresis in indicated pedal position vs. position.\nPercent_Vs_Percent_Table");
	MakeWord	(0XA8C8);
	MakeName	(0XA8C8,	"ETC_PEDAL_KV_PEDAL_HYSTERESIS");
	MakeRptCmt	(0XA90A,	"Engine / Pedal inactivity time limit for battery saver enable.\nSeconds");
	MakeWord	(0XA90A);
	MakeName	(0XA90A,	"ETC_PEDAL_KE_BATTERY_SAVER_TIME");
	MakeRptCmt	(0XA90C,	"Pedal area as a function of pedal rotation and altitude (baro).\nPercent Pedal Area");
	MakeDword	(x=0XA90C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XA90C,	"ETC_PEDAL_KA_PEDAL_AREA_A");
	MakeRptCmt	(0XABA0,	"Pedal area as a function of pedal rotation and altitude (baro) with trailer mode engaged.\nPercent Pedal Area");
	MakeDword	(x=0XABA0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XABA0,	"ETC_PEDAL_KA_PEDAL_AREA_B");
	MakeRptCmt	(0XAE34,	"REDUNDANT time period for transitioning to reduced or failed      performance\nR_Seconds");
	MakeDword	(x=0XAE34);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XAE34,	"ETC_R_PEDAL_KE_R_PEDAL_TRANSITION_INTERVAL");
	MakeRptCmt	(0XAE38,	"REDUNDANT Indicated pedal position to Rotation scaler.\nR_Scaler_4");
	MakeWord	(0XAE38);
	MakeName	(0XAE38,	"ETC_R_PEDAL_KE_R_PEDAL_ROTATION_SCALER");
	MakeRptCmt	(0XAE3A,	"REDUNDANT Deadband subrtracted from pedal position for the pedal load\nR_Percent");
	MakeWord	(0XAE3A);
	MakeName	(0XAE3A,	"ETC_R_PEDAL_KE_R_RELAXED_PEDAL_DEADBAND");
	MakeRptCmt	(0XAE3C,	"REDUNDANT Lookup reduced performance desired throttle area vs  pedal load.\nR_Percent_Area_Vs_R_Percnt_Table");
	MakeDword	(x=0XAE3C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XAE3C,	"ETC_R_PEDAL_KV_R_PEDAL_AREA_REDUCED");
	MakeRptCmt	(0XAE7E,	"REDUNDANT Lookup for hysteresis in indicated pedal position vs.  position.\nR_Percent_Vs_R_Percent_Table");
	MakeName	(0XAE7E,	"ETC_R_PEDAL_KV_R_PEDAL_HYSTERESIS");
	MakeRptCmt	(0XAEC0,	"REDUNDANT Pedal area as a function of altitude (baro).\nPercent Pedal Area");
	MakeDword	(x=0XAEC0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XAEC0,	"ETC_R_PEDAL_KA_R_PEDAL_AREA_A");
	MakeRptCmt	(0XB154,	"REDUNDANT Pedal area as a function of altitude (baro) with trailer mode engaged.\nPercent Pedal Area");
	MakeDword	(x=0XB154);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XB154,	"ETC_R_PEDAL_KA_R_PEDAL_AREA_B");
	MakeName	(0XB270,	"CurveTable_5_Rows_Key_on_Initial_Fuel_Prime_Baro_Correction");
	MakeName	(0XB27A,	"CurveTable_16_Rows_B3201___Key_on_Initial_Fuel_Prime_Pulse_");
	MakeName	(0XB29A,	"SurfaceTable_2x16_Non_Sequential_Fuel_Pulse");
	MakeName	(0XB2DA,	"SurfaceTable_2x16_Non_Sequential_Fuel_Pulse_Delay");
	MakeName	(0XB2FA,	"CurveTable_16_Rows_B3202___Key_on_Initial_Fuel_Prime_Delay");
	MakeName	(0XB31A,	"CurveTable_16_Rows_B3203___Key_on_Initial_Fuel_Prime_Timer");
	MakeName	(0XB33A,	"Constant16_Prime_Pulse_Disable_RPM_Threshold");
	MakeName	(0XB33C,	"Flag_0x01_Check_fuel_pump_voltage_for_prime_pulse_delivery_??");
	MakeName	(0XB33E,	"Constant32_Prime_Pulse_Heat_Soak_Correction_Runtime");
	MakeName	(0XB342,	"Constant16_Prime_Pulse_Heat_Soak_Correction_Temperature");
	MakeName	(0XB344,	"Constant32_Key_on_Initial_Prime_Pulse_Re_enable_Time");
	MakeName	(0XB348,	"CurveTable_29_Rows_Key_on_Initial_Fuel_Prime_Pulse_Heat_Soak_Correction");
	MakeName	(0XB382,	"SurfaceTable_2x29_Non_Sequential_Fuel_Pulse_Heat_Soak_Correction");
	MakeRptCmt	(0XB3E8,	"REDUNDANT throttle area to throttle angle conversion table.\nR_Rotation_Vs_Area_Table");
	MakeDword	(x=0XB3E8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XB3E8,	"ETC_R_THROTTLE_KV_R_THROTTLE_ROTATION");
	MakeName	(0XB3F6,	"Constant16______________DFCO_M6_Exit_Spark_Advance_Restore_Rate");
	MakeName	(0XB3F8,	"Constant8______________DFCO_Spark_Decay_Delay");
	MakeName	(0XB3FA,	"Constant16_B5938___DFCO_Spark_High_TPS_threshold");
	MakeName	(0XB3FC,	"Constant16_B5940___DFCO_Spark_Low_TPS_threshold");
	MakeName	(0XB3FE,	"Constant8_B3337___DFCO_Spark_Transition_Delay");
	MakeName	(0XB3FF,	"Flag_0x01______________DFCO_Spark_Advance_Ramp_Out_at_Exit");
	MakeName	(0XB400,	"CurveTable_21_Rows_B5937___DFCO_Spark_Timing__High_TPS");
	MakeName	(0XB42A,	"CurveTable_21_Rows_B5939___DFCO_Spark_Timing__Low_TPS");
	MakeName	(0XB454,	"CurveTable_17_Rows_B3335___DFCO_Exit_Spark_Advance_Restore_Rate");
	MakeRptCmt	(0XB476,	"REDUNDANT Max permitted Throttle angle vs RPM for reduced induction noise and improves transient response without losing power.\nR_Rotation_Vs_RPM_Table");
	MakeName	(0XB476,	"ETC_R_THROTTLE_KV_R_MAX_THROTTLE_POSITION");
	MakeRptCmt	(0XB498,	"REDUNDANT max permitted Throttle angle vs indicated pedal position in normal operating modes.\nR_Rotation_Vs_Percent_By10_Table");
	MakeName	(0XB498,	"ETC_R_THROTTLE_KV_R_MAX_ALLOWED_NORMAL_THROTTLE");
	MakeName	(0XB4A0,	"CurveTable_21_Rows_B3334___DFCO_Entering_Spark_Advance_Decay_Rate");
	MakeRptCmt	(0XB4AE,	"REDUNDANT Maximum idle area contribution allowed for ETC\nR_Percent Area_Area");
	MakeWord	(0XB4AE);
	MakeName	(0XB4AE,	"ETC_R_THROTTLE_KE_R_MAX_IDLE_AREA");
	MakeRptCmt	(0XB4B0,	"REDUNDANT limit the authority of drop throttle to command the  throttle\nR_Percent_Area");
	MakeWord	(0XB4B0);
	MakeName	(0XB4B0,	"ETC_R_THROTTLE_KE_R_MAX_MIN_TORQUE_AUTHORITY");
	MakeRptCmt	(0XB4B2,	"REDUNDANTMaximum throttle position that Drag control can command\nR_Pedal_Rotation");
	MakeWord	(0XB4B2);
	MakeName	(0XB4B2,	"ETC_R_THROTTLE_KE_R_MAX_DRAG_THROTTLE_POSITION");
	MakeRptCmt	(0XB4B4,	"Maximum throttle position that idle control can command.\nR_Pedal_Rotation");
	MakeWord	(0XB4B4);
	MakeName	(0XB4B4,	"ETC_R_THROTTLE_KE_R_MAX_IDLE_THROTTLE_POSITION");
	MakeRptCmt	(0XB4B6,	"Maximum throttle position that limited power mode is allowed.\nR_Pedal_Rotation");
	MakeWord	(0XB4B6);
	MakeName	(0XB4B6,	"ETC_R_THROTTLE_KE_R_LIMITED_POWER_MAX_THROT_POS");
	MakeRptCmt	(0XB4B8,	"Min value to prevent throttle from reaching the mechanicalstop\nR_Percent_Rotation");
	MakeWord	(0XB4B8);
	MakeName	(0XB4B8,	"ETC_R_THROTTLE_KE_R_THROTTLE_STOP_MIN_SW");
	MakeRptCmt	(0XB4BA,	"Max value to prevent throttle from reaching the mechanicalstop\nR_Percent_Rotation");
	MakeWord	(0XB4BA);
	MakeName	(0XB4BA,	"ETC_R_THROTTLE_KE_R_THROTTLE_STOP_MAX_SW");
	MakeRptCmt	(0XB4BC,	"Used to rescale des throttle area unfiltered to account for themechanical stop for area to rotation conversion lookups\nR_Percent_Area");
	MakeWord	(0XB4BC);
	MakeName	(0XB4BC,	"ETC_R_THROTTLE_KE_R_MIN_MECHANICAL_POSITION_AR");
	MakeRptCmt	(0XB4BE,	"Number of 18.75 ms loops that the throttle position can be abovethe max allowed throttle position.\nR_SHORTCARD");
	MakeWord	(0XB4BE);
	MakeName	(0XB4BE,	"ETC_R_THROTTLE_KE_R_THROTTLE_HI_LIMIT_PERIOD");
	MakeRptCmt	(0XB4C0,	"The maximum allowed desired throttle delta between current and previous loop.\nR_Percent_Rotation");
	MakeWord	(0XB4C0);
	MakeName	(0XB4C0,	"ETC_R_THROTTLE_KE_R_DELTA_MAX_ALLOW_THROT_LIMIT");
	MakeRptCmt	(0XB4C2,	"Value representing max software stop and would also be defined as 100% throttle position\nRaw_10_Bit_AD_Type");
	MakeWord	(0XB4C2);
	MakeName	(0XB4C2,	"ETC_SERIAL_DATA_KE_TPS_WOT_10BIT_EQUIVALENT");
	MakeRptCmt	(0XB4C4,	"Value representing max software stop and would also be defined as 100% pedal position\nRaw_10_Bit_AD_Type");
	MakeWord	(0XB4C4);
	MakeName	(0XB4C4,	"ETC_SERIAL_DATA_KE_MAX_PPS_IND");
	MakeRptCmt	(0XB4C6,	"Lookup of power management torque based on desired throttle  position and engine speed\nFoot_Pounds_S");
	MakeName	(0XB4C6,	"ETC_SERIAL_DATA_KA_ETC_PM_TORQUE");
	MakeName	(0XB4CA,	"Constant16______________Fuel_Cut_off_Stall_Speed_Threshold");
	MakeName	(0XB4CC,	"Constant16_B3301___Engine_Overspeed_Time_Allowed");
	MakeName	(0XB4CE,	"Constant16_B3330___Fuel_Cut_off_in_P_N");
	MakeName	(0XB4D0,	"Constant16_B3331___Fuel_Re_enable_in_P_N");
	MakeName	(0XB4D2,	"Constant16_B3322___Fuel_Cut_off_VSS_Failed");
	MakeName	(0XB4D4,	"Constant16_B3323___Fuel_Re_enable_VSS_Failed");
	MakeName	(0XB4D6,	"SurfaceTable_2x10_B3303___Fuel_Cut_off_Limiters_in_Gear");
	MakeName	(0XB4FE,	"Constant16_B3333___Fuel_Re_enable_Low_RPM");
	MakeName	(0XB500,	"Constant16_B3332___Fuel_Cut_off_Low_RPM");
	MakeName	(0XB502,	"CurveTable_16_Rows_B3305___Cold_Engine_Rev_Protection_Timer");
	MakeName	(0XB522,	"Constant16______________DFCO_M6_Delay");
	MakeName	(0XB524,	"Constant16______________DFCO_M6_TPS_Hysteresis");
	MakeName	(0XB526,	"Constant16______________DFCO_M6_Time");
	MakeName	(0XB528,	"Constant16______________DFCO_M6_TPS_Delta");
	MakeName	(0XB52A,	"Constant16______________DFCO_M6_Re_Enable_Timer");
	MakeName	(0XB52C,	"Constant16______________DFCO_M6_Enable_Time_Window");
	MakeName	(0XB52E,	"Constant16_B3307___DFCO_Re_Enable_Timer");
	MakeName	(0XB530,	"Constant16_B3308___DFCO_M6_Enable_Temp");
	MakeName	(0XB532,	"Constant16_B3309___DFCO_M6_RPM");
	MakeName	(0XB534,	"Constant16_B3310___DFCO_M6_MAP");
	MakeName	(0XB536,	"Constant16_B3311___DFCO_M6_TPS");
	MakeName	(0XB538,	"Constant16_B3312___DFCO_M6_Speed");
	MakeName	(0XB53A,	"Constant16_B3313___DFCO_Temp_Enable");
	MakeName	(0XB53C,	"Constant16_B3317___DFCO_Throttle_Hysteresis");
	MakeName	(0XB53E,	"Constant16_B3315___DFCO_Vehicle_Speed_Hysteresis");
	MakeName	(0XB540,	"Constant16_B3319___DFCO_RPM_Hysteresis");
	MakeName	(0XB542,	"Constant16_B3321___DFCO_MAP_Hysteresis");
	MakeName	(0XB544,	"CurveTable_5_Rows_B3314___DFCO_Vehicle_Speed_Enable");
	MakeName	(0XB54E,	"SurfaceTable_2x10_B3318___DFCO_RPM");
	MakeName	(0XB576,	"Constant16______________DFCO_Exit_RPM_Delta");
	MakeName	(0XB578,	"Constant16______________DFCO_M6_Exit_RPM_Delta");
	MakeName	(0XB57A,	"SurfaceTable_2x5_B3320___DFCO_MAP");
	MakeRptCmt	(0XB58C,	"Voltage at which the smart pedal/actuator will not function.\nVolts");
	MakeWord	(0XB58C);
	MakeName	(0XB58C,	"ETC_SERIAL_DATA_KE_ETC_LOW_VOLTAGE_THRESHOLD");
	MakeRptCmt	(0XB58E,	"Vacuum level at which braking ability may be inadequate to stop  the vehicle\nkPa");
	MakeDword	(x=0XB58E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XB58E,	"ETC_SERIAL_DATA_KE_SHUTDOWN_VACUUM_TOO_LOW");
	MakeRptCmt	(0XB592,	"Scaler to convert the ETM indicated throttle position in units of counts, to units of percent rotation\nScaler 0 to 4");
	MakeWord	(0XB592);
	MakeName	(0XB592,	"ETC_SERIAL_DATA_KE_IND_THROTTLE_POSITION_SCALER");
	MakeRptCmt	(0XB594,	"Time limit that TPS codes will be masked at low voltage after  engine starts.\nSeconds");
	MakeWord	(0XB594);
	MakeName	(0XB594,	"ETC_SERIAL_DATA_KE_TACM_CLEAR_CODES_TIMER_1");
	MakeRptCmt	(0XB596,	"Upper voltage below which TPS Faults are masked if the engine  is not running.\nVolts");
	MakeWord	(0XB596);
	MakeName	(0XB596,	"ETC_SERIAL_DATA_KE_TACM_FAULT_INHIBIT_MAX_VOLT");
	MakeRptCmt	(0XB598,	"Lower voltage above which TPS Faults are masked if the engine  is not running.\nVolts");
	MakeWord	(0XB598);
	MakeName	(0XB598,	"ETC_SERIAL_DATA_KE_TACM_FAULT_INHIBIT_MIN_VOLT");
	MakeRptCmt	(0XB59A,	"Throttle area to pseudo throttle position conversion table.\nPercent_Vs_Percent_Area_Table");
	MakeWord	(0XB59A);
	MakeName	(0XB59A,	"ETC_THROT_KV_THROTTLE_LOAD");
	MakeName	(0XB5B8,	"Constant16______________DFCO_Enable_Delay___Cat_Overheat_Protection_Active");
	MakeName	(0XB5BA,	"Constant16______________DFCO_Enable_Delay");
	MakeName	(0XB5BC,	"Constant16______________DFCO_Enable_Delay_For_Auto_Trans_Manual_Downshift");
	MakeName	(0XB5C8,	"CurveTable_17_Rows______________DFCO_Time_For_Auto_Trans_Manual_Downshift");
	MakeRptCmt	(0XB5DC,	"Throttle area to throttle rotation conversion table.\nRotation_Vs_Percent_Area_Table");
	MakeWord	(0XB5DC);
	MakeName	(0XB5DC,	"ETC_THROT_KV_THROTTLE_ROTATION");
	MakeName	(0XB5EA,	"SurfaceTable_2x16_B3306___Cold_Engine_Rev_Limiter");
	MakeName	(0XB62A,	"Flag_0x01_Option_byte_for_applying_dynamic_cylinder_fuel_mass");
	MakeName	(0XB62C,	"Constant16_TPS_threshold_to_compensate_for_throttle_opening");
	MakeName	(0XB62E,	"Constant16_B3415___RPM_threshold_to_compensate_for_manifold_fuel_dynamics");
	MakeName	(0XB630,	"Constant16_B3416___TPS_threshold_to_compensate_for_manifold_fuel_dynamics");
	MakeName	(0XB632,	"Constant16_Min_deliverable_injector_PW_for_fuel_dynamics_compensation");
	MakeName	(0XB634,	"Constant16_Throttle_Opening_Compensation_Negative_Fuel_Mass_Limit");
	MakeName	(0XB636,	"Constant16_Throttle_Opening_Compensation_Minimum_Fuel_Mass");
	MakeName	(0XB638,	"CurveTable_16_Rows_B3428___Gain_multiplier_for_previous_throttle_opening_fuel_mass");
	MakeName	(0XB658,	"CurveTable_16_Rows_B3426___Intial_decay_multiplier_for_throttle_opening_compensation_fuel_mass");
	MakeRptCmt	(0XB66A,	"Max permitted Throttle angle vs RPM.  Provides reduced induction noise and improves transient response without losing power.\nRotation_Vs_RPM_Table");
	MakeWord	(0XB66A);
	MakeName	(0XB66A,	"ETC_THROT_KV_MAX_THROTTLE_POSITION");
	MakeName	(0XB678,	"CurveTable_16_Rows_Throttle_Opening_Compensation_Fuel_Mass_Decay_Rate_Multiplier");
	MakeRptCmt	(0XB68C,	"Max permitted Throttle angle vs indicated pedal position in normal operating modes.\nRotation_Vs_Percent_By10_Table");
	MakeWord	(0XB68C);
	MakeName	(0XB68C,	"ETC_THROT_KV_MAX_ALLOWED_NORMAL_THROTTLE");
	MakeName	(0XB698,	"CurveTable_29_Rows_Multiplier_for_compensating_throttle_opening_compensation_fuel_mass_");
	MakeRptCmt	(0XB6A2,	"Lookup of Increasing Throttle Slew Rate in Degrees Per Engine Revolution for manual trans. in 1st gear.\nDegrees_Per_Revolution");
	MakeName	(0XB6A2,	"ETC_THROT_KV_THROT_SLEW_INCR_1ST_GEAR");
	MakeRptCmt	(0XB6C4,	"Lookup of Increasing Throttle Slew Rate in Degrees Per Engine Revolution for manual trans. in 2nd gear.\nDegrees_Per_Revolution");
	MakeName	(0XB6C4,	"ETC_THROT_KV_THROT_SLEW_INCR_2ND_GEAR");
	MakeName	(0XB6D2,	"Constant16_Fuel_From_Wall_Stabilization");
	MakeName	(0XB6D4,	"CurveTable_33_Rows_Impact_Factor_Airflow_Multiplier");
	MakeRptCmt	(0XB6E6,	"Lookup of Increasing Throttle Slew Rate in Degrees Per Engine Revolution for manual trans. in 3rd gear.\nDegrees_Per_Revolution");
	MakeName	(0XB6E6,	"ETC_THROT_KV_THROT_SLEW_INCR_3RD_GEAR");
	MakeRptCmt	(0XB708,	"Lookup of Increasing Throttle Slew Rate in Degrees Per Engine Revolution for manual trans. in 4th gear.\nDegrees_Per_Revolution");
	MakeName	(0XB708,	"ETC_THROT_KV_THROT_SLEW_INCR_4TH_GEAR");
	MakeRptCmt	(0XB72A,	"Lookup of Increasing Throttle Slew Rate in Degrees Per Engine Revolution for manual trans. in 5th gear.\nDegrees_Per_Revolution");
	MakeName	(0XB72A,	"ETC_THROT_KV_THROT_SLEW_INCR_5TH_GEAR");
	MakeRptCmt	(0XB74C,	"Lookup of Increasing Throttle Slew Rate in Degrees Per Engine Revolution for manual trans. in 6th gear.\nDegrees_Per_Revolution");
	MakeName	(0XB74C,	"ETC_THROT_KV_THROT_SLEW_INCR_6TH_GEAR");
	MakeWord	(0XB76E);
	MakeName	(0XB76E,	"ETC_THROT_KE_MIN_SLEW_RPM_1ST_GEAR");
	MakeWord	(0XB770);
	MakeName	(0XB770,	"ETC_THROT_KE_MIN_SLEW_RPM_2ND_GEAR");
	MakeWord	(0XB772);
	MakeName	(0XB772,	"ETC_THROT_KE_MIN_SLEW_RPM_3RD_GEAR");
	MakeWord	(0XB774);
	MakeName	(0XB774,	"ETC_THROT_KE_MIN_SLEW_RPM_4TH_GEAR");
	MakeWord	(0XB776);
	MakeName	(0XB776,	"ETC_THROT_KE_MIN_SLEW_RPM_5TH_GEAR");
	MakeRptCmt	(0XB778,	"Min engine RPM for converting the max throttle angle per manuals.\nRPM");
	MakeWord	(0XB778);
	MakeName	(0XB778,	"ETC_THROT_KE_MIN_SLEW_RPM_6TH_GEAR");
	MakeRptCmt	(0XB77A,	"Maximum idle area contribution allowed for ETC\nPercent_Area");
	MakeWord	(0XB77A);
	MakeName	(0XB77A,	"ETC_THROT_KE_MAX_IDLE_AREA");
	MakeRptCmt	(0XB77C,	"Time limit vehicle accel is allowed to be above an accel forprior to limiting the drag control function.\nSeconds");
	MakeWord	(0XB77C);
	MakeName	(0XB77C,	"ETC_THROT_KE_DRAG_CNTL_ACCEL_TOO_HI_TIME");
	MakeRptCmt	(0XB77E,	"limit on vehicle accel rate during which any drag controlfeature is allowed to be active.\nMPH_Per_300ms");
	MakeByte	(0XB77E);
	MakeName	(0XB77E,	"ETC_THROT_KE_DRAG_CNTL_ACCEL_TOO_HIGH");
	MakeRptCmt	(0XB780,	"Limit the authority of drop throttle to command the throttle\nPercent_Area");
	MakeWord	(0XB780);
	MakeName	(0XB780,	"ETC_THROT_KE_MAX_MIN_TORQUE_AUTHORITY");
	MakeRptCmt	(0XB782,	"Minimum engine speed for converting the max throttle angle per engine rev into an angle change per software loop.\nRPM");
	MakeWord	(0XB782);
	MakeName	(0XB782,	"ETC_THROT_KE_MIN_SLEW_RPM");
	MakeRptCmt	(0XB784,	"Maximum permitted throttle angle change per engine rev when thethrottle is opening.\nPercent_Rotation_Per_Rev");
	MakeWord	(0XB784);
	MakeName	(0XB784,	"ETC_THROT_KE_THROTTLE_SLEW_INCREASE");
	MakeRptCmt	(0XB786,	"Maximum permitted throttle angle change per engine rev when thethrottle is closing.\nPercent_Rotation_Per_Rev");
	MakeWord	(0XB786);
	MakeName	(0XB786,	"ETC_THROT_KE_THROTTLE_SLEW_DECREASE");
	MakeRptCmt	(0XB788,	"Maximum throttle position that Drag control can command.\nPedal_Rotation");
	MakeWord	(0XB788);
	MakeName	(0XB788,	"ETC_THROT_KE_MAX_DRAG_THROTTLE_POSITION");
	MakeRptCmt	(0XB78A,	"Maximum throttle position that idle control can command.\nPedal_Rotation");
	MakeWord	(0XB78A);
	MakeName	(0XB78A,	"ETC_THROT_KE_MAX_IDLE_THROTTLE_POSITION");
	MakeRptCmt	(0XB78C,	"Maximum throttle position that limited power mode is allowed.\nPedal_Rotation");
	MakeWord	(0XB78C);
	MakeName	(0XB78C,	"ETC_THROT_KE_LIMITED_POWER_MAX_THROT_POS");
	MakeRptCmt	(0XB78E,	"Min value to prevent throttle from reaching the mechanicalstop\nPercent_Rotation");
	MakeWord	(0XB78E);
	MakeName	(0XB78E,	"ETC_THROT_KE_THROTTLE_STOP_MIN_SW");
	MakeRptCmt	(0XB790,	"Max value to prevent throttle from reaching the mechanicalstop\nPercent_Rotation");
	MakeWord	(0XB790);
	MakeName	(0XB790,	"ETC_THROT_KE_THROTTLE_STOP_MAX_SW");
	MakeRptCmt	(0XB792,	"Used to rescale des throttle area unfiltered to account for themechanical stop for area to rotation conversion lookups\nPercent_Area");
	MakeWord	(0XB792);
	MakeName	(0XB792,	"ETC_THROT_KE_MIN_MECHANICAL_POSITION_AREA");
	MakeRptCmt	(0XB794,	"Number of 18.75 ms loops that the throttle position can be abovethe max allowed throttle position.\nSHORTCARD");
	MakeByte	(0XB794);
	MakeName	(0XB794,	"ETC_THROT_KE_THROTTLE_HI_LIMIT_PERIOD");
	MakeRptCmt	(0XB795,	"Determines where in the throttle arbitration process the transload is obtained.\nThrottle_Load_Selector_Type");
	MakeByte	(0XB795);
	MakeName	(0XB795,	"ETC_THROT_KE_TRANS_DESIRED_THROTTLE_LOAD");
	MakeByte	(0XB796);
	MakeName	(0XB796,	"ETC_THROT_KE_4WD_LO_THROTTLE_PROG_ENABLE");
	MakeRptCmt	(0XB798,	"Determines which throttle sources will be included in the transmission throttle position load parameter.\nBOOLEAN");
	MakeByte	(0XB798);
	MakeName	(0XB798,	"ETC_THROT_KV_INCLUDE_THROT_SRC_IN_TPS_LOAD");
	MakeByte	(0XB799);
	MakeByte	(0XB79B);
	MakeByte	(0XB79C);
	MakeByte	(0XB79D);
	MakeByte	(0XB79E);
	MakeByte	(0XB79F);
	MakeRptCmt	(0XB7A0,	"Maximum allowed desired throttle delta between current and previous execution loop.\nPercent Rotation");
	MakeWord	(0XB7A0);
	MakeName	(0XB7A0,	"ETC_THROT_KE_DELTA_MAX_ALLOWED_THROT_LIMIT");
	MakeRptCmt	(0XB7A2,	"ETC PTO safety gate. Stationary PTO is disabled if vehicle speed is >= this value.\nMPH");
	MakeWord	(0XB7A2);
	MakeName	(0XB7A2,	"ETC_THROT_KE_MAX_STAT_PTO_MPH");
	MakeRptCmt	(0XB7A4,	"ETC PTO safety gate. Mobile PTO is disabled if vehicle speed is >= this value.\nMPH");
	MakeWord	(0XB7A4);
	MakeName	(0XB7A4,	"ETC_THROT_KE_MAX_MOBILE_PTO_MPH");
	MakeRptCmt	(0XB7A6,	"Coefficient used to filter vehicle speed for ETC Datalogger.\nCoefficient");
	MakeWord	(0XB7A6);
	MakeName	(0XB7A6,	"ETC_DATA_LOGGER_KE_ETC_FLIGHT_RECORD_SPEED_COEF");
	MakeRptCmt	(0XB7A8,	"Delay before Trigger validation period expires\nSeconds");
	MakeWord	(0XB7A8);
	MakeName	(0XB7A8,	"ETC_DATA_LOGGER_KE_TRIGGER_VALIDITY_PERIOD");
	MakeRptCmt	(0XB7AA,	"Maximum deceleration threshold FOR triggering flight recorder\nMPH_Per_300ms_S");
	MakeWord	(0XB7AA);
	MakeName	(0XB7AA,	"ETC_DATA_LOGGER_KE_DECEL_TRIGGER_THRESHOLD");
	MakeRptCmt	(0XB7AC,	"Indicates that vehicle is flex fuel capable.\nTRUE/FALSE");
	MakeByte	(0XB7AC);
	MakeName	(0XB7AC,	"FUEL_COMPOSITION_KE_FLEX_FUEL_EQUIPPED");
	MakeRptCmt	(0XB7AE,	"Minimum fuel composition change to initiate an update of the filtered fuel composition.\nPercent");
	MakeWord	(0XB7AE);
	MakeName	(0XB7AE,	"FUEL_COMPOSITION_KE_FFS_COMP_CHANGE_THRESH");
	MakeRptCmt	(0XB7B0,	"Volume of fuel to be consumed by the engine before a new fuel composition reaches the injector rail.\nLiters");
	MakeWord	(0XB7B0);
	MakeName	(0XB7B0,	"FUEL_COMPOSITION_KE_FFS_COMP_DELAY_VOLUME");
	MakeRptCmt	(0XB7B2,	"Volume of fuel consumed by the engine during which the transition occurs from the old fuel composition to a new one.\nLiters");
	MakeWord	(0XB7B2);
	MakeName	(0XB7B2,	"FUEL_COMPOSITION_KE_FFS_COMP_TRANSITION_VOLUME");
	MakeRptCmt	(0XB7B4,	"Value to be used when fuel composition can not otherwise be determined.\nPercent");
	MakeWord	(0XB7B4);
	MakeName	(0XB7B4,	"FUEL_COMPOSITION_KE_FFS_COMPOSITION_DEFAULT");
	MakeRptCmt	(0XB7B6,	"Frequency of the FFS PWM input corresponding to 0% alcohol.\nHertz");
	MakeWord	(0XB7B6);
	MakeName	(0XB7B6,	"FUEL_COMPOSITION_KE_FFS_0PCT_ALCOHOL_FREQUENCY");
	MakeRptCmt	(0XB7B8,	"Proportional constant for determining fuel composition from the frequency of the FFS PWM input.\nScaler_16_S");
	MakeWord	(0XB7B8);
	MakeName	(0XB7B8,	"FUEL_COMPOSITION_KE_FFS_COMPOSITION_SLOPE");
	MakeRptCmt	(0XB7BA,	"Minimum temperature value measured by the Flex Fuel Sensor.\nDegrees_C");
	MakeWord	(0XB7BA);
	MakeName	(0XB7BA,	"FUEL_COMPOSITION_KE_FFS_MIN_TEMPERATURE");
	MakeRptCmt	(0XB7BC,	"Maximum temperature value measured by the Flex Fuel Sensor.\nDegrees_C");
	MakeWord	(0XB7BC);
	MakeName	(0XB7BC,	"FUEL_COMPOSITION_KE_FFS_MAX_TEMPERATURE");
	MakeRptCmt	(0XB7BE,	"Low time of FFS input PWM corresponding to the minimum temperature value measured by the Flex Fuel Sensor.\nMilliseconds");
	MakeWord	(0XB7BE);
	MakeName	(0XB7BE,	"FUEL_COMPOSITION_KE_FFS_MIN_TEMP_LOW_TIME");
	MakeRptCmt	(0XB7C0,	"Proportional constant for determining fuel temperature from the low time of the Flex Fuel Sensor PWM input.\nMultiplier_-+_1000");
	MakeWord	(0XB7C0);
	MakeName	(0XB7C0,	"FUEL_COMPOSITION_KE_FFS_TEMPERATURE_SLOPE");
	MakeRptCmt	(0XB7C2,	"Gain applied to account for air density charges with barometric pressure.\nNONE 0-2");
	MakeName	(0XB7C2,	"FUEL_CRANK_KV_FUEL_BARO_GAIN");
	MakeRptCmt	(0XB7CC,	"Amount of time to delay after powerup before allowing key on prime pulse to be delivered.\nSeconds");
	MakeWord	(0XB7CC);
	MakeName	(0XB7CC,	"FUEL_CRANK_KV_FUEL_PRESSURE_DELAY");
	MakeRptCmt	(0XB7EC,	"A modifier to Second_Octifire_Prime based on soaktimerif enabled.\nNONE 0_2");
	MakeWord	(0XB7EC);
	MakeName	(0XB7EC,	"FUEL_CRANK_KV_OCTIFIRE2_SOAKTIMER_MODIFIER");
	MakeRptCmt	(0XB826,	"This is the mass of fuel to be injected on the first simultaneous, nonsynchronous (Prime) injection.\nGrams");
	MakeWord	(0XB826);
	MakeName	(0XB826,	"FUEL_CRANK_KV_PRIME_PULSE_MASS");
	MakeRptCmt	(0XB846,	"This is the mass of fuel to be injected on the first simultaneous, synchronous (octifire) injection.\nGrams");
	MakeWord	(0XB846);
	MakeName	(0XB846,	"FUEL_CRANK_KV_FIRST_PULSE_MASS");
	MakeWord	(0XB866);
	MakeName	(0XB866,	"FUEL_CRANK_KV_SECOND_PULSE_MASS");
	MakeByte	(0XB886);
	MakeName	(0XB886,	"FUEL_CRANK_KV_FIRST_OCTIFIRE_REF_COUNT");
	MakeByte	(0XB896);
	MakeName	(0XB896,	"FUEL_CRANK_KV_SECOND_OCTIFIRE_REF_OFFSET");
	MakeRptCmt	(0XB8A6,	"This is the minimum engine run time required to allow a prime pulse to issued.\nSeconds");
	MakeWord	(0XB8A6);
	MakeName	(0XB8A6,	"FUEL_CRANK_KV_PRIME_MIN_RUN_TIME");
	MakeWord	(0XB8C6);
	MakeName	(0XB8C6,	"FUEL_CRANK_KE_PRIME_FUEL_ENG_SPEED_DISABLE");
	MakeRptCmt	(0XB8C8,	"If TRUE look at Pin J1-52 to check if FP dev switch is open, if so don't deliver prime pulse.\nBOOLEAN");
	MakeByte	(0XB8C8);
	MakeName	(0XB8C8,	"FUEL_CRANK_KE_USE_FUEL_PUMP_DEVELOPMENT_SW");
	MakeDword	(x=0XB8CA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XB8CA,	"FUEL_CRANK_KE_SOAKTIMER_ENG_RUNTIME_LIMIT");
	MakeWord	(0XB8CE);
	MakeName	(0XB8CE,	"FUEL_CRANK_KE_SOAKTIMER_COOLANT_LIMIT");
	MakeRptCmt	(0XB8D0,	"Key-on Prime is delivered if the previous key-on primedelivered was at least this time ago which is based onthe soak timer.\nSeconds");
	MakeDword	(0XB8D0);
	MakeName	(0XB8D0,	"FUEL_CRANK_KE_KEY_ON_PRIME_REENABLE_TIME");
	MakeRptCmt	(0XB8D4,	"A modifier to Key_On_Prime based on soaktimer if enabled.\nNONE 0_2");
	MakeWord	(0XB8D4);
	MakeName	(0XB8D4,	"FUEL_CRANK_KV_KEY_ON_SOAKTIMER_MODIFIER");
	MakeRptCmt	(0XB90E,	"A modifier to First_Octifire_Prime based on soaktimerif enabled.\nNONE 0_2");
	MakeWord	(0XB90E);
	MakeName	(0XB90E,	"FUEL_CRANK_KV_OCTIFIRE1_SOAKTIMER_MODIFIER");
	MakeRptCmt	(0XB948,	"Gain applied to account for changes due to fuel alcohol composition\nMult 0 to 4");
	MakeName	(0XB948,	"FUEL_CRANK_KA_FFS_COMPOSITION_GAIN");
	MakeRptCmt	(0XBA06,	"Enable sequential fueling during crank when coolant temperature is less than this calibration.\nDegrees_C");
	MakeWord	(0XBA06);
	MakeName	(0XBA06,	"FUEL_CRANK_KE_CRANK_SEQUENTIAL_COOLANT_ENAB");
	MakeRptCmt	(0XBA08,	"Determines ramp rate of spark advance during exit of aclutch-based DFCO event.\nDegrees");
	MakeWord	(0XBA08);
	MakeName	(0XBA08,	"FUEL_CU_KE_CLUTCH_DFCO_SPK_EXIT_RATE");
	MakeRptCmt	(0XBA0A,	"Number of low res. reference pulse counts to hold continue spark after DFCO exit.\nCounts");
	MakeByte	(0XBA0A);
	MakeName	(0XBA0A,	"FUEL_CU_KE_DFCO_SPK_CONTINUE_REF_COUNT");
	MakeRptCmt	(0XBA0C,	"Throttle position high limit for usage of DFCO continue spark.\nPercent");
	MakeWord	(0XBA0C);
	MakeName	(0XBA0C,	"FUEL_CU_KE_DFCO_SPK_CONTINUE_TPS_HIGH");
	MakeRptCmt	(0XBA0E,	"Throttle position Low limit for usage of DFCO continue spark.\nPercent");
	MakeWord	(0XBA0E);
	MakeName	(0XBA0E,	"FUEL_CU_KE_DFCO_SPK_CONTINUE_TPS_LOW");
	MakeByte	(0XBA10);
	MakeName	(0XBA10,	"FUEL_CU_KE_DFCO_SPK_DISABLED_HOLD_REF");
	MakeByte	(0XBA11);
	MakeName	(0XBA11,	"FUEL_CU_KE_DFCO_SPK_INTERRUPTED_RAMP");
	MakeRptCmt	(0XBA12,	"If throttle position is above the high threshold, then this cal. is used for DFCO continue spark.\nDegrees");
	MakeName	(0XBA12,	"FUEL_CU_KV_DFCO_SPK_CONTINUE_SPARK_HIGH");
	MakeRptCmt	(0XBA3C,	"If throttle position is below the low threshold, then this cal. is used for DFCO continue spark.\nDegrees");
	MakeName	(0XBA3C,	"FUEL_CU_KV_DFCO_SPK_CONTINUE_SPARK_LOW");
	MakeRptCmt	(0XBA66,	"This calibration establishes the rate in which Net Spark Advance will increase during DFCO exit.\nDegrees");
	MakeDword	(x=0XBA66);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XBA66,	"FUEL_CU_KV_DFCO_SPK_EXIT_RAMP_RATE");
	MakeRptCmt	(0XBA88,	"Net Spark advance during DFCO after the ramp is completed.\nDegrees");
	MakeName	(0XBA88,	"FUEL_CU_KV_DFCO_SPK_HOLD_SPARK");
	MakeRptCmt	(0XBAB2,	"This calibration establishes the rate in which Net Spark Advance will decrease during DFCO.\nMultiplier_0_to_1");
	MakeName	(0XBAB2,	"FUEL_CU_KV_DFCO_SPK_ENTRY_RAMP_RATE");
	MakeRptCmt	(0XBADC,	"Min engine speed in which fuel cutoff is still allowed.  Lowerspeeds than this may result in a stall.\nRPM");
	MakeWord	(0XBADC);
	MakeName	(0XBADC,	"FUEL_CU_KE_STALL_ENGINE_SPEED");
	MakeRptCmt	(0XBADE,	"The time that engine speed must exceed the calibratible threshold before fuel is shut off.\nSeconds");
	MakeWord	(0XBADE);
	MakeName	(0XBADE,	"FUEL_CU_KE_ENGINE_OVERSPEED_TIME");
	MakeRptCmt	(0XBAE0,	"This is the Engine Speed above which fuel is shutoff if the transmission is in park or neutral.\nRPM");
	MakeWord	(0XBAE0);
	MakeName	(0XBAE0,	"FUEL_CU_KE_PN_ENGINE_OVERSPEED_HIGH");
	MakeRptCmt	(0XBAE2,	"Engine Speed must fall below this limit before allowing fuel to be turned back on if the transmission is in park or neutral.\nRPM");
	MakeWord	(0XBAE2);
	MakeName	(0XBAE2,	"FUEL_CU_KE_PN_ENGINE_OVERSPEED_LOW");
	MakeRptCmt	(0XBAE4,	"Eng speed above which fuel is shutoff if a VSS failure existsUsed for chassis protection on med duty trucks\nRPM");
	MakeWord	(0XBAE4);
	MakeName	(0XBAE4,	"FUEL_CU_KE_ENG_OVERSPEED_VSS_FAIL_HIGH");
	MakeRptCmt	(0XBAE6,	"Eng speed must fall below before fuel is turned on if a VSS failureexists.  Used for chassis protection on med duty trucks\nRPM");
	MakeWord	(0XBAE6);
	MakeName	(0XBAE6,	"FUEL_CU_KE_ENG_OVERSPEED_VSS_FAIL_LOW");
	MakeName	(0XBAE8,	"FUEL_CU_KV_ENGINE_OVERSPEED_HIGH");
	MakeRptCmt	(0XBAFC,	"This is the calibration that the engine speed must fall below before allowing fuel to be turned back on.\nRPM");
	MakeName	(0XBAFC,	"FUEL_CU_KV_ENGINE_OVERSPEED_LOW");
	MakeRptCmt	(0XBB10,	"Turn fuel on above this RPM if fuel is currently turned off due to low RPM.\nRPM");
	MakeWord	(0XBB10);
	MakeName	(0XBB10,	"FUEL_CU_KE_LOW_RPM_FUEL_CUTOFF_HIGH");
	MakeRptCmt	(0XBB12,	"Turn fuel off below this RPM if fuel is the engine speed has been above KE_Low_RPM_Fuel_Cutoff_High.\nRPM");
	MakeWord	(0XBB12);
	MakeName	(0XBB12,	"FUEL_CU_KE_LOW_RPM_FUEL_CUTOFF_LOW");
	MakeRptCmt	(0XBB14,	"Amount of time that cold engine protection should be enabled\nSeconds");
	MakeWord	(0XBB14);
	MakeName	(0XBB14,	"FUEL_CU_KV_COLD_ENGINE_PROTECTION_TIME");
	MakeRptCmt	(0XBB34,	"Clutch-based DFCO enabling conditions must exist continuously for this long to enable clutch-based DFCO.\nSeconds");
	MakeWord	(0XBB34);
	MakeName	(0XBB34,	"FUEL_CU_KE_CLUTCH_DFCO_ENTRY_DELAY");
	MakeRptCmt	(0XBB36,	"Exit clutch-based DFCO if throttle position increases by more than this amount over a 25 mS interval.\nPercent");
	MakeWord	(0XBB36);
	MakeName	(0XBB36,	"FUEL_CU_KE_CLUTCH_DFCO_EXIT_TPS_INCREASE");
}


static Bytes_2(void) {
        auto x;
#define id x

	MakeRptCmt	(0XBB38,	"The duration of a clutch-based DFCO event.\nSeconds");
	MakeWord	(0XBB38);
	MakeName	(0XBB38,	"FUEL_CU_KE_CLUTCH_DFCO_HOLD_TIME");
	MakeWord	(0XBB3A);
	MakeName	(0XBB3A,	"FUEL_CU_KE_CLUTCH_THROTTLE_DECREASE");
	MakeRptCmt	(0XBB3C,	"Minimum amount of time between clutch-based DFCO events.\nSeconds");
	MakeWord	(0XBB3C);
	MakeName	(0XBB3C,	"FUEL_CU_KE_CLUTCH_DFCO_REENABLE_DELAY");
	MakeRptCmt	(0XBB3E,	"Window of time either before or after the clutch pedal is depressed when a throttle decrease indicates a shift maneuver.\nSeconds");
	MakeWord	(0XBB3E);
	MakeName	(0XBB3E,	"FUEL_CU_KE_CLUTCH_THROTTLE_WINDOW");
	MakeRptCmt	(0XBB40,	"Amount of time to disable DFCO from becoming active after exiting DFCO.\nSeconds");
	MakeWord	(0XBB40);
	MakeName	(0XBB40,	"FUEL_CU_KE_DFCO_REENTRY_DELAY");
	MakeRptCmt	(0XBB42,	"Minimum coolant temperature to enable clutch-based DFCO.\nDegrees_C");
	MakeWord	(0XBB42);
	MakeName	(0XBB42,	"FUEL_CU_KE_CLUTCH_DFCO_COOLANT_TEMP");
	MakeRptCmt	(0XBB44,	"Minimum engine speed to enable clutch-based DFCO.\nRPM");
	MakeWord	(0XBB44);
	MakeName	(0XBB44,	"FUEL_CU_KE_CLUTCH_DFCO_ENGINE_SPEED");
	MakeRptCmt	(0XBB46,	"Maximum manifold pressure to enable clutch-based DFCO.\nkPa");
	MakeWord	(0XBB46);
	MakeName	(0XBB46,	"FUEL_CU_KE_CLUTCH_DFCO_MAP");
	MakeRptCmt	(0XBB48,	"Maximum throttle position to enable clutch-based DFCO.\nPercent");
	MakeWord	(0XBB48);
	MakeName	(0XBB48,	"FUEL_CU_KE_CLUTCH_DFCO_THROTTLE_POSITION");
	MakeRptCmt	(0XBB4A,	"Minimum vehicle speed to enable clutch-based DFCO.\nMPH");
	MakeWord	(0XBB4A);
	MakeName	(0XBB4A,	"FUEL_CU_KE_CLUTCH_DFCO_VEHICLE_SPEED");
	MakeRptCmt	(0XBB4C,	"Minimum coolant to enable DFCO.\nDegrees_C");
	MakeWord	(0XBB4C);
	MakeName	(0XBB4C,	"FUEL_CU_KE_DFCO_COOLANT_TEMPERATURE");
	MakeRptCmt	(0XBB4E,	"Throttle must be < (KV_DFCO_Throttle_Position + this) to keep DFCO enabled.\nPercent");
	MakeWord	(0XBB4E);
	MakeName	(0XBB4E,	"FUEL_CU_KE_DFCO_THROTTLE_HYSTERESIS");
	MakeRptCmt	(0XBB50,	"Hysteresis on vehicle speed during DFCO wait timer\nMPH");
	MakeWord	(0XBB50);
	MakeName	(0XBB50,	"FUEL_CU_KE_DFCO_VEH_SPEED_HYSTERESIS");
	MakeWord	(0XBB52);
	MakeName	(0XBB52,	"FUEL_CU_KE_DFCO_ENGINE_SPEED_HYSTERESIS");
	MakeWord	(0XBB54);
	MakeName	(0XBB54,	"FUEL_CU_KE_DFCO_MANIFOLD_PRESSURE_HYSTER");
	MakeRptCmt	(0XBB56,	"Vehicle speed must be > this to enable DFCO.\nMPH");
	MakeWord	(0XBB56);
	MakeName	(0XBB56,	"FUEL_CU_KV_DFCO_VEHICLE_SPEED");
	MakeRptCmt	(0XBB60,	"Minimum engine speed to enable DFCO.\nRPM");
	MakeName	(0XBB60,	"FUEL_CU_KV_DFCO_ENGINE_SPEED");
	MakeRptCmt	(0XBB74,	"When engine speed goes below this cal with fuel cutoff, the fuel is turned on.\nRPM");
	MakeName	(0XBB74,	"FUEL_CU_KV_DFCO_EXIT_ENGINE_SPEED");
	MakeRptCmt	(0XBB88,	"If the engine speed changes by more than this in a constant time period, a DFCO fast exit will occur.\nRPM_S");
	MakeName	(0XBB88,	"FUEL_CU_KV_DFCO_FAST_EXIT_DELTA_RPM");
	MakeRptCmt	(0XBB8C,	"Maximum manifold pressure to enable DFCO.\nkPa");
	MakeName	(0XBB8C,	"FUEL_CU_KV_DFCO_MANIFOLD_PRESSURE");
	MakeRptCmt	(0XBB96,	"When MAP goes above this cal with fuel cutoff, the fuel is turned on.\nkPa");
	MakeName	(0XBB96,	"FUEL_CU_KV_DFCO_EXIT_MANIFOLD_PRESSURE");
	MakeRptCmt	(0XBBA0,	"Throttle must be < this to enable DFCO.\nPercent");
	MakeWord	(0XBBA0);
	MakeName	(0XBBA0,	"FUEL_CU_KV_DFCO_THROTTLE_POSITION");
	MakeRptCmt	(0XBBCA,	"DFCO enabling conditions must exist continuously for this long to enable DFCO.\nSeconds");
	MakeName	(0XBBCA,	"FUEL_CU_KV_DFCO_ENTRY_TIME");
	MakeWord	(0XBBCE);
	MakeRptCmt	(0XBBD0,	"Total number of reference pulses to factor in residual air for DFCO exits.\nRefs");
	MakeByte	(0XBBD0);
	MakeName	(0XBBD0,	"FUEL_CU_KE_TOTAL_REFS_TO_MODIFY_AIR");
	MakeRptCmt	(0XBBD1,	"Number of reference pulses to factor in residual air using KE_Final_DFCO_Residual_Factor for DFCO exits.\nRefs");
	MakeByte	(0XBBD1);
	MakeName	(0XBBD1,	"FUEL_CU_KE_SECONDARY_REFS_TO_MODIFY_AIR");
	MakeDword	(x=0XBBD2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XBBD2,	"FUEL_CU_KE_INITIAL_DFCO_RESIDUAL_FACTOR");
	MakeDword	(0XBBD6);
	MakeName	(0XBBD6,	"FUEL_CU_KE_FINAL_DFCO_RESIDUAL_FACTOR");
	MakeRptCmt	(0XBBDA,	"Amount of time required to remove excess air added by the auto transmission forced downshift DFCO exit logic.\nSeconds");
	MakeWord	(0XBBDA);
	MakeName	(0XBBDA,	"FUEL_CU_KV_DFCO_TRANS_AIR_DELAY");
	MakeRptCmt	(0XBBFC,	"This is the engine speed above which fuel is shutoff if cold engine protection mode is enabled.\nRPM");
	MakeWord	(0XBBFC);
	MakeName	(0XBBFC,	"FUEL_CU_KV_COLD_ENG_PROT_OVERSPEED_HIGH");
	MakeRptCmt	(0XBC1C,	"The engine speed must fall below this limit before allowing fuel to be turned back on, if cold engine protection is enabled.\nRPM");
	MakeWord	(0XBC1C);
	MakeName	(0XBC1C,	"FUEL_CU_KV_COLD_ENG_PROT_OVERSPEED_LOW");
	MakeRptCmt	(0XBC3C,	"Flag used to enable/disable the calculation and delivery of makeup fuel.\nTRUE | FALSE");
	MakeByte	(0XBC3C);
	MakeName	(0XBC3C,	"FUEL_DY_KE_MAKEUP_FUEL_ENABLED");
	MakeName	(0XBC3E,	"FUEL_DY_KA_K2_PRIOR_STOMP_COMP_REDUCTION");
	MakeRptCmt	(0XBCFC,	"Minimum delta fuel limit to add stomp compensation.\nGrams");
	MakeWord	(0XBCFC);
	MakeName	(0XBCFC,	"FUEL_DY_KV_K4_STOMP_COMP_DELTA_LIMIT");
	MakeRptCmt	(0XBD06,	"Delta mass threshold to disable throttle stomp compensation on tip outs.\nGrams");
	MakeWord	(0XBD06);
	MakeName	(0XBD06,	"FUEL_DY_KV_K5_STOMP_COMP_DELTA_LOW_LIMIT");
	MakeRptCmt	(0XBD10,	"Describes the fraction of the injected pulse that will impact the port wall at 20kPa MAP.\nMult_0_to_1");
	MakeName	(0XBD10,	"FUEL_DY_KA_IMPACT_FACTOR_20KPA_MAP");
	MakeRptCmt	(0XBDCE,	"Describes the fraction of the injected pulse that will impact the port wall at 100kPa MAP.\nMult_0_to_1");
	MakeName	(0XBDCE,	"FUEL_DY_KA_IMPACT_FACTOR_100KPA_MAP");
	MakeRptCmt	(0XBE8C,	"Describes the time it takes for 63% of liquid fuel on port wall to vaporize at 20kPa MAP.\nSeconds");
	MakeName	(0XBE8C,	"FUEL_DY_KA_BOIL_TIME_CONST_20KPA_MAP");
	MakeRptCmt	(0XBF4A,	"Describes the time it takes for 63% of liquid fuel on port wall to vaporize at 100kPa MAP.\nSeconds");
	MakeName	(0XBF4A,	"FUEL_DY_KA_BOIL_TIME_CONST_100KPA_MAP");
	MakeName	(0XBF8C,	"Constant16_B3619___Hot_Enrichment_Mode_Coolant_Temp_Threshold_(Entry)");
	MakeName	(0XBF8E,	"Constant16_B3620___Hot_Enrichment_Mode_Coolant_Temp_Threshold_(Exit)");
	MakeName	(0XBF90,	"Constant16_B3621___Hot_Enrichment_Mode_TPS_Threshold_(Entry)");
	MakeName	(0XBF92,	"Constant16_B3622___Hot_Enrichment_Mode_TPS_Threshold_(Exit)");
	MakeName	(0XBF94,	"Constant16_B3623___Hot_Enrichment_Mode_MAP_Threshold_(Entry)");
	MakeName	(0XBF96,	"Constant16_B3624___Hot_Enrichment_Mode_MAP_Threshold_(Exit)");
	MakeName	(0XBF98,	"Constant16_B3625___Hot_Enrichment_Mode_Speed_Threshold_(Entry)");
	MakeName	(0XBF9A,	"Constant16_B3626___Hot_Enrichment_Mode_Speed_Threshold_(Exit)");
	MakeName	(0XBF9C,	"Constant16______________Hot_Enrichment_Mode_Base_Coolant_Temp");
	MakeName	(0XBF9E,	"Constant16______________Hot_Enrichment_Mode_Enrichment_Factor");
	MakeName	(0XBFA0,	"Constant16_B3606___Hot_Enrichment_Mode_Maximum_AFR");
	MakeName	(0XBFA2,	"Constant16_B3614___PE_Hot_Mode_Coolant_Temp_Threshold");
	MakeName	(0XBFA4,	"Constant16______________PE_TPS_Threshold_Hysteresis_when_in_Catalytic_Overtemp");
	MakeName	(0XBFA8,	"Constant16_B3613___PE_MAP_Threshold");
	MakeName	(0XBFAA,	"Constant16______________PE_MAP_Threshold_Hysteresis");
	MakeName	(0XBFAC,	"CurveTable_19_Rows_B3615___PE_Hot_Mode_Enable");
	MakeName	(0XBFD2,	"CurveTable_19_Rows_B3616___PE_Normal_Mode_Enable");
	MakeName	(0XBFF8,	"CurveTable_19_Rows_B3618___PE_Commanded_Fuel");
	MakeRptCmt	(0XC008,	"Throttle position below which stomp comp will not be applied when exiting DFCO.\nPercent");
	MakeWord	(0XC008);
	MakeName	(0XC008,	"FUEL_DY_KE_DFCO_STOMP_COMP_TPS_MIN");
	MakeWord	(0XC00A);
	MakeName	(0XC00A,	"FUEL_DY_KE_FUEL_IGNORE_WALL_WETTING_RPM");
	MakeWord	(0XC00C);
	MakeName	(0XC00C,	"FUEL_DY_KE_FUEL_IGNORE_WALL_WETTING_TPS");
	MakeWord	(0XC00E);
	MakeName	(0XC00E,	"FUEL_DY_KE_MIN_PULSE_WIDTH");
	MakeName	(0XC010,	"FUEL_DY_KA_K1_INITIAL_STOMP_COMP_TIME_FA");
	MakeName	(0XC01E,	"CurveTable_19_Rows_B3617___PE_Modifier_Based_on_Coolant_Temp");
	MakeName	(0XC044,	"CurveTable_19_Rows_B3641___PE_Modifier_Based_on_Intake_Temp");
	MakeName	(0XC06A,	"SurfaceTable_17x19_B3605___Open_Loop_Commanded_Fuel");
	MakeRptCmt	(0XC0CE,	"The stomp compensation factor is decayed by this multiplier once per second.\nNONE 0_1");
	MakeName	(0XC0CE,	"FUEL_DY_KA_K3_STOMP_COMP_TIME_DECAY");
	MakeRptCmt	(0XC18C,	"A modifier to Stomp_Comp_Time_Decay_Factor based on.soaktimer if enabled.\nNONE 0_2");
	MakeWord	(0XC18C);
	MakeName	(0XC18C,	"FUEL_DY_KV_K1_SOAKTIMER_MODIFIER");
	MakeRptCmt	(0XC1C6,	"Multiplier used to guarantee stability of the Wall  Wetting model.\nNONE 0_2");
	MakeWord	(0XC1C6);
	MakeName	(0XC1C6,	"FUEL_DY_KE_WALL_MASS_FACTOR");
	MakeRptCmt	(0XC1C8,	"Factor, based on air flow, which reduces KA_Boiling_Time_Constant.\nNONE 0_1");
	MakeWord	(0XC1C8);
	MakeName	(0XC1C8,	"FUEL_DY_KV_IMPACT_FACTOR_MODIFIER");
	MakeRptCmt	(0XC20A,	"Normalized fraction describing the impact factor surface relative to the 20kPa and 100kPa MAP extremities.\nScaler_16_S");
	MakeName	(0XC20A,	"FUEL_DY_KA_IMPACT_FACTOR_BLEND_FRACTION");
	MakeName	(0XC2F0,	"CurveTable_16_Rows_B3664___Additional_After_start_Enrichment_Delay");
	MakeName	(0XC300,	"CurveTable_16_Rows_B3665___Additional_After_start_Enrichment_Active");
	MakeName	(0XC310,	"CurveTable_16_Rows_B3627___After_start_Enrichment_Decay_Delay");
	MakeName	(0XC320,	"CurveTable_16_Rows_B3628___After_start_Enrichment_Decay_Rate");
	MakeName	(0XC330,	"CurveTable_16_Rows_B3650___After_start_Enrichment_Decay_Factor");
	MakeName	(0XC350,	"CurveTable_16_Rows_B3630___Park_to_Drive_Enrichment_Decay_Delay");
	MakeRptCmt	(0XC360,	"Normalized fraction describing the boiling time constant surface relative to the 20kPa and 100kPa MAP extremities.\nScaler_16_S");
	MakeName	(0XC360,	"FUEL_DY_KA_BOIL_TIME_CONST_BLND_FRACTION");
	MakeName	(0XC370,	"CurveTable_16_Rows_B3651___Park_to_Drive_Enrichment_Decay_Factor");
	MakeName	(0XC390,	"CurveTable_16_Rows_B3632___After_start_Coolant_Temp_Enrichment");
	MakeName	(0XC3B0,	"CurveTable_16_Rows_B3633___After_start_Intake_Temp_Enrichment");
	MakeName	(0XC3D0,	"CurveTable_16_Rows_B3629___Park_to_Drive_Enrichment");
	MakeName	(0XC3F0,	"CurveTable_29_Rows_B3662___After_start_Enrichment_Factor");
	MakeName	(0XC42A,	"SurfaceTable_29x19_B3661___Restart_Enrichment");
	MakeRptCmt	(0XC4B6,	"Number of reference pulses to delay, after PCM state equal run, before enabling Wall Wetting.\nSHORTCARD");
	MakeByte	(0XC4B6);
	MakeName	(0XC4B6,	"FUEL_DY_KV_INITIAL_WW_DELAY_REFS");
	MakeRptCmt	(0XC4C6,	"Number of reference pulses to delay after engine is running before calculating makeup fuel.\nCARDINAL");
	MakeWord	(0XC4C6);
	MakeName	(0XC4C6,	"FUEL_DY_KE_STARTUP_MAKEUP_DELAY");
	MakeRptCmt	(0XC4C8,	"Selects the cylinder to receive makeup fuel based on the current cylinder.\nCYL NUM");
	MakeName	(0XC4C8,	"FUEL_DY_KV_MAKEUP_FUEL_CHANNEL");
	MakeRptCmt	(0XC4D2,	"Selects the cylinder index for which to calculate makeup fuel based on the cylinder to receive makeup fuel.\nCYL NUM");
	MakeName	(0XC4D2,	"FUEL_DY_KV_MAKEUP_CYLINDER_INDEX");
	MakeRptCmt	(0XC4DC,	"Impact Factor modifier vs Delta Mass and Coolant Temp.\nScaler 0-1");
	MakeName	(0XC4DC,	"FUEL_DY_KA_IMPACT_FACTOR_MODIFIER_2");
	MakeRptCmt	(0XC630,	"Impact Factor modifier vs Delta Mass and Coolant Temp.\nScaler 0-1");
	MakeName	(0XC630,	"FUEL_DY_KA_BOILING_TIME_MODIFIER_2");
	MakeRptCmt	(0XC784,	"Factor, based on air flow, which reduces KA_Boiling_Time_Constant.\nNONE 0_1");
	MakeWord	(0XC784);
	MakeName	(0XC784,	"FUEL_DY_KV_BOILING_TIME_MODIFIER");
	MakeRptCmt	(0XC7C6,	"Scaler used to adjust liters of fuel for fuel economy calculations.\nNONE 0_2");
	MakeWord	(0XC7C6);
	MakeName	(0XC7C6,	"FUEL_ECONOMY_KE_FUEL_ECONOMY_SCALER");
	MakeRptCmt	(0XC7C8,	"Coefficient for filtering instantaneous fuel\nNONE 0-1");
	MakeWord	(0XC7C8);
	MakeName	(0XC7C8,	"FUEL_ECONOMY_KE_INSTANTANEOUS_FILTER_COEFF");
	MakeRptCmt	(0XC7CA,	"Commanded Airfuel Ratio during Green Engine Crank.\nAirfuel Ratio");
	MakeName	(0XC7CA,	"FUEL_EQ_KV_GREEN_ENGINE_AIRFUEL_RATIO");
	MakeRptCmt	(0XC7D0,	"Threshold which throttle position must initially cross for no crank or prime fuel to be delivered.\nPercent");
	MakeWord	(0XC7D0);
	MakeName	(0XC7D0,	"FUEL_EQ_KE_CLEAR_FLOOD_THROTTLE_ENTER");
	MakeRptCmt	(0XC7D2,	"Threshold which throttle position must remain above for no crank or prime fuel to be delivered.\nPercent");
	MakeWord	(0XC7D2);
	MakeName	(0XC7D2,	"FUEL_EQ_KE_CLEAR_FLOOD_THROTTLE_EXIT");
	MakeRptCmt	(0XC7D4,	"Defines the ratio mass of fuel to mass of air for stoichiometric, based on alcohol content of fuel.\nMult_0_to_1");
	MakeWord	(0XC7D4);
	MakeName	(0XC7D4,	"FUEL_EQ_KV_STOICHIOMETRIC_FUEL_AIR");
	MakeWord	(0XC7F6);
	MakeName	(0XC7F6,	"FUEL_EQ_KV_OPEN_LP_EQ_RATIO_BLEND_FACTOR");
	MakeByte	(0XC7F8);
	MakeArray	(0XC7F8,	0X8);
	MakeRptCmt	(0XC800,	"Amount of time after PRNDL shifts into drive before adding park to drive enrichment.\nSeconds");
	MakeWord	(0XC800);
	MakeName	(0XC800,	"FUEL_EQ_KV_PARK_DRIVE_DELAY_TIME");
	MakeRptCmt	(0XC820,	"Equivalence ratio based on engine speed if engine protection is enabled.\nEquiv_Ratio_Type");
	MakeWord	(0XC820);
	MakeName	(0XC820,	"FUEL_EQ_KV_ENGINE_PROTECTION_EQUIVALENCE");
	MakeRptCmt	(0XC84A,	"Absolute ref count defining the end of the normal crank portion of KA_Crank_Equivalence_Ratio.\n1-32");
	MakeByte	(0XC84A);
	MakeName	(0XC84A,	"FUEL_EQ_KE_NORMAL_CRANK_EVENT_LIMIT");
	MakeByte	(0XC84B);
	MakeName	(0XC84B,	"FUEL_EQ_KE_EXTENDED_CRANK_EVENT_LIMIT");
	MakeRptCmt	(0XC84C,	"Coolant temperature above which the hot enrichment state can become active.\nDegrees_C");
	MakeWord	(0XC84C);
	MakeName	(0XC84C,	"FUEL_EQ_KE_HOT_ENRICHMENT_COOLANT_ENTRY_");
	MakeRptCmt	(0XC84E,	"Coolant temperature below which the hot enrichment state will become inactive, used due to hysteresis.\nDegrees_C");
	MakeWord	(0XC84E);
	MakeName	(0XC84E,	"FUEL_EQ_KE_HOT_ENRICHMENT_COOLANT_EXIT_T");
	MakeRptCmt	(0XC850,	"Throttle position above which the hot enrichment state can become active.\nPercent");
	MakeWord	(0XC850);
	MakeName	(0XC850,	"FUEL_EQ_KE_HOT_ENRICHMENT_THROTTLE_ENTRY");
	MakeRptCmt	(0XC852,	"Throttle position below which the hot enrichment state will become inactive, used due to hysteresis.\nPercent");
	MakeWord	(0XC852);
	MakeName	(0XC852,	"FUEL_EQ_KE_HOT_ENRICHMENT_THROTTLE_EXIT_");
	MakeRptCmt	(0XC854,	"Manifold pressure above which the hot enrichment state can become active.\nkPa");
	MakeWord	(0XC854);
	MakeName	(0XC854,	"FUEL_EQ_KE_HOT_ENRICHMENT_MAP_ENTRY_THRE");
	MakeRptCmt	(0XC856,	"Manifold pressure below which the hot enrichment state will become inactive, used due to hysteresis.\nkPa");
	MakeWord	(0XC856);
	MakeName	(0XC856,	"FUEL_EQ_KE_HOT_ENRICHMENT_MAP_EXIT_THRES");
	MakeRptCmt	(0XC858,	"Vehicle speed above which the hot enrichment state can become active.\nMPH");
	MakeWord	(0XC858);
	MakeName	(0XC858,	"FUEL_EQ_KE_HOT_ENRICHMENT_VEH_SPEED_ENTR");
	MakeRptCmt	(0XC85A,	"Vehicle speed below which the hot enrichment state will become inactive, used due to hysteresis.\nMPH");
	MakeWord	(0XC85A);
	MakeName	(0XC85A,	"FUEL_EQ_KE_HOT_ENRICHMENT_VEH_SPEED_EXIT");
	MakeRptCmt	(0XC85C,	"Coolant temperature threshold in which enrichmentwill be applied.\nDegrees_C");
	MakeWord	(0XC85C);
	MakeName	(0XC85C,	"FUEL_EQ_KE_HOT_ENRICHMENT_EQUIVALENCE_OF");
	MakeRptCmt	(0XC85E,	"Percentage of enrichment as a function of coolant temperature.\nMult_0_to_2");
	MakeWord	(0XC85E);
	MakeName	(0XC85E,	"FUEL_EQ_KE_HOT_ENRICHMENT_EQUIVALENCE_MU");
	MakeRptCmt	(0XC860,	"Maximum allowable enrichment equivalence ratio.\nEquiv_Ratio_Type");
	MakeWord	(0XC860);
	MakeName	(0XC860,	"FUEL_EQ_KE_MAXIMUM_ENRICHMENT_EQUIVALENC");
	MakeRptCmt	(0XC862,	"Coolant temperature threshold above which a different enable criteria for PE is used.\nDegrees_C");
	MakeWord	(0XC862);
	MakeName	(0XC862,	"FUEL_EQ_KE_POWER_ENRICHMENT_HOT_TEMP");
	MakeRptCmt	(0XC864,	"Hysteresis to the base throttle threshold to prevent noise from turning PE on and off.\nPercent");
	MakeWord	(0XC864);
	MakeName	(0XC864,	"FUEL_EQ_KE_POWER_ENRICHMENT_THROTTLE_HYS");
	MakeRptCmt	(0XC866,	"Hysteresis to the base throttle threshold to prevent noise from turning PE on and off, while in COT.\nPercent");
	MakeWord	(0XC866);
	MakeName	(0XC866,	"FUEL_EQ_KE_POWER_ENRICHMENT_COT_HYSTERES");
	MakeRptCmt	(0XC868,	"Base MAP threshold to enable PE.\nkPa");
	MakeWord	(0XC868);
	MakeName	(0XC868,	"FUEL_EQ_KE_POWER_ENRICHMENT_MAP_THRESHOL");
	MakeRptCmt	(0XC86A,	"Hysteresis to the base MAP threshold to prevent noise from turning PE on and off.\nkPa");
	MakeWord	(0XC86A);
	MakeName	(0XC86A,	"FUEL_EQ_KE_POWER_ENRICHMENT_MAP_HYSTERES");
	MakeRptCmt	(0XC86C,	"Defines the base enable throttle position for power  enrichment when coolant temperature is above a calibration threshold.\nPercent");
	MakeWord	(0XC86C);
	MakeName	(0XC86C,	"FUEL_EQ_KV_POWER_ENRICHMENT_HOT_THRESHOL");
	MakeName	(0XC878,	"Constant16______________Park_to_Drive_Enrichment_AFR_Threshold");
	MakeName	(0XC87A,	"Flag_0x01_B3668___Additional_After_start_Enrichment_Enable");
	MakeName	(0XC87C,	"Constant16_B3667___Additional_After_start_Decay_Amount");
	MakeName	(0XC87E,	"Constant16_B3666___Additional_After_start_Decay_Rate");
	MakeName	(0XC880,	"Constant16______________PE_Desired_Torque_Threshold");
	MakeName	(0XC882,	"Constant16______________PE_Desired_Torque_Threshold_Hysteresis");
	MakeName	(0XC884,	"Constant16______________PE_TPS_Threshold_Hysteresis_when_in_Torque_Management");
	MakeName	(0XC886,	"CurveTable_16_Rows_B3663___Additional_After_start_Enrichment");
	MakeRptCmt	(0XC892,	"Defines the base enable throttle position for power  enrichment when coolant temperature is below a calibration threshold.\nPercent");
	MakeWord	(0XC892);
	MakeName	(0XC892,	"FUEL_EQ_KV_POWER_ENRICHMENT_COLD_THRESHO");
	MakeName	(0XC8A6,	"SurfaceTable_21x15_B3639___Lean_Cruise_Enleanment");
	MakeRptCmt	(0XC8B8,	"Defines the base equivalence ratio for power enrichment based on RPM.\nEquiv_Ratio_Type");
	MakeWord	(0XC8B8);
	MakeName	(0XC8B8,	"FUEL_EQ_KV_POWER_ENRICHMENT_RPM_EQUIVALE");
	MakeRptCmt	(0XC8DE,	"Used to modify the base equivalence ratio for power enrichment based on coolant.\nEquiv_Ratio_Type");
	MakeWord	(0XC8DE);
	MakeName	(0XC8DE,	"FUEL_EQ_KV_POWER_ENRICHMENT_COOLANT_EQUI");
	MakeRptCmt	(0XC904,	"Used to modify the base equivalence ratio for power enrichment based on IAT. For Holden application.\nEquiv_Ratio_Type");
	MakeWord	(0XC904);
	MakeName	(0XC904,	"FUEL_EQ_KV_POWER_ENRICHMENT_IAT_EQUIV");
	MakeName	(0XC92A,	"FUEL_EQ_KA_OPEN_LOOP_EQ_RATIO_E0");
	MakeName	(0XCB1C,	"SurfaceTable_19x13_Cranking_Enleanment_Factor");
	MakeName	(0XCBB0,	"FUEL_EQ_KA_OPEN_LOOP_EQ_RATIO_E80");
	MakeName	(0XCD0A,	"SurfaceTable_11x15_B3609___PE_Delay_Counter_Adjustment");
	MakeRptCmt	(0XCE36,	"Number of reference pulses after engine run to wait prior to applying Fast Afterstart Enrichment.\nEngine_Revolutions");
	MakeName	(0XCE36,	"FUEL_EQ_KA_FAST_AFTERSTART_APPLY_DELAY");
	MakeName	(0XCE54,	"Constant16_B3608___PE_Delay_Maximal_Time");
	MakeName	(0XCE56,	"Constant16_B3610___PE_Delay_Bypass_RPM");
	MakeName	(0XCE58,	"Constant16______________PE_Delay_Bypass_Delta_RPM");
	MakeName	(0XCE5A,	"Constant16______________PE_Delay_Bypass_Speed_MPH");
	MakeName	(0XCE5C,	"Constant16_B3611___PE_Delay_Bypass_Coolant_Temp_(Upper)");
	MakeName	(0XCE5E,	"Constant16_B3612___PE_Delay_Bypass_Coolant_Temp_(Lower)");
	MakeName	(0XCE60,	"Constant16______________PE_Delay_Bypass_Delta_TPS");
	MakeName	(0XCE62,	"Constant16______________PE_Delay_Bypass_High_Speed_Threshold");
	MakeName	(0XCE64,	"Constant16______________PE_Delay_Reduction_Speed_Negative_Delta_Threshold");
	MakeName	(0XCE66,	"Constant16______________PE_Delay_Reduction_High_Speed_Threshold");
	MakeName	(0XCE68,	"Constant16______________PE_Delay_Reduction_Speed_Positive_Delta_Threshold");
	MakeName	(0XCE6A,	"Constant16______________PE_Delay_Reduction_TPS_Threshold");
	MakeRptCmt	(0XCE9A,	"Number of reference pulses initiated at engine run to start the Fast Afterstart Enrichment decay.\nEngine_Revolutions");
	MakeName	(0XCE9A,	"FUEL_EQ_KA_FAST_AFTERSTART_HOLD_REFS");
	MakeName	(0XCEFE,	"FUEL_EQ_KA_AFTERSTART_DECAY_DELAY");
	MakeRptCmt	(0XCF62,	"This calibration along with the rate of change of KA_Afterstart_Decay_Delay determines the afterstart enrichment decay rate.\nEngine_Revolutions");
	MakeName	(0XCF62,	"FUEL_EQ_KA_AFTERSTART_DECAY_STEP");
	MakeRptCmt	(0XCFC6,	"Decay multiplier applied to the current Afterstart Enrichment.\nNONE 0_1");
	MakeName	(0XCFC6,	"FUEL_EQ_KA_AFTERSTART_DECAY_MULTIPLIER");
	MakeByte	(0XD084);
	MakeName	(0XD084,	"FUEL_EQ_KV_PARK_DRIVE_DECAY_DELAY");
	MakeRptCmt	(0XD094,	"This calibration along with the rate of change of KV_Park_Drive_Decay_Delay determines the park to drive enrichment decay rate.\nEngine_Revolutions");
	MakeByte	(0XD094);
	MakeName	(0XD094,	"FUEL_EQ_KV_PARK_DRIVE_DECAY_STEP");
	MakeRptCmt	(0XD0A4,	"Decay multiplier applied to the current Park to Drive Enrichment.\nNONE 0_1");
	MakeWord	(0XD0A4);
	MakeName	(0XD0A4,	"FUEL_EQ_KV_PARK_DRIVE_DECAY_MULTIPLIER");
	MakeStr		(0XD0A6,	0XD0C6);
	MakeName	(0XD0A6,	"aSSSSSSSSS");
	MakeRptCmt	(0XD182,	"Initial enrichment, based on Induction Air Temperature, to be added to open loop equivalence ratio.\nNONE -1_4");
	MakeWord	(0XD182);
	MakeName	(0XD182,	"FUEL_EQ_KV_INITIAL_IAT_ENRICHMENT");
	MakeRptCmt	(0XD1A2,	"Initial enrichment, applied when a park to drive transition occurs, to be added to open loop equivalence ratio.\nNONE -1_4");
	MakeWord	(0XD1A2);
	MakeName	(0XD1A2,	"FUEL_EQ_KV_INITIAL_PARK_DRIVE_ENRICHMENT");
	MakeRptCmt	(0XD1C2,	"A modifier to Initial_Coolant_Enrichment based onsoaktimer if enabled.\nNONE 0_2");
	MakeWord	(0XD1C2);
	MakeName	(0XD1C2,	"FUEL_EQ_KV_INITIAL_CLT_SOAKTIME_MODIFIER");
	MakeRptCmt	(0XD1FC,	"Initial Hot Soak enrichment based on Time Since EngineLast Ran and Coolant Temperature.\nNONE -32_32");
	MakeName	(0XD1FC,	"FUEL_EQ_KA_INITIAL_HOT_SOAK_ENRICHMENT");
	MakeRptCmt	(0XD64A,	"Maximum amount of KV_Fast_Afterstart Enrichment to allow Park to Drive.\nEquiv_Ratio_S_Type");
	MakeWord	(0XD64A);
	MakeName	(0XD64A,	"FUEL_EQ_KE_FAST_AFTERSTART_PD_MAX");
	MakeRptCmt	(0XD64C,	"Option to enable/disable the Fast Afterstart Enrichment algorithm.\nBOOLEAN");
	MakeByte	(0XD64C);
	MakeName	(0XD64C,	"FUEL_EQ_KE_FAST_AFTERSTART_ENRICH_ENBLD");
	MakeRptCmt	(0XD64E,	"Equivalence ratio decay step for Fast Afterstart Enrichment. Amount decayed every KV_Fast_Afterstart_Decay_Intrvl.\nEquiv_Ratio_S_Type");
	MakeWord	(0XD64E);
	MakeName	(0XD64E,	"FUEL_EQ_KV_FAST_AFTERSTART_DECAY_STEPS");
	MakeRptCmt	(0XD658,	"Number of ref pulses between decay steps for Fast Afterstart Enrichment\nRef Pulses");
	MakeByte	(0XD658);
	MakeName	(0XD658,	"FUEL_EQ_KV_FAST_AFTERSTART_DECAY_INTRVL");
	MakeRptCmt	(0XD65E,	"When PE is not active, Pct_Trq_Des_To_Enable_PE is set to this cal as enabling threshold.\nPercent_0_To_200");
	MakeWord	(0XD65E);
	MakeName	(0XD65E,	"FUEL_EQ_KE_PCT_TRQ_DES_TO_ENABLE_PE");
	MakeRptCmt	(0XD660,	"Pct_Trq_Des_To_Enable_PE threshold hystersis value applied when PE is active.\nPercent_0_To_200");
	MakeWord	(0XD660);
	MakeName	(0XD660,	"FUEL_EQ_KE_HYST_PCT_TRQ_FOR_PE");
	MakeRptCmt	(0XD662,	"PE throttle threshold hysteresis value applied when PE is active and ETC torque management is active.\nPercent");
	MakeWord	(0XD662);
	MakeName	(0XD662,	"FUEL_EQ_KE_TRQ_MGT_PWR_ENRICH_THROT_HYS");
	MakeWord	(0XD664);
	MakeName	(0XD664,	"FUEL_EQ_KV_CRANK_EQ_RATIO_BLEND_FACTOR");
	MakeWord	(0XD67A);
	MakeName	(0XD67A,	"FUEL_EQ_KV_CRANK_EQ_RATIO_E80_FACTOR");
	MakeRptCmt	(0XD6A0,	"Additional coolant and fuel composition based afterstart enrichment.\nNONE 0_4");
	MakeName	(0XD6A0,	"FUEL_EQ_KA_FAST_AFTERSTART_ENRICHMENT");
	MakeRptCmt	(0XD75E,	"Returns the target  for Lean EQ based on the engine load.\nEquiv_Ratio");
	MakeName	(0XD75E,	"FUEL_EQ_KA_LC_FUEL_DELTA");
	MakeRptCmt	(0XD9D4,	"Modifer based on Coolant and RPM to better blend(enlean) from crank fuel to run fuel\nMult_0_to_1");
	MakeName	(0XD9D4,	"FUEL_EQ_KA_CRANK_ER_ENLEAN_MODIFIER");
	MakeName	(0XDBC2,	"FUEL_EQ_KA_PE_DELAY_ADJUSTMENT");
	MakeRptCmt	(0XDD0C,	"PE conditions must exists for this amount before PE is enabled.\nSeconds");
	MakeWord	(0XDD0C);
	MakeName	(0XDD0C,	"FUEL_EQ_KE_PE_DELAY_COUNT");
	MakeRptCmt	(0XDD0E,	"Engine speed threshold to bypass PE_Delay, when RPM is above threshold.\nRPM");
	MakeWord	(0XDD0E);
	MakeName	(0XDD0E,	"FUEL_EQ_KE_PE_DELAY_ENGINE_SPEED");
	MakeRptCmt	(0XDD10,	"Engine speed delta threshold used with vehicle speed to bypass PE_Delay, when RPM is above threshold.\nRPM");
	MakeWord	(0XDD10);
	MakeName	(0XDD10,	"FUEL_EQ_KE_PE_DELAY_ENGINE_SPEED_RISE");
	MakeRptCmt	(0XDD12,	"Vehicle speed threshold used with Engine speed delta criteria to bypass PE_Delay, when MPH is above or equal to threshold.\nMPH");
	MakeWord	(0XDD12);
	MakeName	(0XDD12,	"FUEL_EQ_KE_PE_DELAY_ENGINE_SPEED_RISE_MP");
	MakeRptCmt	(0XDD14,	"Coolant temperature upper window to bypass PE_Delay, when coolant is above threshold.\nDegrees_C");
	MakeWord	(0XDD14);
	MakeName	(0XDD14,	"FUEL_EQ_KE_PE_DELAY_TEMPERATURE_HIGH");
	MakeRptCmt	(0XDD16,	"Coolant temperature lower window to bypass PE_Delay, when coolant is below threshold.\nDegrees_C");
	MakeWord	(0XDD16);
	MakeName	(0XDD16,	"FUEL_EQ_KE_PE_DELAY_TEMPERATURE_LOW");
	MakeRptCmt	(0XDD18,	"Throttle delta threshold used with vehicle speed to bypass PE_Delay, when throttle delta is >= threshold.\nPercent");
	MakeWord	(0XDD18);
	MakeName	(0XDD18,	"FUEL_EQ_KE_PE_DELAY_THROTTLE_RISE");
	MakeRptCmt	(0XDD1A,	"Vehicle speed threshold used with throttle delta to bypass PE_Delay, when MPH is below threshold.\nMPH");
	MakeWord	(0XDD1A);
	MakeName	(0XDD1A,	"FUEL_EQ_KE_PE_DELAY_THROTTLE_RISE_MPH");
	MakeRptCmt	(0XDD1C,	"Vehicle speed delta threshold used to decrement PE_Delay, when MPH decrease >= threshold.\nMPH");
	MakeWord	(0XDD1C);
	MakeName	(0XDD1C,	"FUEL_EQ_KE_PE_DELAY_VEHICLE_SPEED_DROP");
	MakeRptCmt	(0XDD1E,	"Vehicle speed threshold used to decrement PE_Delay, when MPH is below threshold.\nMPH");
	MakeWord	(0XDD1E);
	MakeName	(0XDD1E,	"FUEL_EQ_KE_PE_DELAY_VEHICLE_SPEED_MPH");
	MakeRptCmt	(0XDD20,	"Vehicle speed threshold used to decrement PE_Delay, when MPH increase >= threshold.\nMPH");
	MakeWord	(0XDD20);
	MakeName	(0XDD20,	"FUEL_EQ_KE_PE_DELAY_VEHICLE_SPEED_RISE");
	MakeRptCmt	(0XDD22,	"Throttle position threshold used to decrement PE_Delay, when throttle is above threshold.\nPercent");
	MakeWord	(0XDD22);
	MakeName	(0XDD22,	"FUEL_EQ_KE_PE_DELAY_VEHICLE_SPEED_TPS");
	MakeRptCmt	(0XDD24,	"Lower (lean) limit for final equivalence ration when in anidle condition.\nEquiv_Ratio_Type");
	MakeWord	(0XDD24);
	MakeName	(0XDD24,	"FUEL_EQ_KE_OPEN_LOOP_LEAN_LIMIT");
	MakeRptCmt	(0XDD26,	"Coolant temperature higher than this value will enable piston protection if other conditions are satisfied\nDegrees C");
	MakeWord	(0XDD26);
	MakeName	(0XDD26,	"FUEL_EQ_KE_PP_CLT");
	MakeRptCmt	(0XDD28,	"Delay time in seconds before entering piston protection mode.\nSeconds");
	MakeWord	(0XDD28);
	MakeName	(0XDD28,	"FUEL_EQ_KE_PP_DELAY_TIME");
	MakeRptCmt	(0XDD2A,	"This determines the blending rate\nSeconds");
	MakeWord	(0XDD2A);
	MakeName	(0XDD2A,	"FUEL_EQ_KE_PP_EQ_RAMP_RATE");
	MakeRptCmt	(0XDD2C,	"This determines the amount of change to the current equivalence ratio at each ramp rate.\nEquiv Ratio");
	MakeWord	(0XDD2C);
	MakeName	(0XDD2C,	"FUEL_EQ_KE_PP_EQ_STEPSIZE");
	MakeRptCmt	(0XDD2E,	"Airflow rate higher than this value will enable piston protection if other conditions are satisfied\nGrams/Second");
	MakeWord	(0XDD2E);
	MakeName	(0XDD2E,	"FUEL_EQ_KE_PP_MAF");
	MakeRptCmt	(0XDD30,	"Engine speed higher than this value will enable piston protection if other conditions are satisfied\nRPM");
	MakeWord	(0XDD30);
	MakeName	(0XDD30,	"FUEL_EQ_KE_PP_RPM");
	MakeRptCmt	(0XDD32,	"Throttle position higher than this value will enable piston protection if other conditions are satisfied\nPercent");
	MakeWord	(0XDD32);
	MakeName	(0XDD32,	"FUEL_EQ_KE_PP_TPS");
	MakeRptCmt	(0XDD34,	"When vehicle speed is above this value with other conditions satisfied, it will enable Lean Cruise mode.\nMPH");
	MakeWord	(0XDD34);
	MakeName	(0XDD34,	"FUEL_EQ_KE_LC_VEHICLE_SPEED_HYST_HIGH");
	MakeRptCmt	(0XDD36,	"When vehicle speed is above this value with other conditions satisfied, it will enable Lean Cruise mode.\nMPH");
	MakeWord	(0XDD36);
	MakeName	(0XDD36,	"FUEL_EQ_KE_LC_VEHICLE_SPEED_HYST_LOW");
	MakeRptCmt	(0XDD38,	"Equivalence ratio if piston protection is enabled.\nEquiv_Ratio_Type");
	MakeWord	(0XDD38);
	MakeName	(0XDD38,	"FUEL_EQ_KV_PISTON_PROTECTION_EQUIVALENCE");
	MakeRptCmt	(0XDD62,	"Engine speed threshold to enable PE, when RPM is above or equal to threshold.\nRPM");
	MakeName	(0XDD62,	"FUEL_EQ_KV_POWER_ENRICHMENT_RPM_THRESHOL");
	MakeRptCmt	(0XDD6C,	"Fuel/Air equivalence ratio to use during crankfor gasoline.\nEquiv_Ratio_Type");
	MakeName	(0XDD6C,	"FUEL_EQ_KA_CRANK_EQUIVALENCE_RATIO");
	MakeRptCmt	(0XE22C,	"Step size taken for ramp-in or ramp-out of the PE EQ offset\nEquiv_Ratio_Type");
	MakeWord	(0XE22C);
	MakeName	(0XE22C,	"FUEL_EQ_KE_PE_EQ_STEPSIZE");
	MakeRptCmt	(0XE22E,	"Unit time taken before applying stepsize to ramp-out PE EQ offset\nSeconds");
	MakeWord	(0XE22E);
	MakeName	(0XE22E,	"FUEL_EQ_KE_PE_EQ_RAMP_IN_RATE");
	MakeRptCmt	(0XE230,	"Unit time taken before applying stepsize to ramp-in PE EQ offset\nSeconds");
	MakeWord	(0XE230);
	MakeName	(0XE230,	"FUEL_EQ_KE_PE_EQ_RAMP_OUT_RATE");
	MakeRptCmt	(0XE232,	"This is the step size in which ramping is done.\nEquiv_Ratio_Type");
	MakeWord	(0XE232);
	MakeName	(0XE232,	"FUEL_EQ_KE_LC_EQ_STEP_SIZE");
	MakeRptCmt	(0XE234,	"When engine run time is above this, with other conditions satisfied, it will enable Lean Cruise mode.\nSeconds");
	MakeName	(0XE234,	"FUEL_EQ_KE_LC_ENGINE_RUN_TIME");
	MakeName	(0XE236,	"Constant16_B3635___Lean_Cruise_Off_Idle_Timer");
	MakeRptCmt	(0XE238,	"When Time_Since_Last_Idle is above this with other conditions satisfied, it will enable Lean Cruise mode.\nSeconds");
	MakeWord	(0XE238);
	MakeName	(0XE238,	"FUEL_EQ_KE_LC_TIME_SINCE_IDLE");
	MakeRptCmt	(0XE23A,	"Multiplier used to vary the amount of lean cruise effect during warmup.\n0_to_1");
	MakeWord	(0XE23A);
	MakeName	(0XE23A,	"FUEL_EQ_KV_LC_COOLANT_MULTIPLIER");
	MakeRptCmt	(0XE260,	"Determines if Return to Normal will function after an ICAT intrusive event.\nBoolean");
	MakeByte	(0XE260);
	MakeName	(0XE260,	"FUEL_EQ_KE_ICAT_CAN_ACTIVATE_RTN");
	MakeRptCmt	(0XE261,	"Determines if Return to Normal will function after an POSD intrusive event.\nBoolean");
	MakeByte	(0XE261);
	MakeName	(0XE261,	"FUEL_EQ_KE_POSD_CAN_ACTIVATE_RTN");
	MakeRptCmt	(0XE262,	"Equivalence ratio if Return to Normal is active.\nEquiv_Ratio_Type");
	MakeWord	(0XE262);
	MakeName	(0XE262,	"FUEL_EQ_KE_RETURN_TO_NORMAL_EQ_RATIO");
	MakeRptCmt	(0XE264,	"Max amount time that the Retun to Normal feature will be allowed to be continuously active.\nSeconds");
	MakeWord	(0XE264);
	MakeName	(0XE264,	"FUEL_EQ_KV_PO2_RETURN_TO_NORMAL_MAX_TIME");
	MakeWord	(0XE276);
	MakeName	(0XE276,	"FUEL_IO_KE_BOUNDARY_OFFSET");
	MakeRptCmt	(0XE278,	"Normal pulse end of injection location if engine protection is enabled, in number of lores periods after the boundary.\nLores_Periods");
	MakeWord	(0XE278);
	MakeName	(0XE278,	"FUEL_IO_KE_ENG_PROTECTION_NORMAL_END_OF_");
	MakeRptCmt	(0XE27A,	"Trim pulse end of injection location if engine protection is enabled, in number of lores periods after the boundary.\nLores_Periods");
	MakeWord	(0XE27A);
	MakeName	(0XE27A,	"FUEL_IO_KE_ENG_PROTECTION_TRIM_END_OF_IN");
	MakeWord	(0XE27C);
	MakeName	(0XE27C,	"FUEL_IO_KV_NORMAL_END_OF_INJECTION_COOLA");
	MakeRptCmt	(0XE29C,	"Defines the trim pulse end of injection location, based on coolant temperature, in number of lores periods after the boundary.\n");
	MakeWord	(0XE29C);
	MakeName	(0XE29C,	"FUEL_IO_KV_TRIM_END_OF_INJECTION_COOLANT");
	MakeRptCmt	(0XE2BC,	"Minimum amount of time that an injector must remain off before turning on again.\nMilliseconds");
	MakeWord	(0XE2BC);
	MakeName	(0XE2BC,	"FUEL_IO_KE_MINIMUM_INJECTOR_OFF_TIME");
	MakeRptCmt	(0XE2BE,	"This is the injector offset used to account for injector dynamics due vacuum effects on the trapped sac volume fuel.\nMilliseconds");
	MakeWord	(0XE2BE);
	MakeName	(0XE2BE,	"FUEL_IO_KV_INJECTOR_OFFSET_ADJUSTMENT");
	MakeName	(0XE2E0,	"FUEL_IO_KA_INJECTOR_OFFSET");
	MakeDword	(x=0XE698);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XE698,	"FUEL_IO_KA_FIRST_CYL_TO_GET_SEQUENTIAL");
	MakeRptCmt	(0XE6B8,	"This calibration associates each cylinder with a bank of the engine.\nBank1|Bank2");
	MakeDword	(x=0XE6B8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XE6B8,	"FUEL_IO_KV_BANK_FOR_CYLINDER");
	MakeRptCmt	(0XE6C0,	"Determines whether to update Fuel Pulse Width for the injector based on the current cylinder.\nTRUE|FALSE");
	MakeName	(0XE6C0,	"FUEL_IO_KA_UPDATE_FUEL_CHANNELS");
	MakeRptCmt	(0XE700,	"Threshold below which the vehicle is considered to stationary\nMPH");
	MakeWord	(0XE700);
	MakeName	(0XE700,	"FUEL_IO_KE_AIRBAG_ENG_SHUTDOWN_VEH_SPEED");
	MakeRptCmt	(0XE702,	"Timer above which the vehicle is considered to have been longenough to allow the state of the airbag to shutdown the engine\nSeconds");
	MakeWord	(0XE702);
	MakeName	(0XE702,	"FUEL_IO_KE_AIRBAG_ENG_SHUTDOWN_TIMER");
	MakeRptCmt	(0XE704,	"Coolant must be at least this temperature to enable Desoot mode.\nDegrees_C");
	MakeWord	(0XE704);
	MakeName	(0XE704,	"FUEL_IO_KE_DESOOT_COOLANT_THRESH");
	MakeRptCmt	(0XE706,	"Hysteresis required of coolant temperature to disable Desoot mode.\nDegrees_C");
	MakeWord	(0XE706);
	MakeName	(0XE706,	"FUEL_IO_KE_DESOOT_COOLANT_THRESH_HYSTERE");
	MakeRptCmt	(0XE708,	"MAP must be at least this calibration to enable Desoot mode.\nkPa");
	MakeWord	(0XE708);
	MakeName	(0XE708,	"FUEL_IO_KE_DESOOT_MAP_THRESH");
	MakeRptCmt	(0XE70A,	"Hysteresis required of MAP to disable Desoot mode.\nkPa");
	MakeWord	(0XE70A);
	MakeName	(0XE70A,	"FUEL_IO_KE_DESOOT_MAP_THRESH_HYSTERESIS");
	MakeRptCmt	(0XE70C,	"If MAP falls below this calibration, disable Desoot mode immediately.\nkPa");
	MakeWord	(0XE70C);
	MakeName	(0XE70C,	"FUEL_IO_KE_DESOOT_LO_MAP_EXIT_THRESH");
	MakeRptCmt	(0XE70E,	"Conditions must exist for this amount of time for the Desoot mode to activate.\nSeconds");
	MakeByte	(0XE70E);
	MakeName	(0XE70E,	"FUEL_IO_KE_DESOOT_DELAY_TIME");
	MakeRptCmt	(0XE70F,	"Prevent Desoot mode from affecting the end of injection targets\nBOOLEAN");
	MakeByte	(0XE70F);
	MakeName	(0XE70F,	"FUEL_IO_KE_USE_CRANK_EOIT");
	MakeRptCmt	(0XE710,	"EOIT to use when Desoot mode has been activated\nLores_Periods");
	MakeWord	(0XE710);
	MakeName	(0XE710,	"FUEL_IO_KE_DESOOT_EOIT");
	MakeWord	(0XE712);
	MakeName	(0XE712,	"FUEL_IO_KV_END_OF_INJECTION_CRANK_TARGET");
	MakeRptCmt	(0XE732,	"Allows for scaling of the final injector pulse width for demonstration purposes.\nScaler_0_to_2");
	MakeName	(0XE732,	"FUEL_IO_KV_INJECTOR_TRIM_FACTOR");
	MakeRptCmt	(0XE742,	"Determines whether to update Fuel Pulse Width for the injector based on the current cylinder when DeSoot mode is active\nBOOLEAN");
	MakeName	(0XE742,	"FUEL_IO_KA_DESOOT_UPDATE_FUEL_CHANNELS");
	MakeName	(0XE76A,	"Constant8_???_Option_byte_for_defining_number_of_O2_heaters_the_PCM_controls");
	MakeRptCmt	(0XE782,	"Number of Ref pulses after sync that must occur before sequentialfuel delivery to allow prime fuel to be used.\nSHORTCARD");
	MakeName	(0XE782,	"FUEL_IO_KV_FIRST_FUEL_DELAY");
	MakeRptCmt	(0XE786,	"\n");
	MakeWord	(0XE786);
	MakeName	(0XE786,	"FUEL_IO_KE_MINIMUM_TRIM_PULSE_WIDTH");
	MakeRptCmt	(0XE788,	"Used to determine if canister purge is active or inactive.\nPercent");
	MakeWord	(0XE788);
	MakeName	(0XE788,	"FUEL_LO_KE_CANISTER_LIMIT");
	MakeRptCmt	(0XE78A,	"Provides more stability when transitioning from one cell to another.\nRPM");
	MakeWord	(0XE78A);
	MakeName	(0XE78A,	"FUEL_LO_KE_RPM_HYSTERESIS");
	MakeRptCmt	(0XE78C,	"Provides more stability when transitioning from one cell to another.\nkPa");
	MakeWord	(0XE78C);
	MakeName	(0XE78C,	"FUEL_LO_KE_MAP_HYSTERESIS");
	MakeRptCmt	(0XE78E,	"Throttle threshold used to determine idle condition.\nPercent");
	MakeWord	(0XE78E);
	MakeName	(0XE78E,	"FUEL_LO_KE_LONG_TERM_IDLE_THROTTLE_THRES");
	MakeRptCmt	(0XE790,	"Vehicle speed threshold used to determine idle condition.\nMPH");
	MakeWord	(0XE790);
	MakeName	(0XE790,	"FUEL_LO_KE_LONG_TERM_IDLE_VEH_SPEED_THRE");
	MakeRptCmt	(0XE792,	"Boundary for cells based on engine speed.\nRPM");
	MakeWord	(0XE792);
	MakeName	(0XE792,	"FUEL_LO_KV_RPM_BOUNDARY");
	MakeWord	(0XE794);
	MakeWord	(0XE796);
	MakeRptCmt	(0XE798,	"Boundary for cells based on manifold pressure.\nkPa");
	MakeWord	(0XE798);
	MakeName	(0XE798,	"FUEL_LO_KV_MAP_BOUNDARY");
	MakeWord	(0XE79A);
	MakeWord	(0XE79C);
	MakeRptCmt	(0XE79E,	"Allow blending if target is below the current long term correction.\nTRUE|FALSE");
	MakeByte	(0XE79E);
	MakeName	(0XE79E,	"FUEL_LO_KE_BLENDING_SELECTED");
	MakeRptCmt	(0XE7A0,	"Time between long term memory blends.\nSeconds");
	MakeWord	(0XE7A0);
	MakeName	(0XE7A0,	"FUEL_LO_KE_BLENDING_TIMER");
	MakeWord	(0XE7A2);
	MakeName	(0XE7A2,	"Constant16_LTFT_Enleanment_Rate_Limit_Update_Rate__O2__2");
	MakeRptCmt	(0XE7A4,	"If cell value changes more than this, reset integrator to 1.0.\nNONE 0-2");
	MakeWord	(0XE7A4);
	MakeName	(0XE7A4,	"FUEL_LO_KE_LONG_TERM_DELTA");
	MakeRptCmt	(0XE7A6,	"Factor to reduce PLM by before applying to pulse width.\nNONE 0-1");
	MakeWord	(0XE7A6);
	MakeName	(0XE7A6,	"FUEL_LO_KV_PLM_REDUCTION_FACTOR");
	MakeRptCmt	(0XE7E8,	"Minimum coolant temperature to allow long term cell update.\nDegrees_C");
	MakeWord	(0XE7E8);
	MakeName	(0XE7E8,	"FUEL_LO_KE_ADAPTIVE_LOW_COOLANT_LIMIT");
	MakeRptCmt	(0XE7EA,	"Maximum coolant temperature to allow long term cell update.\nDegrees_C");
	MakeWord	(0XE7EA);
	MakeName	(0XE7EA,	"FUEL_LO_KE_ADAPTIVE_HIGH_COOLANT_LIMIT");
	MakeRptCmt	(0XE7EC,	"Indicates long term cell update is enabled.\nTRUE|FALSE");
	MakeByte	(0XE7EC);
	MakeName	(0XE7EC,	"FUEL_LO_KE_LONG_TERM_CORRECTION_ENABLED");
	MakeRptCmt	(0XE7EE,	"Amount the integrator must be above or below 1.0 for an update to occur.\nNONE 0-2");
	MakeWord	(0XE7EE);
	MakeName	(0XE7EE,	"FUEL_LO_KE_UPDATE_THRESHOLD");
	MakeRptCmt	(0XE7F0,	"Value of the long term update amount.\nNONE 0-2");
	MakeWord	(0XE7F0);
	MakeName	(0XE7F0,	"FUEL_LO_KE_UPDATE_DELTA");
	MakeRptCmt	(0XE7F2,	"Minimum long term correction.\nNONE 0-2");
	MakeWord	(0XE7F2);
	MakeName	(0XE7F2,	"FUEL_LO_KE_LONG_TERM_MINIMUM");
	MakeRptCmt	(0XE7F4,	"Maximum long term correction for idle purge cells.\nNONE 0-2");
	MakeWord	(0XE7F4);
	MakeName	(0XE7F4,	"FUEL_LO_KE_LONG_TERM_IDLE_MAXIMUM");
	MakeRptCmt	(0XE7F6,	"Minimum long term correction for idle purge cells.\nNONE 0-2");
	MakeWord	(0XE7F6);
	MakeName	(0XE7F6,	"FUEL_LO_KE_LONG_TERM_IDLE_MINIMUM");
	MakeRptCmt	(0XE7F8,	"Maximum long term correction.\nNONE 0-2");
	MakeWord	(0XE7F8);
	MakeName	(0XE7F8,	"FUEL_LO_KE_LONG_TERM_MAXIMUM");
	MakeRptCmt	(0XE7FA,	"Time required for update condition to exist to allow Long Term Adaptive update.\nSeconds");
	MakeWord	(0XE7FA);
	MakeName	(0XE7FA,	"FUEL_LO_KE_LONG_TERM_UPDATE_RATE");
	MakeRptCmt	(0XE7FC,	"Value to increase PLM by when learning up.\nNONE 0-2");
	MakeWord	(0XE7FC);
	MakeName	(0XE7FC,	"FUEL_LO_KE_PLM_INCREASE_DELTA");
	MakeRptCmt	(0XE7FE,	"Value to reduce PLM by when learning down.\nNONE 0-2");
	MakeWord	(0XE7FE);
	MakeName	(0XE7FE,	"FUEL_LO_KE_PLM_REDUCTION_DELTA");
	MakeRptCmt	(0XE800,	"Max BLM which can be learned in KAM for non-CCP cells\nNONE 0-2");
	MakeWord	(0XE800);
	MakeName	(0XE800,	"FUEL_LO_KE_ADAPTIVE_NON_PURGE_MAX_KAM_LI");
	MakeRptCmt	(0XE802,	"Max BLM which can be learned in KAM for CCP cells\nNONE 0-2");
	MakeWord	(0XE802);
	MakeName	(0XE802,	"FUEL_LO_KE_ADAPTIVE_PURGE_MAX_KAM_LIMIT");
	MakeRptCmt	(0XE804,	"Minimum block learn modifier which can be learned in KAM.\nNONE 0-2");
	MakeName	(0XE804,	"FUEL_LO_KV_ADAPTIVE_MIN_KAM_LIMIT");
	MakeRptCmt	(0XE80A,	"If the BLM for the cell falls more than this offset below the BLM in KAM for the cell, the PLM is decrease.\nNONE 0-2");
	MakeName	(0XE80A,	"FUEL_LO_KV_PLM_UPDATE_OFFSET");
	MakeRptCmt	(0XE832,	"Lower limit of coolant window to tranfer non-CCP BLM values to KAM.\nDegrees_C");
	MakeWord	(0XE832);
	MakeName	(0XE832,	"FUEL_LO_KE_NON_CCP_KAM_LOW_COOLANT_LIMIT");
	MakeRptCmt	(0XE834,	"Upper limit of coolant window to tranfer non-CCP BLM values to KAM.\nDegrees_C");
	MakeWord	(0XE834);
	MakeName	(0XE834,	"FUEL_LO_KE_NON_CCP_KAM_HIGH_COOLANT_LIMI");
	MakeRptCmt	(0XE836,	"Minimum PLM correction.\nNONE 0-2");
	MakeName	(0XE836,	"FUEL_LO_KV_PLM_MINIMUM");
	MakeRptCmt	(0XE83A,	"Mimimum manifold pressure to allow long term cell update.\nkPa");
	MakeWord	(0XE83A);
	MakeName	(0XE83A,	"FUEL_LO_KV_ADAPTIVE_LOW_MAP_LIMIT");
	MakeRptCmt	(0XE844,	"Time coefficient for first order lag filter.\nNONE 0-1");
	MakeByte	(0XE844);
	MakeName	(0XE844,	"FUEL_O2_KE_POST_DERIVATIVE_TERM_FILTER");
	MakeRptCmt	(0XE846,	"Modifier to proportional offset in idle condition to reduce the aggressiveness of proportional term.\nScaler 2");
	MakeWord	(0XE846);
	MakeName	(0XE846,	"FUEL_O2_KE_POST_PROPORTIONAL_IDLE_FACTOR");
	MakeRptCmt	(0XE848,	"Throttle threshold used to determine idle condition.\nPercent");
	MakeWord	(0XE848);
	MakeName	(0XE848,	"FUEL_O2_KE_LONG_TERM_IDLETHROTTLE_THRESH");
	MakeRptCmt	(0XE84A,	"Vehicle speed threshold used to determine idle condition.\nSHORTCARD");
	MakeWord	(0XE84A);
	MakeName	(0XE84A,	"FUEL_O2_KE_LONG_TERM_IDLE_VEH_SPD_THRESH");
	MakeRptCmt	(0XE84C,	"Lower voltage threshold to determine when the oxygen sensor is ready.\nMillivolts");
	MakeWord	(0XE84C);
	MakeName	(0XE84C,	"FUEL_O2_KE_POST_OXYGEN_LEAN_READY");
	MakeRptCmt	(0XE84E,	"Upper voltage threshold to determine when the oxygen sensor is ready.\nMillivolts");
	MakeWord	(0XE84E);
	MakeName	(0XE84E,	"FUEL_O2_KE_POST_OXYGEN_RICH_READY");
	MakeRptCmt	(0XE850,	"Count number of samples outside the control limits to determine when the sensor hsa become ready.\nCounts");
	MakeByte	(0XE850);
	MakeName	(0XE850,	"FUEL_O2_KE_POST_OXYGEN_READY_COUNTER");
	MakeRptCmt	(0XE851,	"Configuration of the exhaust system for the specific application.\nValue");
	MakeByte	(0XE851);
	MakeName	(0XE851,	"FUEL_O2_KE_BANK_EXHAUST");
	MakeRptCmt	(0XE852,	"Threshold for coolant temperature to enable Integral Part of Post Oxygen Fuel Trim.\nDegrees_C");
	MakeWord	(0XE852);
	MakeName	(0XE852,	"FUEL_O2_KE_POST_OXYGEN_INTEGRAL_COOLANT");
	MakeRptCmt	(0XE854,	"Closed loop integrator enable criteria for post oxygen control.\nNONE 0-2");
	MakeName	(0XE854,	"FUEL_O2_KV_POST_OXYGEN_BANK1_INTEGRATOR");
	MakeRptCmt	(0XE85E,	"Closed loop integrator enable criteria for post oxygen control.\nNONE 0-2");
	MakeName	(0XE85E,	"FUEL_O2_KV_POST_OXYGEN_BANK2_INTEGRATOR");
	MakeRptCmt	(0XE868,	"Post O2 mode is DECEL if closed loop mode is greater than 0 and less than or equal to this calibration.\nNONE 0-64");
	MakeWord	(0XE868);
	MakeName	(0XE868,	"FUEL_O2_KE_POST_O2_DECEL_UPPER_LIMIT");
	MakeWord	(0XE86A);
	MakeName	(0XE86A,	"FUEL_O2_KE_POST_O2_CRUISE_UPPER_LIMIT");
	MakeWord	(0XE86C);
	MakeName	(0XE86C,	"FUEL_O2_KE_POST_O2_LIGHT_ACCEL_UPPER_LIM");
	MakeRptCmt	(0XE86E,	"Time coefficient for first order lag filter.\nNONE 0-1");
	MakeByte	(0XE86E);
	MakeName	(0XE86E,	"FUEL_O2_KE_POST_TIME_CONSTANT");
	MakeRptCmt	(0XE870,	"Limit maximum value of Post_Oxygen_Integral_Offset.\nMillivolts");
	MakeDword	(x=0XE870);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XE870,	"FUEL_O2_KV_POST_OXYGEN_INT_OFFSET_MAX");
	MakeRptCmt	(0XE87A,	"Limit minimum value of Post_Oxygen_Integral_Offset.\nMillivolts");
	MakeDword	(x=0XE87A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XE87A,	"FUEL_O2_KV_POST_OXYGEN_INT_OFFSET_MIN");
	MakeRptCmt	(0XE884,	"Post Oxygen lower threshold.\nMillivolts");
	MakeDword	(x=0XE884);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XE884,	"FUEL_O2_KV_BANK1_POST_LEAN_THRESHOLD");
	MakeRptCmt	(0XE88E,	"Post Oxygen lower threshold.\nMillivolts");
	MakeDword	(x=0XE88E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XE88E,	"FUEL_O2_KV_BANK2_POST_LEAN_THRESHOLD");
	MakeRptCmt	(0XE898,	"Post Oxygen upper threshold.\nMillivolts");
	MakeName	(0XE898,	"FUEL_O2_KV_BANK1_POST_RICH_THRESHOLD");
	MakeRptCmt	(0XE8A2,	"Post Oxygen upper threshold.\nMillivolts");
	MakeName	(0XE8A2,	"FUEL_O2_KV_BANK2_POST_RICH_THRESHOLD");
	MakeRptCmt	(0XE8AC,	"Integration value for post Oxygen transitions.\nMillivolts");
	MakeWord	(0XE8AC);
	MakeName	(0XE8AC,	"FUEL_O2_KE_POST_OXYGEN_INTEGRATE");
	MakeRptCmt	(0XE8AE,	"Delay time between execution of the post oxygen integral correction.\nSeconds");
	MakeName	(0XE8AE,	"FUEL_O2_KV_POST_OXYGEN_INTEGRAL_DELAY");
	MakeRptCmt	(0XE8B8,	"Disable derivative offsets after starts for this amount of time.\nSeconds");
	MakeName	(0XE8B8,	"FUEL_O2_KV_POST_DERIV_DISABLE_TIME");
	MakeRptCmt	(0XE8CC,	"Once enabled, ramp the derivative offsets to desired values by this time.\nSeconds");
	MakeName	(0XE8CC,	"FUEL_O2_KV_POST_DERIV_RAMP_IN_TIME");
	MakeRptCmt	(0XE8E0,	"Apply this additive offset as derivative term based on filtered PO2 signal.\nMillivolts");
	MakeName	(0XE8E0,	"FUEL_O2_KV_POST_OXYGEN_DERIVATIVE_OFFSET");
	MakeRptCmt	(0XE90A,	"Apply this additive offset as proportional term based on filtered PO2 signal.\nMillivolts");
	MakeName	(0XE90A,	"FUEL_O2_KV_POST_O2_PROPORTIONAL_OFFSET");
	MakeRptCmt	(0XE944,	"Disable proportional offsets after starts for this amount of time.\nSeconds");
	MakeName	(0XE944,	"FUEL_O2_KV_POST_PROP_DISABLE_TIME");
	MakeRptCmt	(0XE958,	"Once enabled, ramp the proportional offsets to desired values by this time.\nSeconds");
	MakeName	(0XE958,	"FUEL_O2_KV_POST_PROP_RAMP_IN_TIME");
	MakeRptCmt	(0XE96C,	"Defines the slope of the injector versus on time.\nGrams/Sec");
	MakeWord	(0XE96C);
	MakeName	(0XE96C,	"FUEL_PL_KV_INJECTOR_SLOPE");
	MakeRptCmt	(0XE98E,	"Correction to injector flow rate based on fuel pump voltage, Ignition voltage.\nMult0to8");
	MakeWord	(0XE98E);
	MakeName	(0XE98E,	"FUEL_PL_KV_FLOW_RATE_PUMP_CORRECTION");
	MakeRptCmt	(0XE9C6,	"Pulses shorter than this will be increased by an amount KV_Short_pulse_Adjustment.\nMilliseconds");
	MakeWord	(0XE9C6);
	MakeName	(0XE9C6,	"FUEL_PL_KE_SHORT_PULSE_LIMIT");
	MakeWord	(0XE9C8);
	MakeName	(0XE9C8,	"FUEL_PL_KV_SHORT_PULSE_ADJUSTMENT");
	MakeRptCmt	(0XEA4E,	"This is the minimum pulse width allowed.\nMilliseconds");
	MakeWord	(0XEA4E);
	MakeName	(0XEA4E,	"FUEL_PL_KV_MINIMUM_PULSE_WIDTH");
	MakeRptCmt	(0XEA78,	"This is the default pulse width used when the pulse is less than the minimum.\nMilliseconds");
	MakeWord	(0XEA78);
	MakeName	(0XEA78,	"FUEL_PL_KV_DEFAULT_PULSE_WIDTH");
	MakeRptCmt	(0XEAA2,	"Determines if the Injector Slope will be modified for fuel flow.\nBOOLEAN");
	MakeByte	(0XEAA2);
	MakeName	(0XEAA2,	"FUEL_PL_KE_USE_INJ_SLOPE_MODIFIER");
	MakeRptCmt	(0XEAA4,	"The correction to injector flow based on fuel flow rate.\nUnitless");
	MakeWord	(0XEAA4);
	MakeName	(0XEAA4,	"FUEL_PL_KV_INJ_SLOPE_FUEL_FLOW_MOD");
	MakeRptCmt	(0XEABC,	"Throttle position must be less than this calibration for Cl_Idle to be TRUE.\nPercent");
	MakeWord	(0XEABC);
	MakeName	(0XEABC,	"FUEL_SH_KE_CL_IDLE_THROTTLE_POSITION");
	MakeRptCmt	(0XEABE,	"Throttle position hysteresis for CL_Idle determination.\nPercent");
	MakeWord	(0XEABE);
	MakeName	(0XEABE,	"FUEL_SH_KE_CL_IDLE_THROTTLE_HYSTERESIS");
	MakeRptCmt	(0XEAC0,	"Vehicle Speed must be less than this for CL_Idle to be TRUE.\nMPH");
	MakeWord	(0XEAC0);
	MakeName	(0XEAC0,	"FUEL_SH_KE_CL_IDLE_VEHICLE_SPEED");
	MakeRptCmt	(0XEAC2,	"Vehicle Speed hysteresis for CL_Idle determination.\nMPH");
	MakeWord	(0XEAC2);
	MakeName	(0XEAC2,	"FUEL_SH_KE_CL_IDLE_VEHICLE_SPEED_HYSTERE");
	MakeRptCmt	(0XEAC4,	"Coolant must be warmer than this to enable or trigger 'Low RPM Closed Loop Reset'.\nDegrees_C");
	MakeWord	(0XEAC4);
	MakeName	(0XEAC4,	"FUEL_SH_KE_CL_LOW_RPM_RESET_COOLANT_TEMP");
	MakeRptCmt	(0XEAC6,	"Engine speed must exceed 'desired idle speed' BY more than this to enable 'Low RPM Closed Loop Reset'.\nRPM");
	MakeWord	(0XEAC6);
	MakeName	(0XEAC6,	"FUEL_SH_KE_CL_LOW_RPM_RESET_ENABLE_OFFSE");
	MakeWord	(0XEAC8);
	MakeName	(0XEAC8,	"FUEL_SH_KE_CL_LOW_RPM_RESET_INTEGRAL_TER");
	MakeWord	(0XEACA);
	MakeName	(0XEACA,	"FUEL_SH_KE_CL_LOW_RPM_RESET_TRIGGER_OFFS");
	MakeDword	(x=0XEACC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEACC,	"FUEL_SH_KV_CL_MODE");
	MakeRptCmt	(0XEB6E,	"Base factor applied to the Integral_Delay_Base when both Slow and Fast O2 status are LEAN.\nSeconds");
	MakeName	(0XEB6E,	"FUEL_SH_KV_INTEGRAL_DELAY_BASE_LEAN");
	MakeRptCmt	(0XEB80,	"Base factor applied to the Integral_Delay_Base when both Slow and Fast O2 status are RICH.\nSeconds");
	MakeName	(0XEB80,	"FUEL_SH_KV_INTEGRAL_DELAY_BASE_RICH");
	MakeRptCmt	(0XEB92,	"Gain factor applied to the Integral_Delay_Base when both Slow and Fast O2 status are LEAN.\nNONE 0-2");
	MakeName	(0XEB92,	"FUEL_SH_KV_INTEGRAL_DELAY_GAIN_LEAN");
	MakeRptCmt	(0XEBAC,	"Gain factor applied to the Integral_Delay_Base when both Slow and Fast O2 status are RICH.\nNONE 0-2");
	MakeName	(0XEBAC,	"FUEL_SH_KV_INTEGRAL_DELAY_GAIN_RICH");
	MakeRptCmt	(0XEBC6,	"Magnitude of adjustments to integral term under idle conditions.\nNONE 0-2");
	MakeWord	(0XEBC6);
	MakeName	(0XEBC6,	"FUEL_SH_KE_INTEGRAL_TERM_ADJUSTMENT_IDLE");
	MakeRptCmt	(0XEBC8,	"The minimum integrator factor value allowed in closed loopmode.\nNONE 0-2");
	MakeWord	(0XEBC8);
	MakeName	(0XEBC8,	"FUEL_SH_KE_INTEGRAL_TERM_MINIMUM");
	MakeRptCmt	(0XEBCA,	"The minimum integrator factor value allowed in Air FuelClosed Loop mode.\nNONE 0-2");
	MakeWord	(0XEBCA);
	MakeName	(0XEBCA,	"FUEL_SH_KE_INTEGRAL_TERM_MINIMUM_AF_CL");
	MakeRptCmt	(0XEBCC,	"The maximum allowed integrator value.\nNONE 0-2");
	MakeWord	(0XEBCC);
	MakeName	(0XEBCC,	"FUEL_SH_KE_INTEGRAL_TERM_MAXIMUM");
	MakeName	(0XEBCE,	"FUEL_SH_KV_INTEGRAL_TERM_ADJUSTMENT_LEAN");
	MakeName	(0XEBE0,	"FUEL_SH_KV_INTEGRAL_TERM_ADJUSTMENT_RICH");
	MakeRptCmt	(0XEBF2,	"Offset added to O2 Rich Lean threshold. For Holden Vehicle only.\nMillivolts");
	MakeWord	(0XEBF2);
	MakeName	(0XEBF2,	"FUEL_SH_KE_O2_AFTER_START_THRESHOLD_OFF");
	MakeWord	(0XEBF4);
	MakeName	(0XEBF4,	"FUEL_SH_KE_O2_COLD_TEMPERATURE");
	MakeRptCmt	(0XEBF6,	"The offset is added to the Rich Lean threshold as long as Engine run time is less this. Used for Holden vehicles only.\nSeconds");
	MakeWord	(0XEBF6);
	MakeName	(0XEBF6,	"FUEL_SH_KE_O2_COLD_TIME");
	MakeRptCmt	(0XEBF8,	"Oxygen sensor voltage level for rich/lean decision\nMilliVolts");
	MakeWord	(0XEBF8);
	MakeName	(0XEBF8,	"FUEL_SH_KV_O2_RICH_LEAN_THRESHOLD");
	MakeWord	(0XEC0A);
	MakeName	(0XEC1C,	"FUEL_SH_KV_O2_OFF_RICH_LEAN_THRESHOLD");
	MakeRptCmt	(0XEC40,	"Use specially formed idle proportional term at idle.\nTRUE_FALSE");
	MakeByte	(0XEC40);
	MakeName	(0XEC40,	"FUEL_SH_KE_PROPORTIONAL_TERM_IDLE_ENABLE");
	MakeRptCmt	(0XEC42,	"Proportional term base for each bank under idle conditions\nNONE 0-2");
	MakeWord	(0XEC42);
	MakeName	(0XEC42,	"FUEL_SH_KV_PROPORTIONAL_TERM_IDLE_BASE");
	MakeRptCmt	(0XEC54,	"Gain factor applied to proportional term base for each bank under idle conditions\nNONE 0-2");
	MakeWord	(0XEC54);
	MakeName	(0XEC54,	"FUEL_SH_KV_PROPORTIONAL_TERM_IDLE_GAIN");
	MakeRptCmt	(0XEC6E,	"Base size of proportional term under normal (non-idle) conditions when Fast O2 Status is LEAN.\nNONE 0-2");
	MakeName	(0XEC6E,	"FUEL_SH_KV_PROP_TERM_NORMAL_BASE_LEAN");
	MakeRptCmt	(0XEC80,	"Base size of proportional term under normal (non-idle) conditions when Fast O2 Status is RICH.\nNONE 0-2");
	MakeName	(0XEC80,	"FUEL_SH_KV_PROP_TERM_NORMAL_BASE_RICH");
	MakeRptCmt	(0XEC92,	"Gain factor applied to proportional term under normal (non-idle) conditions when Fast O2 Status is LEAN.\nNONE 0-2");
	MakeName	(0XEC92,	"FUEL_SH_KV_PROP_TERM_NORMAL_GAIN_LEAN");
	MakeRptCmt	(0XECAC,	"Gain factor applied to proportional term under normal (non-idle) conditions when Fast O2 Status is RICH.\nNONE 0-2");
	MakeName	(0XECAC,	"FUEL_SH_KV_PROP_TERM_NORMAL_GAIN_RICH");
	MakeRptCmt	(0XECC6,	"Gain applied to proportional term when in Airfuel_Closedloop.\nNONE 0-2");
	MakeWord	(0XECC6);
	MakeName	(0XECC6,	"FUEL_SH_KE_PROPORTIONAL_TERM_AIRFUEL_GAI");
	MakeRptCmt	(0XECC8,	"Filter constant for slow O2 voltage (long term mixture estimate for each bank (1 = Left; 2 = Right)\nSeconds");
	MakeByte	(0XECC8);
	MakeName	(0XECC8,	"FUEL_SH_KV_SLOW_O2_FILTER");
	MakeByte	(0XECD2);
	MakeRptCmt	(0XECDC,	"Filter constant for slow O2 voltage (long term mixture estimatefor each bank (1 = Left; 2 = Right). Only used for CCP.\nSeconds");
	MakeByte	(0XECDC);
	MakeName	(0XECDC,	"FUEL_SH_KV_SLOW_O2_FILTER_FOR_CCP");
	MakeByte	(0XECE6);
	MakeRptCmt	(0XECF0,	"O2 Rich Lean Threshold is min limited to this value after all the offset are added.\nMiilivots");
	MakeWord	(0XECF0);
	MakeName	(0XECF0,	"FUEL_SH_KE_O2_MIN_RICH_LEAN_THRESHOLD");
	MakeRptCmt	(0XECF2,	"O2 Rich Lean Threshold is max limited to this value after all the offset are added.\nMiilivots");
	MakeWord	(0XECF2);
	MakeName	(0XECF2,	"FUEL_SH_KE_O2_MAX_RICH_LEAN_THRESHOLD");
	MakeRptCmt	(0XECF4,	"Offset added to O2 Rich Lean threshold when Coolant Temperature is less than this and engine run time is below a Cal.\nDegrees C");
	MakeWord	(0XECF4);
	MakeName	(0XECF4,	"FUEL_SH_KE_O2_R_L_COLD_OFFSET_COOLANT");
	MakeRptCmt	(0XECF6,	"Offset added to O2 Rich Lean threshold when engine run time is less than this and coolant is below a Cal.\nSeconds");
	MakeWord	(0XECF6);
	MakeName	(0XECF6,	"FUEL_SH_KE_O2_R_L_COLD_OFFSET_TIME");
	MakeWord	(0XECF8);
	MakeName	(0XECF8,	"FUEL_SH_KE_O2_RICH_LEAN_COLD_OFFSET");
	MakeRptCmt	(0XECFA,	"Threshold for determining closed TPS for launch integrator reset.\nPercent");
	MakeWord	(0XECFA);
	MakeName	(0XECFA,	"FUEL_SH_KE_TPS_LAUNCH_TPS_THRESH");
	MakeRptCmt	(0XECFC,	"Vehicle speed below which a launch condition will be allowed.\nMPH");
	MakeWord	(0XECFC);
	MakeName	(0XECFC,	"FUEL_SH_KE_TPS_LAUNCH_MPH_THRESH");
	MakeRptCmt	(0XECFE,	"Fuel integrator value below which integrators can reset on a launch condition.\nUnitless");
	MakeWord	(0XECFE);
	MakeName	(0XECFE,	"FUEL_SH_KE_TPS_LAUNCH_INT_THRESH");
	MakeWord	(0XED00);
	MakeName	(0XED00,	"FUEL_SH_KV_CL_MINIMUM_MANIFOLD_PRESSURE");
	MakeRptCmt	(0XED0A,	"Lower voltage threshold in which the oxygen sensor voltage must fall below before indicating oxygen sensor ready.\nMillivolts");
	MakeWord	(0XED0A);
	MakeName	(0XED0A,	"FUEL_ST_KE_OXYGEN_LOWER_READY_VOLTAGE");
	MakeRptCmt	(0XED0C,	"Upper voltage threshold in which the oxygen sensor voltage must go above before indicating oxygen sensor ready.\nMillivolts");
	MakeWord	(0XED0C);
	MakeName	(0XED0C,	"FUEL_ST_KE_OXYGEN_UPPER_READY_VOLTAGE");
	MakeWord	(0XED0E);
	MakeName	(0XED0E,	"FUEL_ST_KE_OXYGEN_NOT_READY_TIME");
	MakeRptCmt	(0XED10,	"Startup coolant temperature below which the cold wait timer, KE_Cold_Wait_Time, is used.\nDegrees_C");
	MakeWord	(0XED10);
	MakeName	(0XED10,	"FUEL_ST_KE_COLD_CLOSED_LOOP_TEMPERATURE");
	MakeRptCmt	(0XED12,	"Startup coolant temperature above which the hot wait timer, KE_Hot_Wait_Time, is used.\nDegrees_C");
	MakeWord	(0XED12);
	MakeName	(0XED12,	"FUEL_ST_KE_HOT_CLOSED_LOOP_TEMPERATURE");
	MakeRptCmt	(0XED14,	"Engine run time before closed loop is allowed when startup coolant is below KE_Cold_Closed_Loop_Temperature.\nSeconds");
	MakeWord	(0XED14);
	MakeName	(0XED14,	"FUEL_ST_KE_COLD_WAIT_TIME");
	MakeWord	(0XED16);
	MakeName	(0XED16,	"FUEL_ST_KE_WARM_WAIT_TIME");
	MakeRptCmt	(0XED18,	"Engine run time before closed loop is allowed when startup coolant is above KE_Hot_Closed_Loop_Temperature.\nSeconds");
	MakeWord	(0XED18);
	MakeName	(0XED18,	"FUEL_ST_KE_HOT_WAIT_TIME");
	MakeRptCmt	(0XED1A,	"Defines the coolant temperature above which closed loop fuel is allowed.\nDegrees_C");
	MakeWord	(0XED1A);
	MakeName	(0XED1A,	"FUEL_ST_KV_CLOSED_LOOP_COOLANT_TEMPERATU");
	MakeByte	(0XED40);
	MakeName	(0XED40,	"FUEL_ST_KE_USE_AIRFUEL_CLOSED_LOOP_STATE");
	MakeRptCmt	(0XED41,	"Number of O2 reads that must fall outside not ready window for the O2 sensor to be ready.\nCounter");
	MakeByte	(0XED41);
	MakeName	(0XED41,	"FUEL_ST_KE_O2_READY_COUNTER_THRESHOLD");
	MakeRptCmt	(0XED42,	"If this calibration is set TRUE, any Misfire faults will force Afterstart mode and reset LTM Fuel Cells.\nTRUE | FALSE");
	MakeByte	(0XED42);
	MakeName	(0XED42,	"FUEL_ST_KE_OPEN_LOOP_FOR_MISFIRE");
	MakeRptCmt	(0XED44,	"Conversion factor to convert to percent WOT from an effective throttle area in millimeters squared.\nPercent_Per_mm_Squared");
	MakeWord	(0XED44);
	MakeName	(0XED44,	"IAC_AIRFLOW_KE_IDLE_AREA_SCALAR");
	MakeRptCmt	(0XED46,	"Vehicle speed must be <= to this calibration to disable the extended throttle cracker function.\nMPH");
	MakeWord	(0XED46);
	MakeName	(0XED46,	"IAC_AIRFLOW_KE_THROTTLE_CRACKER_DISABLE_THRE");
	MakeRptCmt	(0XED48,	"Vehicle speed must be >= to this calibration to enable the extended throttle cracker function.\nMPH");
	MakeWord	(0XED48);
	MakeName	(0XED48,	"IAC_AIRFLOW_KE_THROTTLE_CRACKER_ENABLE_THRES");
	MakeRptCmt	(0XED4A,	"Filter coefficient for first order lag filter.\nFilt_Coeff");
	MakeWord	(0XED4A);
	MakeName	(0XED4A,	"IAC_AIRFLOW_KE_AC_OFFSET_FILTER_CONSTANT");
	MakeRptCmt	(0XED4C,	"Calibration used before engine is running to generate desired effective area based on choke flow pressure ratio.\nSeconds");
	MakeWord	(0XED4C);
	MakeName	(0XED4C,	"IAC_AIRFLOW_KE_CHOKE_FLOW_TIME");
	MakeRptCmt	(0XED4E,	"Default value of airflow required to compensate for the parasitic load from a single cooling fan.\nGPS");
	MakeWord	(0XED4E);
	MakeName	(0XED4E,	"IAC_AIRFLOW_KE_COOLING_FAN_CORRECTION");
	MakeRptCmt	(0XED50,	"Default value of airflow required to compensate for the parasitic load from multiple cooling fans.\nGPS");
	MakeWord	(0XED50);
	MakeName	(0XED50,	"IAC_AIRFLOW_KE_COOLING_FANS_CORRECTION");
	MakeRptCmt	(0XED52,	"The amount of time to hold decel fuel cutoff airflow before decaying it away.\nSeconds");
	MakeWord	(0XED52);
	MakeName	(0XED52,	"IAC_AIRFLOW_KE_DFCO_ENTRANCE_HOLD_TIME");
	MakeRptCmt	(0XED54,	"This calibration increases or decreases the decel fuel cutoff air value when decel fuel cutoff is entered.\nGPS");
	MakeWord	(0XED54);
	MakeName	(0XED54,	"IAC_AIRFLOW_KE_DFCO_ENTRY_RAMP_RATE");
	MakeRptCmt	(0XED56,	"This calibration increases or decreases the decel fuel cutoff air value when decel fuel cutoff is exited.\nGPS");
	MakeWord	(0XED56);
	MakeName	(0XED56,	"IAC_AIRFLOW_KE_DFCO_EXIT_RAMP_RATE");
	MakeRptCmt	(0XED58,	"Upper limit allowed for adaptively learned correction to the airflow for the engine when the transmission is in gear.\nGPS");
	MakeWord	(0XED58);
	MakeName	(0XED58,	"IAC_AIRFLOW_KE_DRIVE_CORRECTION_HIGH");
	MakeRptCmt	(0XED5A,	"Lower limit allowed for adaptively learned correction to the airflow for the engine when the transmission is in gear.\nGPS");
	MakeWord	(0XED5A);
	MakeName	(0XED5A,	"IAC_AIRFLOW_KE_DRIVE_CORRECTION_LOW");
	MakeRptCmt	(0XED5C,	"Filter coefficient for first order lag filter for filtering Learned_Airflow_Drive.  Activation rate:  25 ms.\nFilt_Coeff");
	MakeWord	(0XED5C);
	MakeName	(0XED5C,	"IAC_AIRFLOW_KE_DRIVE_FILTER_CONSTANT");
	MakeRptCmt	(0XED5E,	"The constant speed regulator will be inhibited for this period of time when the Fan1 or Fan2 load has been applied or released.\nSeconds");
	MakeWord	(0XED5E);
	MakeName	(0XED5E,	"IAC_AIRFLOW_KE_FAN_INHIBIT_REGULATOR_TIME");
	MakeWord	(0XED60);
	MakeName	(0XED60,	"IAC_AIRFLOW_KE_HIGH_TO_LOW_PRESSURE_TIME");
	MakeRptCmt	(0XED62,	"Calibration to enable reset of Breakaway_Friction_Airflow if the engine running time equals this value.\nSeconds");
	MakeWord	(0XED62);
	MakeName	(0XED62,	"IAC_AIRFLOW_KE_IDLE_TO_OFFIDLE_TIME");
	MakeRptCmt	(0XED64,	"Default value of AC_Airflow_Learned_Offset_DR.\nGPS");
	MakeWord	(0XED64);
	MakeName	(0XED64,	"IAC_AIRFLOW_KE_LEARNED_AC_AIRFLOW_OFFSET_DR");
	MakeRptCmt	(0XED66,	"Default value of AC_Airflow_Learned_Offset_PN.\nGPS");
	MakeWord	(0XED66);
	MakeName	(0XED66,	"IAC_AIRFLOW_KE_LEARNED_AC_AIRFLOW_OFFSET_PN");
	MakeRptCmt	(0XED68,	"Lower limit allowed for adaptively learned correctionto the AC airflow offset while in a drive gear or a manual.\nGPS");
	MakeWord	(0XED68);
	MakeName	(0XED68,	"IAC_AIRFLOW_KE_AC_OFFSET_LOW_DR");
	MakeRptCmt	(0XED6A,	"Upper limit allowed for adaptively learned correctionto the AC airflow offset while in a drive gear or a manual.\nGPS");
	MakeWord	(0XED6A);
	MakeName	(0XED6A,	"IAC_AIRFLOW_KE_AC_OFFSET_HIGH_DR");
	MakeRptCmt	(0XED6C,	"Lower limit allowed for adaptively learned correctionto the AC airflow offset while in park or neutralin an automatic.\nGPS");
	MakeWord	(0XED6C);
	MakeName	(0XED6C,	"IAC_AIRFLOW_KE_AC_OFFSET_LOW_PN");
	MakeRptCmt	(0XED6E,	"Upper limit allowed for adaptively learned correctionto the AC airflow offset while in park or neutralin an automatic.\nGPS");
	MakeDword	(x=0XED6E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XED6E,	"IAC_AIRFLOW_KE_AC_OFFSET_HIGH_PN");
	MakeRptCmt	(0XED72,	"Default value of Learned_Airflow_Park_Neutral.\nGPS");
	MakeWord	(0XED72);
	MakeName	(0XED72,	"IAC_AIRFLOW_KE_LEARNED_AIRFLOW_PARK_NEUTRAL");
	MakeWord	(0XED74);
	MakeName	(0XED74,	"IAC_AIRFLOW_KE_LOW_TO_HIGH_PRESSURE_TIME");
	MakeRptCmt	(0XED76,	"Calibration used to determine the closed throttle  maximum AD MAP.\nA/D Counts");
	MakeByte	(0XED76);
	MakeName	(0XED76,	"IAC_AIRFLOW_KE_MAP_AD_FAIL_THRESHOLD");
	MakeRptCmt	(0XED78,	"Calibration used to control IAC motor park position since MAP goes to baro on engine shut down.\nkPa");
	MakeWord	(0XED78);
	MakeName	(0XED78,	"IAC_AIRFLOW_KE_MAP_FOR_IAC_RESET");
	MakeWord	(0XED7A);
	MakeName	(0XED7A,	"IAC_AIRFLOW_KE_MAX_DESIRED_IDLE_EFF_AREA");
	MakeRptCmt	(0XED7C,	"Upper limit allowed for adaptively learned correction to the airflow for the engine when the transmission is not in gear.\nGPS");
	MakeWord	(0XED7C);
	MakeName	(0XED7C,	"IAC_AIRFLOW_KE_PARK_NEUTRAL_CORRECTION_HIGH");
	MakeRptCmt	(0XED7E,	"Lower limit allowed for adaptively learned correction to the airflow for the engine when the transmission is not in gear.\nGPS");
	MakeWord	(0XED7E);
	MakeName	(0XED7E,	"IAC_AIRFLOW_KE_PARK_NEUTRAL_CORRECTION_LOW");
	MakeRptCmt	(0XED80,	"Filter coefficient for first order lag filter. Activation rate:  25 ms.\nFilt_Coeff");
	MakeWord	(0XED80);
	MakeName	(0XED80,	"IAC_AIRFLOW_KE_PARK_NEUTRAL_FILTER_CONSTANT");
	MakeWord	(0XED82);
	MakeName	(0XED82,	"IAC_AIRFLOW_KE_OFFIDLE_SCALAR");
	MakeWord	(0XED84);
	MakeName	(0XED84,	"IAC_AIRFLOW_KE_PERCENT_MAF_DEVIATION_FAIL_TH");
	MakeRptCmt	(0XED86,	"Calibration to ramp the airflow to the required operating point...F(AC Torque Adjusted).\nGPS");
	MakeName	(0XED86,	"IAC_AIRFLOW_KV_RAMP_AC_AIRFLOW_IN");
	MakeRptCmt	(0XEDA2,	"Calibration to ramp the airflow to zero....F(AC Torque Adjusted).\nGPS");
	MakeName	(0XEDA2,	"IAC_AIRFLOW_KV_RAMP_AC_AIRFLOW_OUT");
	MakeRptCmt	(0XEDBE,	"Calibration defining the delta airflow increment used to decay the start up airflow value\nGPS");
	MakeWord	(0XEDBE);
	MakeName	(0XEDBE,	"IAC_AIRFLOW_KE_START_UP_DECAY_INITIAL");
	MakeWord	(0XEDC0);
	MakeName	(0XEDC0,	"IAC_AIRFLOW_KE_THROTTLE_FOLLOWER_TPS_HYSTERE");
	MakeRptCmt	(0XEDC2,	"Amount of airflow necessary to reduce energy differential betweenthe engine and the transmission during a manual downshift\nGPS_S");
	MakeName	(0XEDC2,	"IAC_AIRFLOW_KV_AUTO_TRANS_MAN_DWNSHFT_AIR");
	MakeRptCmt	(0XEDE6,	"Amount of airflow necessary to replace torque lost due tospecific amounts of catalyst lightoff spark retard\nGPS");
	MakeDword	(x=0XEDE6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEDE6,	"IAC_AIRFLOW_KV_CAT_LIGHTOFF_SPARK_AIRFLOW");
	MakeRptCmt	(0XEDFC,	"Used to increasethe RPM follower airflow value based on engine speed\nGPS");
	MakeWord	(0XEDFC);
	MakeName	(0XEDFC,	"IAC_AIRFLOW_KV_RPM_FOLLOWER_AIRFLOW");
	MakeRptCmt	(0XEE26,	"Incremental value used to decay Breakaway_Friction_Airflow.\nGPS");
	MakeWord	(0XEE26);
	MakeName	(0XEE26,	"IAC_AIRFLOW_KV_BREAKAWAY_AIRFLOW_VALUE");
	MakeRptCmt	(0XEE3A,	"Calibration defining breakaway friction airflow.\nGPS");
	MakeName	(0XEE3A,	"IAC_AIRFLOW_KV_BREAKAWAY_FRICTION_AIRFLOW");
	MakeRptCmt	(0XEE5A,	"Calibration defining delay before Breakaway_Friction_Airflow starts to decay.\nCAM Revs");
	MakeDword	(x=0XEE5A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEE5A,	"IAC_AIRFLOW_KV_BREAKAWAY_FRICTION_DELAY");
	MakeDword	(x=0XEE5E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0XEE62);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0XEE66);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0XEE6A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeRptCmt	(0XEE6E,	"Filter coefficient used to decay decel fuel cutoff airflow when exiting decel fuel cutoff.\nFilt_Coeff");
	MakeName	(0XEE6E,	"IAC_AIRFLOW_KV_DFCO_DECAY_FILTER_COEFFICIENT");
	MakeRptCmt	(0XEE92,	"Target decel fuel cutoff airflow value when entering decel fuel cutoff.\nGPS");
	MakeName	(0XEE92,	"IAC_AIRFLOW_KV_DFCO_ENTRANCE_AIRFLOW");
	MakeRptCmt	(0XEEB6,	"Target decel fuel cutoff airflow value when exiting decel fuel cutoff.\nGPS");
	MakeName	(0XEEB6,	"IAC_AIRFLOW_KV_DFCO_EXIT_AIRFLOW");
	MakeName	(0XEEDA,	"IAC_AIRFLOW_KV_DRIVE_TO_PARK_NEUTRAL_DELAY");
	MakeRptCmt	(0XEEFC,	"Delay time before throttle follower airflow starts to decay when the throttle is closing and the transmission is in gear.\nSeconds");
	MakeName	(0XEEFC,	"IAC_AIRFLOW_KV_GEAR_TF_DELAY_TIME");
	MakeRptCmt	(0XEF20,	"Required airflow when the IAC motor is parked.\nGPS");
	MakeName	(0XEF20,	"IAC_AIRFLOW_KV_MOTOR_PARK_AIRFLOW");
	MakeRptCmt	(0XEF34,	"Throttle follower decay airflow value when the transmission is not in gear.  Activation rate: 12.5 ms.\nGPS");
	MakeDword	(x=0XEF34);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XEF34,	"IAC_AIRFLOW_KV_NO_GEAR_TF_DECAY_AIRFLOW");
	MakeDword	(x=0XEF38);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeRptCmt	(0XEF58,	"Delay time before throttle follower airflow starts to decay when the throttle is closing and the transmission is not in gear.\nSeconds");
	MakeName	(0XEF58,	"IAC_AIRFLOW_KV_NO_GEAR_TF_DELAY_TIME");
	MakeName	(0XEF7C,	"IAC_AIRFLOW_KV_PARK_NEUTRAL_TO_DRIVE_DELAY");
	MakeRptCmt	(0XEF9E,	"Used to generate the square root of air temperature.\nDeg_K_Sqrt");
	MakeName	(0XEF9E,	"IAC_AIRFLOW_KV_SQUARE_ROOT_AIR_TEMPERATURE");
	MakeRptCmt	(0XEFBE,	"Calibration defining start up airflow required.\nGPS");
	MakeWord	(0XEFBE);
	MakeName	(0XEFBE,	"IAC_AIRFLOW_KV_START_UP_AIRFLOW");
	MakeRptCmt	(0XEFD2,	"Calibration defining number of cam revolutions before Start_Up_Airflow_Initial is reduced.\nCAM Revs");
	MakeWord	(0XEFD2);
	MakeName	(0XEFD2,	"IAC_AIRFLOW_KV_START_UP_DELAY_INITIAL");
	MakeRptCmt	(0XEFE6,	"Calibration provides the airflow decay when the transmission state is set to not in gear.\nGPS");
	MakeName	(0XEFE6,	"IAC_AIRFLOW_KV_THROTTLE_CRACKER_AF_DECAY");
	MakeRptCmt	(0XF008,	"Calibration provides the airflow decay delay when the transmission state is set to not in gear.\nSeconds");
	MakeName	(0XF008,	"IAC_AIRFLOW_KV_THROTTLE_CRACKER_AF_DECAY_DEL");
	MakeRptCmt	(0XF02A,	"This calibration is used to increase the throttle follower airflow value based on the position of the throttle.\nGPS");
	MakeName	(0XF02A,	"IAC_AIRFLOW_KV_THROTTLE_FOLLOWER_AIRFLOW");
	MakeRptCmt	(0XF04C,	"Airflow required by engine as coolant temperature is increasing and the transmission is in gear.\nGPS");
	MakeName	(0XF04C,	"IAC_AIRFLOW_KV_WARMED_UP_AIRFLOW_DRIVE");
	MakeRptCmt	(0XF06C,	"Airflow required by engine as coolant temperature is increasing and the transmission is not in gear.\nGPS");
	MakeName	(0XF06C,	"IAC_AIRFLOW_KV_WARMED_UP_AIRFLOW_PARK_NEUTRA");
	MakeRptCmt	(0XF08C,	"Throttle follower decay airflow value when the transmission is in gear.  Activation rate: 12.5 ms.\nGPS");
	MakeName	(0XF08C,	"IAC_AIRFLOW_KA_GEAR_TF_DECAY_AIRFLOW");
	MakeRptCmt	(0XF11C,	"This calibration table provides the extended throttle cracker airflow values when the throttle position criteria has been met.\nGPS");
	MakeName	(0XF11C,	"IAC_AIRFLOW_KA_THROTTLE_CRACKER_AIRFLOW");
	MakeName	(0XF2B4,	"IAC_AIRFLOW_KV_AC_OFF_PI_DELAY");
	MakeName	(0XF2D0,	"IAC_AIRFLOW_KV_AC_ON_PI_DELAY");
	MakeRptCmt	(0XF2EC,	"Allowable variation between MAF and MAP based airflows to allow learning.\nMilligrams_Per_Cylinder");
	MakeWord	(0XF2EC);
	MakeName	(0XF2EC,	"IAC_AIRFLOW_KE_AIR_LEARN_AIRFLOW_CORR_THRESH");
	MakeRptCmt	(0XF2EE,	"Minimum coolant temperature at which Air Flow Learning can be enabled without interfering with Closed Loop Idle mode\nDegrees_C");
	MakeWord	(0XF2EE);
	MakeName	(0XF2EE,	"IAC_AIRFLOW_KE_AIR_LEARN_COOLANT_TMP_LOW");
	MakeRptCmt	(0XF2F0,	"Minimum coolant temperature at which Air Flow Learning can be enabled without interfering with any idle mode\nDegrees_C");
	MakeWord	(0XF2F0);
	MakeName	(0XF2F0,	"IAC_AIRFLOW_KE_AIR_LEARN_COOLANT_TMP_MIDDLE");
	MakeRptCmt	(0XF2F2,	"Maximum coolant temperature at which Air Flow Learning can be enabled without interfering with any idle mode\nDegrees_C");
	MakeWord	(0XF2F2);
	MakeName	(0XF2F2,	"IAC_AIRFLOW_KE_AIR_LEARN_COOLANT_TMP_HIGH");
	MakeRptCmt	(0XF2F4,	"MAX engine speed to allow air learning.\nRPM");
	MakeWord	(0XF2F4);
	MakeName	(0XF2F4,	"IAC_AIRFLOW_KE_AIR_LEARN_ENGINE_SPEED_MAX");
	MakeRptCmt	(0XF2F6,	"MIN engine speed to allow air learning.\nRPM");
	MakeWord	(0XF2F6);
	MakeName	(0XF2F6,	"IAC_AIRFLOW_KE_AIR_LEARN_ENGINE_SPEED_MIN");
	MakeRptCmt	(0XF2F8,	"Maximum allowable variation in indicated Throttle Position to allow learning.\nPercent");
	MakeWord	(0XF2F8);
	MakeName	(0XF2F8,	"IAC_AIRFLOW_KE_AIR_LEARN_IND_THRT_PSTN_STAB");
	MakeRptCmt	(0XF2FA,	"Maximum allowable compensation per cell in the Air Learn Correction array.\nPercent_Area_S");
	MakeWord	(0XF2FA);
	MakeName	(0XF2FA,	"IAC_AIRFLOW_KE_AIR_LEARN_LIMIT");
	MakeRptCmt	(0XF2FC,	"Minimum allowable vacuum to allow learning.\nkPa");
	MakeWord	(0XF2FC);
	MakeName	(0XF2FC,	"IAC_AIRFLOW_KE_AIR_LEARN_LOW_VACUUM_DISABLE");
	MakeRptCmt	(0XF2FE,	"Maximum allowable difference between two adjacent cell in Air_Learn Correction array.\nPercent_Area_S");
	MakeWord	(0XF2FE);
	MakeName	(0XF2FE,	"IAC_AIRFLOW_KE_AIR_LEARN_MAX_DELTA");
	MakeRptCmt	(0XF300,	"Limits learning from occuring every loop to reduce problems with transients.\nSeconds");
	MakeWord	(0XF300);
	MakeName	(0XF300,	"IAC_AIRFLOW_KE_AIR_LEARN_STAB_TIMER");
	MakeRptCmt	(0XF302,	"Maxmimum time allowed without Baro update before disabling Airflow Learning.\nSeconds_L");
	MakeDword	(x=0XF302);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XF302,	"IAC_AIRFLOW_KE_TIME_SINCE_BARO_UPDATED");
	MakeWord	(0XF306);
	MakeName	(0XF306,	"IAC_AIRFLOW_KE_VSDI_INTEGRAL_DELAY");
	MakeRptCmt	(0XF308,	"Vehicle speed must be <= this cal to disable the VSDI mode of the throttle cracker function.\nMPH");
	MakeWord	(0XF308);
	MakeName	(0XF308,	"IAC_AIRFLOW_KE_VSDI_DISABLE_VEHICLE_SPEED");
	MakeRptCmt	(0XF30A,	"Vehicle speed must be > this cal to enable the VSDI mode of the throttle cracker function.\nMPH");
	MakeWord	(0XF30A);
	MakeName	(0XF30A,	"IAC_AIRFLOW_KE_VSDI_ENABLE_VEHICLE_SPEED");
	MakeRptCmt	(0XF30C,	"If in VSDI mode, use KA_Throttle_Cracker_Airflow to calculate extended throttle cracker, while throttle position is > this cal.\nPercent");
	MakeWord	(0XF30C);
	MakeName	(0XF30C,	"IAC_AIRFLOW_KE_VSDI_THROTTLE_POSITION");
	MakeRptCmt	(0XF30E,	"Rate limit constant for increasing airflow.\nPercent_Area");
	MakeWord	(0XF30E);
	MakeName	(0XF30E,	"IAC_AIRFLOW_KV_AIR_LEARN_RATE_LIMIT_DOWN");
	MakeDword	(x=0XF310);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0XF314);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0XF318);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0XF31C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0XF320);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0XF326);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XF326,	"SurfaceTable_2x14______________A_C_Clutch_Spark_Delay_?");
	MakeDword	(x=0XF32A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0XF32E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0XF332);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0XF336);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeRptCmt	(0XF33A,	"Rate limit constant for increasing airflow.\nPercent_Area");
	MakeDword	(x=0XF33A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XF33A,	"IAC_AIRFLOW_KV_AIR_LEARN_RATE_LIMIT_UP");
	MakeDword	(x=0XF33E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0XF342);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0XF346);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0XF34A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0XF34E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0XF352);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0XF356);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0XF35A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XF360,	"Constant16_B4333___Rolling_Desired_Idle_Disable_Speed_KPH");
	MakeName	(0XF362,	"Constant16_B4334___Rolling_Desired_Idle_Enable_Speed_KPH");
	MakeName	(0XF364,	"Constant16_B4335___Rolling_Desired_Idle_Maximum_TPS_Position");
	MakeRptCmt	(0XF366,	"Amount of airflow required to compensate for a temporary engine speed offset while in Drive\nGPS");
	MakeName	(0XF366,	"IAC_AIRFLOW_KV_ENG_SPD_OFFSET_AFLW_DR");
	MakeRptCmt	(0XF37E,	"Amount of airflow required to compensate for a temporary engine speed offset while in P/N in an Automatic\nGPS");
	MakeName	(0XF37E,	"IAC_AIRFLOW_KV_ENG_SPD_OFFSET_AFLW_PN");
	MakeRptCmt	(0XF396,	"Multiplier that compensate Engine Speed Offset Airflowbased on coolant temperature, while in Drive\nScaler_2_Vs_Deg_C_Table");
	MakeName	(0XF396,	"IAC_AIRFLOW_KV_ENG_SPD_OFFSET_AFLW_MULT_DR");
	MakeRptCmt	(0XF3B6,	"Multiplier that compensate Engine Speed Offset Airflowbased on coolant temperature, while in PN\nScaler_2_Vs_Deg_C_Table");
	MakeName	(0XF3B6,	"IAC_AIRFLOW_KV_ENG_SPD_OFFSET_AFLW_MULT_PN");
	MakeRptCmt	(0XF3D6,	"This cal provides the extended throttle cracker airflow values while in neutral or when the clutch is depressed.\nGPS");
	MakeName	(0XF3D6,	"IAC_AIRFLOW_KV_PN_EXTENDED_THROT_CRACKER");
	MakeRptCmt	(0XF3FA,	"This cal provides desired idle speed for VSDI mode.\nRPM");
	MakeName	(0XF3FA,	"IAC_AIRFLOW_KV_VSDI_DESIRED_IDLE_SPEED");
	MakeRptCmt	(0XF410,	"This cal provides value to adjust amount of airflow necessaryto compensate for catalyst spark retard as the enginewarms up.\nScaler_2_Vs_Deg_C_Table");
	MakeWord	(0XF410);
	MakeName	(0XF410,	"IAC_AIRFLOW_KV_CLO_SPARK_AIRFLOW_COOL_MULT");
	MakeRptCmt	(0XF430,	"VSDI integral correction when VSDI engine speed error is too low.\nGPS");
	MakeName	(0XF430,	"IAC_AIRFLOW_KV_VSDI_SPEED_LOW_IN_PN");
	MakeRptCmt	(0XF448,	"VSDI integral correction when VSDI engine speed error is too high.\nGPS");
	MakeName	(0XF448,	"IAC_AIRFLOW_KV_VSDI_SPEED_HIGH_IN_PN");
	MakeRptCmt	(0XF460,	"Used to control change in manifold pressure, used to calculate the pressure ratio.\nkPa");
	MakeWord	(0XF460);
	MakeName	(0XF460,	"IAC_AIRFLOW_KE_PRESSURE_RATIO_MAP_HYSTERESIS");
}


static Bytes_3(void) {
        auto x;
#define id x

	MakeRptCmt	(0XF462,	"\n");
	MakeName	(0XF462,	"IAC_AIRFLOW_KE_TRANSITION_AIRFLOW_SPEED_CONS");
	MakeRptCmt	(0XF464,	"CIA uses PN tables after this time when thePRNDL is moved from any gear to PN.Must be <= KV_Drive_To_Park_Neutral_Delay.\nSeconds");
	MakeName	(0XF464,	"IAC_AIRFLOW_KV_AIRFLOW_DELAY_DR_TO_PN");
	MakeRptCmt	(0XF486,	"CIA uses DR tables after this time, when the PRNDL is movedfrom PN to another gear.Must be <= KV_Park_Neutral_To_Drive_Delay.\nSeconds");
	MakeName	(0XF486,	"IAC_AIRFLOW_KV_AIRFLOW_DELAY_PN_TO_DR");
	MakeRptCmt	(0XF4A8,	"The maximum value that any one of the variation correction cells can achieve.\nIAC_GPS_W");
	MakeWord	(0XF4A8);
	MakeName	(0XF4A8,	"IAC_AIRFLOW_KV_VARIATION_CORRECTION_MAXIMUM");
	MakeRptCmt	(0XF4BC,	"At powerup, if nonvolatile memory is lost, Actual_IAC_ Position is set to this parameter.\nSteps");
	MakeWord	(0XF4BC);
	MakeName	(0XF4BC,	"IAC_MOTOR_KE_DEFAULT_PARK_POSITION");
	MakeRptCmt	(0XF4BE,	"Maximum stepping range of IACV motor.\nSteps");
	MakeWord	(0XF4BE);
	MakeName	(0XF4BE,	"IAC_MOTOR_KE_IACV_STEP_RANGE");
	MakeRptCmt	(0XF4C0,	"IACV motor step frequency when engine manifold vacuumis high.\nIACV_Hz_Type");
	MakeWord	(0XF4C0);
	MakeName	(0XF4C0,	"IAC_MOTOR_KE_IACV_LOW_FREQUENCY_STEP");
	MakeRptCmt	(0XF4C2,	"IACV motor step frequency when engine manifold vacuumis low.\nIACV_Hz_Type");
	MakeWord	(0XF4C2);
	MakeName	(0XF4C2,	"IAC_MOTOR_KE_IACV_HIGH_FREQUENCY_STEP");
	MakeRptCmt	(0XF4C4,	"This calibration and the following are a hysteresis pairto provide a switch point for IACV motor step frequency.\nkPa");
	MakeWord	(0XF4C4);
	MakeName	(0XF4C4,	"IAC_MOTOR_KE_MANIFOLD_VACUUM_FOR_LOW_FREQU");
	MakeRptCmt	(0XF4C6,	"This calibration and the previous are a hysteresis pairto provide a switch point for IACV motor step frequency.\nkPa");
	MakeWord	(0XF4C6);
	MakeName	(0XF4C6,	"IAC_MOTOR_KE_MANIFOLD_VACUUM_FOR_HIGH_FREQ");
	MakeRptCmt	(0XF4C8,	"Disabling threshold for the IACV coils if ignition voltage goes above this parameter.\nVolts");
	MakeWord	(0XF4C8);
	MakeName	(0XF4C8,	"IAC_MOTOR_KE_MAXIMUM_COIL_VOLTAGE");
	MakeRptCmt	(0XF4CA,	"Below this threshold the IACV is not allowed to step.\nVolts");
	MakeWord	(0XF4CA);
	MakeName	(0XF4CA,	"IAC_MOTOR_KE_MINIMUM_STEP_VOLTAGE");
	MakeRptCmt	(0XF4CC,	"Calibration used to translate effective area into equivalent IACV motor steps.\nSteps_vs_mm_squared_Table");
	MakeName	(0XF4CC,	"IAC_MOTOR_KV_AREA_TO_IACV_STEPS");
	MakeRptCmt	(0XF546,	"Lost motor reset logic can only engage when the absolute engine speed error is greater than this calibration.\nRPM");
	MakeWord	(0XF546);
	MakeName	(0XF546,	"IAC_MOTOR_KE_IMLR_DEADBAND_SPEED_ERROR");
	MakeRptCmt	(0XF548,	"IAC motor must appear lost for at least this amount of time before allowing the lost motor logic to initiate.\nSeconds");
	MakeWord	(0XF548);
	MakeName	(0XF548,	"IAC_MOTOR_KE_IMLR_MOTOR_LOST_TIME");
	MakeRptCmt	(0XF54A,	"After the IAC motor is determined lost wait for at least this amount of time before allowing the next move to occur.\nSeconds");
	MakeWord	(0XF54A);
	MakeName	(0XF54A,	"IAC_MOTOR_KE_IMLR_MOTOR_WAIT_FOR_NEXT");
	MakeRptCmt	(0XF54C,	"Minimum throttle position to begin a running reset of the IAC motor position.\nPercent");
	MakeWord	(0XF54C);
	MakeName	(0XF54C,	"IAC_MOTOR_KE_IMRR_THROTTLE_POSITION");
	MakeRptCmt	(0XF54E,	"Minimum vehicle speed to begin a running reset of the IAC motor position.\nMiles/Hour");
	MakeWord	(0XF54E);
	MakeName	(0XF54E,	"IAC_MOTOR_KE_IMRR_VEHICLE_SPEED");
	MakeRptCmt	(0XF550,	"Number of steps required to move to attempt to open/closed if the engine speed low/high and current in the lost motor mode.\nSteps");
	MakeWord	(0XF550);
	MakeName	(0XF550,	"IAC_MOTOR_KV_IMLR_STEP_INCREMENT");
	MakeRptCmt	(0XF566,	"Coolant temperature must be below this calibration to enable adaptive updates.\nDegrees_C");
	MakeWord	(0XF566);
	MakeName	(0XF566,	"IAC_REGULATORS_KE_ADAPTIVE_TEMPERATURE_HIGH");
	MakeRptCmt	(0XF568,	"Coolant temperature must be above this calibration to enable adaptive updates.\nDegrees_C");
	MakeWord	(0XF568);
	MakeName	(0XF568,	"IAC_REGULATORS_KE_ADAPTIVE_TEMPERATURE_LOW");
	MakeWord	(0XF56A);
	MakeName	(0XF56A,	"IAC_REGULATORS_KE_ENGINE_SPEED_LIGHTLY_FILTERED");
	MakeWord	(0XF56C);
	MakeName	(0XF56C,	"IAC_REGULATORS_KE_ENGINE_SPEED_HEAVILY_FILTERED");
	MakeWord	(0XF56E);
	MakeName	(0XF56E,	"IAC_REGULATORS_KE_INTEGRAL_DEAD_BAND_ENGINE_SPE");
	MakeRptCmt	(0XF570,	"Calibration used to limit the idle airflow to a maximum.\nGPS");
	MakeWord	(0XF570);
	MakeName	(0XF570,	"IAC_REGULATORS_KE_MAXIMUM_IDLE_AIRFLOW");
	MakeRptCmt	(0XF572,	"Absolute value of engine speed error must be less than whis calibration for adaptive updates to occur.\nRPM");
	MakeWord	(0XF572);
	MakeName	(0XF572,	"IAC_REGULATORS_KE_SPEED_ERROR_LIMIT_ADAPTIVE");
	MakeRptCmt	(0XF574,	"Continuous time engine speed must be below limit before adaptive updates are allowed.\nSeconds");
	MakeWord	(0XF574);
	MakeName	(0XF574,	"IAC_REGULATORS_KE_SPEED_ERROR_LIMIT_TIMER");
	MakeName	(0XF576,	"IAC_REGULATORS_KV_STALL_SAVER_SPEED_DRIVE");
	MakeName	(0XF58E,	"IAC_REGULATORS_KV_STALL_SAVER_SPEED_NEUTRAL");
	MakeWord	(0XF5A6);
	MakeName	(0XF5A6,	"IAC_REGULATORS_KE_START_UP_ENGINE_UNDER_SPEED_T");
	MakeRptCmt	(0XF5A8,	"Derivative airflow correction when engine speed is decreasing.\nGPS");
	MakeName	(0XF5A8,	"IAC_REGULATORS_KV_D_SPEED_DECREASING");
	MakeRptCmt	(0XF5BC,	"Derivative airflow correction when engine speed is increasing.\nGPS");
	MakeName	(0XF5BC,	"IAC_REGULATORS_KV_D_SPEED_INCREASING");
	MakeRptCmt	(0XF5D0,	"Integral correction when Engine_Speed_Error_Sum is too high and transmission is in drive.\nGPS");
	MakeDword	(x=0XF5D0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XF5D0,	"IAC_REGULATORS_KV_I_SPEED_HIGH_IN_DRIVE");
	MakeDword	(x=0XF5D4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0XF5D8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0XF5DC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeRptCmt	(0XF5E8,	"Integral correction when Engine_Speed_Error_Sum is too high and transmission is in park or neutral.\nGPS");
	MakeName	(0XF5E8,	"IAC_REGULATORS_KV_I_SPEED_HIGH_IN_PARK_NEUTRAL");
	MakeRptCmt	(0XF600,	"Integral correction when Engine_Speed_Error_Sum is too low and transmission is in drive.\nGPS");
	MakeDword	(x=0XF600);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XF600,	"IAC_REGULATORS_KV_I_SPEED_LOW_IN_DRIVE");
	MakeDword	(x=0XF604);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0XF608);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0XF60C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeRptCmt	(0XF618,	"Integral correction when Engine_Speed_Error_Sum is too low and transmission is in park or neutral.\nGPS");
	MakeName	(0XF618,	"IAC_REGULATORS_KV_I_SPEED_LOW_IN_PARK_NEUTRAL");
	MakeRptCmt	(0XF630,	"Proportional correction when Engine_Speed_Error is positive and transmission is in drive.\nGPS");
	MakeName	(0XF630,	"IAC_REGULATORS_KV_P_SPEED_HIGH_IN_DRIVE");
	MakeName	(0XF648,	"IAC_REGULATORS_KV_P_SPEED_HIGH_IN_DRIVE_AC");
	MakeRptCmt	(0XF660,	"Proportional correction when Engine_Speed_Error is positive and transmission is in park or neutral.\nGPS");
	MakeName	(0XF660,	"IAC_REGULATORS_KV_P_SPEED_HIGH_IN_PARK_NEUTRAL");
	MakeRptCmt	(0XF678,	"Proportional correction when Engine_Speed_Error is negative and transmission is in drive.\nGPS");
	MakeName	(0XF678,	"IAC_REGULATORS_KV_P_SPEED_LOW_IN_DRIVE");
	MakeName	(0XF690,	"IAC_REGULATORS_KV_P_SPEED_LOW_IN_DRIVE_AC");
	MakeRptCmt	(0XF6A8,	"Proportional correction when Engine_Speed_Error is negative and transmission is in park or neutral.\nGPS");
	MakeName	(0XF6A8,	"IAC_REGULATORS_KV_P_SPEED_LOW_IN_PARK_NEUTRAL");
	MakeWord	(0XF6C0);
	MakeName	(0XF6C0,	"IAC_REGULATORS_KE_PROPORTIONAL_DEAD_BAND_ENGINE");
	MakeRptCmt	(0XF6C2,	"TPS must be less than this value to enter Early PID mode. A zero value will completely disable this function.\nPercent");
	MakeWord	(0XF6C2);
	MakeName	(0XF6C2,	"IAC_REGULATORS_KE_EARLY_PID_ENTRANCE_MAX_TPS");
	MakeRptCmt	(0XF6C4,	"Once in early PID mode, extend the minimum set point speed criteria by this much.\nRPM");
	MakeWord	(0XF6C4);
	MakeName	(0XF6C4,	"IAC_REGULATORS_KE_EARLY_PID_RPM_HYSTERESIS");
	MakeRptCmt	(0XF6C6,	"Calibration to delay PID control until after engine isrunning.\nSeconds");
	MakeWord	(0XF6C6);
	MakeName	(0XF6C6,	"IAC_REGULATORS_KE_START_UP_PID_DELAY");
	MakeRptCmt	(0XF6C8,	"Cal to transition into proportional speed control duringcoast down and when exiting a neutral throttle tip in\nSeconds");
	MakeWord	(0XF6C8);
	MakeName	(0XF6C8,	"IAC_REGULATORS_KE_DELAY_P_CONTROL");
	MakeRptCmt	(0XF6CA,	"Cal to transition into integral speed control duringcoast down and when exiting a neutral throttle tip in\nSeconds");
	MakeWord	(0XF6CA);
	MakeName	(0XF6CA,	"IAC_REGULATORS_KE_DELAY_I_CONTROL");
	MakeRptCmt	(0XF6CC,	"Cal to transition into derivative speed control duringcoast down and when exiting a neutral throttle tip in\nSeconds");
	MakeWord	(0XF6CC);
	MakeName	(0XF6CC,	"IAC_REGULATORS_KE_DELAY_D_CONTROL");
	MakeRptCmt	(0XF6CE,	"Cal to transition into idle saprk control during coastdown and when exiting a neutral throttle tip in\nSeconds");
	MakeWord	(0XF6CE);
	MakeName	(0XF6CE,	"IAC_REGULATORS_KE_DELAY_IDLE_SPARK");
	MakeWord	(0XF6D0);
	MakeName	(0XF6D0,	"IAC_RPM_KE_IDLE_TO_OFFIDLE_THROTTLE_POSI");
	MakeWord	(0XF6D2);
	MakeName	(0XF6D2,	"IAC_RPM_KE_IDLE_TO_OFFIDLE_VEHICLE_SPEED");
	MakeWord	(0XF6D4);
	MakeName	(0XF6D4,	"IAC_RPM_KE_ALTERNATOR_FIELD_DC_FILTER");
	MakeRptCmt	(0XF6D6,	"An alternator field duty cycle below this calibration will decrease the idle speed to decrease the alternator power output.\nPercent");
	MakeWord	(0XF6D6);
	MakeName	(0XF6D6,	"IAC_RPM_KE_BATTERY_CHARGE_DUTY_CYCLE");
	MakeRptCmt	(0XF6D8,	"An alternator field duty cycle above this calibration will increase the idle speed to increase the alternator power output.\nPercent");
	MakeWord	(0XF6D8);
	MakeName	(0XF6D8,	"IAC_RPM_KE_BATTERY_DISCHARGE_DUTY_CYCLE");
	MakeRptCmt	(0XF6DA,	"Lower coolant temperature limit for enabling heater performance idle speed offset.\nDegrees Celsius");
	MakeWord	(0XF6DA);
	MakeName	(0XF6DA,	"IAC_RPM_KE_COOLANT_TEMPERATURE_LOW_LIMIT");
	MakeRptCmt	(0XF6DC,	"Upper coolant temperature limit for enabling heater performance idle speed offset.\nDegrees Celsius");
	MakeWord	(0XF6DC);
	MakeName	(0XF6DC,	"IAC_RPM_KE_COOLANT_TEMPERATURE_HIGH_LIMI");
	MakeRptCmt	(0XF6DE,	"Integral gain when alternator voltage is below control setpoint.  Activation rate: 100 ms.\nRPM");
	MakeWord	(0XF6DE);
	MakeName	(0XF6DE,	"IAC_RPM_KE_DECREASE_BATTERY_VOLTAGE_SPEE");
	MakeRptCmt	(0XF6E0,	"Maximum allowable set point speed with transmission in drive.\nRPM");
	MakeWord	(0XF6E0);
	MakeName	(0XF6E0,	"IAC_RPM_KE_DRIVE_ENGINE_SPEED_LIMIT");
	MakeRptCmt	(0XF6E2,	"Minimum engine speed when engine over tempuratureprotection is enabled.\nRPM");
	MakeWord	(0XF6E2);
	MakeName	(0XF6E2,	"IAC_RPM_KE_ENGINE_PROTECTION_SPEED");
	MakeRptCmt	(0XF6E4,	"Integral gain when alternator voltage is below control setpoint.  Activation rate: 100 ms.\nRPM");
	MakeWord	(0XF6E4);
	MakeName	(0XF6E4,	"IAC_RPM_KE_INCREASE_BATTERY_VOLTAGE_SPEE");
	MakeRptCmt	(0XF6E6,	"Induction air temperature limit for enabling heater performance idle speed offset.\nDegrees Celsius");
	MakeWord	(0XF6E6);
	MakeName	(0XF6E6,	"IAC_RPM_KE_INDUCTION_AIR_TEMPERATURE_THR");
	MakeRptCmt	(0XF6E8,	"Maximum allowable engine speed offset due to battery voltage.\nRPM");
	MakeWord	(0XF6E8);
	MakeName	(0XF6E8,	"IAC_RPM_KE_MAXIMUM_BATTERY_SPEED_OFFSET");
	MakeDword	(x=0XF6EA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0XF6EA,	"IAC_RPM_KE_MINIMUM_TIME_AC_SPEED");
	MakeWord	(0XF6EE);
	MakeName	(0XF6EE,	"IAC_RPM_KE_OFFIDLE_TO_IDLE_THROTTLE_POSI");
	MakeWord	(0XF6F0);
	MakeName	(0XF6F0,	"IAC_RPM_KE_OFFIDLE_TO_IDLE_VEHICLE_SPEED");
	MakeRptCmt	(0XF6F2,	"Heater performance speed offset will be ramped to zero by this value per activation.\nRPM");
	MakeWord	(0XF6F2);
	MakeName	(0XF6F2,	"IAC_RPM_KE_RAMP_HEATER_PERFORMANCE_SPEED");
	MakeRptCmt	(0XF6F4,	"The amount of time that must elapse before the set point speed can be lowered after having been raised.\nSeconds");
	MakeWord	(0XF6F4);
	MakeName	(0XF6F4,	"IAC_RPM_KE_SET_POINT_CHANGE_DELAY_TIME");
	MakeRptCmt	(0XF6F6,	"RPM rate that the set point speed can be raised or lowered when not in park or neutral.\nRPM");
	MakeWord	(0XF6F6);
	MakeName	(0XF6F6,	"IAC_RPM_KE_SET_POINT_SPEED_RATE_DRIVE");
	MakeRptCmt	(0XF6F8,	"RPM rate that the set point speed can be raised or lowered when in park or neutral.\nRPM");
	MakeWord	(0XF6F8);
	MakeName	(0XF6F8,	"IAC_RPM_KE_SET_POINT_SPEED_RATE_NEUTRAL");
	MakeRptCmt	(0XF6FA,	"Period of time to delay after the wait time before the value of Start_Up_Speed_Offset_No_Gear starts to decay toward zero.\nSeconds");
	MakeWord	(0XF6FA);
	MakeName	(0XF6FA,	"IAC_RPM_KE_START_UP_DELAY_TIME_NO_GEAR");
	MakeRptCmt	(0XF6FC,	"Period of time to delay after the wait time before the value of Start_Up_Speed_Offset_In_Gear starts to decay toward zero.\nSeconds");
	MakeWord	(0XF6FC);
	MakeName	(0XF6FC,	"IAC_RPM_KE_START_UP_DELAY_TIME_IN_GEAR");
	MakeRptCmt	(0XF6FE,	"Delta RPM used to decay Start_Up_Speed_Offset_In_Gear toward zero.\nRPM");
	MakeWord	(0XF6FE);
	MakeName	(0XF6FE,	"IAC_RPM_KE_START_UP_SPEED_DELTA_IN_GEAR");
	MakeRptCmt	(0XF700,	"Delta RPM used to decay Start_Up_Speed_Offset_No_Gear toward zero.\nRPM");
	MakeWord	(0XF700);
	MakeName	(0XF700,	"IAC_RPM_KE_START_UP_SPEED_DELTA_NO_GEAR");
	MakeRptCmt	(0XF702,	"Desired engine speed with transmission in drive and the air conditioner off.\nRPM");
	MakeName	(0XF702,	"IAC_RPM_KV_ENGINE_SPEED_DRIVE_AC_OFF");
	MakeRptCmt	(0XF722,	"Desired engine speed with transmission in drive and the air conditioner on.\nRPM");
	MakeName	(0XF722,	"IAC_RPM_KV_ENGINE_SPEED_DRIVE_AC_ON");
	MakeRptCmt	(0XF742,	"Desired engine speed with transmission in park or neutral and the air conditioner off.\nRPM");
	MakeName	(0XF742,	"IAC_RPM_KV_ENGINE_SPEED_NEUTRAL_AC_OFF");
	MakeRptCmt	(0XF762,	"Desired engine speed with transmission in park or neutral and the air conditioner on.\nRPM");
	MakeName	(0XF762,	"IAC_RPM_KV_ENGINE_SPEED_NEUTRAL_AC_ON");
	MakeRptCmt	(0XF782,	"Desired engine speed offset when heater performance is active and transmission is in park or neutral.\nRPM");
	MakeName	(0XF782,	"IAC_RPM_KV_HEATER_PERF_SPEED_OFFSET_PARK");
	MakeRptCmt	(0XF7A2,	"Desired engine speed offset when heater performance is active and transmission is in drive.\nRPM");
	MakeName	(0XF7A2,	"IAC_RPM_KV_HEATER_PERF_SPEED_OFFSET_DRIV");
	MakeRptCmt	(0XF7C2,	"Start up engine speed offset value when the transmission is in gear.\nRPM");
	MakeName	(0XF7C2,	"IAC_RPM_KV_START_UP_SPEED_OFFSET_IN_GEAR");
	MakeRptCmt	(0XF7D6,	"Start up engine speed offset value when the transmission is not in gear.\nRPM");
	MakeName	(0XF7D6,	"IAC_RPM_KV_START_UP_SPEED_OFFSET_NO_GEAR");
	MakeRptCmt	(0XF7EA,	"Maximum allowable set point speed with transmission in park or neutral.\nRPM");
	MakeWord	(0XF7EA);
	MakeName	(0XF7EA,	"IAC_RPM_KE_PARK_NEUTRAL_ENGINE_SPEED_LIM");
	MakeRptCmt	(0XF7EC,	"Period of time after engine starts before looking to see if throttle was opened or vehicle speed was non-zero.\nSeconds");
	MakeWord	(0XF7EC);
	MakeName	(0XF7EC,	"IAC_RPM_KE_START_UP_WAIT_TIME");
	MakeRptCmt	(0XF7EE,	"Ignition 1 sensor scaling factor.\n");
	MakeWord	(0XF7EE);
	MakeName	(0XF7EE,	"IGNITION_KE_IGNITION_VOLTAGE_SCALE_FAC");
	MakeRptCmt	(0XF7F0,	"Ignition voltage is too high if it is greater than this.\nVolts");
	MakeWord	(0XF7F0);
	MakeName	(0XF7F0,	"PROTECTED_KE_IGN_VOLT_TOO_HIGH");
	MakeRptCmt	(0XF7F2,	"Ignition voltage is too Low if it is less than this.\nVolts");
	MakeWord	(0XF7F2);
	MakeName	(0XF7F2,	"PROTECTED_KE_IGN_VOLT_TOO_LOW");
	MakeWord	(0XF7F4);
	MakeName	(0XF7F4,	"INLET_TEMP_KV_CHARGE_TEMPERATURE_SQUARE_ROO");
	MakeWord	(0XF81A);
	MakeName	(0XF81A,	"INLET_TEMP_KV_CHARGE_TEMPERATURE_BIAS");
	MakeWord	(0XF83A);
	MakeName	(0XF83A,	"INLET_TEMP_KV_CHARGE_TEMPERATURE_FILTER");
	MakeRptCmt	(0XF85A,	"Mass Air Flow rate from sensor\nGram/Sec");
	MakeWord	(0XF85A);
	MakeName	(0XF85A,	"MASS_AIR_FLOW_SENSOR_KV_MASS_AIRFLOW");
	MakeRptCmt	(0XF904,	"Threshold for maximum number of RAM test failures that canoccur before latching a permanent fault.\nCounts");
	MakeByte	(0XF904);
	MakeName	(0XF904,	"MEM_MANAGER_KE_MAX_RAM_FAIL_CTR_THRESHOLD");
	MakeRptCmt	(0XF905,	"When TRUE the ram test results are ignored.\nBoolean");
	MakeByte	(0XF905);
	MakeName	(0XF905,	"MEM_MANAGER_KE_IGNORE_RAM_TEST");
	MakeRptCmt	(0XF906,	"Threshold for maximum number of ROM test failures that canoccur before latching a permanent fault.\nCounts");
	MakeByte	(0XF906);
	MakeName	(0XF906,	"MEM_MANAGER_KE_MAX_ROM_FAIL_CTR_THRESHOLD");
	MakeRptCmt	(0XF907,	"When TRUE the rom test results are ignored.\nBoolean");
	MakeByte	(0XF907);
	MakeName	(0XF907,	"MEM_MANAGER_KE_IGNORE_FLASH_CHECKSUM");
	MakeRptCmt	(0XF908,	"Default induction air temperature used when IAT sensor is failed.\n");
	MakeWord	(0XF908);
	MakeName	(0XF908,	"INDUCTION_AIR_KE_INDUCTION_AIR_TEMPERATURE_DEF");
	MakeRptCmt	(0XF90A,	"Converts induction air temperature A/D counts to Degrees C.\n");
	MakeName	(0XF90A,	"INDUCTION_AIR_KV_AIR_TEMP");
	MakeRptCmt	(0XF92C,	"Bit selectable to allow oil starvation algorithm to run.\nBOOLEAN");
	MakeByte	(0XF92C);
	MakeName	(0XF92C,	"OISTER_KE_OIL_STARVE_ENABLE");
	MakeRptCmt	(0XF92E,	"Driver notification to powertrain action delay time.\nSeconds");
	MakeWord	(0XF92E);
	MakeName	(0XF92E,	"OISTER_KE_DRIVER_WARNING_DELAY_TIME");
	MakeRptCmt	(0XF930,	"Minimum amount of time  a high lateral acceleration manuever must be sustained before any powertrain action will take place.\nSeconds");
	MakeWord	(0XF930);
	MakeName	(0XF930,	"OISTER_KE_HIGH_G_MINIMUM_TIME");
	MakeRptCmt	(0XF932,	"This time will prevent lateral acceleration spikes from resetting the lateral G integrator.\nDelay_Seconds_W");
	MakeWord	(0XF932);
	MakeName	(0XF932,	"OISTER_KE_INTEGRAL_RESET_DELAY");
	MakeRptCmt	(0XF934,	"This time will allow lat G spikes to be ignored. After this time, the lat G will be acknowledged.\nSeconds");
	MakeWord	(0XF934);
	MakeName	(0XF934,	"OISTER_KE_LAT_G_SPIKE_REJECTION_TIME");
	MakeRptCmt	(0XF936,	"Allows the limiting of oil starvation protection transmission upshifts.\nGear");
	MakeByte	(0XF936);
	MakeName	(0XF936,	"OISTER_KE_LOWEST_GEAR_ALLOWED_LIMIT");
	MakeRptCmt	(0XF938,	"Minimum vehicle speed to allow the conditions to exist for oil starvation protection.\nMPH");
	MakeWord	(0XF938);
	MakeName	(0XF938,	"OISTER_KE_MINIMUM_VEHICLE_SPEED_FOR_OIS");
	MakeRptCmt	(0XF93A,	"Maximum vehicle speed to allow the conditions to exist for oil starvation protection.\nMPH");
	MakeWord	(0XF93A);
	MakeName	(0XF93A,	"OISTER_KE_MAXIMUM_VEHICLE_SPEED_FOR_OIS");
	MakeRptCmt	(0XF93C,	"Lateral acceleration threshold to enable protection mode based on low oil pressure detection.\nGs_B_U");
	MakeByte	(0XF93C);
	MakeName	(0XF93C,	"OISTER_KE_OIL_PRESSURE_G_ENABLE");
	MakeRptCmt	(0XF93E,	"Time delay to ensure the oil pressure level has truly exceeded the enable or disable thresholds.\nSeconds");
	MakeWord	(0XF93E);
	MakeName	(0XF93E,	"OISTER_KE_OIL_PRESSURE_NOISE_REJECTION");
	MakeRptCmt	(0XF940,	"Filters the Lat G Seconds threshold transients based on the current threshold.\nUnitless");
	MakeWord	(0XF940);
	MakeName	(0XF940,	"OISTER_KV_OIL_LEVEL_FILTER_COEFFICIENT");
	MakeRptCmt	(0XF96A,	"Filters the maximum Lat G Seconds threshold transients based on the current threshold.\nUnitless");
	MakeName	(0XF96A,	"OISTER_KE_OIL_LEVEL_FILTER_COEFFICIENT");
	MakeRptCmt	(0XF96C,	"Allows for the lowest gear possible to be reset to FIRST if the vehicle speed is below the cal.\nMPH");
	MakeWord	(0XF96C);
	MakeName	(0XF96C,	"OISTER_KE_OIL_LOWEST_GEAR_RESET_SPEED");
	MakeRptCmt	(0XF96E,	"Minimum ETC  vehicle speed governor when the engine oil starvation protection  mode is enabled.\nMPH");
	MakeWord	(0XF96E);
	MakeName	(0XF96E,	"OISTER_KE_OIL_MINIMUM_VEHICLE_SPEED");
	MakeRptCmt	(0XF970,	"Delta MPH  decrease of ETC vehicle speed governor when engine oil starvation protection mode is enabled.\nMPH");
	MakeWord	(0XF970);
	MakeName	(0XF970,	"OISTER_KE_OIL_SPEED_LIMIT_DECREASE");
	MakeRptCmt	(0XF972,	"Delta MPH  increase of ETC vehicle speed governor when engine oil starvation protection mode is NOT enabled.\nMPH");
	MakeWord	(0XF972);
	MakeName	(0XF972,	"OISTER_KE_OIL_SPEED_LIMIT_INCREASE");
	MakeRptCmt	(0XF974,	"Minimum amount of time the powertrain action will remain active once it has been initiated.\nSeconds");
	MakeWord	(0XF974);
	MakeName	(0XF974,	"OISTER_KE_POWERTRAIN_ACTION_TIME");
	MakeRptCmt	(0XF976,	"Above this value will enable the High G Timer FOR skid pad testing detection.\nGs_B_U");
	MakeByte	(0XF976);
	MakeName	(0XF976,	"OISTER_KE_PROTECTION_G_HIGH_HYSTERESIS");
	MakeRptCmt	(0XF977,	"Below thisvalue will be considered not high G conditions\nGs_B_U");
	MakeByte	(0XF977);
	MakeName	(0XF977,	"OISTER_KE_PROTECTION_G_LOW_HYSTERESIS");
	MakeRptCmt	(0XF978,	"Once oil starvation is activated, throttle must close to this value before maximum speed is incremented.\nPercent");
	MakeWord	(0XF978);
	MakeName	(0XF978,	"OISTER_KE_THROTTLE_MAX_TO_RESUME_DRIVER");
	MakeRptCmt	(0XF97A,	"Coefficient to filter the lateral acceleration variable using a first order lag filter.\nUnitless");
	MakeWord	(0XF97A);
	MakeName	(0XF97A,	"OISTER_KE_OIL_FILTER_COEFFICIENT");
	MakeRptCmt	(0XF97C,	"Minimum amount of time engine must be running before the Oil Starvation criteria will be considered.\nSeconds");
	MakeName	(0XF97C,	"OISTER_KV_OIL_MIN_ENGINE_RUN_TIME");
	MakeRptCmt	(0XF9A2,	"Engine oil pressure necessary to disable the oil starvation mode.\nkPa");
	MakeName	(0XF9A2,	"OISTER_KV_OIL_PRESSURE_DISABLE_LEVEL");
	MakeRptCmt	(0XF9C0,	"Abnormally low oil presure level which will cause engine damage if sustained.\nkPa");
	MakeName	(0XF9C0,	"OISTER_KV_OIL_PRESSURE_ENABLE_LEVEL");
	MakeRptCmt	(0XF9DE,	"Compensates the Maximum Lat G Seconds threshold for oil temperature.\nG_Seconds");
	MakeWord	(0XF9DE);
	MakeName	(0XF9DE,	"OISTER_KV_OIL_TEMPERATURE_OFFSET");
	MakeRptCmt	(0XF9FE,	"Threshold below which, the lateral_G integral gets reset to zero to avoid integral windup\nRPM");
	MakeName	(0XF9FE,	"OISTER_KV_RESET_INTEGRAL_LATERAL_GS");
	MakeRptCmt	(0XFA30,	"Left hand turn, threshold of Lateral G seconds, or an indication of amount of time spent as a function of G-forces\nG_Seconds");
	MakeName	(0XFA30,	"OISTER_KA_OIL_BASE_LEVEL_LH");
	MakeRptCmt	(0XFB5C,	"Right hand turn, threshold of Lateral G Seconds, or an indication of amount of time spent as  function of G-forces\nG_Seconds");
	MakeName	(0XFB5C,	"OISTER_KA_OIL_BASE_LEVEL_RH");
	MakeRptCmt	(0XFC88,	"The maximum airflow for O2 heater device control to be allowed.\nGrams_Per_Second");
	MakeWord	(0XFC88);
	MakeName	(0XFC88,	"OXYGEN_SENSOR_KE_DEV_CNTL_O2_HTR_AIRFLOW_LIMIT");
	MakeRptCmt	(0XFC8A,	"Ignition voltage greater than or equal to this value will shut the heaters off to protect against overvoltage.\nVolts");
	MakeWord	(0XFC8A);
	MakeName	(0XFC8A,	"OXYGEN_SENSOR_KE_O2_HEATER_OVERVOLTAGE_LIMIT");
	MakeRptCmt	(0XFC8C,	"Used to scale oxygen sensor analog input.\nmV_per_AD_Count");
	MakeWord	(0XFC8C);
	MakeName	(0XFC8C,	"OXYGEN_SENSOR_KE_OXYGEN_SENSOR_SCALE_FACTOR");
	MakeWord	(0XFC8E);
	MakeName	(0XFC8E,	"OXYGEN_SENSOR_KE_INRUSH_CURRENT_STABILIZE_TIME");
	MakeRptCmt	(0XFC90,	"The coefficient to filter the heater inrush resistance.\nFilt Coef");
	MakeWord	(0XFC90);
	MakeName	(0XFC90,	"OXYGEN_SENSOR_KE_HEATER_INRUSH_OHMS_FILT_COEF");
	MakeRptCmt	(0XFC92,	"The coefficient to filter the heater Resistance.\nFilter Coef");
	MakeWord	(0XFC92);
	MakeName	(0XFC92,	"OXYGEN_SENSOR_KE_HEATER_OHMS_FILTER_COEF");
	MakeRptCmt	(0XFC94,	"The delay after the heaters are turned on during which part learning samples are being taken.\nSeconds");
	MakeWord	(0XFC94);
	MakeName	(0XFC94,	"OXYGEN_SENSOR_KE_HEATER_ON_SAMPLE_DELAY");
	MakeWord	(0XFC96);
	MakeName	(0XFC96,	"OXYGEN_SENSOR_KE_LPL_ABS_TEMP_DIFF");
	MakeRptCmt	(0XFC98,	"The amount of time allowed for a limit part learn since engine run.\nSeconds");
	MakeWord	(0XFC98);
	MakeName	(0XFC98,	"OXYGEN_SENSOR_KE_LIMIT_LEARN_RUN_TIME_ABORT");
	MakeRptCmt	(0XFC9A,	"The current below which values are considered to be invalid.\nHeater_Amps");
	MakeWord	(0XFC9A);
	MakeName	(0XFC9A,	"OXYGEN_SENSOR_KE_MEASURED_HEATER_CURRENT_MIN");
	MakeRptCmt	(0XFC9C,	"The minimum amount of time that the engine has been off to allow a O2 sensor limit part error learn.\nSeconds");
	MakeDword	(0XFC9C);
	MakeName	(0XFC9C,	"OXYGEN_SENSOR_KE_O2_HEATER_REZERO_OFF_TIME");
	MakeRptCmt	(0XFCA0,	"The maximum temperature difference between ambient and coolant to allow a O2 sensor limit part error learn.\nDegrees_C");
	MakeWord	(0XFCA0);
	MakeName	(0XFCA0,	"OXYGEN_SENSOR_KE_O2_HEATER_REZERO_TEMP_DIFF");
	MakeRptCmt	(0XFCA2,	"The temperature offset used in the linear resistance temperature equation.\nDegrees_C");
	MakeWord	(0XFCA2);
	MakeName	(0XFCA2,	"OXYGEN_SENSOR_KE_O2_HEATER_ROOM_TEMP");
	MakeWord	(0XFCA4);
	MakeName	(0XFCA4,	"OXYGEN_SENSOR_KE_POST_O2_HTR_STARTUP_COOL_MIN");
	MakeRptCmt	(0XFCA6,	"Determines the number of pre O2 sensors used in the system.\n1-2");
	MakeByte	(0XFCA6);
	MakeName	(0XFCA6,	"OXYGEN_SENSOR_KE_PRE_O2_SENSORS");
	MakeRptCmt	(0XFCA8,	"The maximum coolant temperature to allow a O2 sensor limit part error learn.\nDegrees_C");
	MakeWord	(0XFCA8);
	MakeName	(0XFCA8,	"OXYGEN_SENSOR_KE_RCOHT_LEARN_COOLANT_TEMP_MAX");
	MakeRptCmt	(0XFCAA,	"The minimum coolant temperature to allow O2 sensor limit part error learn.\nDegrees_C");
	MakeWord	(0XFCAA);
	MakeName	(0XFCAA,	"OXYGEN_SENSOR_KE_RCOHT_LEARN_COOLANT_TEMP_MIN");
	MakeRptCmt	(0XFCAC,	"The amount of delay for each O2 heater to allow evaporation of any condensation in the exhaust system.\nSeconds");
	MakeName	(0XFCAC,	"OXYGEN_SENSOR_KV_COLD_O2_HEATER_DELAY");
	MakeRptCmt	(0XFCBC,	"The maximum inrush resistance that can be added to the inrush resistancefilter.\nOhms");
	MakeName	(0XFCBC,	"OXYGEN_SENSOR_KV_HEATER_INRUSH_RESIST_MAX");
	MakeName	(0XFCC4,	"OXYGEN_SENSOR_KV_LIMIT_PART_ERROR_MAX");
	MakeName	(0XFCCC,	"OXYGEN_SENSOR_KV_LIMIT_PART_ERROR_MIN");
	MakeRptCmt	(0XFCD4,	"Used to adjust from the ignition voltage reading to get to the heater voltage drop.\nVolts");
	MakeName	(0XFCD4,	"OXYGEN_SENSOR_KV_O2_HEATER_CKT_VOLTAGE_ADJ");
	MakeRptCmt	(0XFCDC,	"Indicates whether the O2 sensor is installed. 0 = NOT installed. 1 = installed.\nO2_Heater_Present_Type");
	MakeName	(0XFCDC,	"OXYGEN_SENSOR_KV_O2_HEATER_PRESENT");
	MakeRptCmt	(0XFCE0,	"The heater resistance at KE_O2_Heater_Room_Temp degrees C.\nOhms");
	MakeName	(0XFCE0,	"OXYGEN_SENSOR_KV_O2_HEATER_ROOM_TEMP_RESIST");
	MakeRptCmt	(0XFCE8,	"Temperature above which the O2 Sensor Heaters have reached that the Heaters need to be turned OFF.\nDegrees_C_S");
	MakeName	(0XFCE8,	"OXYGEN_SENSOR_KV_O2_HEATER_TURN_OFF_TEMP");
	MakeRptCmt	(0XFCF0,	"Temperature below which the O2 Sensor Heaters have cooled down sufficiently and should be turned ON.\nDegrees_C_S");
	MakeName	(0XFCF0,	"OXYGEN_SENSOR_KV_O2_HEATER_TURN_ON_TEMP");
	MakeRptCmt	(0XFCF8,	"The change in degrees C per 1 ohm resistance change in the oxygen sensor heater for each sensor.\nDegrees C");
	MakeName	(0XFCF8,	"OXYGEN_SENSOR_KA_O2_HEATER_DEGREES_PER_OHM");
	MakeRptCmt	(0XFD88,	"Filtered engine speed below which PTO modes can not be established.  Also clamps PTO_Maximum_Engine_Speed.\nRPM");
	MakeWord	(0XFD88);
	MakeName	(0XFD88,	"PTO_KE_LOW_SPEED_INHIBIT");
	MakeRptCmt	(0XFD8A,	"Filtered engine speed above which PTO modes can not be established.  Also clamps PTO_Maximum_Engine_Speed.\nRPM");
	MakeWord	(0XFD8A);
	MakeName	(0XFD8A,	"PTO_KE_HIGH_SPEED_INHIBIT");
	MakeRptCmt	(0XFD8C,	"Minimum allowed vehicle speed before Mobile PTO disengages. Also differentiates between Stationary and Mobile Variable PTO.\nMPH");
	MakeWord	(0XFD8C);
	MakeName	(0XFD8C,	"PTO_KE_LOW_VEH_SPEED_DISENGAGE");
	MakeRptCmt	(0XFD8E,	"Maximum allowed HARDCODED vehicle speed for Mobile PTO.\nMPH");
	MakeWord	(0XFD8E);
	MakeName	(0XFD8E,	"PTO_KE_HIGH_VEH_SPEED_DISENGAGE");
	MakeRptCmt	(0XFD90,	"Determines whether PTO High Idle mode will be allowed basedon the high idle switch input.\nBOOLEAN");
	MakeByte	(0XFD90);
	MakeName	(0XFD90,	"PTO_KE_PTO_HIGH_IDLE_ENABLED");
	MakeRptCmt	(0XFD92,	"Time for illuminating the High Idle Lamp for a bulb check.\nSeconds");
	MakeWord	(0XFD92);
	MakeName	(0XFD92,	"PTO_KE_HIGH_IDLE_BULB_CHECK_TIME");
	MakeRptCmt	(0XFD94,	"PTO idle engine speed when PTO control is entered.  ALSO the High Idle engine speed.\nRPM");
	MakeByte	(0XFD94);
	MakeName	(0XFD94,	"PTO_KE_PTO_IDLE_ENGINE_SPEED_EEPROM");
	MakeRptCmt	(0XFD95,	"Maximum allowed Engine Speed for PTO control.\nRPM");
	MakeByte	(0XFD95);
	MakeName	(0XFD95,	"PTO_KE_PTO_MAX_ENGINE_SPEED_EEPROM");
	MakeRptCmt	(0XFD96,	"Preset PTO engine speed when SET is pressed.\nRPM");
	MakeByte	(0XFD96);
	MakeName	(0XFD96,	"PTO_KE_SET_ENGINE_SPEED_EEPROM");
	MakeRptCmt	(0XFD97,	"Preset PTO engine speed when RESUME is pressed.\nRPM");
	MakeByte	(0XFD97);
	MakeName	(0XFD97,	"PTO_KE_RESUME_ENGINE_SPEED_EEPROM");
	MakeRptCmt	(0XFD98,	"Maximum allowed vehicle speed for Mobile Variable PTO control.\nMPH");
	MakeByte	(0XFD98);
	MakeName	(0XFD98,	"PTO_KE_PTO_MAX_VEHICLE_SPEED_EEPROM");
	MakeRptCmt	(0XFD9A,	"Time after engaging PTO Relay before raising the engine speed.\nSeconds");
	MakeWord	(0XFD9A);
	MakeName	(0XFD9A,	"PTO_KE_PTO_RAISE_ENGINE_SPD_DLY_TIME");
	MakeRptCmt	(0XFD9C,	"Max allowed engine speed for engaging PTO relay.\nRPM");
	MakeByte	(0XFD9C);
	MakeName	(0XFD9C,	"PTO_KE_PTO_RLY_ENGAGE_MAX_SPEED_EEPR");
	MakeRptCmt	(0XFD9D,	"Default PTO & Engine Shutdown option modes to be used before EEPROM is dealer programmed.\nBOOLEAN");
	MakeByte	(0XFD9D);
	MakeName	(0XFD9D,	"PTO_KV_DESIRED_OPTION_EEPROM_DEFAULT");
	MakeRptCmt	(0XFD9E,	"Integrator maximum value while PTO is engaged.\nRPM");
	MakeWord	(0XFD9E);
	MakeName	(0XFD9E,	"PTO_CONTROL_KE_PTO_INTEGRATOR_HIGH");
	MakeRptCmt	(0XFDA0,	"Integrator minimum value while PTO is engaged.\nRPM");
	MakeWord	(0XFDA0);
	MakeName	(0XFDA0,	"PTO_CONTROL_KE_PTO_INTEGRATOR_LOW");
	MakeRptCmt	(0XFDA2,	"Maximum desired throttle area that PTO can request.\nPercent");
	MakeWord	(0XFDA2);
	MakeName	(0XFDA2,	"PTO_CONTROL_KE_PTO_THROTTLE_AREA_LIMIT");
	MakeRptCmt	(0XFDA4,	"Hysteresis constant.\nRPM");
	MakeWord	(0XFDA4);
	MakeName	(0XFDA4,	"PTO_CONTROL_KE_HYSTERESIS");
	MakeRptCmt	(0XFDA6,	"Overspeed scheduled acceleration rate gain.\nRPM_Per_Second");
	MakeWord	(0XFDA6);
	MakeName	(0XFDA6,	"PTO_CONTROL_KE_SCHEDULED_ACCEL_GAIN_OVER");
	MakeRptCmt	(0XFDA8,	"Underspeed scheduled acceleration rate gain.\nRPM_Per_Second");
	MakeWord	(0XFDA8);
	MakeName	(0XFDA8,	"PTO_CONTROL_KE_SCHEDULED_ACCEL_GAIN_UNDER");
	MakeRptCmt	(0XFDAA,	"Acceleration error maximum value and maximum integrator increment per 100ms.\nRPM per 100ms");
	MakeWord	(0XFDAA);
	MakeName	(0XFDAA,	"PTO_CONTROL_KE_PTO_ENG_SPEED_DELTA_HIGH");
	MakeRptCmt	(0XFDAC,	"Acceleration error minimum value and maximum integrator decrement per 100ms.\nRPM per 100ms");
	MakeWord	(0XFDAC);
	MakeName	(0XFDAC,	"PTO_CONTROL_KE_PTO_ENG_SPEED_DELTA_LOW");
	MakeRptCmt	(0XFDAE,	"Adjusts the PTO desired throttle area to compensate for ambient pressure.\nScaler");
	MakeName	(0XFDAE,	"PTO_CONTROL_KV_PTO_BARO_COMPENSATION");
	MakeRptCmt	(0XFDB8,	"Effective Speed Error vs PTO Desired Throttle Area, Gain Table 0.\nPercent");
	MakeName	(0XFDB8,	"PTO_CONTROL_KV_GAIN_TABLE");
	MakeName	(0XFDD6,	"PTO_CONTROL_KA_VARIABLE_GAIN_WITH_SPEED");
	MakeName	(0XFEF6,	"PTO_CONTROL_KA_VELOCITY_COMPENSATION");
	MakeRptCmt	(0X10016,	"Filter coefficient for engine speed for the PTO control algorithm.\nFilter_Coefficient");
	MakeWord	(0X10016);
	MakeName	(0X10016,	"PTO_CONTROL_KE_PTO_ENG_SPEED_FILTER");
	MakeRptCmt	(0X10018,	"Maximum overspeed value (PTO_Eng_Speed_Error - Demand_Register) allowed without a PTO disengage.\nRPM");
	MakeWord	(0X10018);
	MakeName	(0X10018,	"PTO_CONTROL_KE_OVERSPEED_DISENGAGE");
	MakeRptCmt	(0X1001A,	"Brake before PTO security option. If TRUE, the brake or clutch input must be asserted before PTO can be enabled.\nBOOLEAN");
	MakeByte	(0X1001A);
	MakeName	(0X1001A,	"PTO_CONTROL_KE_PERFORM_BRK_OR_CLUTCH_TEST");
	MakeRptCmt	(0X1001C,	"Maximum value effective speed error can be.\nRPM");
	MakeWord	(0X1001C);
	MakeName	(0X1001C,	"PTO_CONTROL_KE_PTO_EFF_SPD_ERROR_MAX");
	MakeRptCmt	(0X1001E,	"Integrator gain when not in Resume or Accel modes.\nMultiplier_0_to_1");
	MakeWord	(0X1001E);
	MakeName	(0X1001E,	"PTO_CONTROL_KE_PTO_INTEGRATOR_GAIN");
	MakeWord	(0X10020);
	MakeName	(0X10020,	"PTO_MANAGE_KE_ACCEL_TERMINATION_OVERSHOOT");
	MakeWord	(0X10022);
	MakeName	(0X10022,	"PTO_MANAGE_KE_RESUME_VS_ACCEL_TIME");
	MakeRptCmt	(0X10024,	"The minimum amount of time the S/C switch must be depressed in order to move to engaged upon the release of the switch.\nSeconds");
	MakeWord	(0X10024);
	MakeName	(0X10024,	"PTO_MANAGE_KE_PTO_SET_TIME");
	MakeWord	(0X10026);
	MakeName	(0X10026,	"PTO_MANAGE_KE_TAP_DOWN_TIMEOUT");
	MakeWord	(0X10028);
	MakeName	(0X10028,	"PTO_MANAGE_KE_TAP_DOWN_SPEED_HIGH");
	MakeWord	(0X1002A);
	MakeName	(0X1002A,	"PTO_MANAGE_KE_TAP_DOWN_VS_COAST_TIME");
	MakeRptCmt	(0X1002C,	"The tap up/down increment to memory speed and demand register.\nRPM");
	MakeWord	(0X1002C);
	MakeName	(0X1002C,	"PTO_MANAGE_KE_TAP_INCREMENT");
	MakeWord	(0X1002E);
	MakeName	(0X1002E,	"PTO_MANAGE_KE_TAP_UP_SPEED_HIGH");
	MakeWord	(0X10030);
	MakeName	(0X10030,	"PTO_MANAGE_KE_TAP_UP_SPEED_LOW");
	MakeWord	(0X10032);
	MakeName	(0X10032,	"PTO_MANAGE_KE_TAP_UP_VS_ACCEL_TIME");
	MakeRptCmt	(0X10034,	"An additional term added to the Demand Register at the initiation of an Accel in order to obtain more Desired Throttle Area.\nRPM");
	MakeName	(0X10034,	"PTO_MANAGE_KV_ACCEL_STEP_FROM_SBE");
	MakeRptCmt	(0X10054,	"An additional term added to the Demand Register at the initiation of an Accel in order to obtain more Desired Throttle Area.\nRPM");
	MakeName	(0X10054,	"PTO_MANAGE_KV_ACCEL_STEP_FROM_ENG");
	MakeRptCmt	(0X10074,	"The resume rate increment per 100 ms.\nRPM");
	MakeName	(0X10074,	"PTO_MANAGE_KV_RESUME_RATE");
	MakeRptCmt	(0X1009E,	"The accel rate increment per 100 ms.\nRPM");
	MakeName	(0X1009E,	"PTO_MANAGE_KV_ACCEL_RATE");
	MakeRptCmt	(0X100BE,	"The coast rate increment per 100 ms.\nRPM");
	MakeWord	(0X100BE);
	MakeName	(0X100BE,	"PTO_MANAGE_KE_COAST_RATE");
	MakeRptCmt	(0X100C0,	"The tap up/down rate increment per 100 ms.\nRPM");
	MakeWord	(0X100C0);
	MakeName	(0X100C0,	"PTO_MANAGE_KE_TAP_RATE");
	MakeWord	(0X100C2);
	MakeName	(0X100C2,	"SHIFT_LIGHT_KE_REASONABLE_ENGINE_SPEED");
	MakeRptCmt	(0X100C4,	"Turn off shift light when MAP is below this threshold.\nkPa");
	MakeWord	(0X100C4);
	MakeName	(0X100C4,	"SHIFT_LIGHT_KV_SHIFT_MAP_THRESHOLD");
	MakeRptCmt	(0X100CC,	"KSLTMPA -  The lowest coolant temperature at which to indicate a good shift point.\nDegrees_C");
	MakeWord	(0X100CC);
	MakeName	(0X100CC,	"SHIFT_LIGHT_KE_TEMPERATURE_LO");
	MakeWord	(0X100CE);
	MakeName	(0X100CE,	"SHIFT_LIGHT_KV_ENGINE_SPEED_LO");
	MakeRptCmt	(0X100D6,	"KTPSNLTA, KTPSNLTC -  The lowest throttle at which to indicate a good shift point from each upshiftable gear.\nPercent");
	MakeWord	(0X100D6);
	MakeName	(0X100D6,	"SHIFT_LIGHT_KV_THROTTLE_LO");
	MakeRptCmt	(0X100DE,	"Throttle must be less than or equal to this value to permit a good shift point.\nPercent");
	MakeName	(0X100DE,	"SHIFT_LIGHT_KA_THROTTLE_HI_BASIC");
	MakeRptCmt	(0X10136,	"Hysteresis value subtracted from KE_Throttle_Hi when the shift light is off.\nPercent");
	MakeWord	(0X10136);
	MakeName	(0X10136,	"SHIFT_LIGHT_KV_THROTTLE_HI_HYST");
	MakeRptCmt	(0X1013E,	"Barometric correction used in determining the highest throttle allowed that indicates a good shift point.\nGain 0-16");
	MakeName	(0X1013E,	"SHIFT_LIGHT_KV_THROTTLE_HI_BARO_CORRECTION");
	MakeRptCmt	(0X10148,	"Max on time for the shift light.\nSeconds");
	MakeWord	(0X10148);
	MakeName	(0X10148,	"SHIFT_LIGHT_KE_SHIFT_DURATION");
	MakeRptCmt	(0X1014A,	"KTRNGR12, KTRNGR23, KTRNGR34, KTRNGR45 -  The lowest gear ratio (input/output) recognized as each upshiftable gear.\nInput/Out");
	MakeWord	(0X1014A);
	MakeName	(0X1014A,	"SHIFT_LIGHT_KV_GEAR_RATIO_LO");
	MakeWord	(0X1014C);
	MakeWord	(0X1014E);
	MakeWord	(0X10150);
	MakeRptCmt	(0X10152,	"Minimum engine speed allowed before indicating a good shift point when the engine is cold.\nRPM");
	MakeWord	(0X10152);
	MakeName	(0X10152,	"SHIFT_LIGHT_KV_COLD_ENGINE_SPEED_LO");
	MakeRptCmt	(0X1015A,	"Below this temperature, use the cold engine speed table to determine minimum engine speed for a good shift point.\nDegrees_C");
	MakeWord	(0X1015A);
	MakeName	(0X1015A,	"SHIFT_LIGHT_KE_COLD_TEMP_LO");
	MakeRptCmt	(0X1015C,	"Delay time from a good shift point to when the light will be turned on.\nSeconds");
	MakeName	(0X1015C,	"SHIFT_LIGHT_KV_DELAY_TIME");
	MakeRptCmt	(0X10172,	"Number of shift light loops to prevent a good shift point condition following the release of the clutch pedal.\nSeconds");
	MakeWord	(0X10172);
	MakeName	(0X10172,	"SHIFT_LIGHT_KE_CLUTCH_TRANS_INHIBIT_TIME");
	MakeRptCmt	(0X10174,	"Set to TRUE if the upshift light logic should be executed.\nBoolean");
	MakeByte	(0X10174);
	MakeName	(0X10174,	"SHIFT_LIGHT_KE_EXECUTE_UPSHIFT_LIGHT_ALGORIT");
	MakeRptCmt	(0X10175,	"Set to TRUE if the upshift light logic should directly controlthe upshift light PCM output. (Class2 message not used).\nBoolean");
	MakeByte	(0X10175);
	MakeName	(0X10175,	"SHIFT_LIGHT_KE_CONTROL_UPSHIFT_LIGHT");
	MakeRptCmt	(0X10176,	"The amount of spark retard to apply to lightoff the catalytic converter.\nDegrees_POSITIVE");
	MakeName	(0X10176,	"SPARK_ADVANCE_KA_CAT_LIGHTOFF_SPARK_RETARD");
	MakeName	(0X1025E,	"SurfaceTable_17x29_B5901___Catalytic_Converter_Warm_up_Spark_Retard");
	MakeRptCmt	(0X10638,	"Spark Advance for mean best timing.\nDegrees");
	MakeName	(0X10638,	"SPARK_ADVANCE_KA_MBT_SPARK");
	MakeRptCmt	(0X10890,	"This calibration determines base spark 'good fuel' contribution to spark advance.\nDegrees");
	MakeName	(0X10890,	"SPARK_ADVANCE_KA_MAIN_OT_HIGH_OCTANE");
	MakeRptCmt	(0X10E3A,	"This calibration determines base spark 'bad fuel' contribution to spark advance.\nDegrees");
	MakeName	(0X10E3A,	"SPARK_ADVANCE_KA_MAIN_OT_LOW_OCTANE");
	MakeRptCmt	(0X113E4,	"Interpolation fraction used to determine the portion of the FFS_Spark to use.\nMult_0_to_1");
	MakeWord	(0X113E4);
	MakeName	(0X113E4,	"SPARK_ADVANCE_KV_FFS_SPARK_BLEND_FACTOR");
	MakeRptCmt	(0X113EE,	"Multiplier applied to the Launch Spark value every ref pulse ince the hold duration has expired.\n0 to 1");
	MakeWord	(0X113EE);
	MakeName	(0X113EE,	"SPARK_ADVANCE_KV_LAUNCH_SPARK_RAMP_OUT_MULT");
	MakeRptCmt	(0X11414,	"Maximum spark retard limit allowed.\nDegrees");
	MakeName	(0X11414,	"SPARK_ADVANCE_KV_LIMIT_MAX_RETARD");
	MakeRptCmt	(0X1143E,	"Describes the index and ratio for interpolation between two adjacent air per cylinder values.\nScaler_2_S");
	MakeWord	(0X1143E);
	MakeName	(0X1143E,	"SPARK_ADVANCE_KE_AIR_PER_CYLINDER_BLEND_RATIO");
	MakeRptCmt	(0X11440,	"Engine speed threshold above which the EST will switch to low resnormal mode for non 24X applications.\nRPM");
	MakeWord	(0X11440);
	MakeName	(0X11440,	"SPARK_ADVANCE_KE_HVS_RUN_MODE_ENABLE_RPM");
	MakeRptCmt	(0X11442,	"Engine speed threshold below which the EST will switch to low rescrank mode for non 24X applications.\nRPM");
	MakeWord	(0X11442);
	MakeName	(0X11442,	"SPARK_ADVANCE_KE_HVS_RUN_MODE_DISABLE_RPM");
	MakeByte	(0X11444);
	MakeName	(0X11444,	"SPARK_ADVANCE_KV_HVS_SWITCH_MODES_REF_COUNT");
	MakeRptCmt	(0X11454,	"This calibration is a spark advance or retard based on Coolant Temperature and Engine Run Time.\nDegrees");
	MakeName	(0X11454,	"SPARK_ADVANCE_KA_LAUNCH_SPARK");
	MakeRptCmt	(0X1155E,	"Maximum Coolant Temperature for Soak Time multiplier to be applied to Launch Spark.\nDegrees C");
	MakeWord	(0X1155E);
	MakeName	(0X1155E,	"SPARK_ADVANCE_KE_LAUNCH_SPARK_MAXCLTSOAKENABLE");
	MakeRptCmt	(0X11560,	"Minimum Previous Engine Run Time for Soak Time multiplier to be applied to Launch Spark.\nSeconds");
	MakeDword	(0X11560);
	MakeName	(0X11560,	"SPARK_ADVANCE_KE_LAUNCH_SPARK_MINRUNSOAKENABLE");
	MakeRptCmt	(0X11564,	"Minimum Coolant Temperature for enable of the Engine Speed Multiplier to Launch Spark.\nDegrees C");
	MakeWord	(0X11564);
	MakeName	(0X11564,	"SPARK_ADVANCE_KE_LAUNCH_SPARKRPMMULTCOOLENABLE");
	MakeRptCmt	(0X11566,	"Used to calculate a ramp in multiplier based upon engine run time.\nSeconds");
	MakeWord	(0X11566);
	MakeName	(0X11566,	"SPARK_ADVANCE_KE_LIGHTOFF_AND_LAUNCHRAMPINTIME");
	MakeRptCmt	(0X11568,	"Minimum Engine Run Time for application of the RPMmultiplier.\nSeconds");
	MakeWord	(0X11568);
	MakeName	(0X11568,	"SPARK_ADVANCE_KE_LAUNCH_SPARKRPMRUNTIME");
	MakeDword	(x=0X1156A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X1156A,	"SPARK_ADVANCE_KV_LAUNCH_SPARK_RPM_MULTIPLIER");
	MakeRptCmt	(0X11594,	"This calibration is a multiplier applied to Launch Spark in short soak time conditions.\n0 to 2");
	MakeName	(0X11594,	"SPARK_ADVANCE_KV_LAUNCH_SPARK_SOAK_MULT");
	MakeRptCmt	(0X1159C,	"This calibration is an enabler to Launch Spark when an increasing change in cylinder air mass is above this threshold.\nGrams");
	MakeName	(0X1159C,	"SPARK_ADVANCE_KV_LAUNCH_SPARK_DELTA_CYLAIRMASS");
	MakeRptCmt	(0X115C6,	"This calibration is a multiplier for the cylinder air mass threshold.\n0 to 1");
	MakeWord	(0X115C6);
	MakeName	(0X115C6,	"SPARK_ADVANCE_KV_LAUNCH_SPARK_DELTA_CYLAIRMULT");
	MakeRptCmt	(0X115EC,	"This calibration is a multiplier to be applied to the cyli- nder air threshold.\n0 to 2");
	MakeWord	(0X115EC);
	MakeName	(0X115EC,	"SPARK_ADVANCE_KV_LAUNCH_SPARK_DELT_CA_TPS_MULT");
	MakeRptCmt	(0X11602,	"This calibration is the number of low resolution reference pulses.\nPulses");
	MakeByte	(0X11602);
	MakeName	(0X11602,	"SPARK_ADVANCE_KV_LAUNCH_SPARK_DURATION");
	MakeRptCmt	(0X11616,	"Equivalence ratio contribution to spark.\nDegrees");
	MakeName	(0X11616,	"SPARK_ADVANCE_KA_EQ_RATIO_SPARK");
	MakeRptCmt	(0X118B6,	"EGR contribution to spark.\nDegrees");
	MakeName	(0X118B6,	"SPARK_ADVANCE_KA_EGR_SPARK");
	MakeRptCmt	(0X11BA8,	"This calibration determines the main induction air temperature spark.\nDegrees");
	MakeName	(0X11BA8,	"SPARK_ADVANCE_KA_IAT_SPARK");
	MakeRptCmt	(0X1206A,	"CLOSED Throttle gain to use in the calculation of RDSC active damping.\nDeg/RPM");
	MakeWord	(0X1206A);
	MakeName	(0X1206A,	"SPARK_ADVANCE_KA_RDSC_DAMPING_GAIN_CT");
	MakeWord	(0X1207E);
	MakeRptCmt	(0X12092,	"OPEN Throttle gain to use in the calculation of RDSC active damping.\nDeg/RPM");
	MakeWord	(0X12092);
	MakeName	(0X12092,	"SPARK_ADVANCE_KA_RDSC_DAMPING_GAIN_OT");
	MakeWord	(0X120A6);
	MakeRptCmt	(0X120BA,	"CLOSED Throttle delay of the actual deliveryof active damping spark.\nmSec");
	MakeDword	(x=0X120BA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X120BA,	"SPARK_ADVANCE_KA_RDSC_PHASE_DELAY_TIME_CT");
	MakeDword	(x=0X120BE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X120C2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X120C6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X120CA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X120CE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X120D2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X120D6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X120DA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X120DE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeRptCmt	(0X120E2,	"OPEN Throttle delay of the actual deliveryof active damping spark.\nmSec");
	MakeDword	(x=0X120E2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X120E2,	"SPARK_ADVANCE_KA_RDSC_PHASE_DELAY_TIME_OT");
	MakeDword	(x=0X120E6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X120EA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X120EE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X120F2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X120F6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X120FA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X120FE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X12102);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X12106);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeRptCmt	(0X1210A,	"Limits the maximum absolute amount of RDSC active damping, when Closed Throttle.\nDegrees");
	MakeWord	(0X1210A);
	MakeName	(0X1210A,	"SPARK_ADVANCE_KA_RDSC_SPARK_LIMIT_CT");
	MakeWord	(0X1211E);
	MakeRptCmt	(0X12132,	"Limits the maximum absolute amount of RDSC active damping, when OPEN Throttle.\nDegrees");
	MakeWord	(0X12132);
	MakeName	(0X12132,	"SPARK_ADVANCE_KA_RDSC_SPARK_LIMIT_OT");
	MakeWord	(0X12146);
	MakeRptCmt	(0X1215A,	"This calibration determines base spark closed throttle and drive contribution to spark advance.\nDegrees");
	MakeName	(0X1215A,	"SPARK_ADVANCE_KA_MAIN_CT_DRIVE");
	MakeRptCmt	(0X1244C,	"This calibration determines base spark closed throttle and park or neutral contribution to spark advance.\nDegrees");
	MakeName	(0X1244C,	"SPARK_ADVANCE_KA_MAIN_CT_PARK");
	MakeRptCmt	(0X1273E,	"Coolant temperature spark contribution.\nDegrees");
	MakeName	(0X1273E,	"SPARK_ADVANCE_KA_CLT_SPARK");
	MakeName	(0X12CE8,	"CurveTable_21_Rows_B6227___Knock_Sensor_Filter_??");
	MakeRptCmt	(0X12FA0,	"The amount of time delay before enabling or disabling EGR spark.\nSeconds");
	MakeWord	(0X12FA0);
	MakeName	(0X12FA0,	"SPARK_ADVANCE_KE_EGR_SPARK_DELAY");
	MakeRptCmt	(0X12FA2,	"The EGR duty cycle threshold that allows enabling or disabling of EGR spark.\nPercent");
	MakeWord	(0X12FA2);
	MakeName	(0X12FA2,	"SPARK_ADVANCE_KE_EGR_DUTY_CYCLE_SPARK");
	MakeRptCmt	(0X12FA4,	"This is the time after RDSC is active to blend to 0 degrees.\nSeconds");
	MakeWord	(0X12FA4);
	MakeName	(0X12FA4,	"SPARK_ADVANCE_KE_RDSC_BLENDOUT_TIME");
	MakeRptCmt	(0X12FA6,	"Coolant must be greater than this to enable RDSC.\nDeg C");
	MakeWord	(0X12FA6);
	MakeName	(0X12FA6,	"SPARK_ADVANCE_KE_RDSC_COOLANT");
	MakeRptCmt	(0X12FA8,	"Coolant must be less than this to enable RDSC.\nDeg C");
	MakeWord	(0X12FA8);
	MakeName	(0X12FA8,	"SPARK_ADVANCE_KE_RDSC_COOLANT_HIGH_TEMP");
	MakeRptCmt	(0X12FAA,	"This identifies the diagnostic fault groups which will disable RDSC control.\nBOOLEAN");
	MakeDword	(0X12FAA);
	MakeName	(0X12FAA,	"SPARK_ADVANCE_KE_RDSC_FAULTS_THAT_DISABLE");
	MakeRptCmt	(0X12FAE,	"This defines if RPM derivative spark control is enabled.\nBOOLEAN");
	MakeByte	(0X12FAE);
	MakeName	(0X12FAE,	"SPARK_ADVANCE_KE_RDSC_IS_ENABLED");
	MakeRptCmt	(0X12FB0,	"If ESC spark retard is greater than this then disable advance portion of RDSC.\nDegrees");
	MakeWord	(0X12FB0);
	MakeName	(0X12FB0,	"SPARK_ADVANCE_KE_RDSC_KNOCK_LIMIT");
	MakeRptCmt	(0X12FB2,	"If RDSC delta RPM calculation is < this, then active damping is 0 degrees, when CLOSED Throttle.\nRPM");
	MakeWord	(0X12FB2);
	MakeName	(0X12FB2,	"SPARK_ADVANCE_KE_RDSC_MIN_DELTA_RPM_CT");
	MakeRptCmt	(0X12FB4,	"If RDSC delta RPM calculation is < this, then active damping is 0 degrees, when OPEN Throttle.\nRPM");
	MakeWord	(0X12FB4);
	MakeName	(0X12FB4,	"SPARK_ADVANCE_KE_RDSC_MIN_DELTA_RPM_OT");
	MakeRptCmt	(0X12FB6,	"IF PE is active, then RDSC damping and bias is reduced by this factor.\nMultiplier");
	MakeWord	(0X12FB6);
	MakeName	(0X12FB6,	"SPARK_ADVANCE_KE_RDSC_PE_FACTOR");
	MakeRptCmt	(0X12FB8,	"RDSC is not allowed if engine has been running less than this time.\nSeconds");
	MakeWord	(0X12FB8);
	MakeName	(0X12FB8,	"SPARK_ADVANCE_KE_RDSC_RUN_TIME");
	MakeRptCmt	(0X12FBA,	"This is the time RDSC is active once steady state triggered.\nSeconds");
	MakeWord	(0X12FBA);
	MakeName	(0X12FBA,	"SPARK_ADVANCE_KE_RDSC_STEADY_STATE_TIME");
	MakeRptCmt	(0X12FBC,	"This is the time RDSC is active once tirggered via a tip-in or tip-out.\nSeconds");
	MakeWord	(0X12FBC);
	MakeName	(0X12FBC,	"SPARK_ADVANCE_KE_RDSC_TIP_TIME");
	MakeRptCmt	(0X12FBE,	"Delta throttle position must be greater than this to trigger RDSC on a tip-in.\nPercent");
	MakeWord	(0X12FBE);
	MakeName	(0X12FBE,	"SPARK_ADVANCE_KE_RDSC_TIPIN_DELTA_TPS");
	MakeRptCmt	(0X12FC0,	"50 mS old throttle position must have been less than this to trigger RDSC on tip-in.\nPercent");
	MakeWord	(0X12FC0);
	MakeName	(0X12FC0,	"SPARK_ADVANCE_KE_RDSC_TIPIN_TPS");
	MakeRptCmt	(0X12FC2,	"Delta throttle position must be greater than this to trigger RDSC on a tip-out.\nPercent");
	MakeWord	(0X12FC2);
	MakeName	(0X12FC2,	"SPARK_ADVANCE_KE_RDSC_TIPOUT_DELTA_TPS");
	MakeRptCmt	(0X12FC4,	"50 mS old throttle position must have been greater than this to trigger RDSC on tip-out.\nPercent");
	MakeWord	(0X12FC4);
	MakeName	(0X12FC4,	"SPARK_ADVANCE_KE_RDSC_TIPOUT_TPS");
	MakeRptCmt	(0X12FC6,	"If torque control spark is greater than this value, then disable RDSC.\nDegrees");
	MakeWord	(0X12FC6);
	MakeName	(0X12FC6,	"SPARK_ADVANCE_KE_RDSC_TORQUE_CONTROL_SPARK");
	MakeWord	(0X12FC8);
	MakeName	(0X12FC8,	"SPARK_ADVANCE_KE_RDSC_TPS_THRESHOLD");
	MakeRptCmt	(0X12FCA,	"The maximum allowable spark advance.\nDegrees");
	MakeWord	(0X12FCA);
	MakeName	(0X12FCA,	"SPARK_ADVANCE_KE_LIMIT_MAX_ADVANCE");
	MakeRptCmt	(0X12FCC,	"This calibration establishes the threshold for closed throttle base spark table lookups.\nPercent");
	MakeWord	(0X12FCC);
	MakeName	(0X12FCC,	"SPARK_ADVANCE_KE_CT_TPS_THRESHOLD");
	MakeRptCmt	(0X12FCE,	"This calibration establishes closed throttle hysteresis for the base spark table lookups.\nPercent");
	MakeWord	(0X12FCE);
	MakeName	(0X12FCE,	"SPARK_ADVANCE_KE_CT_TPS_HYSTERESIS");
	MakeRptCmt	(0X12FD0,	"This calibration establishes closed throttle vehicle speed threshold for the base spark table lookups.\nMPH");
	MakeWord	(0X12FD0);
	MakeName	(0X12FD0,	"SPARK_ADVANCE_KE_CT_VEH_SPD_THRESHOLD");
	MakeRptCmt	(0X12FD2,	"This calibration establishes closed throttle vehicle speed hysteresis for the base spark table lookups.\nMPH");
	MakeWord	(0X12FD2);
	MakeName	(0X12FD2,	"SPARK_ADVANCE_KE_CT_VEH_SPD_HYSTERESIS");
	MakeRptCmt	(0X12FD4,	"Rate at which to ramp spark when transitioning from drive to park.\nDegrees");
	MakeWord	(0X12FD4);
	MakeName	(0X12FD4,	"SPARK_ADVANCE_KE_SHIFT_DR_TO_PN_RAMP");
	MakeWord	(0X12FD6);
	MakeName	(0X12FD6,	"SPARK_ADVANCE_KE_EGR_SPARK_MULT_LIMIT");
	MakeRptCmt	(0X12FD8,	"Rate at which to ramp spark when transitioning from park to drive.\nDegrees");
	MakeWord	(0X12FD8);
	MakeName	(0X12FD8,	"SPARK_ADVANCE_KE_SHIFT_PN_TO_DR_RAMP");
	MakeRptCmt	(0X12FDA,	"This calibration is a high engine load power steering pressure input spark modifier.\nDegrees");
	MakeWord	(0X12FDA);
	MakeName	(0X12FDA,	"SPARK_ADVANCE_KE_POWER_STEERING_PRESS_MOD");
	MakeRptCmt	(0X12FDC,	"Modifies the calculated octane scaler to establish authority based on temperature.\nMultiplier_0_to_1");
	MakeWord	(0X12FDC);
	MakeName	(0X12FDC,	"SPARK_ADVANCE_KV_APPLIED_OCTANE_SCALER_MULT");
	MakeRptCmt	(0X13002,	"Spark advance value based on engine speed if engine protection is enabled.\nDegrees");
	MakeName	(0X13002,	"SPARK_ADVANCE_KV_ENG_PROTECTION_SPARK_ADVANCE");
	MakeRptCmt	(0X1302C,	"A MAP modifier applied to the equivalence ratio angle.\nMultiplier_0_to_2");
	MakeName	(0X1302C,	"SPARK_ADVANCE_KV_EQ_RATIO_MAP_MODIFIER");
	MakeRptCmt	(0X1304E,	"Induction air temperature spark modifier based on engine speed.\nMultiplier");
	MakeName	(0X1304E,	"SPARK_ADVANCE_KV_IAT_RPM_MODIFIER");
	MakeRptCmt	(0X13078,	"Induction air temperature spark modifier based on coolant temperature.\nMultiplier_0_to_1");
	MakeWord	(0X13078);
	MakeName	(0X13078,	"SPARK_ADVANCE_KV_IAT_SPARK_COOLANT_MODIFIER");
	MakeRptCmt	(0X130C2,	"Modifies the flare control idle spark as a function of coolant temperature.\nMultiplier_0_to_1");
	MakeDword	(x=0X130C2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X130C2,	"SPARK_ADVANCE_KV_IDLE_FLARE_COOLANT_MULT");
	MakeRptCmt	(0X130D6,	"Maximum allowable spark advance delta between two consecutive events at low engine speeds.\nDegrees");
	MakeName	(0X130D6,	"SPARK_ADVANCE_KV_LIMIT_LOW_RPM_DELTA");
	MakeRptCmt	(0X130F2,	"This determines the sampling rate of RPM for delta RPM calc in RDSC.\nmSec");
	MakeDword	(x=0X130F2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X130F2,	"SPARK_ADVANCE_KV_RDSC_DELTA_RPM_TIME");
	MakeDword	(x=0X130F6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X130FA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X130FE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X13102);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeRptCmt	(0X13106,	"This determines the sampling rate of RPM for delta RPM calc in steady state RDSC mode.\nmSec");
	MakeDword	(x=0X13106);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X13106,	"SPARK_ADVANCE_KV_RDSC_DELTA_RPM_SS_TIME");
	MakeDword	(x=0X1310A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1310E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X13112);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X13116);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeRptCmt	(0X1311A,	"If the vehicle speed is outside this range, disable RDSC.\nMPH");
	MakeWord	(0X1311A);
	MakeName	(0X1311A,	"SPARK_ADVANCE_KV_RDSC_MPH_RANGE");
	MakeWord	(0X1311C);
	MakeName	(0X1311C,	"Constant16_B5930___Min_vehicle_speed_threshold_for_engine_speed_spark_damping");
	MakeRptCmt	(0X1311E,	"If the engine speed is outside this range, disable RDSC.\nRPM");
	MakeWord	(0X1311E);
	MakeName	(0X1311E,	"SPARK_ADVANCE_KV_RDSC_RPM_RANGE");
	MakeWord	(0X13120);
	MakeName	(0X13120,	"Constant16_B5931___Min_RPM_threshold_for_engine_speed_spark_damping");
	MakeRptCmt	(0X13122,	"Delay time after tip-in RDSC triggered, before allowing RDSC bias retard.\nSeconds");
	MakeDword	(x=0X13122);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X13122,	"SPARK_ADVANCE_KV_RDSC_SPARK_BIAS_DELAY");
	MakeDword	(x=0X13126);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1312A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1312E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X13132);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeRptCmt	(0X13136,	"Amount of RDSC spark bias retard when active, and CLOSED Throttle.\nDegrees");
	MakeWord	(0X13136);
	MakeName	(0X13136,	"SPARK_ADVANCE_KV_RDSC_SPARK_BIAS_RETARD_CT");
	MakeRptCmt	(0X1314A,	"Amount of RDSC spark bias retard when active, and OPEN Throttle.\nDegrees");
	MakeWord	(0X1314A);
	MakeName	(0X1314A,	"SPARK_ADVANCE_KV_RDSC_SPARK_BIAS_RETARD_OT");
	MakeRptCmt	(0X1315E,	"If TPS is less than this steady state RDSC is triggered.\nPercent");
	MakeWord	(0X1315E);
	MakeName	(0X1315E,	"SPARK_ADVANCE_KV_RDSC_STEADY_STATE_TPS");
	MakeWord	(0X13160);
	MakeName	(0X13160,	"Constant16_TPS_threshold_for_steady_state__spark_damping_active");
	MakeRptCmt	(0X13162,	"Coolant temperature spark modifier based on engine speed and coolant temperature.\n0 to 2");
	MakeName	(0X13162,	"SPARK_ADVANCE_KA_CLT_RPM_MODIFIER");
	MakeName	(0X136CC,	"CurveTable_10_Rows______________??_ETC_Tip_In_Torque_By_Gear_???");
	MakeRptCmt	(0X13774,	"Spark advance when engine is cranking.\nDegrees");
	MakeName	(0X13774,	"SPARK_ADVANCE_KV_CRANK_SPARK_MED_RES");
	MakeRptCmt	(0X1379A,	"Spark modifier based on input from IAC to control engine startup idle flare.\nDegrees");
	MakeDword	(x=0X1379A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X1379A,	"SPARK_ADVANCE_KV_IDLE_FLARE_CONTROL");
	MakeRptCmt	(0X137B0,	"This is the spark idle overspeed modifier.\nDegrees");
	MakeDword	(x=0X137B0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X137B0,	"SPARK_ADVANCE_KV_IDLE_OVERSPEED_ERROR");
	MakeRptCmt	(0X137C4,	"This is the spark idle underspeed modifier.\nDegrees");
	MakeName	(0X137C4,	"SPARK_ADVANCE_KV_IDLE_UNDERSPEED_ERROR");
	MakeRptCmt	(0X137D8,	"Inhibits the drive to park spark transition until this time is expired.\nSeconds");
	MakeName	(0X137D8,	"SPARK_ADVANCE_KV_SHIFT_DR_TO_PN_INHIBIT");
	MakeRptCmt	(0X137FE,	"Inhibits the park to drive spark transition until this time is expired.\nSeconds");
	MakeName	(0X137FE,	"SPARK_ADVANCE_KV_SHIFT_PN_TO_DR_INHIBIT");
	MakeRptCmt	(0X13824,	"This cal determines the flex fuel contribution to spark advance assuming E80 fuel (80% ethanol).\nDegrees");
	MakeName	(0X13824,	"SPARK_ADVANCE_KA_FFS_E80_SPARK_SHIFT");
	MakeRptCmt	(0X13B18,	"This cal determines the flex fuel contribution to MBT assuming E80 fuel (80% ethanol).\nDegrees");
	MakeName	(0X13B18,	"SPARK_ADVANCE_KA_FFS_E80_MBT_SPARK_SHIFT");
	MakeRptCmt	(0X13CA4,	"HVS position monitoring and limit adjusting logic is performed below this RPM.\nRPM");
	MakeWord	(0X13CA4);
	MakeName	(0X13CA4,	"SPARK_ADVANCE_KE_HVS_TEST_RPM_HI");
	MakeRptCmt	(0X13CA6,	"HVS position monitoring and limit adjusting logic is performed above this RPM.\nRPM");
	MakeWord	(0X13CA6);
	MakeName	(0X13CA6,	"SPARK_ADVANCE_KE_HVS_TEST_RPM_LO");
	MakeRptCmt	(0X13CA8,	"Maximum spark retard permitted by the HVS.\nDegrees");
	MakeWord	(0X13CA8);
	MakeName	(0X13CA8,	"SPARK_ADVANCE_KE_HVS_MAX_RETARD");
	MakeRptCmt	(0X13CAA,	"Default HVS offset when no CAM falling edge is detected.\nDegrees");
	MakeWord	(0X13CAA);
	MakeName	(0X13CAA,	"SPARK_ADVANCE_KE_HVS_DEGREE_OFFSET_DEFAULT");
	MakeRptCmt	(0X13CAC,	"Open throttle crank to run spark blending step size.\nDegrees");
	MakeWord	(0X13CAC);
	MakeName	(0X13CAC,	"SPARK_ADVANCE_KE_CRANK_BLEND_STEP_OT");
	MakeRptCmt	(0X13CAE,	"If throttle position is less than this value use Kx_TPS_Blend_Step otherwise use Kx_Spark_Blend_Step.\nPercent");
	MakeWord	(0X13CAE);
	MakeName	(0X13CAE,	"SPARK_ADVANCE_KE_CRANK_BLEND_TPS");
	MakeRptCmt	(0X13CB0,	"Closed throttle crank to run spark blending step size.\nDegrees");
	MakeWord	(0X13CB0);
	MakeName	(0X13CB0,	"SPARK_ADVANCE_KE_CRANK_BLEND_STEP_CT");
	MakeRptCmt	(0X13CB2,	"Number of ref pulses over which lightoff retard is ramped back in after disable from vacuum or lauch spark.\nCARDINAL");
	MakeWord	(0X13CB2);
	MakeName	(0X13CB2,	"SPARK_ADVANCE_KE_CAT_LIGHTOFF_REENABLE_REFS");
	MakeRptCmt	(0X13CB4,	"Set Catalyst Lightoff Spark Retard to zero when engine manifold vacuum is greater than this value.\nkPa");
	MakeWord	(0X13CB4);
	MakeName	(0X13CB4,	"SPARK_ADVANCE_KE_CAT_LIGHTOFF_SPARK_VACUUM_DIS");
	MakeWord	(0X13CB6);
	MakeName	(0X13CB6,	"SPARK_ADVANCE_KE_CAT_LIGHTOFF_SPARK_VACUUM_ENA");
	MakeRptCmt	(0X13CB8,	"\n");
	MakeWord	(0X13CB8);
	MakeName	(0X13CB8,	"SPARK_ADVANCE_KE_EGR_INCR_SPARK_FILT");
	MakeName	(0X13CBA,	"SPARK_ADVANCE_KV_CRANK_AFTERSTART_STEP");
	MakeRptCmt	(0X13CE0,	"Engine run time below which crank to run blend is controlled by either Kx_Afterstart_Blend_Step or Kx_Spark_Blend_Step.\nSeconds");
	MakeName	(0X13CE0,	"SPARK_ADVANCE_KV_CRANK_AFTERSTART_TIME");
	MakeName	(0X13CE4,	"CurveTable_19_Rows_Engine_run_time_threshold_for_initial_transition_from_crank_to_run");
	MakeRptCmt	(0X13D06,	"Powerup coolant multiplier applied to the catalyst lightoffspark retard.\nMultiplier_0_to_2");
	MakeName	(0X13D06,	"SPARK_ADVANCE_KV_CAT_LIGHTOFF_COOLANT_MULT");
	MakeRptCmt	(0X13D2C,	"Throttle position multiplier applied to the catalyst lightoffspark retard.\nMultiplier_0_to_1");
	MakeWord	(0X13D2C);
	MakeName	(0X13D2C,	"SPARK_ADVANCE_KV_CAT_LIGHTOFF_THROTTLE_MULT");
	MakeRptCmt	(0X13D42,	"The amount of time catalyst lightoff retard is active.\nSeconds");
	MakeName	(0X13D42,	"SPARK_ADVANCE_KV_CAT_LIGHTOFF_HOLD_TIME");
	MakeRptCmt	(0X13D68,	"The time over which catalyst lightoff retard is decayed to 0 after the hold time is satisfied.\nSeconds");
	MakeName	(0X13D68,	"SPARK_ADVANCE_KV_CAT_LIGHTOFF_DECAY_TIME");
	MakeRptCmt	(0X13D8E,	"This calibration determines the Piston Slap contribution to spark advance.\nDegrees");
	MakeName	(0X13D8E,	"SPARK_ADVANCE_KA_PISTON_SLAP_SPARK_RETARD");
	MakeRptCmt	(0X13ED8,	"This calibration is a Piston Slap Spark modifier based on Coolant Temperature.\nUnitless");
	MakeWord	(0X13ED8);
	MakeName	(0X13ED8,	"SPARK_ADVANCE_KV_PISTON_SLAP_COOLANT_MULT");
	MakeRptCmt	(0X13EFE,	"This determines the base dwell time.\nMilliseconds");
	MakeName	(0X13EFE,	"SPARK_DWELL_KA_MAIN_DWELL_TIME");
	MakeName	(0X1436C,	"SPARK_DWELL_KA_MODIFIER_DWELL_TIME");
	MakeWord	(0X14588);
	MakeName	(0X14588,	"SPARK_DWELL_KE_100MS_STEADY_STATE_RPM");
	MakeRptCmt	(0X1458A,	"Cold start crank mode modifier to the core dwell.\nMultiplier_0_to_4");
	MakeWord	(0X1458A);
	MakeName	(0X1458A,	"SPARK_DWELL_KE_CRANK_BOOST_DWELL");
	MakeRptCmt	(0X1458C,	"Dwell is initialized to this value at powerup.\nMilliseconds");
	MakeWord	(0X1458C);
	MakeName	(0X1458C,	"SPARK_DWELL_KE_INITIAL_DWELL");
	MakeRptCmt	(0X1458E,	"Initial dwell multiplier to determine max dwell atpowerup.\nMultiplier_1p1_to_1p3");
	MakeByte	(0X1458E);
	MakeName	(0X1458E,	"SPARK_DWELL_KE_INITIAL_MAX_DWELL");
	MakeRptCmt	(0X1458F,	"Initial dwell multiplier to determine min dwell atpowerup.\nMultiplier_0_to_1p0");
	MakeByte	(0X1458F);
	MakeName	(0X1458F,	"SPARK_DWELL_KE_INITIAL_MIN_DWELL");
	MakeRptCmt	(0X14590,	"The minimum dwell required at a given RPM in low-res only ignition systems.\nMillisec_vs_RPM_0to8000_Table");
	MakeWord	(0X14590);
	MakeName	(0X14590,	"SPARK_DWELL_KV_HVS_MIN_RUN_DWELL");
	MakeRptCmt	(0X145BA,	"This determines the max dwell time .\nMult1p1to1p3_vs_RPM_0to8000_Tbl");
	MakeName	(0X145BA,	"SPARK_DWELL_KV_MAX_DWELL");
	MakeRptCmt	(0X145D0,	"Modifier applied to the calculated dwell to adjust the value as a function of manifold pressure.\nMult_0to2_vs_kPa_20to100_Table");
	MakeName	(0X145D0,	"SPARK_DWELL_KV_DWELL_MAP_MODIFIER");
	MakeRptCmt	(0X145F2,	"This determines the min dwell time .\nMult0to1p0_vs_RPM_0to8000_Table");
	MakeName	(0X145F2,	"SPARK_DWELL_KV_MIN_DWELL");
	MakeRptCmt	(0X14608,	"EST will be forced off after this amount of time to prevent coil damage.\nSeconds");
	MakeWord	(0X14608);
	MakeName	(0X14608,	"SPARK_DWELL_KE_HVS_MAX_CRANK_DWELL");
	MakeRptCmt	(0X1460A,	"This is the number of ESC sensors used to determine if ESC sensors should be multiplexed in diagnostics.\nNumber");
	MakeByte	(0X1460A);
	MakeName	(0X1460A,	"SPARK_KNOCK_KE_NUMBER_OF_SENSORS");
	MakeRptCmt	(0X1460C,	"If TPS changes more than this in 200 ms MAD learning will be disabled\nPercent");
	MakeWord	(0X1460C);
	MakeName	(0X1460C,	"SPARK_KNOCK_KE_DELTA_TPS_ABSOLUTE_MAD_DIS");
	MakeRptCmt	(0X1460E,	"If RPM changes more than this in 200 ms MAD learning will be disabled\nRPM");
	MakeWord	(0X1460E);
	MakeName	(0X1460E,	"SPARK_KNOCK_KE_DELTA_RPM_ABSOLUTE_MAD_DIS");
	MakeRptCmt	(0X14610,	"If 12p5_ms_Filtered_MAP has changed more than this MAD learning will be disabled\nRPM");
	MakeWord	(0X14610);
	MakeName	(0X14610,	"SPARK_KNOCK_KE_DELTA_MAP_ABSOLUTE_MAD_DIS");
	MakeRptCmt	(0X14612,	"Filter coefficient for 12.5 ms MAP readings\nCoef.");
	MakeByte	(0X14612);
	MakeName	(0X14612,	"SPARK_KNOCK_KE_MAP_12P5_MS_FILT_COEFFICIENT");
	MakeRptCmt	(0X14613,	"This controls the number of 200 ms loops betweenadaptive BPF gain calculations\nCounts");
	MakeByte	(0X14613);
	MakeName	(0X14613,	"SPARK_KNOCK_KE_ADAPTIVE_BPF_GAIN_ADJ_RATE");
	MakeRptCmt	(0X14614,	"This is the initial value for the BPF Gain.\nGain_dB");
	MakeByte	(0X14614);
	MakeName	(0X14614,	"SPARK_KNOCK_KE_INITIAL_ADAPTIVE_BPF_GAIN");
	MakeRptCmt	(0X14615,	"This is the minimum value for the BPF Gain.\nGain_dB");
	MakeByte	(0X14615);
	MakeName	(0X14615,	"SPARK_KNOCK_KE_MIN_ADAPTIVE_BPF_GAIN");
	MakeRptCmt	(0X14616,	"This is the maximum value for the BPF Gain.\nGain_dB");
	MakeByte	(0X14616);
	MakeName	(0X14616,	"SPARK_KNOCK_KE_MAX_ADAPTIVE_BPF_GAIN");
	MakeRptCmt	(0X14617,	"This is the value for the BPF Gain in diagnostic mode.\nGain_dB");
	MakeByte	(0X14617);
	MakeName	(0X14617,	"SPARK_KNOCK_KE_DIAG_IRIC_DB_GAIN");
	MakeRptCmt	(0X14618,	"RPM value below this level will not enable Delta RPM detection logic.\nRPM");
	MakeWord	(0X14618);
	MakeName	(0X14618,	"SPARK_KNOCK_KE_RPM_KNOCK_LOW");
	MakeRptCmt	(0X1461A,	"RPM value above this level will not enable Delta RPM detection logic.\nRPM");
	MakeWord	(0X1461A);
	MakeName	(0X1461A,	"SPARK_KNOCK_KE_RPM_KNOCK_HIGH");
	MakeRptCmt	(0X1461C,	"An RPM increase greater than this over a 25 msec time period will enable the Delta RPM detection logic.\nRPM");
	MakeWord	(0X1461C);
	MakeName	(0X1461C,	"SPARK_KNOCK_KE_RPM_KNOCK_DELTA");
	MakeRptCmt	(0X1461E,	"Duration of time to modify knock thresholds due to an engine speed increase.\nSecond");
	MakeWord	(0X1461E);
	MakeName	(0X1461E,	"SPARK_KNOCK_KE_RPM_KNOCK_TIME");
	MakeRptCmt	(0X14620,	"Octane adaptive scaler is modified by this calibrated amount every powerup when KE_Octane_Scaler_Modify_On_Init is TRUE.\nScaler -1 to 1");
	MakeName	(0X14620,	"SPARK_KNOCK_KA_OCTANE_INIT_MODIFIER");
	MakeRptCmt	(0X148F2,	"If the average noise is greater than this value the adaptive gain will be decreased.\nVolts");
	MakeWord	(0X148F2);
	MakeName	(0X148F2,	"SPARK_KNOCK_KE_ADAPT_BPF_HIGH_AVG_NOISE_THRE");
	MakeRptCmt	(0X148F4,	"If the average noise is less than this value the adaptive gain will be increased.\nVolts");
	MakeWord	(0X148F4);
	MakeName	(0X148F4,	"SPARK_KNOCK_KE_ADAPT_BPF_LOW_AVG_NOISE_THRES");
	MakeRptCmt	(0X148F6,	"Initialization value for Knock_Detector_MAD value invoked during powerup.\nMillivolts");
	MakeDword	(x=0X148F6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X148F6,	"SPARK_KNOCK_KE_KNOCK_DETECTOR_MAD_INIT");
	MakeRptCmt	(0X148FA,	"Maximum allowable knock detector mean absolute deviation (MAD) for any sensor.\nMillivolts");
	MakeDword	(x=0X148FA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X148FA,	"SPARK_KNOCK_KE_KNOCK_DETECTOR_MAD_MAX");
	MakeRptCmt	(0X148FE,	"Minimum allowable knock detector mean absolute deviation (MAD) for any sensor.\nMillivolts");
	MakeDword	(x=0X148FE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X148FE,	"SPARK_KNOCK_KE_KNOCK_DETECTOR_MAD_MIN");
	MakeRptCmt	(0X14902,	"Above this manifold pressure, threshold Knock_Detector_MAD can be updated.\nkPa");
	MakeWord	(0X14902);
	MakeName	(0X14902,	"SPARK_KNOCK_KE_KNOCK_MAD_MAP_THRESH");
	MakeRptCmt	(0X14904,	"Above this engine speed, threshold Knock_Detector_MAD can be updated.\nRPM");
	MakeWord	(0X14904);
	MakeName	(0X14904,	"SPARK_KNOCK_KE_KNOCK_MAD_RPM_THRESH");
	MakeRptCmt	(0X14906,	"Determines the number of samples used in computing Knock_Detector_MAD.\nCounts");
	MakeWord	(0X14906);
	MakeName	(0X14906,	"SPARK_KNOCK_KE_MAD_COEFFICIENT_SAMPLES");
	MakeRptCmt	(0X14908,	"If KE_IR_Avg_Noise_Modify_Init is TRUE then all IR average noise levels will be set to this calibration upon initialization.\nVolts");
	MakeWord	(0X14908);
	MakeName	(0X14908,	"SPARK_KNOCK_KE_IR_AVERAGE_NOISE_INITIAL");
	MakeRptCmt	(0X1490A,	"When set to TRUE, all IR average noise levels will be set to a calibration upon initialization.\nBoolean");
	MakeByte	(0X1490A);
	MakeName	(0X1490A,	"SPARK_KNOCK_KE_IR_AVG_NOISE_MODIFY_INIT");
	MakeRptCmt	(0X1490C,	"This is the octane scaler value if a knock sensor group fault is active.\nMultiplier_0_To_1");
	MakeWord	(0X1490C);
	MakeName	(0X1490C,	"SPARK_KNOCK_KE_OCTANE_SCALER_DIAG_DEFAULT");
	MakeRptCmt	(0X1490E,	"When set to TRUE the octane adaptive scaler will be modified on every powerup.\nBoolean");
	MakeByte	(0X1490E);
	MakeName	(0X1490E,	"SPARK_KNOCK_KE_OCTANE_SCALER_MODIFY_ON_INIT");
	MakeRptCmt	(0X1490F,	"When this calibration is exceeded, the slow sample number will be used for determining the average noise level.\nCounts");
	MakeByte	(0X1490F);
	MakeName	(0X1490F,	"SPARK_KNOCK_KE_SPEED_CHANGE_HIGH_COUNTER_A");
	MakeRptCmt	(0X14910,	"An attack rate coolant gain table that allows the detector to be disabled below an engine temperature.\nScaler");
	MakeWord	(0X14910);
	MakeName	(0X14910,	"SPARK_KNOCK_KV_KNOCK_FAST_ATTACK_COOL_GAIN");
	MakeRptCmt	(0X14936,	"An attack rate baro gain table that adjusts the detector's sensitivity for changes in altitude.\nScaler");
	MakeName	(0X14936,	"SPARK_KNOCK_KV_KNOCK_FAST_ATTACK_BARO_GAIN");
	MakeRptCmt	(0X14942,	"This calibration is a knock retard fast multiplier based on engine speed for Integrate and Read Modes.\nDegrees/V");
	MakeName	(0X14942,	"SPARK_KNOCK_KV_KNOCK_FAST_IR_ATTACK_RATE");
	MakeRptCmt	(0X1496C,	"This calibration is the total maximum knock retard authority allowed when Power Enrichment is not active.\nDegrees");
	MakeName	(0X1496C,	"SPARK_KNOCK_KV_KNOCK_RETARD_LIMIT_LOAD");
	MakeRptCmt	(0X1498E,	"This calibration is the total maximum knock retard authority allowed when Power Enrichment is active.\nDegrees");
	MakeDword	(x=0X1498E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X1498E,	"SPARK_KNOCK_KV_KNOCK_RETARD_LIMIT_SPEED");
	MakeRptCmt	(0X149B8,	"This calibration is the default value for knock retard fast when Knock System faults exist.\nDegrees");
	MakeName	(0X149B8,	"SPARK_KNOCK_KV_KNOCK_RETARD_DEFAULT_LOAD");
	MakeName	(0X149CA,	"SPARK_KNOCK_KV_KNOCK_FAST_RECOVER_RATE");
	MakeRptCmt	(0X149F4,	"Manifold Pressure value below which Learn Gain is set to zero.\nkPa");
	MakeWord	(0X149F4);
	MakeName	(0X149F4,	"SPARK_KNOCK_KE_LRN_GAIN_MIN_MAP");
	MakeRptCmt	(0X149F6,	"Engine Speed value above which Learn Gain is set to zero.\nRPM");
	MakeWord	(0X149F6);
	MakeName	(0X149F6,	"SPARK_KNOCK_KE_LRN_GAIN_MAX_RPM");
	MakeRptCmt	(0X149F8,	"Engine Speed value below which Learn Gain is set to zero.\nRPM");
	MakeWord	(0X149F8);
	MakeName	(0X149F8,	"SPARK_KNOCK_KE_LRN_GAIN_MIN_RPM");
	MakeRptCmt	(0X149FA,	"Coolant Temperature value below which Learn Gain is set to zero.\nDegrees_C");
	MakeWord	(0X149FA);
	MakeName	(0X149FA,	"SPARK_KNOCK_KE_LRN_GAIN_MIN_COOL");
	MakeRptCmt	(0X149FC,	"Induction Air Temperature value below which Learn Gain is set to zero.\nDegrees_C");
	MakeWord	(0X149FC);
	MakeName	(0X149FC,	"SPARK_KNOCK_KE_LRN_GAIN_MIN_IAT");
	MakeRptCmt	(0X149FE,	"Total retard value above which Learn Gain is set to zero.\nDegrees");
	MakeWord	(0X149FE);
	MakeName	(0X149FE,	"SPARK_KNOCK_KE_LRN_GAIN_TOTAL_RTD");
	MakeRptCmt	(0X14A00,	"Weighted Multiplier for MAP contribution to Learn Gain.\nMultiplier");
	MakeWord	(0X14A00);
	MakeName	(0X14A00,	"SPARK_KNOCK_KE_MAP_WEIGHT_FACTOR");
	MakeRptCmt	(0X14A02,	"Weighted Multiplier for RPM contribution to Learn Gain.\nMultiplier");
	MakeWord	(0X14A02);
	MakeName	(0X14A02,	"SPARK_KNOCK_KE_RPM_WEIGHT_FACTOR");
	MakeRptCmt	(0X14A04,	"Weighted Multiplier for coolant temperature contribution to Learn Gain.\nMultiplier");
	MakeWord	(0X14A04);
	MakeName	(0X14A04,	"SPARK_KNOCK_KE_COOL_WEIGHT_FACTOR");
	MakeRptCmt	(0X14A06,	"Delta TPS to activate transient condition check.\nPercent");
	MakeWord	(0X14A06);
	MakeName	(0X14A06,	"SPARK_KNOCK_KE_DELTA_TIP_IN_TPS");
	MakeRptCmt	(0X14A08,	"Weighted Multiplier for Induction Air Temperature contribution to Learn Gain.\nMultiplier");
	MakeWord	(0X14A08);
	MakeName	(0X14A08,	"SPARK_KNOCK_KE_IAT_WEIGHT_FACTOR");
	MakeRptCmt	(0X14A0A,	"Weighted Multiplier for Total Retard contribution to Learn Gain.\nMultiplier");
	MakeWord	(0X14A0A);
	MakeName	(0X14A0A,	"SPARK_KNOCK_KE_TOTAL_RTD_WEIGHT_FACTOR");
	MakeRptCmt	(0X14A0C,	"Time that the transient calibrations to modify the knock detection criteria are enabled.\nSeconds");
	MakeWord	(0X14A0C);
	MakeName	(0X14A0C,	"SPARK_KNOCK_KE_TIP_IN_KNOCK_TIME");
	MakeRptCmt	(0X14A0E,	"Maximum TPS to activate transient condition check.\nPercent");
	MakeWord	(0X14A0E);
	MakeName	(0X14A0E,	"SPARK_KNOCK_KE_TPS_KNOCK_HIGH");
	MakeRptCmt	(0X14A10,	"Minimum TPS to activate transient condition check.\nPercent");
	MakeWord	(0X14A10);
	MakeName	(0X14A10,	"SPARK_KNOCK_KE_TPS_KNOCK_LOW");
	MakeRptCmt	(0X14A12,	"Manifold Pressure contribution to engine's propensity to knock.\nMultiplier");
	MakeName	(0X14A12,	"SPARK_KNOCK_KV_KNOCK_MAP_LEARN_GAIN");
	MakeRptCmt	(0X14A24,	"Engine Speed contribution to engine's propensity to knock.\nMultiplier");
	MakeWord	(0X14A24);
	MakeName	(0X14A24,	"SPARK_KNOCK_KV_KNOCK_RPM_LEARN_GAIN");
	MakeRptCmt	(0X14A3A,	"Coolant Temperature contribution to engine's propensity to knock.\nMultiplier");
	MakeWord	(0X14A3A);
	MakeName	(0X14A3A,	"SPARK_KNOCK_KV_KNOCK_COOL_LEARN_GAIN");
	MakeRptCmt	(0X14A4E,	"Induction Air Temperature contribution to engine's propensity to knock.\nMultiplier");
	MakeWord	(0X14A4E);
	MakeName	(0X14A4E,	"SPARK_KNOCK_KV_KNOCK_IAT_LEARN_GAIN");
	MakeRptCmt	(0X14A62,	"Total Spark Retard contribution to engine's propensity to knock.\nMultiplier");
	MakeDword	(x=0X14A62);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X14A62,	"SPARK_KNOCK_KV_KNOCK_TOTAL_RTD_LEARN_GAIN");
	MakeRptCmt	(0X14A78,	"This calibration is the initial value for Octane Scaler.\nMultiplier");
	MakeWord	(0X14A78);
	MakeName	(0X14A78,	"SPARK_KNOCK_KE_OCTANE_INIT_SCALER");
	MakeDword	(x=0X14A7A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X14A7A,	"SPARK_KNOCK_KV_DELTA_OCTANE_MULT");
	MakeByte	(0X14A98);
	MakeRptCmt	(0X14AB8,	"This is the rate to increment the Octane Scaler when conditions are met.\nMultiplier");
	MakeWord	(0X14AB8);
	MakeName	(0X14AB8,	"SPARK_KNOCK_KE_OCTANE_SCALER_INCREMENT");
	MakeRptCmt	(0X14ABA,	"Learn down octane scaler only if Knock_Retard_Fast exceeds this minimum threshold.\nDegrees");
	MakeWord	(0X14ABA);
	MakeName	(0X14ABA,	"SPARK_KNOCK_KE_OCT_KNOCK_FAST_THRESH");
	MakeRptCmt	(0X14ABC,	"This is the rate to decrement the Octane Scaler when conditions are met.\nMultiplier");
	MakeWord	(0X14ABC);
	MakeName	(0X14ABC,	"SPARK_KNOCK_KE_OCTANE_SCALER_DECREMENT");
	MakeRptCmt	(0X14ABE,	"This calibration selects the knock detection configuration.\nIRIC Mode");
	MakeByte	(0X14ABE);
	MakeName	(0X14ABE,	"SPARK_KNOCK_KE_KNOCK_DETECTION_MODE");
	MakeRptCmt	(0X14AC0,	"This is the amount of time between toggling the ESC Select line when in diagnostics mode.\nMillisecs.");
	MakeWord	(0X14AC0);
	MakeName	(0X14AC0,	"SPARK_KNOCK_KE_BANK_HOLD_TIME");
	MakeByte	(0X14AC2);
	MakeName	(0X14AC2,	"SPARK_KNOCK_KE_MUX_PATTERN_CONTROL");
	MakeByte	(0X14AC3);
	MakeName	(0X14AC3,	"SPARK_KNOCK_KE_TDC_OFFSET");
	MakeRptCmt	(0X14AC4,	"This is the center frequency for bandpass filter 1.\nKHz");
	MakeByte	(0X14AC4);
	MakeName	(0X14AC4,	"SPARK_KNOCK_KV_BPF1_FC");
	MakeRptCmt	(0X14ADA,	"This is the quality factor for bandpass filter 1.\nQ");
	MakeByte	(0X14ADA);
	MakeName	(0X14ADA,	"SPARK_KNOCK_KV_BPF1_Q");
	MakeRptCmt	(0X14AF0,	"This sets the integration time constant for the Integrate and Read mode.\nMicrosecs.");
	MakeName	(0X14AF0,	"SPARK_KNOCK_KA_INTEGRATION_TIME");
	MakeRptCmt	(0X14B8A,	"When delta engine speed is above this threshold use the high noise channel time constants.\nRPM");
	MakeWord	(0X14B8A);
	MakeName	(0X14B8A,	"SPARK_KNOCK_KE_SPEED_CHANGE_HIGH");
	MakeRptCmt	(0X14B8C,	"This calibration selects the output for diagnostics mux 1.\nMode");
	MakeByte	(0X14B8C);
	MakeName	(0X14B8C,	"SPARK_KNOCK_KE_DIAG1_MODE");
	MakeRptCmt	(0X14B8D,	"This calibration selects the output for diagnostics mux 2.\nMode");
	MakeByte	(0X14B8D);
	MakeName	(0X14B8D,	"SPARK_KNOCK_KE_DIAG2_MODE");
	MakeRptCmt	(0X14B8E,	"Time delay from the TDC_Reference -MEDRES- to wherethe ESC Bank Select line will change.\nMillisecs.");
	MakeWord	(0X14B8E);
	MakeName	(0X14B8E,	"SPARK_KNOCK_KV_ESC_SELECTION_TIME");
	MakeRptCmt	(0X14BB8,	"Time delay from the TDC_Reference -MEDRES- to wherethe WINGATE goes high - start of integration.\nMicrosecs.");
	MakeName	(0X14BB8,	"SPARK_KNOCK_KA_GATE_DELAY");
	MakeRptCmt	(0X14CDE,	"Integration time - duration of WINGATE.\nMicrosecs.");
	MakeName	(0X14CDE,	"SPARK_KNOCK_KA_GATE_ACTIVE");
	MakeName	(0X14D9C,	"Constant16_???_EGR_Pintle_Position_Filtering_Coefficient_for_Fast_EGR_Operation_??");
	MakeRptCmt	(0X14E04,	"This calibration establishes a minimum learned average noise level for the Integrate and Read detector threshold calculation.\nVolts");
	MakeWord	(0X14E04);
	MakeName	(0X14E04,	"SPARK_KNOCK_KE_MINIMUM_AVERAGE_NOISE_LEVEL");
	MakeRptCmt	(0X14E06,	"This calibration controls offset cancellation in the IRIC when in Integrate and Read modes.\nBOOLEAN");
	MakeByte	(0X14E06);
	MakeName	(0X14E06,	"SPARK_KNOCK_KE_IR_OFFSET_CANCEL");
	MakeRptCmt	(0X14E07,	"Determines for Integrate and Read Modes only if the cylinder detection strategy will be Global or Individual\nMode");
	MakeByte	(0X14E07);
	MakeName	(0X14E07,	"SPARK_KNOCK_KE_CYLINDER_DETECTION_MODE");
	MakeRptCmt	(0X14E08,	"The portion of the knock A/D reading used in the calculation of the average noise level knock event.\nMultiplier");
	MakeWord	(0X14E08);
	MakeName	(0X14E08,	"SPARK_KNOCK_KE_KNOCK_PORTION");
	MakeRptCmt	(0X14E0A,	"This calibration is used to establish the knock limit if Delta RPM knock detection is true.\nMultiplier");
	MakeName	(0X14E0A,	"SPARK_KNOCK_KV_DELTA_RPM_KNOCK_ENERGY_MAD");
	MakeRptCmt	(0X14E34,	"This calibration is used with the Integrated energy read to determine if knock occurred.\nMultiplier");
	MakeName	(0X14E34,	"SPARK_KNOCK_KV_KNOCK_ENERGY_MAD");
}


static Bytes_4(void) {
        auto x;
#define id x

	MakeRptCmt	(0X14E5E,	"This calibration is used to establish the knock limit if Tip_In_Knock_Detection is TRUE.\nMultiplier");
	MakeName	(0X14E5E,	"SPARK_KNOCK_KV_TIP_IN_KNOCK_ENERGY_MAD");
	MakeRptCmt	(0X14E88,	"This calibration is used with the Integrated energy read to determine if knock occurred.\nMultiplier");
	MakeName	(0X14E88,	"SPARK_KNOCK_KA_KNOCK_ENERGY_MAD");
	MakeRptCmt	(0X14FD8,	"This calibration is used with the Integrated energy read to establish a knock threshold.\nMultiplier");
	MakeName	(0X14FD8,	"SPARK_KNOCK_KV_KNOCK_ENERGY_MAD_GAIN");
	MakeRptCmt	(0X14FFA,	"This calibration is used with the Integrated energy read to establish a knock threshold.\nMultiplier");
	MakeName	(0X14FFA,	"SPARK_KNOCK_KA_KNOCK_ENERGY_MAD_GAIN");
	MakeByte	(0X152C4);
	MakeName	(0X152C4,	"SPARK_KNOCK_KE_SAMPLE_NUMBER_SLOW");
	MakeByte	(0X152C5);
	MakeName	(0X152C5,	"SPARK_KNOCK_KE_SAMPLE_NUMBER_FAST");
	MakeRptCmt	(0X152C6,	"EST must remain low for at least this amount of time to complete a burn.\nMilliseconds");
	MakeWord	(0X152C6);
	MakeName	(0X152C6,	"SPARK_IO_KE_MIN_BURN_TIME");
	MakeRptCmt	(0X152C8,	"This is the angular lag of the ignition crank sensor data.\nDegrees");
	MakeWord	(0X152C8);
	MakeName	(0X152C8,	"SPARK_IO_KE_SENSOR_LAG");
	MakeRptCmt	(0X152CA,	"This is the angular lag due to the medium resolution signal processing.\nDegrees_vs_RPM_0to8000_Table");
	MakeDword	(x=0X152CA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X152CA,	"SPARK_IO_KV_SENSOR_PROPAGATION_LAG");
	MakeRptCmt	(0X152F4,	"If the primary tank fuel level falls below this threshold, disable the extended crank function.\nLiters");
	MakeWord	(0X152F4);
	MakeName	(0X152F4,	"STARTER_MOTOR_CONTROL_KE_EXTENDED_CRANK_FUEL_LEVEL");
	MakeDword	(x=0X152F6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X152F6,	"STARTER_MOTOR_CONTROL_KE_STARTER_ENABLE_TYPE");
	MakeRptCmt	(0X152FA,	"If the timer exceeds this value, set low voltage flag and disable the extended crank function.\nSeconds");
	MakeWord	(0X152FA);
	MakeName	(0X152FA,	"STARTER_MOTOR_CONTROL_KE_LOW_VOLTAGE_CRANK_TIME");
	MakeRptCmt	(0X152FC,	"The engine speed below which the starter will be re-enabled.\nRPM");
	MakeWord	(0X152FC);
	MakeName	(0X152FC,	"STARTER_MOTOR_CONTROL_KE_STARTER_ENABLE_SPEED");
	MakeRptCmt	(0X152FE,	"Disable starter motor if Engine is not rotating within this time.\nSeconds");
	MakeWord	(0X152FE);
	MakeName	(0X152FE,	"STARTER_MOTOR_CONTROL_KE_STARTER_GEAR_MILL_PROT_TIME");
	MakeRptCmt	(0X15300,	"The engine speed above which the starter will be disabled, after KE_Starter_Inhibit_Delay seconds.\nRPM");
	MakeWord	(0X15300);
	MakeName	(0X15300,	"STARTER_MOTOR_CONTROL_KE_STARTER_INHIBIT_SPEED");
	MakeRptCmt	(0X15302,	"The delay after which the starter will be disabled, when engine speed is above KE_Starter_Inhibit_Speed RPM.\nSeconds");
	MakeWord	(0X15302);
	MakeName	(0X15302,	"STARTER_MOTOR_CONTROL_KE_STARTER_INHIBIT_DELAY");
	MakeRptCmt	(0X15304,	"Maximum time starter is allowed to crank continuously.\nSeconds");
	MakeWord	(0X15304);
	MakeName	(0X15304,	"STARTER_MOTOR_CONTROL_KE_STARTER_MAX_CRANK_TIME");
	MakeRptCmt	(0X15306,	"Minimum time a crank event must be maintained for protection of the starter relay contacts.\nSeconds");
	MakeWord	(0X15306);
	MakeName	(0X15306,	"STARTER_MOTOR_CONTROL_KE_CRANK_RELAY_PROTECT_TIME");
	MakeRptCmt	(0X15308,	"Time delay after starter motor active transitions from FALSE to TRUE that the starter relay will be energized.\nSeconds");
	MakeWord	(0X15308);
	MakeName	(0X15308,	"STARTER_MOTOR_CONTROL_KE_STARTER_ACTIVATION_DELAY");
	MakeRptCmt	(0X1530A,	"Number of consecutive low resolution reference pulses above KV_Starter_RPM_Thresh required to recognise engine as started.\nPulses");
	MakeWord	(0X1530A);
	MakeName	(0X1530A,	"STARTER_MOTOR_CONTROL_KV_STARTER_REF_PULSES");
	MakeRptCmt	(0X1532A,	"Engine speed threshold for recognising engine as started.  See KV_Starter_Ref_Pulses for more information.\nRPM");
	MakeName	(0X1532A,	"STARTER_MOTOR_CONTROL_KV_STARTER_RPM_THRESH");
	MakeRptCmt	(0X1534A,	"The crank request must be active for this time to enable the extended crank function.\nSeconds");
	MakeName	(0X1534A,	"STARTER_MOTOR_CONTROL_KV_EXTENDED_CRANK_ENABLE_TIME");
	MakeRptCmt	(0X15370,	"The maximum duration of an extended crank event.\nSeconds");
	MakeName	(0X15370,	"STARTER_MOTOR_CONTROL_KV_EXTENDED_CRANK_TIME_MAX");
	MakeRptCmt	(0X15396,	"Initial estimate of the zero position TPS offset.\nAD_Counts");
	MakeWord	(0X15396);
	MakeName	(0X15396,	"THROTTLE_KE_INITIAL_TPS_OFFSET");
	MakeRptCmt	(0X15398,	"This defines the amount of airflow that flows around the throttle blade when the throttle and IAC are fully closed.\nGrams/Sec");
	MakeName	(0X15398,	"THROTTLE_KE_AIRFLOW_LEAK_AROUND_BLADE");
	MakeRptCmt	(0X1539A,	"Default throttle position used when throttle sensor fails.\nPercent");
	MakeWord	(0X1539A);
	MakeName	(0X1539A,	"THROTTLE_KE_THROTTLE_POSITION_DEFAULT");
	MakeRptCmt	(0X1539C,	"Throttle position sensor scaling factor.\n%/AD Cnts");
	MakeWord	(0X1539C);
	MakeName	(0X1539C,	"THROTTLE_KE_TPS_SCALE_FACTOR");
	MakeRptCmt	(0X1539E,	"First order filter coefficient used to reduce zero positon TPS offset.\nFilter_Coef");
	MakeByte	(0X1539E);
	MakeName	(0X1539E,	"THROTTLE_KE_TPS_OFFSET_FILTER_COEF");
	MakeRptCmt	(0X153A0,	"Minimum value through which the throttle/pedal position must travel in order to detect a throttle stomp.\nPercent Position");
	MakeWord	(0X153A0);
	MakeName	(0X153A0,	"THROTTLE_KE_THROTTLE_STOMP_LO_THRESHOLD");
	MakeRptCmt	(0X153A2,	"Maximum value through which the throttle/pedal position must travel in order to detect a throttle stomp.\nPercent Position");
	MakeWord	(0X153A2);
	MakeName	(0X153A2,	"THROTTLE_KE_THROTTLE_STOMP_HI_THRESHOLD");
	MakeRptCmt	(0X153A4,	"Number of throttle stomps required to arm functions which are armed based on throttle stomps.\nCount");
	MakeByte	(0X153A4);
	MakeName	(0X153A4,	"THROTTLE_KE_THROTTLE_STOMPS_TO_ACTIVATE");
	MakeRptCmt	(0X153A6,	"The elapsed time in which the number of throttle stomps, KE_Throttle_Stomps_To_Activate, must occur.\nSeconds");
	MakeWord	(0X153A6);
	MakeName	(0X153A6,	"THROTTLE_KE_THROTTLE_STOMP_DETECT_TIME");
	MakeRptCmt	(0X153A8,	"The consecutive time interval for a throttle position or pedal rotation of zero, to reinitialize the throttle stomp sequence.\nSeconds");
	MakeWord	(0X153A8);
	MakeName	(0X153A8,	"THROTTLE_KE_CURRENT_POSITION_AT_ZERO");
	MakeRptCmt	(0X153AA,	"Use to determine which Induction Air Temperature to select.\nBoolean");
	MakeByte	(0X153AA);
	MakeName	(0X153AA,	"TRACTION_KE_USE_IAT_MIN");
	MakeRptCmt	(0X153AC,	"MBT spark retard as a function  of a given torque loss value\nDegrees");
	MakeDword	(x=0X153AC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X153AC,	"TRACTION_KA_SPARK_RETARD_FOR_TORQUE_LOSS");
	MakeRptCmt	(0X154F6,	"Fraction of torque that is transferred to front when AWD\nScaler 0-1");
	MakeWord	(0X154F6);
	MakeName	(0X154F6,	"TRACTION_KE_AWD_FRONT_SCALER");
	MakeRptCmt	(0X154F8,	"Fraction of torque that is transferred to rear when AWD\nScaler 0-1");
	MakeWord	(0X154F8);
	MakeName	(0X154F8,	"TRACTION_KE_AWD_REAR_SCALER");
	MakeRptCmt	(0X154FA,	"Enabling cal for axle abuse torque limiting algorithm.\nTRUE/FALSE");
	MakeByte	(0X154FA);
	MakeName	(0X154FA,	"TRACTION_KE_AXLE_ABUSE_LIMITING_ENABLE");
	MakeRptCmt	(0X154FC,	"Delta Manifold Pressure threshold over a 100ms time interval to enable transient torque overshoot spark control.\nkPa");
	MakeWord	(0X154FC);
	MakeName	(0X154FC,	"TRACTION_KE_DELTA_MANIFOLD_PRESSURE_100MS");
	MakeWord	(0X154FE);
	MakeName	(0X154FE,	"TRACTION_KE_ETC_MGT_DELTA_TORQUE_INITIAL");
	MakeRptCmt	(0X15500,	"Maximum allowable delta torque value allowed, signifying the completion of the spark retard authority ramp out.\nFoot_Pounds_S");
	MakeWord	(0X15500);
	MakeName	(0X15500,	"TRACTION_KE_ETC_MGT_DELTA_TORQUE_FINAL");
	MakeRptCmt	(0X15502,	"Time period before ramp out of transient torque overshoot spark control begins.\nSeconds");
	MakeWord	(0X15502);
	MakeName	(0X15502,	"TRACTION_KE_ETC_MGT_SPARK_RETARD_DURATION");
	MakeRptCmt	(0X15504,	"Rate at which transient torque overshoot spark control is ramped out.\nFoot_Pounds_S");
	MakeWord	(0X15504);
	MakeName	(0X15504,	"TRACTION_KE_ETC_MGT_DELTA_TRQ_INCREMENT");
	MakeRptCmt	(0X15506,	"Number of invalid desired torque reads out ofKE_Desired_Torque_Pass_Limit reads which will set a fault.\nCounts 0-255");
	MakeByte	(0X15506);
	MakeName	(0X15506,	"TRACTION_KE_DESIRED_TORQUE_FAILURE_LIMIT");
	MakeRptCmt	(0X15507,	"Number of desired torque reads which will set a pass ifKE_Desired_Torque_Failure_Limit invalid reads have notbeen reached\nCounts 0-255");
	MakeByte	(0X15507);
	MakeName	(0X15507,	"TRACTION_KE_DESIRED_TORQUE_PASS_LIMIT");
	MakeRptCmt	(0X15508,	"Option selection to use ETC airflow in combination with spark for axle abuse.\nBoolean");
	MakeByte	(0X15508);
	MakeName	(0X15508,	"TRACTION_KE_ENABLE_ETC_AIRFLOW_AXLE_ABUSE");
	MakeRptCmt	(0X15509,	"Option selection to manage torque for Power Hop control using fuel and spark.\nBoolean");
	MakeByte	(0X15509);
	MakeName	(0X15509,	"TRACTION_KE_ENABLE_POWER_HOP_CONTROL");
	MakeWord	(0X1550A);
	MakeName	(0X1550A,	"TRACTION_KE_FAULTD_LCT_SPD_RATIO_FLT_COEF");
	MakeRptCmt	(0X1550C,	"Lag filter coefficient used to filter Allison transmission torque converter speed ratio.\n0 to 1");
	MakeWord	(0X1550C);
	MakeName	(0X1550C,	"TRACTION_KE_LCT_SPD_RATIO_FLT_COEF");
	MakeRptCmt	(0X1550E,	"Upper bound on requested torque duty cycle for Allison TCM DFCO exit request.\nPercent");
	MakeWord	(0X1550E);
	MakeName	(0X1550E,	"TRACTION_KE_LCT_DFCO_EXIT_DUTY_CYCLE_HI");
	MakeRptCmt	(0X15510,	"Lower bound on requested torque duty cycle for Allison TCM DFCO exit request.\nPercent");
	MakeWord	(0X15510);
	MakeName	(0X15510,	"TRACTION_KE_LCT_DFCO_EXIT_DUTY_CYCLE_LO");
	MakeRptCmt	(0X15512,	"Upper bound on duty cycle for the requested torque PWM line. Above this is a failure region.\nPercent");
	MakeWord	(0X15512);
	MakeName	(0X15512,	"TRACTION_KE_REQ_TRQ_FAIL_DUTY_CYCLE_HI");
	MakeRptCmt	(0X15514,	"Lower bound on duty cycle for the requested torque PWM line. Below this is a failure region.\nPercent");
	MakeWord	(0X15514);
	MakeName	(0X15514,	"TRACTION_KE_REQ_TRQ_FAIL_DUTY_CYCLE_LO");
	MakeRptCmt	(0X15516,	"Option selection to use the TCS PWM input to control the LCTAllison transmission.\nBoolean");
	MakeByte	(0X15516);
	MakeName	(0X15516,	"TRACTION_KE_LCT_XMSN_PWM_ENABLE");
	MakeRptCmt	(0X15518,	"Ratio used to determine gearbox torque for LCT.\nRatio");
	MakeWord	(0X15518);
	MakeName	(0X15518,	"TRACTION_KV_CONVERTER_TORQUE_RATIO_LCT");
	MakeRptCmt	(0X1553A,	"Allow selection of Drag Control\nBoolean");
	MakeByte	(0X1553A);
	MakeName	(0X1553A,	"TRACTION_KE_DRAG_CONTROL_EQUIPPED");
	MakeRptCmt	(0X1553C,	"Threshold used to compare difference between Transmission Area and Desired Throttle Area to set ETC_Trq_Mgt_Active.\nPercent_S");
	MakeWord	(0X1553C);
	MakeName	(0X1553C,	"TRACTION_KE_DELTA_THR_AREA_TRQ_MGT_ACTIVE");
	MakeRptCmt	(0X1553E,	"This is an option selection to prevent downshiftsduring traction control\nBoolean");
	MakeByte	(0X1553E);
	MakeName	(0X1553E,	"TRACTION_KE_TCS_PREVENT_DOWNSHIFT_OPTION");
	MakeByte	(0X1553F);
	MakeName	(0X1553F,	"TRACTION_KE_TCS_FREEZE_GEAR_OPTION");
	MakeRptCmt	(0X15540,	"Amount of time to delay each downshift (except forthe first one) after exiting traction.\nSeconds");
	MakeWord	(0X15540);
	MakeName	(0X15540,	"TRACTION_KE_TCS_DOWNSHIFT_DELAY");
	MakeRptCmt	(0X15542,	"Downshift will not be delayed when exiting tractionif pedal is below this value.\nPercent");
	MakeWord	(0X15542);
	MakeName	(0X15542,	"TRACTION_KE_TCS_DOWNSHIFT_PEDAL");
	MakeRptCmt	(0X15544,	"Downshift will not be delayed when exiting tractionif pedal increases by this amount over 100mS.\nPercent");
	MakeWord	(0X15544);
	MakeName	(0X15544,	"TRACTION_KE_TCS_DOWNSHIFT_PEDAL_DELTA");
	MakeRptCmt	(0X15546,	"The deadband on duty cycle for traction control normal range\nPercent");
	MakeWord	(0X15546);
	MakeName	(0X15546,	"TRACTION_KE_TCS_NORMAL_REGION_DEADBAND");
	MakeRptCmt	(0X15548,	"Don't enable Desired Torque PWM AND MFD Delivered Torque PWM diagnostics until the engine has run this long.\nSeconds");
	MakeWord	(0X15548);
	MakeName	(0X15548,	"TRACTION_KE_TCS_PWM_DIAG_RUNTIME_DELAY");
	MakeRptCmt	(0X1554A,	"Prevent proportional adjustments for small errors\nFoot_Pounds");
	MakeWord	(0X1554A);
	MakeName	(0X1554A,	"TRACTION_KE_TORQUE_ERROR_DEADBAND");
	MakeRptCmt	(0X1554C,	"Desired percentage of maximum available torque when utilizing the calibration development aid.\nPercent");
	MakeWord	(0X1554C);
	MakeName	(0X1554C,	"TRACTION_KE_PERCENT_TRQ_IND_DESIRED");
	MakeRptCmt	(0X1554E,	"Enabling bit to turn on or off the calibration development aid feature.\nBoolean");
	MakeByte	(0X1554E);
	MakeName	(0X1554E,	"TRACTION_KE_PERCENT_TRQ_IND_ENABLE");
	MakeRptCmt	(0X15550,	"Limits the error to be used for the proportional term\nFoot_Pounds");
	MakeWord	(0X15550);
	MakeName	(0X15550,	"TRACTION_KE_PROP_ERROR_MAX_POSITIVE");
	MakeRptCmt	(0X15552,	"Limits the error to be used for the proportional term\nFoot_Pounds");
	MakeWord	(0X15552);
	MakeName	(0X15552,	"TRACTION_KE_PROP_ERROR_MAX_NEGATIVE");
	MakeRptCmt	(0X15554,	"Proportional gain for torque errors for traction control\nMultiplier_0_to_1");
	MakeWord	(0X15554);
	MakeName	(0X15554,	"TRACTION_KE_PROPORTIONAL_GAIN");
	MakeRptCmt	(0X15556,	"Limits the error to be used for the integral term\nFoot_Pounds");
	MakeWord	(0X15556);
	MakeName	(0X15556,	"TRACTION_KE_INTEGRAL_ERROR_MAX_POSITIVE");
	MakeRptCmt	(0X15558,	"Limits the error to be used for the Integral term\nFoot_Pounds");
	MakeWord	(0X15558);
	MakeName	(0X15558,	"TRACTION_KE_INTEGRAL_ERROR_MAX_NEGATIVE");
	MakeRptCmt	(0X1555A,	"Integral gain for torque errors for traction/drag control\nMultiplier_0_to_1");
	MakeWord	(0X1555A);
	MakeName	(0X1555A,	"TRACTION_KE_INTEGRAL_GAIN");
	MakeRptCmt	(0X1555C,	"Limits magnitued of the integral term for positive torque errors\nFoot_Pounds");
	MakeWord	(0X1555C);
	MakeName	(0X1555C,	"TRACTION_KE_INTEGRAL_POSITIVE_LIMIT");
	MakeRptCmt	(0X1555E,	"Limits magnitude of the integral term for negative torque errors\nFoot_Pounds");
	MakeWord	(0X1555E);
	MakeName	(0X1555E,	"TRACTION_KE_INTEGRAL_NEGATIVE_LIMIT");
	MakeRptCmt	(0X15560,	"Delay TCS integrator updates to account for system dynamics\nSeconds");
	MakeWord	(0X15560);
	MakeName	(0X15560,	"TRACTION_KE_TCS_INTEGRAL_DELAY");
	MakeRptCmt	(0X15562,	"Limits the final TCS torque PI feedback term for positive errors\nFoot_Pounds");
	MakeWord	(0X15562);
	MakeName	(0X15562,	"TRACTION_KE_PI_FINAL_POSITIVE_LIMIT");
	MakeRptCmt	(0X15564,	"Limits the final TCS torque PI feedback term for negative errors\nFoot_Pounds");
	MakeWord	(0X15564);
	MakeName	(0X15564,	"TRACTION_KE_PI_FINAL_NEGATIVE_LIMIT");
	MakeRptCmt	(0X15566,	"Hysteresis zone width between drag control and traction control.\nPercent");
	MakeWord	(0X15566);
	MakeName	(0X15566,	"TRACTION_KE_TRACTION_DRAG_HYST_ZONE");
	MakeRptCmt	(0X15568,	"Hysteresis to avoid throttle vibration during traction control.\nPercent");
	MakeWord	(0X15568);
	MakeName	(0X15568,	"TRACTION_KE_TRACTION_TORQUE_AREA_HYST");
	MakeRptCmt	(0X1556A,	"Ramp out rate for traction area when traction is no longer active or in the case of an input fault.\nPercent");
	MakeWord	(0X1556A);
	MakeName	(0X1556A,	"TRACTION_KE_TRACTION_TORQUE_AREA_RAMP");
	MakeRptCmt	(0X1556C,	"lower bound on duty cycle for traction control range.\nPercent");
	MakeWord	(0X1556C);
	MakeName	(0X1556C,	"TRACTION_KE_TRACTION_DUTY_CYCLE_BOUND");
	MakeRptCmt	(0X1556E,	"Tolerence band for traction control input period.\nMicroseconds");
	MakeDword	(0X1556E);
	MakeName	(0X1556E,	"TRACTION_KE_TCS_INPUT_PERIOD_BAND");
	MakeRptCmt	(0X15572,	"Amount of torque above engine friction torque used as the AllisonTrans_Low_Limit for engine torque LCT Desired.\nFoot_Pounds");
	MakeWord	(0X15572);
	MakeName	(0X15572,	"TRACTION_KE_FRICTION_TORQUE_BUFFER");
	MakeWord	(0X15574);
	MakeName	(0X15574,	"TRACTION_KE_TORQUE_AREA_XMSN_EXIT_RAMP");
	MakeRptCmt	(0X15576,	"Step reduction rate of ramp out of non-zero traction spark retard\nDegrees");
	MakeWord	(0X15576);
	MakeName	(0X15576,	"TRACTION_KE_TRACTION_RETARD_RAMP");
	MakeRptCmt	(0X15578,	"Maximum traction spare retard event duration time.\nSeconds");
	MakeWord	(0X15578);
	MakeName	(0X15578,	"TRACTION_KE_TRACTION_RETARD_MAX_TIME");
	MakeRptCmt	(0X1557A,	"Minimum traction spare retard event duration time.\nSeconds");
	MakeWord	(0X1557A);
	MakeName	(0X1557A,	"TRACTION_KE_TRACTION_RETARD_MIN_TIME");
	MakeRptCmt	(0X1557C,	"Fraction of torque that is transferred to front when 4WD HI\nScaler 0-1");
	MakeWord	(0X1557C);
	MakeName	(0X1557C,	"TRACTION_KE_4WDHI_FRONT_SCALER");
	MakeRptCmt	(0X1557E,	"Fraction of torque that is transferred to rear when 4WD HI\nScaler 0-1");
	MakeWord	(0X1557E);
	MakeName	(0X1557E,	"TRACTION_KE_4WDHI_REAR_SCALER");
	MakeRptCmt	(0X15580,	"Fraction of torque that is transferred to front when 4WD LO\nScaler 0-1");
	MakeWord	(0X15580);
	MakeName	(0X15580,	"TRACTION_KE_4WDLO_FRONT_SCALER");
	MakeRptCmt	(0X15582,	"Fraction of torque that is transferred to rear when 4WD LO\nScaler 0-1");
	MakeWord	(0X15582);
	MakeName	(0X15582,	"TRACTION_KE_4WDLO_REAR_SCALER");
	MakeRptCmt	(0X15584,	"Vehicle speed below which a manual trans. assumes 1st gear.\nMPH");
	MakeWord	(0X15584);
	MakeName	(0X15584,	"TRACTION_KE_MANUAL_1ST_GEAR_MPH_HI");
	MakeRptCmt	(0X15586,	"Vehicle speed above which a manual trans. assumes 1st gear.\nMPH");
	MakeWord	(0X15586);
	MakeName	(0X15586,	"TRACTION_KE_MANUAL_1ST_GEAR_MPH_LO");
	MakeRptCmt	(0X15588,	"Efficiency of transfer case for torque transfer\nMultiplier_0_to_1");
	MakeWord	(0X15588);
	MakeName	(0X15588,	"TRACTION_KE_TRANSFER_CASE_EFFICIENCY");
	MakeWord	(0X1558A);
	MakeName	(0X1558A,	"TRACTION_KE_ALLISON_FAULTED_GEAR_RATIO");
	MakeRptCmt	(0X1558C,	"Efficiency of axle for torque transfer\nMultiplier 0 to 1");
	MakeWord	(0X1558C);
	MakeName	(0X1558C,	"TRACTION_KE_AXLE_EFFICIENCY");
	MakeRptCmt	(0X1558E,	"Transmission input torque limit for protection from failure\nFoot Pounds");
	MakeDword	(0X1558E);
	MakeName	(0X1558E,	"TRACTION_KE_TRANS_INPUT_LIMIT");
	MakeRptCmt	(0X15592,	"Transmission output torque limit for protection from failure\nFoot Pounds");
	MakeDword	(0X15592);
	MakeName	(0X15592,	"TRACTION_KE_TRANS_OUTPUT_LIMIT");
	MakeRptCmt	(0X15596,	"Front axle torque limit for protection from failure\nFoot Pounds");
	MakeDword	(0X15596);
	MakeName	(0X15596,	"TRACTION_KE_FRONT_AXLE_LIMIT");
	MakeRptCmt	(0X1559A,	"Front prop torque limit for protection from failure\nFoot Pounds");
	MakeDword	(0X1559A);
	MakeName	(0X1559A,	"TRACTION_KE_FRONT_PROP_LIMIT");
	MakeRptCmt	(0X1559E,	"Rear axle torque limit for protection from failure\nFoot Pounds");
	MakeDword	(0X1559E);
	MakeName	(0X1559E,	"TRACTION_KE_REAR_AXLE_LIMIT");
	MakeRptCmt	(0X155A2,	"Rear prop torque limit for protection from failure\nFoot Pounds");
	MakeDword	(0X155A2);
	MakeName	(0X155A2,	"TRACTION_KE_REAR_PROP_LIMIT");
	MakeWord	(0X155A6);
	MakeName	(0X155A6,	"TRACTION_KE_1_2_RPM_LO_MU");
	MakeWord	(0X155A8);
	MakeName	(0X155A8,	"TRACTION_KE_1_2_RPM_HI_MU");
	MakeWord	(0X155AA);
	MakeName	(0X155AA,	"TRACTION_KE_2_3_RPM_LO_MU");
	MakeWord	(0X155AC);
	MakeName	(0X155AC,	"TRACTION_KE_2_3_RPM_HI_MU");
	MakeWord	(0X155AE);
	MakeName	(0X155AE,	"TRACTION_KE_3_4_RPM_LO_MU");
	MakeWord	(0X155B0);
	MakeName	(0X155B0,	"TRACTION_KE_3_4_RPM_HI_MU");
	MakeWord	(0X155B2);
	MakeName	(0X155B2,	"TRACTION_KE_1_2_WHEEL_SPD_LO_MU");
	MakeWord	(0X155B4);
	MakeName	(0X155B4,	"TRACTION_KE_1_2_WHEEL_SPD_HI_MU");
	MakeWord	(0X155B6);
	MakeName	(0X155B6,	"TRACTION_KE_2_3_WHEEL_SPD_LO_MU");
	MakeWord	(0X155B8);
	MakeName	(0X155B8,	"TRACTION_KE_2_3_WHEEL_SPD_HI_MU");
	MakeWord	(0X155BA);
	MakeName	(0X155BA,	"TRACTION_KE_3_4_WHEEL_SPD_LO_MU");
	MakeWord	(0X155BC);
	MakeName	(0X155BC,	"TRACTION_KE_3_4_WHEEL_SPD_HI_MU");
	MakeRptCmt	(0X155BE,	"Desired torque value below which the low friction surfacecalibrations will be used for traction control 1-2 shift.\nFt_Lb");
	MakeWord	(0X155BE);
	MakeName	(0X155BE,	"TRACTION_KE_DES_TRQ_LO_MU_1ST");
	MakeRptCmt	(0X155C0,	"Desired torque value below which the low friction surfacecalibrations will be used for traction control 2-3 shift.\nFt_Lb");
	MakeWord	(0X155C0);
	MakeName	(0X155C0,	"TRACTION_KE_DES_TRQ_LO_MU_2ND");
	MakeRptCmt	(0X155C2,	"Desired torque value below which the low friction surfacecalibrations will be used for traction control 3-4 shift.\nFt_Lb");
	MakeWord	(0X155C2);
	MakeName	(0X155C2,	"TRACTION_KE_DES_TRQ_LO_MU_3RD");
	MakeRptCmt	(0X155C4,	"Desired torque value above which a 1-2 traction shift will beprevented.\nFt_Lb");
	MakeWord	(0X155C4);
	MakeName	(0X155C4,	"TRACTION_KE_1_2_DES_TRQ_MAX");
	MakeRptCmt	(0X155C6,	"Desired torque value above which a 2-3 traction shift will beprevented.\nFt_Lb");
	MakeWord	(0X155C6);
	MakeName	(0X155C6,	"TRACTION_KE_2_3_DES_TRQ_MAX");
	MakeRptCmt	(0X155C8,	"Desired torque value above which a 3-4 traction shift will beprevented.\nFt_Lb");
	MakeWord	(0X155C8);
	MakeName	(0X155C8,	"TRACTION_KE_3_4_DES_TRQ_MAX");
	MakeRptCmt	(0X155CA,	"Minimum amount of time between traction forced upshifts.\nSeconds");
	MakeWord	(0X155CA);
	MakeName	(0X155CA,	"TRACTION_KE_TCS_UPSHIFT_DELAY");
	MakeRptCmt	(0X155CC,	"Maximum duration of a traction control shift.\nSeconds");
	MakeWord	(0X155CC);
	MakeName	(0X155CC,	"TRACTION_KE_TCS_MAX_SHIFT_TIME");
	MakeRptCmt	(0X155CE,	"Minimum length of a TCS or Drag event that will disengage TCC ANDcruise control.\nSeconds");
	MakeWord	(0X155CE);
	MakeName	(0X155CE,	"TRACTION_KE_TCC_CRUISE_DISENGAGE_TIME");
	MakeRptCmt	(0X155D0,	"Length of time after TCS or Drag event is completed that TCC willreturn to normal control.\nSeconds");
	MakeWord	(0X155D0);
	MakeName	(0X155D0,	"TRACTION_KE_TCC_REENABLE_TIME");
	MakeRptCmt	(0X155D2,	"Minimum length of a Brake Traction (Active Handling) event thatwill disengage Cruise control.\nSeconds");
	MakeWord	(0X155D2);
	MakeName	(0X155D2,	"TRACTION_KE_BRAKE_TRAC_CC_DISENGAGE_TIME");
	MakeRptCmt	(0X155D4,	"Ramp down rate for torque throttle area when desired transmission torque is lower than the current engine torque.\nPercent");
	MakeWord	(0X155D4);
	MakeName	(0X155D4,	"TRACTION_KE_TORQUE_AREA_XMSN_RAMP_DOWN");
	MakeRptCmt	(0X155D6,	"Ramp up rate for torque throttle area when desired transmission torque is greater than the current engine torque.\nPercent");
	MakeWord	(0X155D6);
	MakeName	(0X155D6,	"TRACTION_KE_TORQUE_AREA_XMSN_RAMP_UP");
	MakeRptCmt	(0X155D8,	"Maximum torque value that will allow tip in torque rate limiting.\nFoot_Pounds_S");
	MakeWord	(0X155D8);
	MakeName	(0X155D8,	"TRACTION_KE_TIP_IN_TRQ_MAX");
	MakeRptCmt	(0X155DA,	"Minimum vehicle speed that will allow tip in torque rate limiting.\nMPH");
	MakeWord	(0X155DA);
	MakeName	(0X155DA,	"TRACTION_KE_TIP_IN_MPH_MIN");
	MakeRptCmt	(0X155DC,	"Minimum engine speed that will enable tip out torque rate limiting.\nRPM");
	MakeWord	(0X155DC);
	MakeName	(0X155DC,	"TRACTION_KE_TIP_OUT_MIN_ENGINE_SPEED");
	MakeRptCmt	(0X155DE,	"Enabling cal for Tip out torque management algorithm.\nBOOLEAN");
	MakeByte	(0X155DE);
	MakeName	(0X155DE,	"TRACTION_KE_TIP_OUT_TRQ_MANAGEMENT_ENABLE");
	MakeWord	(0X155E0);
	MakeName	(0X155E0,	"TRACTION_KE_STALL_SPEED_DEFAULT");
	MakeRptCmt	(0X155E2,	"Efficiency of the transmission including torque converter for torque transfer.\nMultiplier_0_to_1");
	MakeWord	(0X155E2);
	MakeName	(0X155E2,	"TRACTION_KE_TRANSMISSION_EFFICIENCY");
	MakeRptCmt	(0X155E4,	"Max torque available as a function of Engine Speed assuming an equivalence ratio of 1.0\nFoot_Pounds_S");
	MakeName	(0X155E4,	"TRACTION_KA_MAX_ENG_TRQ_IND_STOICH");
	MakeRptCmt	(0X156B6,	"Gear ratio for automatic transmission applications as a function of transmission gear.\nMultiplier_0_to_8");
	MakeWord	(0X156B6);
	MakeName	(0X156B6,	"TRACTION_KV_TRQ_MGMT_GEAR_RATIO");
	MakeRptCmt	(0X156CA,	"Maximum allowable rate of torque increase when below a calibratedtorque level and above a calibrated vehicle speed.\nFoot_Pounds_S");
	MakeWord	(0X156CA);
	MakeName	(0X156CA,	"TRACTION_KV_TIP_IN_DELTA_TRQ_LIMIT");
	MakeRptCmt	(0X156DE,	"Maximum allowable rate of torque decrease when tip-out torque algorithm is active.\nFoot_Pounds_S");
	MakeWord	(0X156DE);
	MakeName	(0X156DE,	"TRACTION_KV_TIP_OUT_RAMP_RATE");
	MakeRptCmt	(0X156F2,	"Limit desired torque request from EBCM as a function of RPM\nFt_Lb");
	MakeName	(0X156F2,	"TRACTION_KV_TCS_MIN_DESIRED_TORQUE");
	MakeDword	(x=0X15722);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X15722,	"CurveTable_19_Rows_B6613___Run_Time_Before_TCS");
	MakeRptCmt	(0X1574A,	"Adjusts the desired TCS torque to compensate for ambient pressure\nScaler_2_Vs_kPa_Table");
	MakeWord	(0X1574A);
	MakeName	(0X1574A,	"TRACTION_KV_TORQUE_BARO_ADJUST");
	MakeRptCmt	(0X15754,	"Adjusts desired TCS torque to compensate for Induction Air Temp\nScaler_2_Vs_Deg_C_Table");
	MakeName	(0X15754,	"TRACTION_KV_TORQUE_IAT_ADJUST");
	MakeRptCmt	(0X15774,	"Throttle area limit looked up based onPercent of max available torque and Engine Speed.\nPercent");
	MakeName	(0X15774,	"TRACTION_KA_PERCENT_THROTTLE_AREA");
	MakeRptCmt	(0X15A3E,	"Adjusts the desired TCS torque to compensate for ambient pressure\nDegrees_Vs_RPM_Table");
	MakeName	(0X15A3E,	"TRACTION_KV_SPARK_RETARD_TCS");
	MakeRptCmt	(0X15A66,	"Adjusts the desired TCS torque to compensate for ambientpressure, first retard cycle only.\nDegrees_Vs_RPM_Table");
	MakeName	(0X15A66,	"TRACTION_KV_SPARK_RETARD_TCS_AGGRESSIVE");
	MakeRptCmt	(0X15A8E,	"Desired engine torque for transmission protection.\nFt_Lbs_S");
	MakeName	(0X15A8E,	"TRACTION_KA_ENG_TORQUE_ETC_DESIRED_XMSN");
	MakeRptCmt	(0X15C32,	"Desired engine torque multiplier.\nScaler 2");
	MakeName	(0X15C32,	"TRACTION_KA_ENG_TRQ_ETC_DES_XMSN_MULT");
	MakeRptCmt	(0X15DAE,	"Starting torque level for tip out management algorithm.\nFt_Lbs_S");
	MakeName	(0X15DAE,	"TRACTION_KA_TIP_OUT_INITIAL_TORQUE");
	MakeRptCmt	(0X15F52,	"Delivers the throttle area for the tip out torque managment algorithm desired engine torque.\nPercent_Vs_Ft_Lbs_And_RPM_Table");
	MakeName	(0X15F52,	"TRACTION_KA_TIP_OUT_THROTTLE_AREA");
	MakeRptCmt	(0X162D0,	"Use this cal to identify the engine diagnostic calibration\nCal_ID_Record");
	MakeName	(0X162D0,	"ENGDIAGNOSTICS_HEADER");
	MakeName	(0X162D4,	"Constant32_Engine_Diagnostics_Calibration_ID");
	MakeName	(0X162D8,	"CurveTable_2_Columns_Engine_Diagnostics_Calibration_Level");
	MakeStr		(0X162DC,	0X162E5);
	MakeName	(0X162DC,	"CurveTable_8_Columns_Engine_Diagnostics_Calibration_ID_ASCII");
	MakeRptCmt	(0X162EC,	"Engine speed below which the misfire diagnostic data collection is enabled.\nRPM");
	MakeWord	(0X162EC);
	MakeName	(0X162EC,	"OBD2_CONTROL_KE_MISFIRE_DIAG_RPM_LIMIT");
	MakeRptCmt	(0X162EE,	"This plus KE_Misfire_Diag_RPM_Limit is the engine speed above which the misfire diagnostic data collection is disabled.\nRPM");
	MakeWord	(0X162EE);
	MakeName	(0X162EE,	"OBD2_CONTROL_KE_MISFIRE_DIAG_RPM_HYSTERESIS");
	MakeRptCmt	(0X162F0,	"Boolean flags for enabling the OBD II diagnostics\nBOOLEAN");
	MakeByte	(0X162F0);
	MakeName	(0X162F0,	"OBD2_CONTROL_KV_DIAGNOSTIC_ENABLE");
	MakeRptCmt	(0X16344,	"Boolean flags for disabling the OBD II diagnostics when PTO is enabled\nBOOLEAN");
	MakeByte	(0X16344);
	MakeName	(0X16344,	"OBD2_CONTROL_KV_DIAGNOSTIC_DISABLE_FOR_PTO");
	MakeDword	(x=0X16345);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeRptCmt	(0X16398,	"Time that the MIL should be on or off during MIL flashing\nSeconds");
	MakeWord	(0X16398);
	MakeName	(0X16398,	"OBD2_CONTROL_KE_MIL_TIME");
	MakeRptCmt	(0X1639A,	"If the fail count exceeds this value,extended travel brake diagnostic fails.\nCounts");
	MakeByte	(0X1639A);
	MakeName	(0X1639A,	"BRAKE_IO_KE_EXTENDED_TRAVEL_BRAKE_FAIL_CO");
	MakeRptCmt	(0X1639B,	"If the sample count exceeds this value,extended travel brake diagnostic is passed.\nCounts");
	MakeByte	(0X1639B);
	MakeName	(0X1639B,	"BRAKE_IO_KE_EXTENDED_TRAVEL_BRAKE_SAMPLE_");
	MakeRptCmt	(0X1639C,	"If the fail count exceeds this value, ETM brake diagnostic fails.\nCounts");
	MakeByte	(0X1639C);
	MakeName	(0X1639C,	"BRAKE_IO_KE_BRAKE_ETM_FAIL_COUNT");
	MakeRptCmt	(0X1639D,	"If the sample count exceeds this value, ETM brake diagnostic is passed.\nCounts");
	MakeByte	(0X1639D);
	MakeName	(0X1639D,	"BRAKE_IO_KE_BRAKE_ETM_SAMPLE_COUNT");
	MakeRptCmt	(0X1639E,	"If the fail count exceeds this value, TCC brake diagnostic fails.\nCounts");
	MakeByte	(0X1639E);
	MakeName	(0X1639E,	"BRAKE_IO_KE_BRAKE_CRZ_FAIL_COUNT");
	MakeRptCmt	(0X1639F,	"If the sample count exceeds this value, TCC brake diagnostic is passed.\nCounts");
	MakeByte	(0X1639F);
	MakeName	(0X1639F,	"BRAKE_IO_KE_BRAKE_CRZ_SAMPLE_COUNT");
	MakeRptCmt	(0X163A0,	"Check brake inputs if vehicle speed is decelerating more than this value over a 250 msec. period.\nMPH");
	MakeWord	(0X163A0);
	MakeName	(0X163A0,	"BRAKE_IO_KE_BRAKE_DIAG_SPEED_DELTA");
	MakeRptCmt	(0X163A2,	"Engine speed above which for a continuous time period, the brake monitoring is allowed to begin.\nRPM");
	MakeWord	(0X163A2);
	MakeName	(0X163A2,	"BRAKE_IO_KE_BRAKE_TEST_ENGINE_SPEED");
	MakeRptCmt	(0X163A4,	"Time with engine speed KE_Brake_Test_Engine_Speed to allow brake switch monitoring to begin.\nSeconds");
	MakeWord	(0X163A4);
	MakeName	(0X163A4,	"BRAKE_IO_KE_BRAKE_TEST_RUN_TIME");
	MakeRptCmt	(0X163A6,	"Wheel speed at or above which the brake switch monitoring cycle begins.\nMPH");
	MakeWord	(0X163A6);
	MakeName	(0X163A6,	"BRAKE_IO_KE_BRAKE_ENABLE_WHEEL_SPD");
	MakeRptCmt	(0X163A8,	"Wheel speed at or below which the brake switch monitoring cycle ends.\nMPH");
	MakeWord	(0X163A8);
	MakeName	(0X163A8,	"BRAKE_IO_KE_BRAKE_DISABLE_WHEEL_SPD");
	MakeRptCmt	(0X163AA,	"Bit encoded calibration which indicates which mode 6 tests are supported.\nBOOLEAN");
	MakeDword	(0X163AA);
	MakeName	(0X163AA,	"C2_J1979_MSGS_KE_OBD_01_20_TEST_SUPPORT");
	MakeRptCmt	(0X163AE,	"Bit encoded calibration which indicates support or non-support for a particular mode 6 comp ID.\nBOOLEAN");
	MakeByte	(0X163AE);
	MakeName	(0X163AE,	"C2_J1979_MSGS_KE_MODE_06_COMP_ID_SUPPORTED_1");
	MakeRptCmt	(0X163AF,	"Bit encoded calibration which indicates support or non-support for a particular mode 6 comp ID.\nBOOLEAN");
	MakeByte	(0X163AF);
	MakeName	(0X163AF,	"C2_J1979_MSGS_KE_MODE_06_COMP_ID_SUPPORTED_2");
	MakeRptCmt	(0X163B0,	"Bit encoded calibration which indicates support or non-support for a particular mode 6 comp ID.\nBOOLEAN");
	MakeByte	(0X163B0);
	MakeName	(0X163B0,	"C2_J1979_MSGS_KE_MODE_06_COMP_ID_SUPPORTED_3");
	MakeRptCmt	(0X163B1,	"Bit encoded calibration which indicates support or non-support for a particular mode 6 comp ID.\nBOOLEAN");
	MakeByte	(0X163B1);
	MakeName	(0X163B1,	"C2_J1979_MSGS_KE_MODE_06_COMP_ID_SUPPORTED_4");
	MakeRptCmt	(0X163B2,	"Bit encoded calibration which indicates support or non-support for a particular mode 6 comp ID.\nBOOLEAN");
	MakeByte	(0X163B2);
	MakeName	(0X163B2,	"C2_J1979_MSGS_KE_MODE_06_COMP_ID_SUPPORTED_5");
	MakeRptCmt	(0X163B3,	"Bit encoded calibration which indicates support or non-support for a particular mode 6 comp ID.\nBOOLEAN");
	MakeByte	(0X163B3);
	MakeName	(0X163B3,	"C2_J1979_MSGS_KE_MODE_06_COMP_ID_SUPPORTED_6");
	MakeRptCmt	(0X163B4,	"Bit encoded calibration which indicates which mode 8 tests in this range are supported.\nBOOLEAN");
	MakeDword	(0X163B4);
	MakeName	(0X163B4,	"C2_J1979_MSGS_KE_MODE_8_01_20_TEST_SUPPORT");
	MakeRptCmt	(0X163B8,	"Bit encoded calibration which indicates support or non-support for a particular mode 9 info type.\nBOOLEAN");
	MakeByte	(0X163B8);
	MakeName	(0X163B8,	"C2_J1979_MSGS_KE_MODE9_01_08_SUPPORT");
	MakeRptCmt	(0X163B9,	"Enables the storing of data used to display malf codes.\nBOOLEAN");
	MakeByte	(0X163B9);
	MakeName	(0X163B9,	"INSTRUMENTATION_KE_ENABLE_MALF_DISPLAY");
	MakeRptCmt	(0X163BA,	"Bit encoded calibration which indicates which O2 Sensors are supported.\nBOOLEAN");
	MakeByte	(0X163BA);
	MakeName	(0X163BA,	"C2_M5_DEFINITION_KE_LOCATIONS_WITH_O2_SENSORS");
	MakeRptCmt	(0X163BC,	"Bit encoded calibration which indicates which mode 5 tests are supported.\nBOOLEAN");
	MakeDword	(0X163BC);
	MakeName	(0X163BC,	"C2_M5_DEFINITION_KE_MODE_5_01_20_TEST_SUPPORT");
	MakeRptCmt	(0X163DC,	"Bit encoded calibration which indicates which mode 5 tests are supported.\nBOOLEAN");
	MakeDword	(0X163DC);
	MakeName	(0X163DC,	"C2_M5_DEFINITION_KE_MODE_5_21_40_TEST_SUPPORT");
	MakeRptCmt	(0X163FC,	"Bit encoded calibration which indicates which mode 5 tests are supported.\nBOOLEAN");
	MakeDword	(0X163FC);
	MakeName	(0X163FC,	"C2_M5_DEFINITION_KE_MODE_5_41_60_TEST_SUPPORT");
	MakeRptCmt	(0X1641C,	"Bit encoded calibration which indicates which mode 5 tests are supported.\nBOOLEAN");
	MakeDword	(0X1641C);
	MakeName	(0X1641C,	"C2_M5_DEFINITION_KE_MODE_5_61_80_TEST_SUPPORT");
	MakeRptCmt	(0X1643C,	"Bit encoded calibration which indicates which mode 5 tests are supported.\nBOOLEAN");
	MakeDword	(0X1643C);
	MakeName	(0X1643C,	"C2_M5_DEFINITION_KE_MODE_5_81_A0_TEST_SUPPORT");
	MakeRptCmt	(0X1645C,	"Bit encoded calibration which indicates which mode 5 tests are supported.\nBOOLEAN");
	MakeDword	(0X1645C);
	MakeName	(0X1645C,	"C2_M5_DEFINITION_KE_MODE_5_A1_C0_TEST_SUPPORT");
	MakeRptCmt	(0X1647C,	"Bit encoded calibration which indicates which mode 5 tests are supported.\nBOOLEAN");
	MakeDword	(0X1647C);
	MakeName	(0X1647C,	"C2_M5_DEFINITION_KE_MODE_5_C1_E0_TEST_SUPPORT");
	MakeRptCmt	(0X1649C,	"Bit encoded calibration which indicates which mode 5 tests are supported.\nBOOLEAN");
	MakeDword	(0X1649C);
	MakeName	(0X1649C,	"C2_M5_DEFINITION_KE_MODE_5_E1_FF_TEST_SUPPORT");
	MakeRptCmt	(0X164BC,	"This calibration indicates support or non-support  of a PID by the PCM.\nPID_Support_Type");
	MakeByte	(0X164BC);
	MakeName	(0X164BC,	"C2_PIDS_KE_MODE_1_PID_01_08_SUPPORT");
	MakeRptCmt	(0X164BD,	"This calibration indicates support or non-support  of a PID by the PCM.\nPID_Support_Type");
	MakeByte	(0X164BD);
	MakeName	(0X164BD,	"C2_PIDS_KE_MODE_1_PID_09_10_SUPPORT");
	MakeRptCmt	(0X164BE,	"This calibration indicates support or non-support  of a PID by the PCM.\nPID_Support_Type");
	MakeByte	(0X164BE);
	MakeName	(0X164BE,	"C2_PIDS_KE_MODE_1_PID_11_18_SUPPORT");
	MakeRptCmt	(0X164BF,	"This calibration indicates support or non-support  of a PID by the PCM.\nPID_Support_Type");
	MakeByte	(0X164BF);
	MakeName	(0X164BF,	"C2_PIDS_KE_MODE_1_PID_19_20_SUPPORT");
	MakeRptCmt	(0X164C0,	"This calibration indicates support or non-support  of a PID by the PCM.\nPID_Support_Type");
	MakeByte	(0X164C0);
	MakeName	(0X164C0,	"C2_PIDS_KE_MODE_1_PID_21_28_SUPPORT");
	MakeRptCmt	(0X164C1,	"This calibration indicates support or non-support  of a PID by the PCM.\nPID_Support_Type");
	MakeByte	(0X164C1);
	MakeName	(0X164C1,	"C2_PIDS_KE_MODE_1_PID_29_30_SUPPORT");
	MakeRptCmt	(0X164C2,	"This calibration indicates support or non-support  of a PID by the PCM.\nPID_Support_Type");
	MakeByte	(0X164C2);
	MakeName	(0X164C2,	"C2_PIDS_KE_MODE_1_PID_31_38_SUPPORT");
	MakeRptCmt	(0X164C3,	"This calibration indicates support or non-support  of a PID by the PCM.\nPID_Support_Type");
	MakeByte	(0X164C3);
	MakeName	(0X164C3,	"C2_PIDS_KE_MODE_1_PID_39_40_SUPPORT");
	MakeRptCmt	(0X164C4,	"This calibration indicates support or non-support  of a PID by the PCM.\nPID_Support_Type");
	MakeByte	(0X164C4);
	MakeName	(0X164C4,	"C2_PIDS_KE_MODE_2_PID_01_08_SUPPORT");
	MakeRptCmt	(0X164C5,	"This calibration indicates support or non-support  of a PID by the PCM.\nPID_Support_Type");
	MakeByte	(0X164C5);
	MakeName	(0X164C5,	"C2_PIDS_KE_MODE_2_PID_09_10_SUPPORT");
	MakeRptCmt	(0X164C6,	"This calibration indicates support or non-support  of a PID by the PCM.\nPID_Support_Type");
	MakeByte	(0X164C6);
	MakeName	(0X164C6,	"C2_PIDS_KE_MODE_2_PID_11_18_SUPPORT");
	MakeRptCmt	(0X164C7,	"This calibration indicates support or non-support  of a PID by the PCM.\nPID_Support_Type");
	MakeByte	(0X164C7);
	MakeName	(0X164C7,	"C2_PIDS_KE_MODE_2_PID_19_20_SUPPORT");
	MakeRptCmt	(0X164C8,	"This calibration indicates the mass air flow corrected corrected to sealevel.\nGrams_per_Second");
	MakeWord	(0X164C8);
	MakeName	(0X164C8,	"C2_PIDS_KE_PEAK_AIRFLOW_SEALEVEL");
	MakeRptCmt	(0X164CA,	"It indicates the barometric pressure corrected corrected to sealevel.\nkPa");
	MakeWord	(0X164CA);
	MakeName	(0X164CA,	"C2_PIDS_KE_SEALEVEL_BAROMETER");
	MakeRptCmt	(0X164CC,	"This Calibration indicates which on_board diagnostic system is used.\nSHORTCARD");
	MakeByte	(0X164CC);
	MakeName	(0X164CC,	"C2_PIDS_KE_OBD2_SYSTEM_TYPE");
	MakeRptCmt	(0X164CE,	"Initial coolant default, used if IAT failed on powerup.\nDegrees C");
	MakeWord	(0X164CE);
	MakeName	(0X164CE,	"COOLANT_KE_INITIAL_COOLANT_DEFAULT");
	MakeRptCmt	(0X164D0,	"Maximum value allowed for default coolant temperature.\nDegrees C");
	MakeWord	(0X164D0);
	MakeName	(0X164D0,	"COOLANT_KE_WARM_ENGINE_DEFAULT_COOLANT_M");
	MakeRptCmt	(0X164D2,	"This is added to what the ambient air temperature was at powerup to determine what the default coolant temperature should be.\nDegrees C");
	MakeDword	(x=0X164D2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X164D2,	"COOLANT_KV_DEFAULT_COOLANT");
	MakeRptCmt	(0X16510,	"The cylinder number present when CAM has just transitionedto the indicated state.\nCam_Transition");
	MakeByte	(0X16510);
	MakeName	(0X16510,	"CYLINDER_NUMBER_KV_CYLINDER_AT_CAM");
	MakeRptCmt	(0X16512,	"Number of low-resolution reference pulses that must occur before a change in cam signal is assumed.\nSHORTCARD");
	MakeName	(0X16512,	"CYLINDER_NUMBER_KV_SYNC_REFERENCES");
	MakeRptCmt	(0X16526,	"The number of failures required to set P1539\nCounts");
	MakeByte	(0X16526);
	MakeName	(0X16526,	"DG_AC_KE_AC_CLUTCH_HIGH_FAIL_THRESHOLD");
	MakeRptCmt	(0X16527,	"The number of passes required to pass P1539\nCounts");
	MakeByte	(0X16527);
	MakeName	(0X16527,	"DG_AC_KE_AC_CLUTCH_HIGH_PASS_THRESHOLD");
	MakeRptCmt	(0X16528,	"The number of failures required to set P1546\nCounts");
	MakeByte	(0X16528);
	MakeName	(0X16528,	"DG_AC_KE_AC_CLUTCH_LOW_FAIL_THRESHOLD");
	MakeRptCmt	(0X16529,	"The number of passes required to pass P1546\nCounts");
	MakeByte	(0X16529);
	MakeName	(0X16529,	"DG_AC_KE_AC_CLUTCH_LOW_PASS_THRESHOLD");
	MakeRptCmt	(0X1652A,	"The time that a failure must exsist to cause a fault to be displayed for AC pressure.\nSeconds");
	MakeWord	(0X1652A);
	MakeName	(0X1652A,	"DG_AC_KE_AC_PRESSURE_IN_FLT_TMR");
	MakeRptCmt	(0X1652C,	"The amount of PSI rise after AC compressor engagement, at all ambient temperatures, that indicates the sensor is not stuck.\nPSI");
	MakeWord	(0X1652C);
	MakeName	(0X1652C,	"DG_AC_KE_P0531_AC_PRESSURE_DELTA");
	MakeWord	(0X1652E);
	MakeName	(0X1652E,	"DG_AC_KE_P0531_STARTUP_AC_PRESS_DELTA");
	MakeRptCmt	(0X16530,	"When AC pressure is greater than this or when KE_P0531_IAT_Enable_Test is met, allow P0531 test to run.\nPSI");
	MakeWord	(0X16530);
	MakeName	(0X16530,	"DG_AC_KE_P0531_AC_PRESS_ENABLE_TEST");
	MakeRptCmt	(0X16532,	"When IAT is greater than this or when KE_P0531_AC_Press_Enable_Test is met, allow P0531 test to run\nDegrees_C");
	MakeWord	(0X16532);
	MakeName	(0X16532,	"DG_AC_KE_P0531_IAT_ENABLE_TEST");
	MakeRptCmt	(0X16534,	"Hold AC compressor off for KE_P0531_AC_Off_Time when compressor turns off when IAT less than this.\nDegrees_C");
	MakeWord	(0X16534);
	MakeName	(0X16534,	"DG_AC_KE_P0531_AC_HOLD_OFF_IAT");
	MakeRptCmt	(0X16536,	"The amount of time allowed for the AC pressure to rise the required delta before failing the P0531 diagnostic.\nSeconds");
	MakeWord	(0X16536);
	MakeName	(0X16536,	"DG_AC_KE_P0531_AC_ON_TIME");
	MakeRptCmt	(0X16538,	"The delay time after the clutch is turned off before the diagnostic is enabled. This allows the pressure to decay.\nSeconds");
	MakeWord	(0X16538);
	MakeName	(0X16538,	"DG_AC_KE_P0531_AC_OFF_TIME");
	MakeRptCmt	(0X1653A,	"When AC pressure is outside the window, then it is considered invalid.\nCounts");
	MakeByte	(0X1653A);
	MakeName	(0X1653A,	"DG_AC_KV_AC_PRES_AD_CNT");
	MakeByte	(0X1653B);
	MakeRptCmt	(0X1653C,	"The minimum engine run time required to start the AIR diagnostic\nSeconds");
	MakeWord	(0X1653C);
	MakeName	(0X1653C,	"DG_AIR_KE_AIRD_ENGINE_RUN_TIME_MIN");
	MakeRptCmt	(0X1653E,	"Minimum length of time before stopping the air induction request.\nSeconds");
	MakeByte	(0X1653E);
	MakeName	(0X1653E,	"DG_AIR_KE_AIRD_ACTIVE_CONTROL_WAIT_TIME");
	MakeRptCmt	(0X1653F,	"Minimum length of time the enable conditions for the active test shall be met.\nSeconds");
	MakeByte	(0X1653F);
	MakeName	(0X1653F,	"DG_AIR_KE_AIRD_ACTIVE_ENABLE_TIME_MIN");
	MakeRptCmt	(0X16540,	"The maximum amount of engine airflow allowed during the active test.\nGrams");
	MakeWord	(0X16540);
	MakeName	(0X16540,	"DG_AIR_KE_AIRD_ACTIVE_ENG_AIRFLOW_MAX");
	MakeRptCmt	(0X16542,	"The maximum engine load allowed during the active test.\nPercent");
	MakeWord	(0X16542);
	MakeName	(0X16542,	"DG_AIR_KE_AIRD_ACTIVE_ENGINE_LOAD_MAX");
	MakeRptCmt	(0X16544,	"The minimum engine speed required to run the active test.\nSpeed");
	MakeWord	(0X16544);
	MakeName	(0X16544,	"DG_AIR_KE_AIRD_ACTIVE_ENGINE_SPEED_MIN");
	MakeRptCmt	(0X16546,	"Maximum O2 sensor voltage to update the lean timer during the active test.\nMillivolts");
	MakeWord	(0X16546);
	MakeName	(0X16546,	"DG_AIR_KE_AIRD_ACTIVE_LEAN_VOLT_MAX");
	MakeRptCmt	(0X16548,	"Maximum amount of time allowed in the active test.\nSeconds");
	MakeByte	(0X16548);
	MakeName	(0X16548,	"DG_AIR_KE_AIRD_ACTIVE_TEST_TIME_LIMIT");
	MakeRptCmt	(0X1654A,	"The minimum vehicle speed required to run the active test.\nMiles per Hour");
	MakeWord	(0X1654A);
	MakeName	(0X1654A,	"DG_AIR_KE_AIRD_ACTIVE_VEH_SPEED_MIN");
	MakeRptCmt	(0X1654C,	"The minimum engine vacuum threshold to enable the passive and active tests.\nKilopascals");
	MakeWord	(0X1654C);
	MakeName	(0X1654C,	"DG_AIR_KE_AIRD_ENGINE_VACUUM_MIN");
	MakeRptCmt	(0X1654E,	"The commanded engine air/fuel control ratio shall be above this value for the passive test to run.\nRatio");
	MakeWord	(0X1654E);
	MakeName	(0X1654E,	"DG_AIR_KE_AIRD_PASV_AIRFUEL_RATIO_MIN");
	MakeRptCmt	(0X16550,	"Determines the powerup coolant temperature below which the passive test will be considered a cold start passive test.\nDegrees");
	MakeWord	(0X16550);
	MakeName	(0X16550,	"DG_AIR_KE_AIRD_PASV_COLD_START_TEMP_LIM");
	MakeRptCmt	(0X16552,	"Maximum engine airflow allowed during the passive test.\nGrams");
	MakeWord	(0X16552);
	MakeName	(0X16552,	"DG_AIR_KE_AIRD_PASV_ENG_AIRFLOW_MAX");
	MakeRptCmt	(0X16554,	"Maximum engine load allowed during the passive test.\nPercent");
	MakeWord	(0X16554);
	MakeName	(0X16554,	"DG_AIR_KE_AIRD_PASV_EXH_BACKPRES_MAX");
	MakeRptCmt	(0X16556,	"Minimum number of rich samples required to pass part 2 of the passive test.\nCount");
	MakeByte	(0X16556);
	MakeName	(0X16556,	"DG_AIR_KE_AIRD_PASV_PART2_RICH_SAMP_MIN");
	MakeRptCmt	(0X16558,	"Minimum O2 sensor voltage during part 2 of the passive test to consider the O2 sensor sample rich.\nMillivolts");
	MakeWord	(0X16558);
	MakeName	(0X16558,	"DG_AIR_KE_AIRD_PASV_PART2_RICH_VOLT_MIN");
	MakeRptCmt	(0X1655A,	"Minimum amount of time required for passive test part 2 to complete.\nSeconds");
	MakeWord	(0X1655A);
	MakeName	(0X1655A,	"DG_AIR_KE_AIRD_PASV_PART2_TIME_MIN");
	MakeRptCmt	(0X1655C,	"Threshold to determine whether to use the cold or hot passive test logic.\nDegrees");
	MakeWord	(0X1655C);
	MakeName	(0X1655C,	"DG_AIR_KE_AIRD_PASV_TEMP_THRESHOLD");
	MakeRptCmt	(0X1655E,	"The maximum change in TPS values over 100ms interval allowed during the passive test.\nPercent");
	MakeWord	(0X1655E);
	MakeName	(0X1655E,	"DG_AIR_KE_AIRD_PASV_TPS_DELTA_MAX");
	MakeRptCmt	(0X16560,	"Amount of time necessary to complete the pretest delay.\nSeconds");
	MakeByte	(0X16560);
	MakeName	(0X16560,	"DG_AIR_KE_AIRD_PRETEST_DELAY_TIME");
	MakeRptCmt	(0X16561,	"The short term fuel trim variable shall be below this value to start the active test.\nValue");
	MakeByte	(0X16561);
	MakeName	(0X16561,	"DG_AIR_KE_AIRD_PRETEST_FUEL_TRIM_MAX");
	MakeRptCmt	(0X16562,	"The short term fuel trim variable shall be above this value to start the active test.\nUnitless");
	MakeByte	(0X16562);
	MakeName	(0X16562,	"DG_AIR_KE_AIRD_PRETEST_FUEL_TRIM_MIN");
	MakeName	(0X16564,	"DG_CAM_KV_CAM_INITIAL_FIRST_CYCLE");
	MakeName	(0X165F4,	"DG_CAM_KV_CAM_INITIAL_SECOND_CYCLE");
	MakeRptCmt	(0X16684,	"Limit of allowable high transitions when a hightransition should not have occured during crank state.\nNONE 0-255");
	MakeWord	(0X16684);
	MakeName	(0X16684,	"DG_CAM_KE_CAM_X_SHORTED_HIGH_CRANK");
	MakeRptCmt	(0X16686,	"Limit of allowable high transitions when a hightransition should not have occured during engine run.\nNONE 0-255");
	MakeWord	(0X16686);
	MakeName	(0X16686,	"DG_CAM_KE_CAM_X_SHORTED_HIGH_RUN");
	MakeRptCmt	(0X16688,	"Limit of allowable low transitions when a lowtransition should not have occured during crank state.\nNONE 0-255");
	MakeWord	(0X16688);
	MakeName	(0X16688,	"DG_CAM_KE_CAM_X_SHORTED_LOW_CRANK");
	MakeRptCmt	(0X1668A,	"Limit of allowable low transitions when a lowtransition should not have occured during engine run.\nNONE 0-255");
	MakeWord	(0X1668A);
	MakeName	(0X1668A,	"DG_CAM_KE_CAM_X_SHORTED_LOW_RUN");
	MakeRptCmt	(0X1668C,	"Limit of number of too many transitions occuringwhen only one transition should have occured duringcrank state.\nNONE 0-255");
	MakeWord	(0X1668C);
	MakeName	(0X1668C,	"DG_CAM_KE_CAM_X_PERFORMANCE_CRANK");
	MakeRptCmt	(0X1668E,	"Limit of number of too many transitions occuringwhen only one transition should have occured.\nNONE 0-255");
	MakeWord	(0X1668E);
	MakeName	(0X1668E,	"DG_CAM_KE_CAM_X_PERFORMANCE_RUN");
	MakeRptCmt	(0X16690,	"Limit of number of samples for cranking.\nNONE 0-255");
	MakeWord	(0X16690);
	MakeName	(0X16690,	"DG_CAM_KE_CAM_X_SAMPLES_CRANK");
	MakeRptCmt	(0X16692,	"Limit of number of samples for engine run.\nNONE 0-255");
	MakeWord	(0X16692);
	MakeName	(0X16692,	"DG_CAM_KE_CAM_X_SAMPLES_RUN");
	MakeRptCmt	(0X16694,	"This many seconds of CAM transitions must be seen before reporting a Pass for the missing CAM signal diagnostic. Gen 1E only.\nSamples");
	MakeByte	(0X16694);
	MakeName	(0X16694,	"DG_CAM_KE_CAM_MISSING_SAMPLES");
	MakeRptCmt	(0X16695,	"If no CAM transitions are detected for this many seconds, report a Fail for the missing CAM signal diagnostic. Gen 1E only.\nCounts");
	MakeByte	(0X16695);
	MakeName	(0X16695,	"DG_CAM_KE_CAM_MISSING_FAIL_LIMIT");
	MakeRptCmt	(0X16696,	"The number of failed tests within a sample size that will report a failure for the cam sync test. Gen 1E only.\nFailures");
	MakeWord	(0X16696);
	MakeName	(0X16696,	"DG_CAM_KE_CAM_SYNC_FAILURE_LIMIT");
	MakeRptCmt	(0X16698,	"The number of tests that make up a sample size for the cam sync test. Gen 1E only.\nSamples");
	MakeWord	(0X16698);
	MakeName	(0X16698,	"DG_CAM_KE_CAM_SYNC_SAMPLE_LIMIT");
	MakeRptCmt	(0X1669A,	"The number of times (engine cycles) to run the position test after the engine running flag is active. Gen 1E only.\nCounts");
	MakeByte	(0X1669A);
	MakeName	(0X1669A,	"DG_CAM_KE_CAM_MAX_TEST_COUNTER");
	MakeRptCmt	(0X1669B,	"The number of continuous position errors to qualify as a fault. Gen 1E only.\nCounts");
	MakeByte	(0X1669B);
	MakeName	(0X1669B,	"DG_CAM_KE_CAM_POSITION_MAX_DIAG_COUNT");
	MakeRptCmt	(0X1669C,	"Lower boundry multiplier for crank-cam pulse timing window. Gen 1E only.\n0_to_4");
	MakeWord	(0X1669C);
	MakeName	(0X1669C,	"DG_CAM_KE_CAM_POSITION_ERROR_MAX");
	MakeRptCmt	(0X1669E,	"Upper boundry multiplier for crank-cam pulse timing window. Gen 1E only.\n0_to_4");
	MakeWord	(0X1669E);
	MakeName	(0X1669E,	"DG_CAM_KE_CAM_POSITION_ERROR_MIN");
	MakeByte	(0X166A0);
	MakeName	(0X166A0,	"DG_CASE_KE_CASE_COLLECT_CAM_DATA");
	MakeRptCmt	(0X166A2,	"Defines the threshold above which a cylinder compensation factor is considered to be too large.\nunitless");
	MakeWord	(0X166A2);
	MakeName	(0X166A2,	"DG_CASE_KE_CASE_FACTOR_MAX");
	MakeRptCmt	(0X166A4,	"Defines the threshold below which a cylinder compensation factor is considered out of range.\nunitless");
	MakeWord	(0X166A4);
	MakeName	(0X166A4,	"DG_CASE_KE_CASE_FACTOR_MIN");
	MakeRptCmt	(0X166A6,	"Defines the threshold beyond which the sum of the opposing cylinder pair compensation factors is considered to be out of range.\nunitless");
	MakeDword	(x=0X166A6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X166A6,	"DG_CASE_KE_CASE_FACTOR_SUM_MAX");
	MakeRptCmt	(0X166AA,	"Defines the threshold below which the sum of the opposing cylinder pair compensation factors is considered to be out of range.\nunitless");
	MakeDword	(x=0X166AA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X166AA,	"DG_CASE_KE_CASE_FACTOR_SUM_MIN");
	MakeRptCmt	(0X166AE,	"Defines the diagnostic failure threshold according to the activation rate specified herein for the owner process.\nseconds");
	MakeByte	(0X166AE);
	MakeName	(0X166AE,	"DG_CASE_KE_CASE_FAIL_TIMER_MAX");
	MakeRptCmt	(0X166AF,	"Defines the threshold above which the opposing cylinder factors are considered to be too far apart.\nunitless");
	MakeByte	(0X166AF);
	MakeName	(0X166AF,	"DG_CASE_KE_CASE_OPP_CYL_DIFF_MAX");
	MakeByte	(0X166B0);
	MakeName	(0X166B0,	"DG_CASE_KE_DSBL_MFR_ENBL_CTR_FOR_CASE");
	MakeRptCmt	(0X166B2,	"Number of Loss of Match events required to report a Crank Sync Lost failure.\nMatch Loss");
	MakeWord	(0X166B2);
	MakeName	(0X166B2,	"DG_CRANK_KE_LOSS_OF_MATCH_FAIL_LIMIT");
	MakeRptCmt	(0X166B4,	"Number of low res ref pulses that must occur before Loss Of Match density is evaluated.\nLo-Res Ref");
	MakeWord	(0X166B4);
	MakeName	(0X166B4,	"DG_CRANK_KE_LOW_RES_REF_LOM_THRESHOLD");
	MakeRptCmt	(0X166B6,	"Loss Of Match density (ratio of Loss OF Match events to low res ref pulses) that will report a Crank Sync Lost failure.\nNONE 0-1");
	MakeWord	(0X166B6);
	MakeName	(0X166B6,	"DG_CRANK_KE_CRANK_SYNC_LOST_RATIO_LIMIT");
	MakeRptCmt	(0X166B8,	"Number of crank synch not achieved samples required to report test passed.\nSamples");
	MakeByte	(0X166B8);
	MakeName	(0X166B8,	"DG_CRANK_KE_CRANK_SYNC_TEST_SAMPLE_LIMIT");
	MakeRptCmt	(0X166B9,	"Number of crank synch not achieved failures within a sample sample size required to report a crank synch not achieved failure.\nFailures");
	MakeByte	(0X166B9);
	MakeName	(0X166B9,	"DG_CRANK_KE_CRANK_SYNC_TEST_FAIL_LIMIT");
	MakeRptCmt	(0X166BA,	"This many matches in a single sample register as one crank synch not achieved failure.\nmatches");
	MakeWord	(0X166BA);
	MakeName	(0X166BA,	"DG_CRANK_KE_MATCH_HAS_OCCURRED_THRESHOLD");
	MakeRptCmt	(0X166BC,	"Level of airflow when engine is cranking.\ngm/S");
	MakeWord	(0X166BC);
	MakeName	(0X166BC,	"DG_CRANK_KE_MIN_CRANKING_MASS_AIRFLOW");
	MakeByte	(0X166BE);
	MakeName	(0X166BE,	"DG_CRANK_KE_START_CRANK_SAMPLE_SIZE");
	MakeByte	(0X166BF);
	MakeName	(0X166BF,	"DG_CRANK_KE_START_CRANK_FAILURE_LIMIT");
	MakeRptCmt	(0X166C0,	"RPM changes greater than this value over a 12.5ms interval must be faulty. Gen 1E only.\nRPM");
	MakeWord	(0X166C0);
	MakeName	(0X166C0,	"DG_CRANK_KE_ACCELERATION_LIMIT_VALUE");
	MakeRptCmt	(0X166C2,	"Minimum airflow that indicates the engine is rotating and should be running. Gen 1E only.\nGrams_Per_Second");
	MakeWord	(0X166C2);
	MakeName	(0X166C2,	"DG_CRANK_KE_MIN_RUNNING_MASS_AIRFLOW");
	MakeRptCmt	(0X166C4,	"Number of failed crank sensor tests for high acceleration out of a sample size that will report a failure. Gen 1E only.\nFailures");
	MakeWord	(0X166C4);
	MakeName	(0X166C4,	"DG_CRANK_KE_CRANK_INTERMITTENT_FAIL_LIMIT");
	MakeWord	(0X166C6);
	MakeName	(0X166C6,	"DG_CRANK_KE_LONG_INTERMITTENT_FAIL_LIMIT");
	MakeRptCmt	(0X166C8,	"Number of samples that make up a sample size for the crank sensor test. Gen 1E only.\nSamples");
	MakeWord	(0X166C8);
	MakeName	(0X166C8,	"DG_CRANK_KE_CRANK_INTERMITTENT_SAMPLES_LI");
	MakeRptCmt	(0X166CA,	"If the crank sensor fails on a running engine, atleast this many cam edges must occur before setting a code. Gen IE only.\nCounts");
	MakeWord	(0X166CA);
	MakeName	(0X166CA,	"DG_CRANK_KE_MIN_CAM_EDGES_AFTER_CRK_LOSS");
	MakeRptCmt	(0X166CC,	"Limit the value of engine airflow at this maximum.\nGmsPerSec");
	MakeWord	(0X166CC);
	MakeName	(0X166CC,	"DG_ECTR_KE_ECTR_ENGINE_AIRFLOW_MAX");
	MakeRptCmt	(0X166CE,	"Airflow is set to zero, so that no airflow is accumulated below the mimimum.\nGmsPerSec");
	MakeWord	(0X166CE);
	MakeName	(0X166CE,	"DG_ECTR_KE_ECTR_ENGINE_AIRFLOW_MIN");
	MakeRptCmt	(0X166D0,	"The maximum value that can be assigned to OBD_Intake_Air_ Temperature to represent ambient temperature.\nDegrees_C");
	MakeWord	(0X166D0);
	MakeName	(0X166D0,	"DG_ECTR_KE_ECTR_MAX_AMBIENT_TEMP");
	MakeRptCmt	(0X166D2,	"Maximum engine run time that will enable the test.\nSeconds");
	MakeWord	(0X166D2);
	MakeName	(0X166D2,	"DG_ECTR_KE_ECTR_MAX_ENGINE_RUN_TIME");
	MakeRptCmt	(0X166D4,	"Minimum engine run time that will enable the test.\nSeconds");
	MakeWord	(0X166D4);
	MakeName	(0X166D4,	"DG_ECTR_KE_ECTR_MIN_ENGINE_RUN_TIME");
	MakeRptCmt	(0X166D6,	"Minimum intake air temperature value to enable the rationality test(s).\nDegrees_C");
	MakeWord	(0X166D6);
	MakeName	(0X166D6,	"DG_ECTR_KE_ECTR_MIN_REQUIRED_IAT");
	MakeRptCmt	(0X166D8,	"Minimum vehicle speed value to update the distance measurement.\nMPH");
	MakeWord	(0X166D8);
	MakeName	(0X166D8,	"DG_ECTR_KE_ECTR_MIN_VEHICLE_SPEED");
	MakeRptCmt	(0X166DA,	"The maximum fuel ethanol composition allowed to enable the test.\nPercent");
	MakeWord	(0X166DA);
	MakeName	(0X166DA,	"DG_ECTR_KE_ECTR_MAX_ETH_PERCENT");
	MakeRptCmt	(0X166DC,	"Number of consecutive failures without a pass to report a failed rationality test.\nFailures");
	MakeByte	(0X166DC);
	MakeName	(0X166DC,	"DG_ECTR_KE_ECTR_TEST_FAIL_LIM");
	MakeRptCmt	(0X166DE,	"Minimum engine run time threshold to record a short to high fault.\nSeconds");
	MakeByte	(0X166DE);
	MakeName	(0X166DE,	"DG_ECTS_KE_ECTS_ENG_RUN_TIME_HIGH_MIN");
	MakeRptCmt	(0X166DF,	"Minimum engine run time threshold to record a short to low fault.\nSeconds");
	MakeByte	(0X166DF);
	MakeName	(0X166DF,	"DG_ECTS_KE_ECTS_ENG_RUN_TIME_LOW_MIN");
	MakeRptCmt	(0X166E0,	"Number of failed intermittent short to high tests that will report an intermittent failure.\nFailures");
	MakeWord	(0X166E0);
	MakeName	(0X166E0,	"DG_ECTS_KE_ECTS_INT_SHORT_HIGH_FAIL_LIM");
	MakeRptCmt	(0X166E2,	"Number of intermittent short high tests that make up a sample size.\nSamples");
	MakeWord	(0X166E2);
	MakeName	(0X166E2,	"DG_ECTS_KE_ECTS_INT_SHORT_HIGH_SMPL_LIM");
	MakeRptCmt	(0X166E4,	"Number of failed intermittent short to low tests that will report an intermittent failure.\nFailures");
	MakeWord	(0X166E4);
	MakeName	(0X166E4,	"DG_ECTS_KE_ECTS_INT_SHORT_LOW_FAIL_LIM");
	MakeRptCmt	(0X166E6,	"Number of intermittent short low tests that make up a sample size.\nSamples");
	MakeWord	(0X166E6);
	MakeName	(0X166E6,	"DG_ECTS_KE_ECTS_INT_SHORT_LOW_SMPL_LIM");
	MakeRptCmt	(0X166E8,	"Number of failed short to high tests that will report a failure.\nFailures");
	MakeWord	(0X166E8);
	MakeName	(0X166E8,	"DG_ECTS_KE_ECTS_SHORT_HIGH_FAIL_LIM");
	MakeRptCmt	(0X166EA,	"Number of short high tests that make up a sample size.\nSamples");
	MakeWord	(0X166EA);
	MakeName	(0X166EA,	"DG_ECTS_KE_ECTS_SHORT_HIGH_SMPL_LIM");
	MakeRptCmt	(0X166EC,	"Number of failed short to low tests that will report a failure.\nFailures");
	MakeWord	(0X166EC);
	MakeName	(0X166EC,	"DG_ECTS_KE_ECTS_SHORT_LOW_FAIL_LIM");
	MakeRptCmt	(0X166EE,	"Number of short low tests that make up a sample size.\nSamples");
	MakeWord	(0X166EE);
	MakeName	(0X166EE,	"DG_ECTS_KE_ECTS_SHORT_LOW_SMPL_LIM");
	MakeRptCmt	(0X166F0,	"Minimum IAT to enable an ECT shorted high failure prior to achieving sufficient engine run time.\nDegrees C");
	MakeWord	(0X166F0);
	MakeName	(0X166F0,	"DG_ECTS_KE_ECTS_SHORTED_HIGH_IAT_MIN");
	MakeRptCmt	(0X166F2,	"Maximum IAT to enable an ECT shorted low failure prior to achieving sufficient engine run time.\nDegrees C");
	MakeWord	(0X166F2);
	MakeName	(0X166F2,	"DG_ECTS_KE_ECTS_SHORTED_LOW_IAT_MAX");
	MakeRptCmt	(0X166F4,	"The threshold above which the coolant sensor is considered shorted to a positive voltage.\nPercent");
	MakeWord	(0X166F4);
	MakeName	(0X166F4,	"DG_ECTS_KV_ECTS_SHORTED_HIGH_THRESH");
	MakeRptCmt	(0X166F8,	"The threshold below which the coolant sensor is considered opened or shorted to ground.\nPercent");
	MakeWord	(0X166F8);
	MakeName	(0X166F8,	"DG_ECTS_KV_ECTS_SHORTED_LOW_THRESH");
	MakeRptCmt	(0X166FC,	"Compensation factor to reduce the delta MAP for high achieved positions.\nUnitless");
	MakeByte	(0X166FC);
	MakeName	(0X166FC,	"DG_EGRQ_KV_EGRF_ACHIEVED_POS_COMP");
	MakeRptCmt	(0X16716,	"Compensation factor to reduce the delta MAP for various restriction amounts.\nUnitless");
	MakeByte	(0X16716);
	MakeName	(0X16716,	"DG_EGRQ_KV_EGRF_EWMA_COMPENSATION");
	MakeRptCmt	(0X16720,	"Compensation factor to reduce the delta MAP for long on-times.\nUnitless");
	MakeByte	(0X16720);
	MakeName	(0X16720,	"DG_EGRQ_KV_EGRF_ON_TIME_COMPENSATION");
	MakeRptCmt	(0X16732,	"Interval between test control assertions when the previous test was aborted during the intrusive period.\nSeconds");
	MakeWord	(0X16732);
	MakeName	(0X16732,	"DG_EGRQ_KE_EGRF_ABORT_INTERVAL");
	MakeRptCmt	(0X16734,	"Maximum allowable difference between commanded and actual airflow during the TEST_STARTED mode.\nGrams/Sec");
	MakeByte	(0X16734);
	MakeName	(0X16734,	"DG_EGRQ_KE_EGRF_AIRFLOW_DIFFERENCE");
	MakeRptCmt	(0X16736,	"Upper limit of range above which flow test is not run.\nkPa");
	MakeWord	(0X16736);
	MakeName	(0X16736,	"DG_EGRQ_KE_EGRF_ALTITUDE_COMP_MAP_HIGH");
	MakeRptCmt	(0X16738,	"Lower limit of range below which flow test is not run.\nkPa");
	MakeWord	(0X16738);
	MakeName	(0X16738,	"DG_EGRQ_KE_EGRF_ALTITUDE_COMP_MAP_LOW");
	MakeRptCmt	(0X1673A,	"Minimum barometric pressure below which test may is not run.\nkPa");
	MakeWord	(0X1673A);
	MakeName	(0X1673A,	"DG_EGRQ_KE_EGRF_BARO_MINIMUM");
	MakeRptCmt	(0X1673C,	"Initial number of execution loops that the valve will be commanded open, after a powerup or a non-volatile init.\nCounts");
	MakeByte	(0X1673C);
	MakeName	(0X1673C,	"DG_EGRQ_KE_EGRF_BASE_ON_TIME_COUNTER");
	MakeRptCmt	(0X1673D,	"Initial number of execution loops that the valve will be commanded open, after an ALDL code clear.\nCounts");
	MakeByte	(0X1673D);
	MakeName	(0X1673D,	"DG_EGRQ_KE_EGRF_CODE_CLEAR_ON_TIME_CTR");
	MakeRptCmt	(0X1673E,	"Interval between test control assertions, when the previous test was completed.\nSeconds");
	MakeWord	(0X1673E);
	MakeName	(0X1673E,	"DG_EGRQ_KE_EGRF_COMPLETE_INTERVAL");
	MakeRptCmt	(0X16740,	"Condition for enabling flow mode test based on decel fuel cut off state.\nEnum");
	MakeByte	(0X16740);
	MakeName	(0X16740,	"DG_EGRQ_KE_EGRF_DFCO_ENABLE");
	MakeRptCmt	(0X16742,	"Threshold above which the diagnostic is considered failing,if the diagnostic is currently indicating a failure.\nkPa");
	MakeWord	(0X16742);
	MakeName	(0X16742,	"DG_EGRQ_KE_EGRF_EWMA_FAIL_THRESHOLD");
	MakeRptCmt	(0X16744,	"Filter coefficient for EWMA calculation when test is indicating a failure.\nCoef");
	MakeWord	(0X16744);
	MakeName	(0X16744,	"DG_EGRQ_KE_EGRF_EWMA_FAIL_COEF");
	MakeRptCmt	(0X16746,	"Threshold above which the diagnostic is considered  failing if the diagnostic is currently not indicating a failure.\nkPa");
	MakeWord	(0X16746);
	MakeName	(0X16746,	"DG_EGRQ_KE_EGRF_EWMA_NONFAIL_THRESH");
	MakeRptCmt	(0X16748,	"Filter coefficient for EWMA calculation when test is not indicating a failure.\nCoef");
	MakeWord	(0X16748);
	MakeName	(0X16748,	"DG_EGRQ_KE_EGRF_EWMA_NONFAIL_COEF");
	MakeRptCmt	(0X1674A,	"Number of test samples required before the diagnostic can be considered passing.\nCounts");
	MakeByte	(0X1674A);
	MakeName	(0X1674A,	"DG_EGRQ_KE_EGRF_EWMA_PASS_SAMPLES");
	MakeRptCmt	(0X1674C,	"Maximum range that MAP can fluctuate during test start period.\nkPa");
	MakeWord	(0X1674C);
	MakeName	(0X1674C,	"DG_EGRQ_KE_EGRF_MAX_DELTA_MAP");
	MakeRptCmt	(0X1674E,	"Max range that vehicle speed can fluctuate during the intrusive portions of the test\nMPH");
	MakeWord	(0X1674E);
	MakeName	(0X1674E,	"DG_EGRQ_KE_EGRF_MAX_DELTA_MPH");
	MakeRptCmt	(0X16750,	"Max negative change in engine speed allowed during the intrusive portions of the test.\nRPM");
	MakeWord	(0X16750);
	MakeName	(0X16750,	"DG_EGRQ_KE_EGRF_MAX_NEG_RPM_CHANGE");
	MakeRptCmt	(0X16752,	"Maximum number of execution loops the valve will be commanded open.\nCounts");
	MakeByte	(0X16752);
	MakeName	(0X16752,	"DG_EGRQ_KE_EGRF_MAX_ON_TIME_COUNTER");
	MakeRptCmt	(0X16754,	"Max positive change in engine speed allowed during the intrusive portions of the test\nRPM");
	MakeWord	(0X16754);
	MakeName	(0X16754,	"DG_EGRQ_KE_EGRF_MAX_POS_RPM_CHANGE");
	MakeRptCmt	(0X16756,	"High limit of engine speed range to enable the flow test.\nRPM");
	MakeWord	(0X16756);
	MakeName	(0X16756,	"DG_EGRQ_KE_EGRF_MAXIMUM_RPM");
	MakeRptCmt	(0X16758,	"TPS must be below this value to enable the flow test.\nPercent");
	MakeWord	(0X16758);
	MakeName	(0X16758,	"DG_EGRQ_KE_EGRF_MAXIMUM_TPS");
	MakeRptCmt	(0X1675A,	"Low limit of engine speed range to enable the flow test.\nRPM");
	MakeWord	(0X1675A);
	MakeName	(0X1675A,	"DG_EGRQ_KE_EGRF_MINIMUM_RPM");
	MakeRptCmt	(0X1675C,	"Minimum number of execution loops that the valve will be commanded open,\nCounts");
	MakeByte	(0X1675C);
	MakeName	(0X1675C,	"DG_EGRQ_KE_EGRF_MIN_ON_TIME_COUNTER");
	MakeRptCmt	(0X1675D,	"Number of consecutive overshoot or undershoot events necessary to modify the duty cycle on-time.\nCounts");
	MakeByte	(0X1675D);
	MakeName	(0X1675D,	"DG_EGRQ_KE_EGRF_OVER_UNDER_COUNT");
	MakeRptCmt	(0X1675E,	"Position above which the test will decrement the duty cycle on-time.\nPercent");
	MakeWord	(0X1675E);
	MakeName	(0X1675E,	"DG_EGRQ_KE_EGRF_OVERSHOOT_POSITION");
	MakeRptCmt	(0X16760,	"Used to choose desired RPM compensation method. START_RPM = Starting RPM, MINIMUM_RPM = Minimum RPM during test\nENUM");
	MakeByte	(0X16760);
	MakeName	(0X16760,	"DG_EGRQ_KE_EGRF_RPM_COMPENSATION");
	MakeRptCmt	(0X16761,	"Amount of time the test is in the SAMPLE_CALCULATION mode.\nSeconds");
	MakeByte	(0X16761);
	MakeName	(0X16761,	"DG_EGRQ_KE_EGRF_SAMPLE_TIME");
	MakeByte	(0X16762);
	MakeName	(0X16762,	"DG_EGRQ_KE_EGRF_SAMPLES_AFTER_RESET");
	MakeByte	(0X16763);
	MakeName	(0X16763,	"DG_EGRQ_KE_EGRF_SAMPLES_AFTER_STEP");
	MakeRptCmt	(0X16764,	"Maximum number of samples per trip.\nCounts");
	MakeByte	(0X16764);
	MakeName	(0X16764,	"DG_EGRQ_KE_EGRF_SAMPLES_PER_TRIP");
	MakeRptCmt	(0X16766,	"Maximum EGR starting position below which the valve is considered closed.\nPercent");
	MakeWord	(0X16766);
	MakeName	(0X16766,	"DG_EGRQ_KE_EGRF_START_MAX_POSITION");
	MakeRptCmt	(0X16768,	"Minimum difference between MAPDIFF and EWMA to trigger multiple tests for step change\nkPa");
	MakeWord	(0X16768);
	MakeName	(0X16768,	"DG_EGRQ_KE_EGRF_STEP_DELTA");
	MakeRptCmt	(0X1676A,	"Minimum value of MAPDIFF to trigger multiple tests for step change\nkPa");
	MakeWord	(0X1676A);
	MakeName	(0X1676A,	"DG_EGRQ_KE_EGRF_STEP_MAPDIFF");
	MakeRptCmt	(0X1676C,	"Maximum number of samples per trip after a step change.\nCounts");
	MakeByte	(0X1676C);
	MakeName	(0X1676C,	"DG_EGRQ_KE_EGRF_STEP_SAMPLES_PER_TRIP");
	MakeRptCmt	(0X1676E,	"Length of time the throttle must be virtually closed before a flow test is allowed.\nSeconds");
	MakeWord	(0X1676E);
	MakeName	(0X1676E,	"DG_EGRQ_KE_EGRF_TEST_ENABLE_DELAY");
	MakeRptCmt	(0X16770,	"Position below which the test will increment the duty cycle on-time.\nPercent");
	MakeWord	(0X16770);
	MakeName	(0X16770,	"DG_EGRQ_KE_EGRF_UNDERSHOOT_POSITION");
	MakeRptCmt	(0X16772,	"One condition to run the diagnostic is that engine speed be less than this cal.\nRPM");
	MakeWord	(0X16772);
	MakeName	(0X16772,	"DG_ESC_KE_ESC_NOISE_RPM_HIGH");
	MakeRptCmt	(0X16774,	"If the engine run time is less than this value, then the test is to be bypassed.\nSeconds");
	MakeWord	(0X16774);
	MakeName	(0X16774,	"DG_ESC_KE_ESC_CIRCUIT_ENG_RUN_TIME");
	MakeRptCmt	(0X16776,	"Number of fail samples needed to report a fail in a sample period less than KE_ESC_Samples total.\nCounts");
	MakeByte	(0X16776);
	MakeName	(0X16776,	"DG_ESC_KE_ESC_CIRCUIT_FAIL_SAMPLES");
	MakeRptCmt	(0X16777,	"Number of samples needed before a pass can be reported.\nCounts");
	MakeByte	(0X16777);
	MakeName	(0X16777,	"DG_ESC_KE_ESC_CIRCUIT_SAMPLES");
	MakeRptCmt	(0X16778,	"Minimum coolant temperature required to learn minimum noise.\nDegrees C");
	MakeWord	(0X16778);
	MakeName	(0X16778,	"DG_ESC_KE_ESC_COOLANT_TEMP_MIN");
	MakeRptCmt	(0X1677A,	"Lag filter coefficient used in filtering the ESC noise channel.\nScaler_0_to_1");
	MakeWord	(0X1677A);
	MakeName	(0X1677A,	"DG_ESC_KE_ESC_FILTER_COEFF");
	MakeRptCmt	(0X1677C,	"An initial startup value for filter purposes.\nA/D Counts");
	MakeByte	(0X1677C);
	MakeName	(0X1677C,	"DG_ESC_KE_ESC_INITIAL_NOISE");
	MakeRptCmt	(0X1677E,	"Minimum engine run time before test can be enabled.\nSeconds");
	MakeWord	(0X1677E);
	MakeName	(0X1677E,	"DG_ESC_KE_ESC_NOISE_ENGINE_RUN_TIME");
	MakeRptCmt	(0X16780,	"Number of successive low noise level conditions necessary to report a fail condition.\nCounts");
	MakeByte	(0X16780);
	MakeName	(0X16780,	"DG_ESC_KE_ESC_NOISE_LOW_COUNT");
	MakeRptCmt	(0X16781,	"Low noise level threshold which must be exceeded a calibratable number of times to report a fail.\nA/D Counts");
	MakeByte	(0X16781);
	MakeName	(0X16781,	"DG_ESC_KE_ESC_NOISE_LOW_LEVEL");
	MakeRptCmt	(0X16782,	"Number of samples before a low noise pass can be reported.\nCounts");
	MakeByte	(0X16782);
	MakeName	(0X16782,	"DG_ESC_KE_ESC_NOISE_LOW_SAMPLE_COUNT");
	MakeRptCmt	(0X16783,	"Number of high noise level conditions per sample size necessary to report a fail condition.\nCounts");
	MakeByte	(0X16783);
	MakeName	(0X16783,	"DG_ESC_KE_ESC_NOISE_HIGH_COUNT");
	MakeRptCmt	(0X16784,	"High noise level threshold which must be exceeded a calibratable number of times to report a failure.\nA/D Counts");
	MakeByte	(0X16784);
	MakeName	(0X16784,	"DG_ESC_KE_ESC_NOISE_HIGH_LEVEL");
	MakeRptCmt	(0X16785,	"Number of passes needed before a high noise pass can be reported.\nCounts");
	MakeByte	(0X16785);
	MakeName	(0X16785,	"DG_ESC_KE_ESC_NOISE_HIGH_SAMPLE_COUNT");
	MakeRptCmt	(0X16786,	"One condition to run the diagnostic is that engine speed be greater than this cal.\nRPM");
	MakeWord	(0X16786);
	MakeName	(0X16786,	"DG_ESC_KE_ESC_NOISE_RPM_LOW");
	MakeRptCmt	(0X16788,	"One condition to run the diagnostic is that Throttle position be greater than this cal.\nPercent");
	MakeWord	(0X16788);
	MakeName	(0X16788,	"DG_ESC_KE_ESC_NOISE_TPS_MIN");
	MakeRptCmt	(0X1678A,	"Maximum engine speed to enable minimum noise learning.\nRPM");
	MakeWord	(0X1678A);
	MakeName	(0X1678A,	"DG_ESC_KE_ESC_RPM_MAX");
	MakeRptCmt	(0X1678C,	"Minimum engine speed to enable minimum noise learning.\nRPM");
	MakeWord	(0X1678C);
	MakeName	(0X1678C,	"DG_ESC_KE_ESC_RPM_MIN");
	MakeRptCmt	(0X1678E,	"Minimum engine run time to enable minimum noise learning.\nSeconds");
	MakeWord	(0X1678E);
	MakeName	(0X1678E,	"DG_ESC_KE_ESC_RUN_TIME_MIN");
	MakeByte	(0X16790);
	MakeName	(0X16790,	"DG_ESC_KE_ESC_SENSOR_INITIAL_NOISE");
	MakeRptCmt	(0X16792,	"Minimum system voltage required to enable the circuit test.\nVolts");
	MakeWord	(0X16792);
	MakeName	(0X16792,	"DG_ESC_KE_ESC_SYSTEM_VOLTAGE_MIN");
	MakeRptCmt	(0X16794,	"Any IR instant knock exceeding this threshold is considered too long.\nA/D Counts");
	MakeByte	(0X16794);
	MakeName	(0X16794,	"DG_ESC_KE_IR_INSTANT_MAX");
	MakeRptCmt	(0X16795,	"Number of fail samples needed to report a fail in a sample period less than KE_IR_Test_Max.\nCounts");
	MakeByte	(0X16795);
	MakeName	(0X16795,	"DG_ESC_KE_IR_KNOCK_MAX");
	MakeRptCmt	(0X16796,	"Number of samples needed before the IR counters will be reset for the next test cycle.\nCounts");
	MakeByte	(0X16796);
	MakeName	(0X16796,	"DG_ESC_KE_IR_TEST_MAX");
	MakeRptCmt	(0X16798,	"The filter coefficient for the delta fan speed variable used by the system performance test.\n0-1");
	MakeWord	(0X16798);
	MakeName	(0X16798,	"DI_FAN_KE_FAND_DELTA_FAN_SPEED_COEF");
	MakeRptCmt	(0X1679A,	"The minimum allowable intake air temperature to enable the tests.\nDegrees C");
	MakeWord	(0X1679A);
	MakeName	(0X1679A,	"DI_FAN_KE_FAND_IAT_MIN");
	MakeRptCmt	(0X1679C,	"The minimum RPM required to pump oil out of the working chamber.\nRPM");
	MakeWord	(0X1679C);
	MakeName	(0X1679C,	"DI_FAN_KE_FAND_PUMP_OUT_RPM_MIN");
	MakeRptCmt	(0X1679E,	"Length of time above which the fan clutch oil should have completed being pumped out.\nSeconds");
	MakeWord	(0X1679E);
	MakeName	(0X1679E,	"DI_FAN_KE_FAND_PUMP_OUT_TIME");
	MakeRptCmt	(0X167A0,	"The minimum allowable system voltage to enable the tests.\nVolts");
	MakeByte	(0X167A0);
	MakeName	(0X167A0,	"DI_FAN_KE_FAND_SYS_VOLTAGE_MIN");
	MakeRptCmt	(0X167A2,	"Maximum error allowed before incrementing the fail counter.\nRPM");
	MakeWord	(0X167A2);
	MakeName	(0X167A2,	"DG_FAN_KE_FAND_DELTA_FAN_SPEED_LIM");
	MakeRptCmt	(0X167A4,	"Maximum allowable change in the engine speed to enable the performance test.\nRPM");
	MakeWord	(0X167A4);
	MakeName	(0X167A4,	"DG_FAN_KE_FAND_ENGINE_SPEED_DELTA_MAX");
	MakeRptCmt	(0X167A6,	"Threshold of fan speed above which is considered high.\nRPM");
	MakeWord	(0X167A6);
	MakeName	(0X167A6,	"DG_FAN_KE_FAND_FAN_SPEED_MAX");
	MakeRptCmt	(0X167A8,	"Number of fails counts required to fail the overspeed test.\nUnitless");
	MakeWord	(0X167A8);
	MakeName	(0X167A8,	"DG_FAN_KE_FAND_OVERSPEED_FAIL_LIM");
	MakeRptCmt	(0X167AA,	"Number of samples required to pass the overspeed test.\nUnitless");
	MakeWord	(0X167AA);
	MakeName	(0X167AA,	"DG_FAN_KE_FAND_OVERSPEED_SMPL_LIM");
	MakeRptCmt	(0X167AC,	"Threshold of fan speed above which is unsafe.\nHertz");
	MakeWord	(0X167AC);
	MakeName	(0X167AC,	"DG_FAN_KE_FAND_OVERSPEED_THRESHOLD");
	MakeRptCmt	(0X167AE,	"Number of fails counts required to fail the fan speed sensor circuit test.\nUnitless");
	MakeWord	(0X167AE);
	MakeName	(0X167AE,	"DG_FAN_KE_FAND_SENSOR_FAIL_LIM");
	MakeRptCmt	(0X167B0,	"Minimum fan speed frequency below which the speed input is considered missing.\nHertz");
	MakeWord	(0X167B0);
	MakeName	(0X167B0,	"DG_FAN_KE_FAND_SENSOR_FREQ_MIN");
	MakeRptCmt	(0X167B2,	"Number of samples required to pass the fan speed sensor circuit test.\nUnitless");
	MakeWord	(0X167B2);
	MakeName	(0X167B2,	"DG_FAN_KE_FAND_SENSOR_SMPL_LIM");
	MakeRptCmt	(0X167B4,	"Number of fail counts required to fail the test.\nUnitless");
	MakeWord	(0X167B4);
	MakeName	(0X167B4,	"DG_FAN_KE_FAND_SPEEDHI_FAIL_LIM");
	MakeRptCmt	(0X167B6,	"Maximum engine speed that will allow evaluation of the fan speed.\nRPM");
	MakeWord	(0X167B6);
	MakeName	(0X167B6,	"DG_FAN_KE_FAND_SPEEDHI_RPM_MAX");
	MakeRptCmt	(0X167B8,	"Minimum engine speed that will allow evaluation of  the fan speed.\nRPM");
	MakeWord	(0X167B8);
	MakeName	(0X167B8,	"DG_FAN_KE_FAND_SPEEDHI_RPM_MIN");
	MakeRptCmt	(0X167BA,	"Number of samples required to pass the fan speed too high test.\nUnitless");
	MakeWord	(0X167BA);
	MakeName	(0X167BA,	"DG_FAN_KE_FAND_SPEEDHI_SMPL_LIM");
	MakeRptCmt	(0X167BC,	"Amount of time that the speed command must remain stable to perform the system performance test.\nSeconds");
	MakeByte	(0X167BC);
	MakeName	(0X167BC,	"DG_FAN_KE_FAND_STABLE_SPEED_TIME");
	MakeRptCmt	(0X167BE,	"Number of fails counts required to fail the system performance test.\nUnitless");
	MakeWord	(0X167BE);
	MakeName	(0X167BE,	"DG_FAN_KE_FAND_SYSPERF_FAIL_LIM");
	MakeRptCmt	(0X167C0,	"Maximum allowable engine speed to enable the system  performance test.\nRPM");
	MakeWord	(0X167C0);
	MakeName	(0X167C0,	"DG_FAN_KE_FAND_SYSPERF_RPM_MAX");
	MakeRptCmt	(0X167C2,	"Number of samples required to pass the system performance test.\nUnitless");
	MakeWord	(0X167C2);
	MakeName	(0X167C2,	"DG_FAN_KE_FAND_SYS_SMPL_LIM");
	MakeRptCmt	(0X167C4,	"Global Diagnostic Enabling flag.\nBOOLEAN");
	MakeByte	(0X167C4);
	MakeName	(0X167C4,	"DG_FASD_KEFADD_B_FASD_DIAGNOSTICENABLED");
	MakeRptCmt	(0X167C6,	"Maximum number of samples between intrusive test segments when an abort of a test segment occurs.\nUnitless");
	MakeWord	(0X167C6);
	MakeName	(0X167C6,	"DG_FASD_KEFADD_CNT_FASD_ABORTTIMEMAX");
	MakeRptCmt	(0X167C8,	"Min data count of accumulator learning before first report is allowed to prevent premature first report.\nUnitless");
	MakeWord	(0X167C8);
	MakeName	(0X167C8,	"DG_FASD_KEFADD_CNT_FASD_ACCUMLEARNMIN");
	MakeWord	(0X167CA);
	MakeName	(0X167CA,	"DG_FASD_KEFADD_CNT_FASD_MAXPURGECOUNT");
	MakeRptCmt	(0X167CC,	"An intrusive test failure is reported if the number of failing segments reaches this threshold.\nUnitless");
	MakeByte	(0X167CC);
	MakeName	(0X167CC,	"DG_FASD_KEFADD_CNT_FASD_MAXSEGMENTFAILS");
	MakeRptCmt	(0X167CD,	"The intrusive test is stopped if this number of segments occurs without a passing or failing result.\nUnitless");
	MakeByte	(0X167CD);
	MakeName	(0X167CD,	"DG_FASD_KEFADD_CNT_FASD_MAXTESTSEGMENTS");
	MakeRptCmt	(0X167CE,	"The number of continuously accumulated sample counts required before allowing a report to the data manager.\nUnitless");
	MakeByte	(0X167CE);
	MakeName	(0X167CE,	"DG_FASD_KEFADD_CNT_FASD_READYTOREPORTMIN");
	MakeRptCmt	(0X167CF,	"This number of samples are not counted when a cell change occurs during the intrusive test segment.\nUnitless");
	MakeName	(0X167CF,	"DG_FASD_KEFADD_CNT_FASD_STABLESMPLCNTMIN");
	MakeWord	(0X167D0);
	MakeName	(0X167D0,	"DG_FASD_KEFADD_CNT_FASD_STALEACCUMMAX");
	MakeRptCmt	(0X167D2,	"Maximum number of samples between intrusive test segments when a normal completion of a test segment occurs.\nUnitless");
	MakeWord	(0X167D2);
	MakeName	(0X167D2,	"DG_FASD_KEFADD_CNT_FASD_WAITTIMEMAX");
	MakeRptCmt	(0X167D4,	"Data will be discarded if the the purge valve is open above this threshold and the vent valve is closed.\nUnitless");
	MakeByte	(0X167D4);
	MakeName	(0X167D4,	"DG_FASD_KEFADD_CNT_MAXINTRUSVATTEMPT");
	MakeByte	(0X167D5);
	MakeName	(0X167D5,	"DG_FASD_KEFADD_CNT_MAXSEGMENTPASSES");
	MakeRptCmt	(0X167D6,	"The number of samples required (after the minimum cell learning) before a passive result can be used.\nUnitless");
	MakeWord	(0X167D6);
	MakeName	(0X167D6,	"DG_FASD_KEFADD_CNT_OVERALLSAMPLESMIN");
	MakeRptCmt	(0X167D8,	"This number of accumulated samples is required before the intrusive segment is considered complete.\nUnitless");
	MakeWord	(0X167D8);
	MakeName	(0X167D8,	"DG_FASD_KEFADD_CNT_SEGMENTSMPLCNTMIN");
	MakeRptCmt	(0X167DA,	"Calibration used to record the number of samples since the fuel trim cell number has changed.\nUnitless");
	MakeByte	(0X167DA);
	MakeName	(0X167DA,	"DG_FASD_KEFADD_CNT_STABILITYSAMPLMIN");
	MakeWord	(0X167DC);
	MakeName	(0X167DC,	"DG_FASD_KEFADD_CNT_STALEACCUMINITMAX");
	MakeWord	(0X167DE);
	MakeName	(0X167DE,	"DG_FASD_KEFADD_CNT_STALENONPGINITMAX");
	MakeRptCmt	(0X167E0,	"Amount the non-purge accumulator stale data counter is decremented if a sample is used (not discarded).\nUnitless");
	MakeWord	(0X167E0);
	MakeName	(0X167E0,	"DG_FASD_KEFADD_CNT_STALENONPURGEDEC");
	MakeWord	(0X167E2);
	MakeName	(0X167E2,	"DG_FASD_KEFADD_CNT_STALENONPURGEMAX");
	MakeWord	(0X167E4);
	MakeName	(0X167E4,	"DG_FASD_KEFADD_CNT_WARMCOOLSAMPLEMIN");
	MakeRptCmt	(0X167E6,	"Data will be discarded if the air flow is above this threshold.\nGrams/Sec");
	MakeWord	(0X167E6);
	MakeName	(0X167E6,	"DG_FASD_KEFADD_DM_FASD_ENGAIRFLOWHIGH");
	MakeRptCmt	(0X167E8,	"An airflow value above this threshold will cause the intrusive diagnostic to be disabled.\nGrams/Sec");
	MakeWord	(0X167E8);
	MakeName	(0X167E8,	"DG_FASD_KEFADD_DM_FASD_PGENGAIRFLOWHIGH");
	MakeRptCmt	(0X167EA,	"An airflow value below this threshold will cause the intrusive diagnostic to be disabled.\nGrams/Sec");
	MakeWord	(0X167EA);
	MakeName	(0X167EA,	"DG_FASD_KEFADD_DM_PURGENGAIRFLOWLOW");
	MakeRptCmt	(0X167EC,	"The center or nominal value of the accumulator that is not rich and not lean.\nUnitless");
	MakeWord	(0X167EC);
	MakeName	(0X167EC,	"DG_FASD_KEFADD_K_FASD_ACCUMNOMINAL");
	MakeRptCmt	(0X167EE,	"EWMA gain used to filter the currently active long term fuel trim cell data.\nUnitless");
	MakeWord	(0X167EE);
	MakeName	(0X167EE,	"DG_FASD_KEFADD_K_FASD_ACTIVEACCUMGAIN");
	MakeWord	(0X167F0);
	MakeName	(0X167F0,	"DG_FASD_KEFADD_K_FASD_FUELCTRLOVERRIDE");
	MakeRptCmt	(0X167F2,	"EWMA gain used to filter the non-purge long term fuel trim cell data during both the passive and intrusive vapor tests.\nUnitless");
	MakeWord	(0X167F2);
	MakeName	(0X167F2,	"DG_FASD_KEFADD_K_FASD_NONPURGEACCUMGAIN");
	MakeRptCmt	(0X167F4,	"EWMA gain used to filter the short term integrator data.\nUnitless");
	MakeWord	(0X167F4);
	MakeName	(0X167F4,	"DG_FASD_KEFADD_K_FASD_SHORTTERMGAIN");
}


static Bytes_5(void) {
        auto x;
#define id x

	MakeRptCmt	(0X167F6,	"Failure threshold for the short term accumulator while non-intrusive purge activity is occurring.\nUnitless");
	MakeWord	(0X167F6);
	MakeName	(0X167F6,	"DG_FASD_KEFADD_K_FASD_SHORTTERMLEANLIM");
	MakeRptCmt	(0X167F8,	"Short term accumulator threshold, while non-intrusive purge activity is occurring, to determine an excess vapor test is needed.\nUnitless");
	MakeWord	(0X167F8);
	MakeName	(0X167F8,	"DG_FASD_KEFADD_K_FASD_SHORTTERMRICHLIM");
	MakeRptCmt	(0X167FA,	"Short term accumulator threshold, while intrusive purge activity is occurring, to determine if excess vapor test is failing.\nUnitless");
	MakeWord	(0X167FA);
	MakeName	(0X167FA,	"DG_FASD_KEFADD_K_FASD_SHRTNONPRGRICHLIM");
	MakeRptCmt	(0X167FC,	"Threshold of accumulated purge flow required to reduce the excess purge vapor condition before continuing intrusive testing.\nGrams");
	MakeDword	(0X167FC);
	MakeName	(0X167FC,	"DG_FASD_KEFADD_M_FASD_ACCUMPURGETHRSHLD");
	MakeRptCmt	(0X16800,	"An engine speed value below this threshold will cause the intrusive diagnostic to be disabled.\nRPM");
	MakeWord	(0X16800);
	MakeName	(0X16800,	"DG_FASD_KEFADD_N_FASD_PURGERPMMIN");
	MakeRptCmt	(0X16802,	"Data will be discarded if the engine speed is above this threshold.\nRPM");
	MakeWord	(0X16802);
	MakeName	(0X16802,	"DG_FASD_KEFADD_N_FASD_RPM_HIGH");
	MakeRptCmt	(0X16804,	"Data will be discarded if the engine speed is below this threshold.\nRPM");
	MakeWord	(0X16804);
	MakeName	(0X16804,	"DG_FASD_KEFADD_N_FASD_RPM_LOW");
	MakeRptCmt	(0X16806,	"Data will be discarded if the barometric pressure is below this threshold.\nkPa");
	MakeWord	(0X16806);
	MakeName	(0X16806,	"DG_FASD_KEFADD_P_FASD_BAROMETERLOW");
	MakeRptCmt	(0X16808,	"An manifold pressure value above this threshold will cause the intrusive diagnostic to be disabled.\nkPa");
	MakeWord	(0X16808);
	MakeName	(0X16808,	"DG_FASD_KEFADD_P_FASD_PURGE_MAP_HIGH");
	MakeRptCmt	(0X1680A,	"Data will be discarded if the manifold pressure is above this threshold.\nkPa");
	MakeWord	(0X1680A);
	MakeName	(0X1680A,	"DG_FASD_KEFADD_P_MANIFOLDPRESSUREHIGH");
	MakeRptCmt	(0X1680C,	"Data will be discarded if the manifold pressure is below this threshold.\nkPa");
	MakeWord	(0X1680C);
	MakeName	(0X1680C,	"DG_FASD_KEFADD_P_MANIFOLDPRESSURELOW");
	MakeRptCmt	(0X1680E,	"Data will be discarded if the purge valve is open above this threshold and the vent valve is closed.\nPercent");
	MakeWord	(0X1680E);
	MakeName	(0X1680E,	"DG_FASD_KEFADD_PCT_FASD_PURGEOPENMIN");
	MakeRptCmt	(0X16810,	"During intrusive test, purge valve is closed to less than or equal to this limit.\nPercent");
	MakeWord	(0X16810);
	MakeName	(0X16810,	"DG_FASD_KEFADD_PCT_PGOVERRIDEMINLIM");
	MakeByte	(0X16812);
	MakeName	(0X16812,	"DG_FASD_KEFADD_T_BLENDINGOPENMAX");
	MakeByte	(0X16813);
	MakeName	(0X16813,	"DG_FASD_KEFADD_T_FASD_BLENDDURATIONMAX");
	MakeRptCmt	(0X16814,	"Data will be discarded if the coolant temperature is above this threshold.\nDeg C");
	MakeWord	(0X16814);
	MakeName	(0X16814,	"DG_FASD_KEFADD_T_FASD_COOLANTTEMPHIGH");
	MakeRptCmt	(0X16816,	"Data will be discarded if the coolant temperature is below this threshold.\nDeg C");
	MakeWord	(0X16816);
	MakeName	(0X16816,	"DG_FASD_KEFADD_T_FASD_COOLANTTEMPLOW");
	MakeRptCmt	(0X16818,	"A calibrated number of samples above this minimum are required before a passive vapor test is allowed.\nDeg C");
	MakeWord	(0X16818);
	MakeName	(0X16818,	"DG_FASD_KEFADD_T_FASD_COOLANTTEMPMIN");
	MakeByte	(0X1681A);
	MakeName	(0X1681A,	"DG_FASD_KEFADD_T_FASD_CTLREQDURATIONMAX");
	MakeRptCmt	(0X1681B,	"The minor time increment used by the timers. Equals the execution loop time interval.\nSeconds");
	MakeByte	(0X1681B);
	MakeName	(0X1681B,	"DG_FASD_KEFADD_T_FASD_DECIMALTIMESTEP");
	MakeWord	(0X1681C);
	MakeName	(0X1681C,	"DG_FASD_KEFADD_T_FASD_EXTENDPGDURATION");
	MakeRptCmt	(0X1681E,	"Data will be discarded if the intake air temperature is above this threshold.\nDeg C");
	MakeWord	(0X1681E);
	MakeName	(0X1681E,	"DG_FASD_KEFADD_T_FASD_IAT_HIGH");
	MakeRptCmt	(0X16820,	"Data will be discarded if the intake air temperature is below this threshold.\nDeg C");
	MakeWord	(0X16820);
	MakeName	(0X16820,	"DG_FASD_KEFADD_T_FASD_IAT_LOW");
	MakeByte	(0X16822);
	MakeName	(0X16822,	"DG_FASD_KEFADD_T_FASD_NONSELDURATIONMAX");
	MakeRptCmt	(0X16824,	"The amount of time the diagnostic will remain in the extended purging state after a passive only vapor test has occurred.\nSeconds");
	MakeWord	(0X16824);
	MakeName	(0X16824,	"DG_FASD_KEFADD_T_FASD_PASSVONLYDURATION");
	MakeRptCmt	(0X16826,	"The maximum time allowed for an intrusive segment. The intrusive segment will abort if this threshold is reached.\nSeconds");
	MakeWord	(0X16826);
	MakeName	(0X16826,	"DG_FASD_KEFADD_T_FASD_SEGMNTDURATIONMAX");
	MakeRptCmt	(0X16828,	"The intrusive segment will abort if this threshold is reached before the purge valve closes to a non-purging level.\nSeconds");
	MakeByte	(0X16828);
	MakeName	(0X16828,	"DG_FASD_KEFADD_T_FASD_VALVCLSDDURATION");
	MakeRptCmt	(0X1682A,	"Data will be discarded if the vehicle speed is above this threshold.\nMPH");
	MakeWord	(0X1682A);
	MakeName	(0X1682A,	"DG_FASD_KEFADD_V_FASD_VEHSPEEDHIGH");
	MakeRptCmt	(0X1682C,	"Number of continuous passing report attempts required before allowing an actual pass report during the extended purging period.\nUnitless");
	MakeWord	(0X1682C);
	MakeName	(0X1682C,	"DG_FASD_KEFADD_CNT_EXTENDPASSCNTMIN");
	MakeRptCmt	(0X1682E,	"Amount the active accumulator stale data counter is decremented if a sample is used (not discarded).\nUnitless");
	MakeWord	(0X1682E);
	MakeName	(0X1682E,	"DG_FASD_KEFADD_CNT_FASD_STALEACCUMDEC");
	MakeRptCmt	(0X16830,	"Data will be discarded if the air flow is below this threshold.\nGrams/Sec");
	MakeWord	(0X16830);
	MakeName	(0X16830,	"DG_FASD_KEFADD_DM_FASD_ENGAIRFLOWLOW");
	MakeRptCmt	(0X16832,	"An manifold pressure value below this threshold will cause the intrusive diagnostic to be disabled.\nkPa");
	MakeWord	(0X16832);
	MakeName	(0X16832,	"DG_FASD_KEFADD_P_FASD_PURGE_MAP_LOW");
	MakeRptCmt	(0X16834,	"Vector table for the rich failure threshold for non-purging cells relative to the fuel ethanol percentage.\nUnitless");
	MakeWord	(0X16834);
	MakeName	(0X16834,	"DG_FASD_KTFADD_K_FASD_NONPURGERICHLIM");
	MakeRptCmt	(0X1684A,	"Vector table for the rich threshold to run a vapor test relative to the fuel ethanol percentage.\nUnitless");
	MakeWord	(0X1684A);
	MakeName	(0X1684A,	"DG_FASD_KTFADD_K_FASD_LONGTERMTRIMRICH");
	MakeRptCmt	(0X16860,	"Vector table for the lean failure threshold relative to the fuel ethanol percentage.\nUnitless");
	MakeWord	(0X16860);
	MakeName	(0X16860,	"DG_FASD_KTFADD_K_FASD_LONGTERMTRIMLEAN");
	MakeRptCmt	(0X16876,	"Step size, based on the starting valve position, used while closing the purge valve during the intrusive test.\nPercent");
	MakeWord	(0X16876);
	MakeName	(0X16876,	"DG_FASD_KTFADD_PCT_FASD_VALVERAMPSTEP");
	MakeByte	(0X1688C);
	MakeName	(0X1688C,	"DG_FASD_KTFADD_DM_FASD_MAXPURGEFLOW");
	MakeRptCmt	(0X16896,	"Used to compensate the accumulated purge flow threshold for the variation of excess purge vapor generation due to temperature.\nUnitless");
	MakeByte	(0X16896);
	MakeName	(0X16896,	"DG_FASD_KTFADD_K_FASD_THRESHLDTEMPMULT");
	MakeRptCmt	(0X168A6,	"The number of engineBanks that have independant fuel control.\nUnitless");
	MakeByte	(0X168A6);
	MakeName	(0X168A6,	"DI_FASD_KE_FASD_NUMBER_OF_BANKS");
	MakeRptCmt	(0X168A8,	"Number of samples required to ensure the fuel trim value represents the current conditions for that cell.\nCounts");
	MakeWord	(0X168A8);
	MakeName	(0X168A8,	"DI_FASD_KAFADD_CNT_FASD_MINSMPLSINSTART");
	MakeRptCmt	(0X168D6,	"An intrusive test will not be enabled if the table is FALSE for that cell.\nBOOLEAN");
	MakeByte	(0X168D6);
	MakeName	(0X168D6,	"DI_FASD_KAFADD_B_FASD_INTRUSIVECELLSET");
	MakeRptCmt	(0X168EE,	"Use of thecell in the FASD diagnostic. 0 = Not Selected,  1 = Selected Purge Cell 2 = Selected Non Purge Cell\n0_1_2");
	MakeByte	(0X168EE);
	MakeName	(0X168EE,	"DI_FASD_KAFADD_E_FASD_SELECTCELLSET");
	MakeWord	(0X168F0);
	MakeRptCmt	(0X16906,	"Translate from the current cell number to the cell number after the  purge valve is closed.\nSHORTCARD");
	MakeByte	(0X16906);
	MakeName	(0X16906,	"DI_FASD_KAFADD_I_FASD_MATCHNONPURGE");
	MakeName	(0X1691E,	"DI_FASD_KAFADD_K_FASD_NORMALIZELEAN");
	MakeWord	(0X1694C);
	MakeName	(0X1697A,	"DI_FASD_KAFADD_K_FASD_NORMALIZERICH");
	MakeRptCmt	(0X169D6,	"FASD will be disabled if the min IAT is below this threshold.\nDegrees C");
	MakeWord	(0X169D6);
	MakeName	(0X169D6,	"DI_FASD_KEFADD_T_FASD_MINIATENABLE");
	MakeRptCmt	(0X169D8,	"Minimum fuel level at which the FASD will allow lean system diagnostic to continue.\nPercent");
	MakeWord	(0X169D8);
	MakeName	(0X169D8,	"DI_FASD_KEFADD_FASD_FUELLEVELMIN");
	MakeRptCmt	(0X169DA,	"Determines how long the fuel level has to be below its minimum threshold before the diagnostic will be disabled.\nSeconds");
	MakeWord	(0X169DA);
	MakeName	(0X169DA,	"DI_FASD_KEFADD_FUELLEVELLOWTIME");
	MakeRptCmt	(0X169DC,	"MAF must be greater than KeFADD_MAF_To_Update_MinIAT  for at least this many 100msec samples for Min IAT to  update.\nCounts");
	MakeWord	(0X169DC);
	MakeName	(0X169DC,	"DI_FASD_KEFADD_MINIAT_MAF_CTR_MIN");
	MakeRptCmt	(0X169DE,	"Min IAT will be updated when MAF is greater than this threshold and Long Soak is FALSE.\nGrams/Sec");
	MakeWord	(0X169DE);
	MakeName	(0X169DE,	"DI_FASD_KEFADD_MAF_TO_UPDATE_MINIAT");
	MakeRptCmt	(0X169E0,	"Soak time less than this will intialize FASD min IAT to  NVMEM min IAT from previous trip.\nSeconds");
	MakeDword	(0X169E0);
	MakeName	(0X169E0,	"DI_FASD_KEFADD_LONG_SOAK_TIME_MIN");
	MakeRptCmt	(0X169E4,	"Time since PCM powerup must be less than or equal to this to initialize FASD min IAT.\nSeconds");
	MakeDword	(x=0X169E4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X169E4,	"DI_FASD_KEFADD_TIME_SINCE_PWRUP_MAX");
	MakeRptCmt	(0X169E8,	"Max amount that raw IAT is allowed to change per 100msec. for use in min IAT.\nDegrees_C");
	MakeWord	(0X169E8);
	MakeName	(0X169E8,	"DI_FASD_KEFADD_IAT_RATE_LIMIT");
	MakeRptCmt	(0X169EA,	"Maximum number of failure counts required to fail the test.\nUnitless");
	MakeWord	(0X169EA);
	MakeName	(0X169EA,	"DG_FFS_KE_FFSD_COMP_FAIL_LIM");
	MakeRptCmt	(0X169EC,	"The threshold above which the flex fuel composition sensor frequency is considered out of range high.\nHertz");
	MakeByte	(0X169EC);
	MakeName	(0X169EC,	"DG_FFS_KE_FFSD_COMP_SHORTED_HI_THRESH");
	MakeRptCmt	(0X169ED,	"The threshold below which the flex fuel composition sensor frequency is considered out of range low.\nHertz");
	MakeByte	(0X169ED);
	MakeName	(0X169ED,	"DG_FFS_KE_FFSD_COMP_SHORTED_LO_THRESH");
	MakeRptCmt	(0X169EE,	"Number of failed out of range high tests within a sample size that will report a failure.\nUnitless");
	MakeName	(0X169EE,	"DG_FFS_KE_FFSD_COMP_SHRTHI_FAIL_LIM");
	MakeRptCmt	(0X169F0,	"Number of out of range high tests that make up a sample size.\nUnitless");
	MakeName	(0X169F0,	"DG_FFS_KE_FFSD_COMP_SHRTHI_SMPL_LIM");
	MakeRptCmt	(0X169F2,	"Number of failed out of range low tests within a sample size that will report a failure.\nUnitless");
	MakeName	(0X169F2,	"DG_FFS_KE_FFSD_COMP_SHRTLO_FAIL_LIM");
	MakeRptCmt	(0X169F4,	"Number of out of range low tests that make up a sample size.\nUnitless");
	MakeName	(0X169F4,	"DG_FFS_KE_FFSD_COMP_SHRTLO_SMPL_LIM");
	MakeRptCmt	(0X169F6,	"Total number of sample counts required to pass the composition test.\nUnitless");
	MakeWord	(0X169F6);
	MakeName	(0X169F6,	"DG_FFS_KE_FFSD_COMP_SMPL_LIM");
	MakeRptCmt	(0X169F8,	"Maximum temperature difference allowed for enabling the FFSD rationality test.\nDegrees");
	MakeWord	(0X169F8);
	MakeName	(0X169F8,	"DG_FFS_KE_FFSD_RAT_TEMP_DIFF");
	MakeRptCmt	(0X169FA,	"The threshold above which the flex fuel temperature sensor active time is considered out of range high.\nMilliseconds");
	MakeWord	(0X169FA);
	MakeName	(0X169FA,	"DG_FFS_KE_FFSD_TEMP_SHORTED_HI_THRESH");
	MakeRptCmt	(0X169FC,	"The threshold below which the flex fuel temperature sensor active time is considered out of range low.\nMilliseconds");
	MakeWord	(0X169FC);
	MakeName	(0X169FC,	"DG_FFS_KE_FFSD_TEMP_SHORTED_LO_THRESH");
	MakeRptCmt	(0X169FE,	"Number of failed out of range high tests within a sample size that will report a failure.\nUnitless");
	MakeName	(0X169FE,	"DG_FFS_KE_FFSD_TEMP_SHRTHI_FAIL_LIM");
	MakeRptCmt	(0X16A00,	"Number of out of range high tests that make up a sample size.\nUnitless");
	MakeName	(0X16A00,	"DG_FFS_KE_FFSD_TEMP_SHRTHI_SMPL_LIM");
	MakeRptCmt	(0X16A02,	"Number of failed out of range low tests within a sample size that will report a failure.\nUnitless");
	MakeName	(0X16A02,	"DG_FFS_KE_FFSD_TEMP_SHRTLO_FAIL_LIM");
	MakeRptCmt	(0X16A04,	"Number of out of range low tests that make up a sample size.\nUnitless");
	MakeName	(0X16A04,	"DG_FFS_KE_FFSD_TEMP_SHRTLO_SMPL_LIM");
	MakeRptCmt	(0X16A06,	"The maximum upper limit allowed for the flex fuel sensor frequency value based on intake air temperature.\nHertz");
	MakeByte	(0X16A06);
	MakeName	(0X16A06,	"DG_FFS_KV_FFSD_FUEL_COMPOSITION");
	MakeWord	(0X16A26);
	MakeName	(0X16A26,	"DI_FFS_KE_FFSD_TIME_SINCE_ENG_RUN");
	MakeRptCmt	(0X16A28,	"Minimum amount of time that the engine must be running before the FFSD will be enabled.\nSeconds");
	MakeDword	(x=0X16A28);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X16A28,	"DI_FFS_KE_FFSD_MIN_ENG_RUN_TIME");
	MakeRptCmt	(0X16A2C,	"Lower limit for the system voltage below which the FFSD is not enabled.\nVolts");
	MakeByte	(0X16A2C);
	MakeName	(0X16A2C,	"DI_FFS_KE_FFSD_SYSTEM_VOLT_MIN");
	MakeRptCmt	(0X16A2D,	"Upper limit for the system voltage above which the FFSD is not enabled.\nVolts");
	MakeByte	(0X16A2D);
	MakeName	(0X16A2D,	"DI_FFS_KE_FFSD_SYSTEM_VOLT_MAX");
	MakeRptCmt	(0X16A2E,	"Limits the number of purge tests per trip by limiting the number of tests that have indicated an excess amount of purge.\nUnitless");
	MakeByte	(0X16A2E);
	MakeName	(0X16A2E,	"DG_FUEL_TRIM_KE_FTRM_EXCESS_PURGE_PRESENT_LIM");
	MakeRptCmt	(0X16A2F,	"Determines how long the system can be lean before a lean failure is reported to the Diagnostic Executive.\nUnitless");
	MakeByte	(0X16A2F);
	MakeName	(0X16A2F,	"DG_FUEL_TRIM_KE_FTRM_LEAN_TEST_FAIL_LIMIT");
	MakeRptCmt	(0X16A30,	"Limits the number of purge tests per trip by limiting the number of tests that have indicated normal amounts of purge.\nUnitless");
	MakeByte	(0X16A30);
	MakeName	(0X16A30,	"DG_FUEL_TRIM_KE_FTRM_NORMAL_PURGE_PRESENT_LIM");
	MakeRptCmt	(0X16A31,	"Limits the number of purge tests per trip by limiting the number of purge test requests.\nUnitless");
	MakeByte	(0X16A31);
	MakeName	(0X16A31,	"DG_FUEL_TRIM_KE_FTRM_PURGE_TEST_REQUEST_LIM");
	MakeRptCmt	(0X16A32,	"Determines how long the system can be rich before a rich failure is reported to the Diagnostic Executive.\nUnitless");
	MakeByte	(0X16A32);
	MakeName	(0X16A32,	"DG_FUEL_TRIM_KE_FTRM_RICH_TEST_FAIL_LIMIT");
	MakeRptCmt	(0X16A33,	"Determines how many samples will be collected and used in the short term fuel trim average calculations.\nUnitless");
	MakeByte	(0X16A33);
	MakeName	(0X16A33,	"DG_FUEL_TRIM_KE_FTRM_SHORT_TERM_SAMPLE_COUNT");
	MakeRptCmt	(0X16A34,	"Determines at what point the short term fuel trim average is considered to be lean.\nUnitless");
	MakeByte	(0X16A34);
	MakeName	(0X16A34,	"DG_FUEL_TRIM_KE_FTRM_SHORT_TERM_TRIM_LEAN");
	MakeRptCmt	(0X16A35,	"Determines at what point the short term fuel trim average is considered to be rich.\nUnitless");
	MakeByte	(0X16A35);
	MakeName	(0X16A35,	"DG_FUEL_TRIM_KE_FTRM_SHORT_TERM_TRIM_RICH");
	MakeRptCmt	(0X16A36,	"Maximum time the diagnostic will wait before executing after excess purge has been detected.\nSeconds");
	MakeWord	(0X16A36);
	MakeName	(0X16A36,	"DG_FUEL_TRIM_KE_FTRM_WAIT_TIME_MAX");
	MakeWord	(0X16A38);
	MakeName	(0X16A38,	"DG_HSCR_KE_HSCR_STARTUP_TEMP_DIFF");
	MakeRptCmt	(0X16A3A,	"The threshold above which the intake air temperature must be,to enable the HSCR diagnostic.\nDegrees_C");
	MakeWord	(0X16A3A);
	MakeName	(0X16A3A,	"DG_HSCR_KE_HSCR_IAT_ENABLE");
	MakeRptCmt	(0X16A3C,	"The threshold above which the vehicle speed must be to increment the HSCR vehicle speed time.\nMPH");
	MakeWord	(0X16A3C);
	MakeName	(0X16A3C,	"DG_HSCR_KE_HSCR_VEHICLE_SPEED_MIN");
	MakeRptCmt	(0X16A3E,	"The threshold above which the HSCR vehicle speed time must be to enable the comparison of powerup IAT with min IAT.\nSeconds");
	MakeWord	(0X16A3E);
	MakeName	(0X16A3E,	"DG_HSCR_KE_HSCR_VEHICLE_DRIVE_TIME_MIN");
	MakeWord	(0X16A40);
	MakeName	(0X16A40,	"DG_HSCR_KE_HSCR_IAT_DROP_MAX");
	MakeRptCmt	(0X16A42,	"Minimum amount of time that has passed since the engine was last turned off.\nMinutes");
	MakeWord	(0X16A42);
	MakeName	(0X16A42,	"DI_HSCR_KE_HSCR_TIME_SINCE_ENG_RUN");
	MakeRptCmt	(0X16A44,	"Minimum engine run time threshold to record a short to high fault\nSeconds");
	MakeByte	(0X16A44);
	MakeName	(0X16A44,	"DG_IAT_KE_IATD_ENG_RUN_TIME_HIGH_MIN");
	MakeRptCmt	(0X16A45,	"Minimum engine run time threshold to record a short to low fault\nSeconds");
	MakeByte	(0X16A45);
	MakeName	(0X16A45,	"DG_IAT_KE_IATD_ENG_RUN_TIME_LOW_MIN");
	MakeRptCmt	(0X16A46,	"Number of failed intermittent short to high tests that will report an intermittent failure\nUnitless");
	MakeWord	(0X16A46);
	MakeName	(0X16A46,	"DG_IAT_KE_IATD_INT_SHORT_HIGH_FAIL_LIM");
	MakeRptCmt	(0X16A48,	"Number of intermittent short high tests that make up a sample size\nUnitless");
	MakeWord	(0X16A48);
	MakeName	(0X16A48,	"DG_IAT_KE_IATD_INT_SHORT_HIGH_SMPL_LIM");
	MakeRptCmt	(0X16A4A,	"Number of failed intermittent short to low tests that will report an intermittent failure\nUnitless");
	MakeWord	(0X16A4A);
	MakeName	(0X16A4A,	"DG_IAT_KE_IATD_INT_SHORT_LOW_FAIL_LIM");
	MakeRptCmt	(0X16A4C,	"Number of intermittent short low tests that make up a sample size\nUnitless");
	MakeWord	(0X16A4C);
	MakeName	(0X16A4C,	"DG_IAT_KE_IATD_INT_SHORT_LOW_SMPL_LIM");
	MakeRptCmt	(0X16A4E,	"Number of failed short to high tests within a sample size that will report a failure\nUnitless");
	MakeWord	(0X16A4E);
	MakeName	(0X16A4E,	"DG_IAT_KE_IATD_SHORT_HIGH_FAIL_LIM");
	MakeRptCmt	(0X16A50,	"Number of IAT short high tests that make up a sample size\nUnitless");
	MakeWord	(0X16A50);
	MakeName	(0X16A50,	"DG_IAT_KE_IATD_SHORT_HIGH_SMPL_LIM");
	MakeRptCmt	(0X16A52,	"Number of failed short to low tests within a sample size that will report a failure\nUnitless");
	MakeWord	(0X16A52);
	MakeName	(0X16A52,	"DG_IAT_KE_IATD_SHORT_LOW_FAIL_LIM");
	MakeRptCmt	(0X16A54,	"Number of IAT short low tests that make up a sample size\nUnitless");
	MakeWord	(0X16A54);
	MakeName	(0X16A54,	"DG_IAT_KE_IATD_SHORT_LOW_SMPL_LIM");
	MakeRptCmt	(0X16A56,	"The threshold above which the IAT sensor is considered shorted high\nPercent");
	MakeWord	(0X16A56);
	MakeName	(0X16A56,	"DG_IAT_KE_IATD_SHORTED_HIGH_THRESH");
	MakeRptCmt	(0X16A58,	"The threshold below which the IAT sensor is considered opened or shorted to ground\nPercent");
	MakeWord	(0X16A58);
	MakeName	(0X16A58,	"DG_IAT_KE_IATD_SHORTED_LOW_THRESH");
	MakeRptCmt	(0X16A5A,	"Minimum coolant temperature to fail the IAT short to high test.\nDegrees_C");
	MakeWord	(0X16A5A);
	MakeName	(0X16A5A,	"DI_IAT_KE_IATD_SHORT_HIGH_ECT_MIN");
	MakeRptCmt	(0X16A5C,	"Maximum mass air flow threshold to fail the IAT short to high test.\nGrams/Second");
	MakeWord	(0X16A5C);
	MakeName	(0X16A5C,	"DI_IAT_KE_IATD_SHORT_HIGH_MAF_MAX");
	MakeRptCmt	(0X16A5E,	"Maximum vehicle speed threshold to fail the IAT short to high test.\nMiles/Hour");
	MakeWord	(0X16A5E);
	MakeName	(0X16A5E,	"DI_IAT_KE_IATD_SHORT_HIGH_VSS_MAX");
	MakeRptCmt	(0X16A60,	"Maximum coolant temperature to fail the IAT short to low test.\nDegrees_C");
	MakeWord	(0X16A60);
	MakeName	(0X16A60,	"DI_IAT_KE_IATD_SHORT_LOW_ECT_MAX");
	MakeRptCmt	(0X16A62,	"Minimum vehicle speed threshold to fail the IAT short to low test.\nMiles/Hour");
	MakeWord	(0X16A62);
	MakeName	(0X16A62,	"DI_IAT_KE_IATD_SHORT_LOW_VSS_MIN");
	MakeRptCmt	(0X16A64,	"Exponentially weighted moving average filter coefficient.\nCoef");
	MakeByte	(0X16A64);
	MakeName	(0X16A64,	"DG_ICAT_KE_CAT_EWMA_FILTER_COEF");
	MakeRptCmt	(0X16A66,	"Maximum allowed duration for Air/Fuel transition 1.\nSeconds");
	MakeWord	(0X16A66);
	MakeName	(0X16A66,	"DG_ICAT_KE_CAT_AFT1_TRANSITION_TIME_MAX");
	MakeRptCmt	(0X16A68,	"Maximum allowed duration for Air/Fuel transition 2.\nSeconds");
	MakeWord	(0X16A68);
	MakeName	(0X16A68,	"DG_ICAT_KE_CAT_AFT2_TRANSITION_TIME_MAX");
	MakeWord	(0X16A6A);
	MakeName	(0X16A6A,	"DG_ICAT_KE_CAT_HIGH_OSC_TIME_DEFAULT");
	MakeRptCmt	(0X16A6C,	"Maximum post O2 voltage to be considered saturated lean while in AFT1.\nMillivolts");
	MakeWord	(0X16A6C);
	MakeName	(0X16A6C,	"DG_ICAT_KE_CAT_POST_O2_LEAN_VOLT_MAX");
	MakeRptCmt	(0X16A6E,	"Maximum pre O2 voltage to be considered saturated lean while in AFT1.\nMillivolts");
	MakeWord	(0X16A6E);
	MakeName	(0X16A6E,	"DG_ICAT_KE_CAT_PRE_O2_LEAN_VOLT_MAX");
	MakeRptCmt	(0X16A70,	"Minimum post O2 voltage to be considered saturated rich while in AFT1.\nMillivolts");
	MakeWord	(0X16A70);
	MakeName	(0X16A70,	"DG_ICAT_KE_CAT_POST_O2_RICH_VOLT_MIN");
	MakeRptCmt	(0X16A72,	"Minimum pre O2 voltage to be considered saturated rich while in AFT1.\nMillivolts");
	MakeWord	(0X16A72);
	MakeName	(0X16A72,	"DG_ICAT_KE_CAT_PRE_O2_RICH_VOLT_MIN");
	MakeRptCmt	(0X16A74,	"The maximum number of tests to run once the rapid step response is activated.\nUnitless");
	MakeByte	(0X16A74);
	MakeName	(0X16A74,	"DG_ICAT_KE_CAT_MAX_RSR_TESTS");
	MakeRptCmt	(0X16A75,	"The maximum number of tests to run each trip once the rapid step response is activated.\nUnitless");
	MakeByte	(0X16A75);
	MakeName	(0X16A75,	"DG_ICAT_KE_CAT_MAX_TESTS_PER_TRIP");
	MakeRptCmt	(0X16A76,	"Minimum number of tests run before reporting a pass.\nUnitless");
	MakeByte	(0X16A76);
	MakeName	(0X16A76,	"DG_ICAT_KE_CAT_MIN_SAMPLES_TO_RPT_PASS");
	MakeRptCmt	(0X16A78,	"Maximum post O2 voltage to be considered lean.\nMillivolts");
	MakeWord	(0X16A78);
	MakeName	(0X16A78,	"DG_ICAT_KE_CAT_POST_O2_LEAN_VOLTAGE");
	MakeRptCmt	(0X16A7A,	"Minimum post O2 voltage to be considered rich.\nMillivolts");
	MakeWord	(0X16A7A);
	MakeName	(0X16A7A,	"DG_ICAT_KE_CAT_POST_O2_RICH_VOLTAGE");
	MakeRptCmt	(0X16A7C,	"Theoretical O2 voltage for a stoichiometric A/F ratio.\nMillivolts");
	MakeWord	(0X16A7C);
	MakeName	(0X16A7C,	"DG_ICAT_KE_CAT_STOICH_REFERENCE_VOLT");
	MakeRptCmt	(0X16A7E,	"This calibration option determines whether or not the valvetest should be allowed to execute.\nBOOLEAN");
	MakeByte	(0X16A7E);
	MakeName	(0X16A7E,	"DG_IDLE_KE_IAC_INTRUSIVE_TEST_OPTION");
	MakeRptCmt	(0X16A80,	"RPM delta threshold to disable the valve test.\nRPM");
	MakeWord	(0X16A80);
	MakeName	(0X16A80,	"DG_IDLE_KE_IAC_RPM_DELTA_LIMIT");
	MakeRptCmt	(0X16A82,	"TPS delta threshold to disable the valve test.\nPercent");
	MakeWord	(0X16A82);
	MakeName	(0X16A82,	"DG_IDLE_KE_IAC_TPS_DELTA_LIMIT");
	MakeRptCmt	(0X16A84,	"Upper threshold airflow value to disable the valve test.\nGrams/Sec");
	MakeWord	(0X16A84);
	MakeName	(0X16A84,	"DG_IDLE_KE_IAC_VALVE_TEST_AIRFLOW_MAX");
	MakeRptCmt	(0X16A86,	"Lower threshold airflow value to disable the valve test.\nGrams/Sec");
	MakeWord	(0X16A86);
	MakeName	(0X16A86,	"DG_IDLE_KE_IAC_VALVE_TEST_AIRFLOW_MIN");
	MakeRptCmt	(0X16A88,	"Upper threshold vehicle speed value to disable the valve test.\nMPH");
	MakeWord	(0X16A88);
	MakeName	(0X16A88,	"DG_IDLE_KE_IAC_VALVE_TEST_VEH_SPEED_MAX");
	MakeRptCmt	(0X16A8A,	"Lower threshold vehicle speed value to disable the valve test.\nMPH");
	MakeWord	(0X16A8A);
	MakeName	(0X16A8A,	"DG_IDLE_KE_IAC_VALVE_TEST_VEH_SPEED_MIN");
	MakeRptCmt	(0X16A8C,	"This calibration determines how much airflow decrease must occur in order to consider the valve functioning properly.\nGrams/Sec");
	MakeWord	(0X16A8C);
	MakeName	(0X16A8C,	"DG_IDLE_KE_IAC_AIRFLOW_RESPONSE_THRESH");
	MakeRptCmt	(0X16A8E,	"This calibration limits how long the valve test will execute.\nSeconds");
	MakeByte	(0X16A8E);
	MakeName	(0X16A8E,	"DG_IDLE_KE_IAC_VALVE_TEST_TIME_LIMIT");
	MakeByte	(0X16A8F);
	MakeName	(0X16A8F,	"DG_IDLE_KE_IAC_REPORT_IDLE_RESULTS");
	MakeRptCmt	(0X16A90,	"Minimum RPM error used to determine if the OBD_Idle_RPM_Error is too high.\nRPM");
	MakeName	(0X16A90,	"DG_IDLE_KV_IAC_RPM_ERROR_HIGH_THRESHOLD");
	MakeRptCmt	(0X16AB2,	"Minimum amount of time used to indicate that there is a high idle RPM problem.\nSeconds");
	MakeByte	(0X16AB2);
	MakeName	(0X16AB2,	"DG_IDLE_KE_IAC_RPM_HIGH_TIMER_LIMIT");
	MakeRptCmt	(0X16AB4,	"Maximum RPM error used to determine if the OBD_Idle_RPM_Error is too low.\nRPM");
	MakeName	(0X16AB4,	"DG_IDLE_KV_IAC_RPM_ERROR_LOW_THRESHOLD");
	MakeRptCmt	(0X16AD6,	"Minimum amount of time used to indicate that there is a low idle RPM error problem.\nSeconds");
	MakeByte	(0X16AD6);
	MakeName	(0X16AD6,	"DG_IDLE_KE_IAC_RPM_LOW_TIMER_LIMIT");
	MakeRptCmt	(0X16AD8,	"Maximum value for the allowable filtered RPM error.\nRPM");
	MakeWord	(0X16AD8);
	MakeName	(0X16AD8,	"DG_IDLE_KE_IAC_FILTERED_RPM_ERROR_MAX");
	MakeRptCmt	(0X16ADA,	"Minimum time duration for the RPM to be within its allowable filtered RPM error to report that the Idle RPM is passing.\nSeconds");
	MakeByte	(0X16ADA);
	MakeName	(0X16ADA,	"DG_IDLE_KE_IAC_TEST_PASS_TIME");
	MakeRptCmt	(0X16ADC,	"This is the coefficient for the first order lag filter of the error.\nCoef");
	MakeWord	(0X16ADC);
	MakeName	(0X16ADC,	"DG_IDLE_KE_IAC_RPM_ERROR_FILTER_COEFF");
	MakeRptCmt	(0X16ADE,	"Samples and failures wih engine speed >= this are twice as significant as those with engine speed < this.\nRPM");
	MakeWord	(0X16ADE);
	MakeName	(0X16ADE,	"DG_IGNITION_CONTROL_KE_IGN_CONTROL_COUNTER_RPM_THRES");
	MakeRptCmt	(0X16AE0,	"Number of failed tests within a sample set that will report an ignition control failure.\nNONE");
	MakeByte	(0X16AE0);
	MakeName	(0X16AE0,	"DG_IGNITION_CONTROL_KE_IGNITION_CONTROL_FAILURE_LIMI");
	MakeRptCmt	(0X16AE1,	"Number of tests in a sample SET.\nNONE");
	MakeByte	(0X16AE1);
	MakeName	(0X16AE1,	"DG_IGNITION_CONTROL_KE_IGNITION_CONTROL_SAMPLES_LIMI");
	MakeRptCmt	(0X16AE2,	"Map EST channel to cylinder number.\nP_CODE");
	MakeWord	(0X16AE2);
	MakeName	(0X16AE2,	"DG_IGNITION_CONTROL_KV_EST_TESTED_CYLINDER_XREF");
	MakeRptCmt	(0X16AF2,	"The acceptable difference between the previous and current Ignition Off Timer values.\nSeconds");
	MakeByte	(0X16AF2);
	MakeName	(0X16AF2,	"DG_IOT_KE_IOTD_IGNITION_OFF_DELTA");
	MakeRptCmt	(0X16AF3,	"The maximum time the Ignition Off Timer is expected to be reporting after an ignition off period begins.\nSeconds");
	MakeByte	(0X16AF3);
	MakeName	(0X16AF3,	"DG_IOT_KE_IOTD_MAX_EXPECTED_TIME");
	MakeRptCmt	(0X16AF4,	"The minimum time the Ignition Off Timer is expected to be reporting after an ignition off period begins.\nSeconds");
	MakeByte	(0X16AF4);
	MakeName	(0X16AF4,	"DG_IOT_KE_IOTD_MIN_EXPECTED_TIME");
	MakeRptCmt	(0X16AF5,	"The maximum number of samples below which the Ignition Off Timer is expected to increment.\nCounts");
	MakeByte	(0X16AF5);
	MakeName	(0X16AF5,	"DG_IOT_KE_IOTD_SAMPLE_COUNTER_MAX");
	MakeRptCmt	(0X16AF6,	"The minimum number of samples above which the Ignition Off Timer is expected to increment.\nCounts");
	MakeByte	(0X16AF6);
	MakeName	(0X16AF6,	"DG_IOT_KE_IOTD_SAMPLE_COUNTER_MIN");
	MakeByte	(0X16AF7);
	MakeName	(0X16AF7,	"DG_IOT_KE_IOTD_SMPLS_WITHOUT_CHANGE");
	MakeRptCmt	(0X16AF8,	"The number of Ingition Off Timer transitions above which the diagnostic may proceed.\nCounts");
	MakeByte	(0X16AF8);
	MakeName	(0X16AF8,	"DG_IOT_KE_IOTD_TRANSITION_THRESHOLD");
	MakeRptCmt	(0X16AFA,	"Maximum valid EGR position below which is considered a low signal.\nPercent");
	MakeWord	(0X16AFA);
	MakeName	(0X16AFA,	"DG_LEGR_KE_EGRP_SIGNAL_LOW_POS_MAX");
	MakeRptCmt	(0X16AFC,	"Maximum number of fail conditions before reporting a fail.\nCounts");
	MakeByte	(0X16AFC);
	MakeName	(0X16AFC,	"DG_LEGR_KE_EGRP_CLOSED_VALVE_FAIL_COUNT");
	MakeRptCmt	(0X16AFD,	"Minimum time the EGR desired position must remain in a stable open position prior to the next closed valve test iteration.\nSeconds");
	MakeByte	(0X16AFD);
	MakeName	(0X16AFD,	"DG_LEGR_KE_EGRP_CLOSED_VALVE_OPEN_TIME");
	MakeRptCmt	(0X16AFE,	"Minimum EGR position to achieve and sustain following a failed closed valve test and prior to the next test iteration.\nPercent");
	MakeWord	(0X16AFE);
	MakeName	(0X16AFE,	"DG_LEGR_KE_EGRP_CV_OPEN_POSITION");
	MakeWord	(0X16B00);
	MakeName	(0X16B00,	"DG_LEGR_KE_EGRP_CV_POSITION_OFFSET");
	MakeRptCmt	(0X16B02,	"Maximun allowable time that a high position offset can exceed a threshold before logging a failure.\nSeconds");
	MakeByte	(0X16B02);
	MakeName	(0X16B02,	"DG_LEGR_KE_EGRP_CV_POSITION_TIME");
	MakeRptCmt	(0X16B03,	"Maximum allowable times the EGR position error can exceed a failure threshold before reporting a failure.\nCounts");
	MakeByte	(0X16B03);
	MakeName	(0X16B03,	"DG_LEGR_KE_EGRP_OPEN_VALVE_MAX_COUNT");
	MakeRptCmt	(0X16B04,	"Minimum allowable time limit for a low signal to report a failure condition.\nSeconds");
	MakeByte	(0X16B04);
	MakeName	(0X16B04,	"DG_LEGR_KE_EGRP_SIGNAL_LOW_TIME");
	MakeRptCmt	(0X16B05,	"Option to delay closed valve testing for partial valve opening or pintle cleaning routine.\nDelay_Type");
	MakeByte	(0X16B05);
	MakeName	(0X16B05,	"DG_LEGR_KE_EGRP_CV_DELAY_OPTION");
	MakeRptCmt	(0X16B06,	"Threshold above which the error in EGR position is considered unaccptable (Zone #1 - position error test.)\nPercent");
	MakeWord	(0X16B06);
	MakeName	(0X16B06,	"DG_LEGR_KE_EGRP_POSITION_ERROR_MAX1");
	MakeRptCmt	(0X16B08,	"Threshold above which the error in EGR position is considered unaccptable ( Zone #2 - position error test. )\nPercent");
	MakeWord	(0X16B08);
	MakeName	(0X16B08,	"DG_LEGR_KE_EGRP_POSITION_ERROR_MAX2");
	MakeRptCmt	(0X16B0A,	"Threshold used to determine if EGR is in Zone 1 and should use KE..Max1 or Zone 2 and use KE..Max2 ( position error test ).\nPercent");
	MakeWord	(0X16B0A);
	MakeName	(0X16B0A,	"DG_LEGR_KE_EGRP_POS_ERR_BOUNDARY_SELECT");
	MakeRptCmt	(0X16B0C,	"The maximum allowable difference in desired position to enable the position error test.\nPercent");
	MakeWord	(0X16B0C);
	MakeName	(0X16B0C,	"DG_LEGR_KE_EGRP_MAX_DESIRED_POS_DELTA");
	MakeRptCmt	(0X16B0E,	"The minimum allowable time to elapse before a P1404 pass will be indicated.\nSeconds");
	MakeByte	(0X16B0E);
	MakeName	(0X16B0E,	"DG_LEGR_KE_EGRP_TIME_TO_PASS_CV");
	MakeRptCmt	(0X16B10,	"Number of failed high tests within a sample size that will report a high frequency failure\nFailures");
	MakeWord	(0X16B10);
	MakeName	(0X16B10,	"DG_MAF_KE_MAFD_FREQ_HIGH_FAIL_LIM");
	MakeRptCmt	(0X16B12,	"Minimum number of MAF high frequency tests required to report a pass.\nSamples");
	MakeWord	(0X16B12);
	MakeName	(0X16B12,	"DG_MAF_KE_MAFD_FREQ_HIGH_SMPL_LIM");
	MakeRptCmt	(0X16B14,	"High frequency threshold above which represents a high frequency failure\nCycles/Sec");
	MakeWord	(0X16B14);
	MakeName	(0X16B14,	"DG_MAF_KE_MAFD_FREQ_HIGH_THRESH");
	MakeRptCmt	(0X16B16,	"Number of failed low tests within a sample size that will report a low frequency failure\nFailures");
	MakeDword	(x=0X16B16);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X16B16,	"DG_MAF_KE_MAFD_FREQ_LOW_FAIL_LIM");
	MakeRptCmt	(0X16B1A,	"Low frequency threshold above which represents a low frequency failure\nCycles/Sec");
	MakeWord	(0X16B1A);
	MakeName	(0X16B1A,	"DG_MAF_KE_MAFD_FREQ_LOW_THRESH");
	MakeRptCmt	(0X16B1C,	"Number of failed tests within a sample size that will report a MAF Rationality failure\nFailures");
	MakeWord	(0X16B1C);
	MakeName	(0X16B1C,	"DG_MAF_KE_MAFD_RAT_FAIL_LIM");
	MakeRptCmt	(0X16B1E,	"Number of MAF Rationality tests that make up a sample size.\nSamples");
	MakeWord	(0X16B1E);
	MakeName	(0X16B1E,	"DG_MAF_KE_MAFD_RAT_SMPL_LIM");
	MakeRptCmt	(0X16B20,	"Maximum predicted mass air flow delta value based on a calculated mass air flow value for the MAF rationality test.\nGPS");
	MakeWord	(0X16B20);
	MakeName	(0X16B20,	"DG_MAF_KV_MAFD_PREDICTED_MAF_DELTA_MAX");
	MakeRptCmt	(0X16B36,	"Maximum allowed EGR pintle position value to run the MAF rationality test.\nPercent");
	MakeWord	(0X16B36);
	MakeName	(0X16B36,	"DI_MAF_KE_MAFD_RAT_EGR_POS_MAX");
	MakeRptCmt	(0X16B38,	"Maximum allowed engine vacuum value to run the MAF rationality test.\nkPa");
	MakeWord	(0X16B38);
	MakeName	(0X16B38,	"DI_MAF_KE_MAFD_RAT_ENG_VACUUM_MAX");
	MakeRptCmt	(0X16B3A,	"Minimum ignition voltage necessary to run the MAF rationality test.\nVolts");
	MakeWord	(0X16B3A);
	MakeName	(0X16B3A,	"DI_MAF_KE_MAFD_RAT_IGN_VOLT_MIN");
	MakeRptCmt	(0X16B3C,	"Maximum ignition voltage necessary to run the MAF rationality test.\nVolts");
	MakeWord	(0X16B3C);
	MakeName	(0X16B3C,	"DI_MAF_KE_MAFD_RAT_IGN_VOLT_MAX");
	MakeRptCmt	(0X16B3E,	"Ignition voltage below which it is necessary to compare the mass airflow reading to a threshold.\nVolts");
	MakeWord	(0X16B3E);
	MakeName	(0X16B3E,	"DI_MAF_KE_MAFD_RAT_IGN_VOLT_LOW_THRESH");
	MakeRptCmt	(0X16B40,	"Threshold below which the MAF value must be to run the MAF rationality test.\nGPS");
	MakeWord	(0X16B40);
	MakeName	(0X16B40,	"DI_MAF_KE_MAFD_RAT_LOW_VOLT_MAF_THRESH");
	MakeRptCmt	(0X16B42,	"Maximum allowed manifold pressure delta value to run MAF rationality test.\nkPa");
	MakeWord	(0X16B42);
	MakeName	(0X16B42,	"DI_MAF_KE_MAFD_RAT_MAP_DELTA_MAX");
	MakeRptCmt	(0X16B44,	"Filter coefficient for the mass air flow rescaled in the MAF rationality test.\n0-1");
	MakeWord	(0X16B44);
	MakeName	(0X16B44,	"DI_MAF_KE_MAFD_RAT_MAF_FILT_COEFF");
	MakeRptCmt	(0X16B46,	"Maximum allowed canister purge duty cycle value to run the MAF rationality test.\nPercent");
	MakeWord	(0X16B46);
	MakeName	(0X16B46,	"DI_MAF_KE_MAFD_RAT_PURGE_DC_MAX");
	MakeRptCmt	(0X16B48,	"Minimum stabilization time after conditions have been met to run the MAF rationality test.\nSeconds");
	MakeWord	(0X16B48);
	MakeName	(0X16B48,	"DI_MAF_KE_MAFD_RAT_STABLE_TIME_MIN");
	MakeRptCmt	(0X16B4A,	"Maximum allowed throttle position delta to run the MAF rationality test.\nPercent");
	MakeWord	(0X16B4A);
	MakeName	(0X16B4A,	"DI_MAF_KE_MAFD_RAT_TPS_DELTA_MAX");
	MakeRptCmt	(0X16B4C,	"Maximum allowed throttle position value to run the MAF rationality test.\nPercent");
	MakeWord	(0X16B4C);
	MakeName	(0X16B4C,	"DI_MAF_KE_MAFD_RAT_TPS_MAX");
	MakeRptCmt	(0X16B4E,	"Minimum engine run time necessary to run the MAF frequency test.\nSeconds");
	MakeName	(0X16B4E,	"DI_MAF_KE_MAFD_FREQ_ENG_RUN_TIME_MIN");
	MakeName	(0X16B50,	"Constant16_C2908___MAF_Test_Min_Run_Time");
	MakeRptCmt	(0X16B52,	"Minimum ignition voltage necessary to run the MAF frequency test.\nVolts");
	MakeWord	(0X16B52);
	MakeName	(0X16B52,	"DI_MAF_KE_MAFD_FREQ_IGN_VOLT_MIN");
	MakeRptCmt	(0X16B54,	"Minimum engine speed necessary to run the MAF frequency test.\nRPM");
	MakeWord	(0X16B54);
	MakeName	(0X16B54,	"DI_MAF_KE_MAFD_FREQ_RPM_MIN");
	MakeRptCmt	(0X16B56,	"Minimum stabilization time after conditions have been met to run the MAF frequency test.\nSeconds");
	MakeWord	(0X16B56);
	MakeName	(0X16B56,	"DI_MAF_KE_MAFD_FREQ_STABLE_TIME_MIN");
	MakeRptCmt	(0X16B58,	"Upper threshold MAP readings\nKilopascals");
	MakeName	(0X16B58,	"DG_MAP_KA_MAPD_PREDICTED_MAP_MAX");
	MakeRptCmt	(0X16C08,	"Lower threshold MAP readings\nKilopascals");
	MakeName	(0X16C08,	"DG_MAP_KA_MAPD_PREDICTED_MAP_MIN");
	MakeRptCmt	(0X16CB8,	"Number of failed intermittent short to high tests within a sample size that will report a failure.\nUnitless");
	MakeWord	(0X16CB8);
	MakeName	(0X16CB8,	"DG_MAP_KE_MAPD_INT_SHORT_HIGH_FAIL_LIM");
	MakeRptCmt	(0X16CBA,	"Number of intermittent short to high tests that make up a sample size.\nUnitless");
	MakeWord	(0X16CBA);
	MakeName	(0X16CBA,	"DG_MAP_KE_MAPD_INT_SHORT_HIGH_SMPL_LIM");
	MakeRptCmt	(0X16CBC,	"Number of failed intermittent short to low tests within a sample size that will report a failure.\nUnitless");
	MakeWord	(0X16CBC);
	MakeName	(0X16CBC,	"DG_MAP_KE_MAPD_INT_SHORT_LOW_FAIL_LIM");
	MakeRptCmt	(0X16CBE,	"Number of intermittent short to low tests that make up a sample size.\nUnitless");
	MakeWord	(0X16CBE);
	MakeName	(0X16CBE,	"DG_MAP_KE_MAPD_INT_SHORT_LOW_SMPL_LIM");
	MakeRptCmt	(0X16CC0,	"Number of rationality failed tests within a sample size that will report a failure.\nUnitless");
	MakeWord	(0X16CC0);
	MakeName	(0X16CC0,	"DG_MAP_KE_MAPD_RAT_FAIL_LIM");
	MakeRptCmt	(0X16CC2,	"Number of rationality tests that make up a sample size.\nUnitless");
	MakeWord	(0X16CC2);
	MakeName	(0X16CC2,	"DG_MAP_KE_MAPD_RAT_SMPL_LIM");
	MakeRptCmt	(0X16CC4,	"Number of failed short to high tests within a sample size that will report a failure.\nUnitless");
	MakeWord	(0X16CC4);
	MakeName	(0X16CC4,	"DG_MAP_KE_MAPD_SHORT_HIGH_FAIL_LIM");
	MakeWord	(0X16CC6);
	MakeName	(0X16CC6,	"DG_MAP_KE_MAPD_SHORT_HIGH_RPM");
	MakeRptCmt	(0X16CC8,	"Number of short to high tests that make up a sample size.\nUnitless");
	MakeWord	(0X16CC8);
	MakeName	(0X16CC8,	"DG_MAP_KE_MAPD_SHORT_HIGH_SMPL_LIM");
	MakeRptCmt	(0X16CCA,	"Number of failed short to low tests within a sample size that will report a failure.\nUnitless");
	MakeWord	(0X16CCA);
	MakeName	(0X16CCA,	"DG_MAP_KE_MAPD_SHORT_LOW_FAIL_LIM");
	MakeWord	(0X16CCC);
	MakeName	(0X16CCC,	"DG_MAP_KE_MAPD_SHORT_LOW_RPM");
	MakeRptCmt	(0X16CCE,	"Number of short to low tests that make up a sample size.\nUnitless");
	MakeWord	(0X16CCE);
	MakeName	(0X16CCE,	"DG_MAP_KE_MAPD_SHORT_LOW_SMPL_LIM");
	MakeRptCmt	(0X16CD0,	"The threshold above which the MAP sensor is considered shorted to a positive voltage.\nPercent");
	MakeWord	(0X16CD0);
	MakeName	(0X16CD0,	"DG_MAP_KE_MAPD_SHORTED_HIGH_THRESH");
	MakeRptCmt	(0X16CD2,	"The threshold below which the MAP sensor is considered opened or shorted to ground.\nPercent");
	MakeWord	(0X16CD2);
	MakeName	(0X16CD2,	"DG_MAP_KE_MAPD_SHORTED_LOW_THRESH");
	MakeWord	(0X16CD4);
	MakeName	(0X16CD4,	"DG_MAP_KE_MAPD_TPS_OVER_RPM_THRESH_MAX");
	MakeWord	(0X16CD6);
	MakeName	(0X16CD6,	"DG_MAP_KE_MAPD_TPS_OVER_RPM_THRESH_MIN");
	MakeWord	(0X16CD8);
	MakeName	(0X16CD8,	"DG_MAP_KE_MAPD_TPS_UNDER_RPM_THRESH_MAX");
	MakeWord	(0X16CDA);
	MakeName	(0X16CDA,	"DG_MAP_KE_MAPD_TPS_UNDER_RPM_THRESH_MIN");
	MakeRptCmt	(0X16CDC,	"The MAP Short to High test will be disabled if the engine run time is less than this calibration.\nSeconds");
	MakeWord	(0X16CDC);
	MakeName	(0X16CDC,	"DI_MAP_KV_MAPD_COLD_START_RUN_TIME");
	MakeRptCmt	(0X16CE6,	"Maximum EGR flow rate change to still consider conditions stable for MAP rationality.\nPercent");
	MakeWord	(0X16CE6);
	MakeName	(0X16CE6,	"DI_MAP_KE_MAPD_RAT_DELTA_EGR_POS_MAX");
	MakeRptCmt	(0X16CE8,	"Maximum idle air value change to still consider conditions stable for MAP rationality.\nGrams/Second");
	MakeWord	(0X16CE8);
	MakeName	(0X16CE8,	"DI_MAP_KE_MAPD_RAT_DELTA_IAC_IDLE_MAX");
	MakeRptCmt	(0X16CEA,	"Maximum engine speed change to still consider conditions stable  for MAP rationality.\nPercent");
	MakeWord	(0X16CEA);
	MakeName	(0X16CEA,	"DI_MAP_KE_MAPD_RAT_DELTA_RPM_MAX");
	MakeRptCmt	(0X16CEC,	"Maximum throttle position change to still consider conditions stable  for MAP rationality.\nPercent");
	MakeWord	(0X16CEC);
	MakeName	(0X16CEC,	"DI_MAP_KE_MAPD_RAT_DELTA_TPS_MAX");
	MakeRptCmt	(0X16CEE,	"Maximum RPM threshold under which the MAP rationality test can proceed.\nRPM");
	MakeWord	(0X16CEE);
	MakeName	(0X16CEE,	"DI_MAP_KE_MAPD_RAT_RPM_HIGH");
	MakeRptCmt	(0X16CF0,	"Minimum RPM value above which the MAP rationality test can proceed.\nRPM");
	MakeWord	(0X16CF0);
	MakeName	(0X16CF0,	"DI_MAP_KE_MAPD_RAT_RPM_LOW");
	MakeRptCmt	(0X16CF2,	"Minimum stabilization time after the conditions have been met necessary to run the MAP rationality test.\nSeconds");
	MakeWord	(0X16CF2);
	MakeName	(0X16CF2,	"DI_MAP_KE_MAPD_RAT_STABLE_TIME_MIN");
	MakeRptCmt	(0X16CF4,	"Indicates when to analyze the abnormal speed data.\nUnitless");
	MakeByte	(0X16CF4);
	MakeName	(0X16CF4,	"DG_MF_ENGINE_CYCLE_KE_MISF_ABNORMAL_SPEED_OPTION");
	MakeWord	(0X16CF6);
	MakeName	(0X16CF6,	"PROTECTED_KE_MISF_ASSEMBLY_PLANT_DELAY");
	MakeByte	(0X16CF8);
	MakeName	(0X16CF8,	"PROTECTED_KE_MISF_BALANCED_TIME_OFFSET");
	MakeRptCmt	(0X16CF9,	"Enables the diagnostic to collect data in both cylinder and revolution mode for development purposes.\nFlag");
	MakeByte	(0X16CF9);
	MakeName	(0X16CF9,	"PROTECTED_KE_MISF_CALIBRATE_MODE");
	MakeRptCmt	(0X16CFA,	"Threshold for distinguishing abnormal speed in cylinder mode.\nUnitless");
	MakeByte	(0X16CFA);
	MakeName	(0X16CFA,	"PROTECTED_KE_MISF_CYL_ABNORMAL_ENGINE_SPD");
	MakeRptCmt	(0X16CFC,	"Maximum engine speed necessary to have abnormal speed detected.\nRPM");
	MakeWord	(0X16CFC);
	MakeName	(0X16CFC,	"PROTECTED_KE_MISF_IDLE_ENGINE_SPEED");
	MakeRptCmt	(0X16CFE,	"Maximum throttle position necessary to have abnormal speed detected.\nPercent");
	MakeWord	(0X16CFE);
	MakeName	(0X16CFE,	"PROTECTED_KE_MISF_IDLE_THROTTLE_POSITION");
	MakeRptCmt	(0X16D00,	"Maximum vehicle speed necessary to have abnormal speed detected.\nMPH");
	MakeWord	(0X16D00);
	MakeName	(0X16D00,	"PROTECTED_KE_MISF_IDLE_VEHICLE_SPEED");
	MakeRptCmt	(0X16D02,	"Minimum number of normals necessary to reset misfire information.\nUnitless");
	MakeByte	(0X16D02);
	MakeName	(0X16D02,	"PROTECTED_KE_MISF_NUMBER_OF_NORMALS_FILTER");
	MakeRptCmt	(0X16D03,	"Indicates whether to use the single peak method of analyzing peaks in opposing cylinder mode.\nFlag");
	MakeByte	(0X16D03);
	MakeName	(0X16D03,	"PROTECTED_KE_MISF_OPP_CYL_SINGLE_PEAK");
	MakeRptCmt	(0X16D04,	"Minimum number of misfires necessary to add in the number of misfires detected in opposing cylinder mode.\nUnitless");
	MakeByte	(0X16D04);
	MakeName	(0X16D04,	"PROTECTED_KE_MISF_OPP_CYLINDER");
	MakeRptCmt	(0X16D05,	"Threshold distinguishing abnormal speed in revolution mode.\nUnitless");
	MakeByte	(0X16D05);
	MakeName	(0X16D05,	"PROTECTED_KE_MISF_REV_ABNORMAL_ENGINE_SPD");
	MakeRptCmt	(0X16D06,	"Compensates for revolution mode phase delay to find proper cylinder which misfired.\nUnitless");
	MakeByte	(0X16D06);
	MakeName	(0X16D06,	"PROTECTED_KE_MISF_REV_MODE_CYLINDER_OFFSET");
	MakeRptCmt	(0X16D07,	"Number of engine cycles to ignore due to misfire induced drive train ringing.\nUnitless");
	MakeByte	(0X16D07);
	MakeName	(0X16D07,	"PROTECTED_KE_MISF_RING_FILTER");
	MakeRptCmt	(0X16D08,	"Indicates whether to use only one cylinder's peak in determining the highest peak of the revolution mode data.\nFlag");
	MakeByte	(0X16D08);
	MakeName	(0X16D08,	"PROTECTED_KE_MISF_SINGLE_PEAK_REV_METHOD");
	MakeRptCmt	(0X16D0A,	"Number of engine cycles to delay on powerup.\nUnitless");
	MakeByte	(0X16D0A);
	MakeName	(0X16D0A,	"PROTECTED_KV_MISF_POWERUP_DELAY");
	MakeByte	(0X16D12);
	MakeName	(0X16D12,	"PROTECTED_KV_MISF_ZERO_TORQUE_TEMPERATURE");
	MakeRptCmt	(0X16D24,	"Identifies the engine load region where a single cylinder misfire cannot cause catalyst damage.\nPercent");
	MakeWord	(0X16D24);
	MakeName	(0X16D24,	"DG_MF_REPORTING_KE_MISF_1_CYL_NO_CAT_DAMAGE_LOAD");
	MakeRptCmt	(0X16D26,	"The amount of misfire that is needed in a single cylinder to indicate a single cylinder misfire is occurring.\nCounts");
	MakeByte	(0X16D26);
	MakeName	(0X16D26,	"DG_MF_REPORTING_KE_MISF_1_CYL_NO_CAT_DAMAGE_LVL");
	MakeRptCmt	(0X16D28,	"Identifies the engine speed region where a single cylinder misfire cannot cause catalyst damage.\nRPM");
	MakeWord	(0X16D28);
	MakeName	(0X16D28,	"DG_MF_REPORTING_KE_MISF_1_CYL_NO_CAT_DAMAGE_RPM");
	MakeRptCmt	(0X16D2A,	"Minimum ratio necessary to detect abnormal speed.\nUnitless");
	MakeByte	(0X16D2A);
	MakeName	(0X16D2A,	"DG_MF_REPORTING_KE_MISF_ABNORMAL_SPEED_THRESHOLD");
	MakeRptCmt	(0X16D2B,	"Determines the number of elements in the Catalyst_Array to consider.\nUnitless");
	MakeByte	(0X16D2B);
	MakeName	(0X16D2B,	"DG_MF_REPORTING_KE_MISF_CATALYST_ARRAY_SIZE");
	MakeRptCmt	(0X16D2C,	"Maximum value necessary to detect which cylinder is misfiring.\nUnitless");
	MakeByte	(0X16D2C);
	MakeName	(0X16D2C,	"DG_MF_REPORTING_KE_MISF_DETERMINE_MISFIRE_P_CODE");
	MakeRptCmt	(0X16D2E,	"Amount of time engine is in decel fuel cutoff before the Malfunction Indicator Light is forced to stop flashing.\nSeconds");
	MakeWord	(0X16D2E);
	MakeName	(0X16D2E,	"DG_MF_REPORTING_KE_MISF_DFCO_TIME_STOP_MIL_FLASH");
	MakeRptCmt	(0X16D30,	"Maximum value of misfire counts necessary to disable the TCC(Torque Converter Clutch)\nUnitless");
	MakeByte	(0X16D30);
	MakeName	(0X16D30,	"DG_MF_REPORTING_KE_MISF_DISABLE_TCC");
	MakeRptCmt	(0X16D31,	"Determines the number of elements in the Emission_Array to consider.\nUnitless");
	MakeByte	(0X16D31);
	MakeName	(0X16D31,	"DG_MF_REPORTING_KE_MISF_EMISSION_ARRAY_SIZE");
	MakeRptCmt	(0X16D32,	"Forces the Malfunction Indicator Light to stop flashing at lower engine loads.\nPercent");
	MakeWord	(0X16D32);
	MakeName	(0X16D32,	"DG_MF_REPORTING_KE_MISF_FLASH_MIL_ENGINE_LOAD");
	MakeWord	(0X16D34);
	MakeName	(0X16D34,	"DG_MF_REPORTING_KE_MISF_FLASH_MIL_LATCH");
	MakeRptCmt	(0X16D36,	"Forces the Malfunction Indicator Light to stop flashing at lower vehicle speeds.\nMPH");
	MakeWord	(0X16D36);
	MakeName	(0X16D36,	"DG_MF_REPORTING_KE_MISF_FLASH_MIL_VEHICLE_SPEED");
	MakeWord	(0X16D38);
	MakeName	(0X16D38,	"DG_MF_REPORTING_KE_MISF_FTP_MAX_ENGINE_LOAD");
	MakeWord	(0X16D3A);
	MakeName	(0X16D3A,	"DG_MF_REPORTING_KE_MISF_FTP_MAX_ENGINE_SPEED");
	MakeByte	(0X16D3C);
	MakeName	(0X16D3C,	"DG_MF_REPORTING_KE_MISF_INDISPUTABLE_MISFIRE");
	MakeByte	(0X16D3D);
	MakeName	(0X16D3D,	"DG_MF_REPORTING_KE_MISF_INITIAL_EMISSION_FACTOR");
	MakeRptCmt	(0X16D3E,	"Multiplier to increase emission misfire level. This must be set to 1.0, unless prior government approval is received.\nFactor");
	MakeByte	(0X16D3E);
	MakeName	(0X16D3E,	"DG_MF_REPORTING_KE_MISF_MARSHALLING_FACTOR");
	MakeRptCmt	(0X16D40,	"The distance the vehicle is driven after the assembly plant dynamic vehicle test.\nKilometers");
	MakeWord	(0X16D40);
	MakeName	(0X16D40,	"DG_MF_REPORTING_KE_MISF_MARSHALLING_ODOMETER");
	MakeByte	(0X16D42);
	MakeName	(0X16D42,	"DG_MISFIRE_KE_MISF_CYLINDER_MODE_EQUATION");
	MakeRptCmt	(0X16D43,	"Minimum number of consecutive cylinder events the engine is accelerating to cause a delay.\nUnitless");
	MakeByte	(0X16D43);
	MakeName	(0X16D43,	"DG_MISFIRE_KE_MISF_CONSECUTIVE_NEGATIVE");
	MakeRptCmt	(0X16D44,	"Minimum number of consecutive cylinder events the engine is decelerating to cause a delay.\nUnitless");
	MakeByte	(0X16D44);
	MakeName	(0X16D44,	"DG_MISFIRE_KE_MISF_CONSECUTIVE_POSITIVE");
	MakeRptCmt	(0X16D46,	"Determines which response test method is to be used. TRUE = ratio test, FALSE = difference test.\nBoolean");
	MakeByte	(0X16D46);
	MakeName	(0X16D46,	"DG_EOS_KE_EOSD_ASYMMETRICRATIO_TEST");
	MakeWord	(0X16D48);
	MakeName	(0X16D48,	"DG_EOS_KE_EOSD_OPEN_FAST_PASS_THRESH");
	MakeWord	(0X16D4A);
	MakeName	(0X16D4A,	"DG_EOS_KE_EOSD_OPEN_FP_HIGH_THRESHOLD");
	MakeWord	(0X16D4C);
	MakeName	(0X16D4C,	"DG_EOS_KE_EOSD_OPEN_FP_LOW_THRESHOLD");
	MakeRptCmt	(0X16D4E,	"The related sensor voltage required to allow monitoring of the current sensor during the PE test.\nMillivolts");
	MakeWord	(0X16D4E);
	MakeName	(0X16D4E,	"DG_EOS_KE_EOSD_REL_PE_SENSOR_THRESH");
	MakeRptCmt	(0X16D50,	"Amount of time to collect response data.\nMilliseconds");
	MakeWord	(0X16D50);
	MakeName	(0X16D50,	"DG_EOS_KE_EOSD_RESP_SAMPLE_TIME_LIM");
	MakeRptCmt	(0X16D52,	"The maximum number of AIR diagnostic test failures required to fail the AIR diagnostic.\nunitless");
	MakeByte	(0X16D52);
	MakeName	(0X16D52,	"DI_AIR_KE_AIRD_FAILED_TEST_MAX");
	MakeRptCmt	(0X16D54,	"The fixed integrator update rate during the Active AIR Injection test.\nSeconds");
	MakeWord	(0X16D54);
	MakeName	(0X16D54,	"DI_AIR_KE_AIRD_FUEL_TRIM_UPDATE_RATE");
	MakeRptCmt	(0X16D56,	"Minimum intake air temperature threshold to enable the diagnostic.\nDegrees_C");
	MakeWord	(0X16D56);
	MakeName	(0X16D56,	"DI_AIR_KE_AIRD_INTAKE_AIR_TEMP_MIN");
	MakeRptCmt	(0X16D58,	"The number of O2 sensors that independently receive air injection from the secondary AIR system.\nUnitless");
	MakeWord	(0X16D58);
	MakeName	(0X16D58,	"DI_AIR_KE_AIRD_NUMBER_OF_O2_MONITORS");
	MakeRptCmt	(0X16D5A,	"Minimum value for the O2 lean ratio, to pass part 1 of the passive test, during a cold start.\nRatio");
	MakeByte	(0X16D5A);
	MakeArray	(0X16D5A,	0X2);
	MakeName	(0X16D5A,	"DI_AIR_KV_AIRD_PASV_COLD_LEAN_RATIO");
	MakeWord	(0X16D5C);
	MakeRptCmt	(0X16D5E,	"Maximum threshold value to update the passive lean timer.\nSeconds");
	MakeByte	(0X16D5E);
	MakeArray	(0X16D5E,	0X2);
	MakeName	(0X16D5E,	"DI_AIR_KV_AIRD_PASV_COLD_LEAN_THRESH");
	MakeWord	(0X16D60);
	MakeRptCmt	(0X16D62,	"Minimum time to calculate a cold and lean ratio for the cold test.\nSeconds");
	MakeName	(0X16D62,	"DI_AIR_KV_AIRD_PASV_COLD_MIN_TIME");
	MakeWord	(0X16D64);
	MakeRptCmt	(0X16D66,	"Maximum value for the O2 rich ratio, to pass part 1 of the passive test, during a cold start.\nRatio");
	MakeName	(0X16D66,	"DI_AIR_KV_AIRD_PASV_COLD_RICH_RATIO");
	MakeWord	(0X16D68);
	MakeRptCmt	(0X16D6A,	"Minimum threshold value to update the passive rich timer.\nVolts");
	MakeByte	(0X16D6A);
	MakeArray	(0X16D6A,	0X2);
	MakeName	(0X16D6A,	"DI_AIR_KV_AIRD_PASV_COLD_RICH_THRESH");
	MakeWord	(0X16D6C);
	MakeRptCmt	(0X16D6E,	"Minimum value for the O2 lean ratio, to pass part 1 of the passive test, during a hot start.\nRatio");
	MakeWord	(0X16D6E);
	MakeName	(0X16D6E,	"DI_AIR_KV_AIRD_PASV_HOT_LEAN_RATIO");
	MakeWord	(0X16D70);
	MakeRptCmt	(0X16D72,	"Maximum threshold value to update the passive lean timer.\nVolts");
	MakeByte	(0X16D72);
	MakeArray	(0X16D72,	0X2);
	MakeName	(0X16D72,	"DI_AIR_KV_AIRD_PASV_HOT_LEAN_THRESH");
	MakeWord	(0X16D74);
	MakeRptCmt	(0X16D76,	"Minimum threshold time to calculate a hot and lean ratio for the hot test.\nSeconds");
	MakeName	(0X16D76,	"DI_AIR_KV_AIRD_PASV_HOT_MIN_TIME");
	MakeWord	(0X16D78);
	MakeRptCmt	(0X16D7A,	"Maximum value for the O2 rich ratio, to pass part1 of the passive test, during a hot start.\nRatio");
	MakeName	(0X16D7A,	"DI_AIR_KV_AIRD_PASV_HOT_RICH_RATIO");
	MakeWord	(0X16D7C);
	MakeRptCmt	(0X16D7E,	"Minimum threshold value to update the passive rich timer.\nVolts");
	MakeName	(0X16D7E,	"DI_AIR_KV_AIRD_PASV_HOT_RICH_THRESH");
	MakeRptCmt	(0X16D82,	"Maximum powerup coolant temperature threshold to enable the diagnostic.\nDegrees_C");
	MakeWord	(0X16D82);
	MakeName	(0X16D82,	"DI_AIR_KE_AIRD_PU_COOLANT_TEMP_MAX");
	MakeRptCmt	(0X16D84,	"Determines the pass/fail thresholds for the fuel trim delta in the AIR diagnostic active test.\nscaler_2");
	MakeName	(0X16D84,	"DI_AIR_KA_AIRD_ACTIVE_FUEL_TRIM_DELTA");
	MakeByte	(0X16DA1);
	MakeRptCmt	(0X16DAC,	"Determines the pass/fail thresholds for the active lean timer in AIR diagnoctic active test.\nseconds");
	MakeName	(0X16DAC,	"DI_AIR_KA_AIRD_ACTIVE_LEAN_TIMER");
	MakeByte	(0X16DC0);
	MakeName	(0X16DC0,	"DI_AIR_KE_AIRD_ADAPTIVE_LEARN_TIME_MIN");
	MakeRptCmt	(0X16DC2,	"Minimum amount of airflow allowed to enable the diagnostic.\ngrams per second");
	MakeWord	(0X16DC2);
	MakeName	(0X16DC2,	"DI_AIR_KE_AIRD_AIRFLOW_MIN");
	MakeRptCmt	(0X16DC4,	"Minimum amount of barometric pressure allowed to enable the diagnostic.\nkPa");
	MakeWord	(0X16DC4);
	MakeName	(0X16DC4,	"DI_AIR_KE_AIRD_BARO_MIN");
	MakeRptCmt	(0X16DC6,	"\nDegrees_C");
	MakeWord	(0X16DC6);
	MakeName	(0X16DC6,	"DI_AIR_KE_AIRD_COOLANT_TEMP_MAX");
	MakeRptCmt	(0X16DC8,	"Minimum coolant temperature threshold to enable the diagnostic.\nDegrees_C");
	MakeWord	(0X16DC8);
	MakeName	(0X16DC8,	"DI_AIR_KE_AIRD_COOLANT_TEMP_MIN");
	MakeRptCmt	(0X16DCA,	"Minimum engine load threshold to enable the diagnostic.\nPercent");
	MakeWord	(0X16DCA);
	MakeName	(0X16DCA,	"DI_AIR_KE_AIRD_ENGINE_LOAD_MIN");
	MakeRptCmt	(0X16DCC,	"Maximum intake air temperature threshold to enable the diagnostic.\nDegrees_C");
	MakeWord	(0X16DCC);
	MakeName	(0X16DCC,	"DI_AIR_KE_AIRD_INTAKE_AIR_TEMP_MAX");
	MakeRptCmt	(0X16DCE,	"Minimum system voltage threshold to enable the diagnostic.\nVolts");
	MakeByte	(0X16DCE);
	MakeName	(0X16DCE,	"DI_AIR_KE_AIRD_SYSTEM_VOLTAGE_MIN");
	MakeRptCmt	(0X16DCF,	"Length of time the voltage must stay below the minimum voltage to disable the diagnostic.\nSeconds");
	MakeByte	(0X16DCF);
	MakeName	(0X16DCF,	"DI_AIR_KE_AIRD_VOLTAGE_LOW_TIME");
	MakeRptCmt	(0X16DD0,	"The adaptive indices in which the active test may run.\nunitless");
	MakeName	(0X16DD0,	"DI_AIR_KV_AIRD_ADAPTIVE_INDEX");
	MakeWord	(0X16DD8);
	MakeRptCmt	(0X16DDA,	"Frozen rich short term fuel trim value used during the IAR active test in the base pulse width equation.\nunitless");
	MakeName	(0X16DDA,	"DI_AIR_KV_AIRD_SHORT_TERM_FUEL_TRIM");
	MakeRptCmt	(0X16DDE,	"The number of O2 sensors in which the heater test is to be done.\nUnitless");
	MakeByte	(0X16DDE);
	MakeName	(0X16DDE,	"DI_EOS_KE_EOSD_NUMBER_OF_HEATED_SENSORS");
	MakeByte	(0X16DDF);
	MakeName	(0X16DDF,	"DI_EOS_KE_EOSD_NUMBER_OF_O2_SENSORS");
	MakeByte	(0X16DE0);
	MakeName	(0X16DE0,	"DI_EOS_KE_EOSD_NUMBER_OF_RESP_SENSORS");
	MakeRptCmt	(0X16DE1,	"This allow EOSD to intrusive control the fuel proportional terms and post O2 min/max limiting.\nBoolean");
	MakeByte	(0X16DE1);
	MakeName	(0X16DE1,	"DI_EOS_KE_EOSD_INTRUSIVE_CNTRL_ENABLE");
	MakeRptCmt	(0X16DE2,	"Limit maximum value of Post Oxygen Threshold Offset.\nMillivolts");
	MakeWord	(0X16DE2);
	MakeName	(0X16DE2,	"DI_EOS_KE_EOSD_POST_OXYGEN_OFFSET_MAX");
	MakeRptCmt	(0X16DE4,	"Limit minimum value of Post Oxygen Threshold Offset.\nMillivolts");
	MakeWord	(0X16DE4);
	MakeName	(0X16DE4,	"DI_EOS_KE_EOSD_POST_OXYGEN_OFFSET_MIN");
	MakeRptCmt	(0X16DE6,	"Maximum system voltage above which the O2 diag will be disabled.\nVolts");
	MakeWord	(0X16DE6);
	MakeName	(0X16DE6,	"DI_EOS_KE_EOSD_SYSTEM_VOLTAGE_MAX");
	MakeRptCmt	(0X16DE8,	"The change in throttle position required to increment EOSD_Num_Of_Delta_TPS_Changes.\nPercent");
	MakeName	(0X16DE8,	"DI_EOS_KV_EOSD_DELTA_TPS_LIMIT");
	MakeWord	(0X16DEE);
	MakeName	(0X16DF0,	"DI_EOS_KV_EOSD_DFCO_FAIL_LIMIT");
	MakeWord	(0X16DF6);
	MakeRptCmt	(0X16DF8,	"Number of samples taken to complete a DFCO test assuming the failure threshold has not been reached.\nCounts");
	MakeName	(0X16DF8,	"DI_EOS_KV_EOSD_DFCO_SAMPLE");
	MakeWord	(0X16DFE);
	MakeName	(0X16E00,	"DI_EOS_KV_EOSD_DFCO_THRESHOLD");
	MakeByte	(0X16E07);
	MakeRptCmt	(0X16E08,	"A cross reference of heater sensor index to sensor index for heater testing sensor identification.\nUnitless");
	MakeName	(0X16E08,	"DI_EOS_KV_EOSD_HEATED_SENSOR_INDEX");
	MakeByte	(0X16E0B);
	MakeRptCmt	(0X16E0C,	"Maximum number of times to count while waiting for completion of the related sensors lean test.\nCounts");
	MakeName	(0X16E0C,	"DI_EOS_KV_EOSD_LEAN_FAIL_DELAY_LIMIT");
	MakeWord	(0X16E0E);
	MakeRptCmt	(0X16E10,	"Maximum times an oxygen sensor can be in a failure region for a given number of samples during the lean test.\nCounts");
	MakeName	(0X16E10,	"DI_EOS_KV_EOSD_LEAN_FAIL_LIMIT");
	MakeWord	(0X16E16);
	MakeRptCmt	(0X16E18,	"The number of lean failure samples required to set the fault pending flag.\nCounts");
	MakeName	(0X16E18,	"DI_EOS_KV_EOSD_LEAN_LOW_LIMIT");
	MakeWord	(0X16E1E);
	MakeRptCmt	(0X16E20,	"Voltage threshold below which a sensor will be considered to be failed lean for the fault pending criteria.\nMillivolts");
	MakeName	(0X16E20,	"DI_EOS_KV_EOSD_LEAN_LOW_THRESHOLD");
	MakeWord	(0X16E26);
	MakeRptCmt	(0X16E28,	"Number of samples taken to complete a lean test assuming the failure threshold has not been reached.\nCounts");
	MakeName	(0X16E28,	"DI_EOS_KV_EOSD_LEAN_SAMPLE");
	MakeWord	(0X16E2E);
	MakeName	(0X16E30,	"DI_EOS_KV_EOSD_LEAN_THRESHOLD");
	MakeWord	(0X16E36);
	MakeRptCmt	(0X16E38,	"The number of delta TPS changes required to allow the Open test to report a failure.\nCounts");
	MakeDword	(x=0X16E38);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X16E38,	"DI_EOS_KV_EOSD_NUM_OF_DELTA_TPS_MAX");
	MakeByte	(0X16E3F);
	MakeRptCmt	(0X16E40,	"Number of related PE sensors to check whenever a power enrichment condition is executed.\nUnitless");
	MakeName	(0X16E40,	"DI_EOS_KV_EOSD_NUM_OF_REL_PE_SENSORS");
	MakeByte	(0X16E43);
	MakeRptCmt	(0X16E44,	"Number of sensors to check whenever a rich or lean condition is suspected.\nUnitless");
	MakeName	(0X16E44,	"DI_EOS_KV_EOSD_NUM_OF_RELATED_SENSORS");
	MakeWord	(0X16E46);
	MakeName	(0X16E48,	"DI_EOS_KV_EOSD_OPEN_FAIL_LIMIT");
	MakeWord	(0X16E4E);
	MakeName	(0X16E50,	"DI_EOS_KV_EOSD_OPEN_HIGH_THRESHOLD");
	MakeWord	(0X16E56);
	MakeName	(0X16E58,	"DI_EOS_KV_EOSD_OPEN_LOW_THRESHOLD");
	MakeWord	(0X16E5E);
	MakeRptCmt	(0X16E60,	"Number of samples taken to complete an open test assuming the failure threshold has not been reached.\nCounts");
	MakeName	(0X16E60,	"DI_EOS_KV_EOSD_OPEN_SAMPLE");
	MakeByte	(0X16E67);
	MakeRptCmt	(0X16E68,	"A cross-reference of the post O2 sensor index to sensor index for post sensor testing identification.\nUnitsless");
	MakeWord	(0X16E68);
	MakeName	(0X16E68,	"DI_EOS_KV_EOSD_POST_SENSOR_INDEX");
	MakeName	(0X16E6A,	"DI_EOS_KV_EOSD_POWER_FAIL_LIMIT");
	MakeWord	(0X16E70);
	MakeRptCmt	(0X16E72,	"Number of samples taken to complete a power enrichment test assuming the failure threshold has not been reached.\nCounts");
	MakeName	(0X16E72,	"DI_EOS_KV_EOSD_POWER_SAMPLE");
	MakeWord	(0X16E78);
	MakeName	(0X16E7A,	"DI_EOS_KV_EOSD_POWER_THRESHOLD");
	MakeByte	(0X16E81);
	MakeRptCmt	(0X16E82,	"A cross-reference of the PE sensor index to the sensor index which serves to identify the specific sensor during PE testing.\nUnitless");
	MakeName	(0X16E82,	"DI_EOS_KV_EOSD_RELATED_PE_SENSOR_INDEX");
	MakeByte	(0X16E85);
	MakeName	(0X16E86,	"DI_EOS_KV_EOSD_RELATED_SENSOR_INDEX");
	MakeByte	(0X16E89);
	MakeName	(0X16E8A,	"DI_EOS_KV_EOSD_RELATED_2ND_SENSOR_INDEX");
	MakeWord	(0X16E8C);
	MakeRptCmt	(0X16E8E,	"Threshold which separates normal and lean operating zones using the half cycle time method.\nMillivolts");
	MakeName	(0X16E8E,	"DI_EOS_KV_EOSD_RESP_HC_LEAN_THRESH");
	MakeWord	(0X16E90);
	MakeRptCmt	(0X16E92,	"Threshold which separates normal and rich operating zones using the half cycle time method.\nMillivolts");
	MakeName	(0X16E92,	"DI_EOS_KV_EOSD_RESP_HC_RICH_THRESH");
	MakeWord	(0X16E94);
	MakeRptCmt	(0X16E96,	"Threshold which separates normal and lean operating zones using the slope time method.\nMillivolts");
	MakeWord	(0X16E96);
	MakeName	(0X16E96,	"DI_EOS_KV_EOSD_RESP_ST_LEAN_THRESH");
	MakeWord	(0X16E98);
	MakeRptCmt	(0X16E9A,	"Threshold which separates normal and rich operating zones using the slope time method.\nMillivolts");
	MakeWord	(0X16E9A);
	MakeName	(0X16E9A,	"DI_EOS_KV_EOSD_RESP_ST_RICH_THRESH");
	MakeByte	(0X16E9D);
	MakeName	(0X16E9E,	"DI_EOS_KV_EOSD_RESP_SENSOR_INDEX");
	MakeByte	(0X16E9F);
	MakeRptCmt	(0X16EA0,	"The number of times to count while waiting for completion of the related sensors' rich test.\nCounts");
	MakeName	(0X16EA0,	"DI_EOS_KV_EOSD_RICH_FAIL_DELAY_LIMIT");
	MakeWord	(0X16EA2);
	MakeName	(0X16EA4,	"DI_EOS_KV_EOSD_RICH_FAIL_LIMIT");
	MakeWord	(0X16EAA);
	MakeRptCmt	(0X16EAC,	"The number of rich failure samples required to set the fault pending flag.\nCounts");
	MakeName	(0X16EAC,	"DI_EOS_KV_EOSD_RICH_HIGH_LIMIT");
	MakeWord	(0X16EB2);
	MakeRptCmt	(0X16EB4,	"Value above which a sensor will be considered to be failed  rich for the fault pending criteria.\nMillivolts");
	MakeName	(0X16EB4,	"DI_EOS_KV_EOSD_RICH_HIGH_THRESHOLD");
	MakeWord	(0X16EBA);
	MakeRptCmt	(0X16EBC,	"Number of samples taken to complete a rich test assuming the failure threshold has not been reached.\nCounts");
	MakeName	(0X16EBC,	"DI_EOS_KV_EOSD_RICH_SAMPLE");
	MakeWord	(0X16EC2);
	MakeName	(0X16EC4,	"DI_EOS_KV_EOSD_RICH_THRESHOLD");
	MakeByte	(0X16ECB);
	MakeRptCmt	(0X16ECC,	"A mapping of sensor names to the sensor index which serves to identify the specific sensor during testing, reporting, etc.\nUnitless");
	MakeDword	(x=0X16ECC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X16ECC,	"DI_EOS_KV_EOSD_SENSOR_INDEX");
	MakeName	(0X16ED0,	"DI_EOS_KV_EOSD_PROP_TERM_NORM_BAS_LEAN");
	MakeName	(0X16EE2,	"DI_EOS_KV_EOSD_PROP_TERM_NORM_BAS_RICH");
	MakeRptCmt	(0X16EF4,	"The lean-to-rich average response time (Bank 1 Sensor 1) threshold above which a response time failure will be reported.\nMilliseconds");
	MakeName	(0X16EF4,	"DI_EOS_KA_EOSD_ST_LRA_LIM_RS1");
	MakeRptCmt	(0X16F26,	"The lean-to-rich average response time (Bank 2 Sensor 1) threshold above which a response time failure will be reported.\nMilliseconds");
	MakeName	(0X16F26,	"DI_EOS_KA_EOSD_ST_LRA_LIM_RS2");
	MakeRptCmt	(0X16F58,	"The rich-to-lean average response time threshold (Bank 1 Sensor 1) above which a response time failure will be reported.\nMilliseconds");
	MakeName	(0X16F58,	"DI_EOS_KA_EOSD_ST_RLA_LIM_RS1");
	MakeRptCmt	(0X16F8A,	"The rich-to-lean average response time threshold (Bank 2 Sensor 1) above which a response time failure will be reported.\nMilliseconds");
	MakeName	(0X16F8A,	"DI_EOS_KA_EOSD_ST_RLA_LIM_RS2");
	MakeRptCmt	(0X16FBC,	"The number of lean-to-rich switches (Bank 1 Sensor 1) below which a switches failure will be reported.\nUnitless");
	MakeByte	(0X16FBC);
	MakeName	(0X16FBC,	"DI_EOS_KE_EOSD_ST_LRS_LIM_RS1");
	MakeRptCmt	(0X16FBD,	"The number of lean-to-rich switches (Bank 2 Sensor 1) below which a switches failure will be reported.\nUnitless");
	MakeByte	(0X16FBD);
	MakeName	(0X16FBD,	"DI_EOS_KE_EOSD_ST_LRS_LIM_RS2");
	MakeRptCmt	(0X16FBE,	"The number of rich-to-lean switches (Bank 1 Sensor 1) below which a switches failure will be reported.\nUnitless");
	MakeByte	(0X16FBE);
	MakeName	(0X16FBE,	"DI_EOS_KE_EOSD_ST_RLS_LIM_RS1");
	MakeRptCmt	(0X16FBF,	"The number of rich-to-lean switches (Bank 2 Sensor 1) below which a switches failure will be reported.\nUnitless");
	MakeByte	(0X16FBF);
	MakeName	(0X16FBF,	"DI_EOS_KE_EOSD_ST_RLS_LIM_RS2");
	MakeRptCmt	(0X16FC0,	"The number of lean-to-rich half cycle switches (Bank 1 Sensor 1) below which a switches failure will be reported.\nUnitless");
	MakeName	(0X16FC0,	"DI_EOS_KA_EOSD_HC_LRS_LIM_RS1");
	MakeRptCmt	(0X16FF2,	"The number of lean-to-rich half cycle switches (Bank 2 Sensor 1) below which a switches failure will be reported.\nUnitless");
	MakeName	(0X16FF2,	"DI_EOS_KA_EOSD_HC_LRS_LIM_RS2");
	MakeRptCmt	(0X17024,	"The number of rich-to-lean half cycle switches (Bank 1 Sensor 1) below which a switches failure will be reported.\nUnitless");
	MakeName	(0X17024,	"DI_EOS_KA_EOSD_HC_RLS_LIM_RS1");
	MakeRptCmt	(0X17056,	"The number of rich-to-lean half cycle switches (Bank 2 Sensor 1) below which a switches failure will be reported.\nUnitless");
	MakeName	(0X17056,	"DI_EOS_KA_EOSD_HC_RLS_LIM_RS2");
	MakeName	(0X17088,	"DI_EOS_KA_EOSD_ST_RATIO_LOW_LIM_RS1");
	MakeName	(0X170BA,	"DI_EOS_KA_EOSD_ST_RATIO_LOW_LIM_RS2");
	MakeName	(0X170EC,	"DI_EOS_KA_EOSD_ST_RATIO_HIGH_LIM_RS1");
	MakeName	(0X1711E,	"DI_EOS_KA_EOSD_ST_RATIO_HIGH_LIM_RS2");
	MakeName	(0X17150,	"DI_EOS_KA_EOSD_ST_DIFFLOW_LIM_RS1");
	MakeName	(0X171B4,	"DI_EOS_KA_EOSD_ST_DIFFLOW_LIM_RS2");
	MakeName	(0X17218,	"DI_EOS_KA_EOSD_ST_DIFFHIGH_LIM_RS1");
	MakeName	(0X1727C,	"DI_EOS_KA_EOSD_ST_DIFFHIGH_LIM_RS2");
	MakeRptCmt	(0X172E0,	"Minimum airflow value for enabling the oxygen sensor heater current monitor.\nGrams Per Second");
	MakeWord	(0X172E0);
	MakeName	(0X172E0,	"DI_EOS_KE_EOSD_CURMON_AIRFLOW_LOW");
	MakeRptCmt	(0X172E2,	"Maximum airflow value for enabling the oxygen sensor heater current monitor.\nGrams Per Second");
	MakeWord	(0X172E2);
	MakeName	(0X172E2,	"DI_EOS_KE_EOSD_CURMON_AIRFLOW_HIGH");
	MakeRptCmt	(0X172E4,	"Coolant temperature above which the oxygen sensor heater current monitor test will be enabled.\nDegrees_C");
	MakeWord	(0X172E4);
	MakeName	(0X172E4,	"DI_EOS_KE_EOSD_CURMON_COOLANT_TEMP");
	MakeWord	(0X172E6);
	MakeName	(0X172E6,	"DI_EOS_KV_EOSD_CURMON_CURRENT_MAX");
	MakeWord	(0X172EE);
	MakeName	(0X172EE,	"DI_EOS_KV_EOSD_CURMON_CURRENT_MIN");
	MakeRptCmt	(0X172F6,	"The delay time between consecutive oxygen sensor current monitor tests.\nSeconds");
	MakeWord	(0X172F6);
	MakeName	(0X172F6,	"DI_EOS_KE_EOSD_CURMON_DELAY_TIMER");
	MakeRptCmt	(0X172F8,	"The delay time before which the oxygen sensor heater current monitor test will be enabled.\nSeconds");
	MakeWord	(0X172F8);
	MakeName	(0X172F8,	"DI_EOS_KE_EOSD_CURMON_ENABLE_DELAY");
	MakeRptCmt	(0X172FA,	"Engine run time above which the oxygen sensor heater current monitor test will be enabled.\nSeconds");
	MakeWord	(0X172FA);
	MakeName	(0X172FA,	"DI_EOS_KE_EOSD_CURMON_ENG_RUN_TIME");
	MakeRptCmt	(0X172FC,	"Minimum engine speed value for enabling the oxygen sensor heater current monitor diagnostic.\nRPM");
	MakeWord	(0X172FC);
	MakeName	(0X172FC,	"DI_EOS_KE_EOSD_CURMON_ENGINE_SPEED_LOW");
	MakeRptCmt	(0X172FE,	"Maximum engine speed value for enabling the oxygen sensor heater current monitor diagnostic.\nRPM");
	MakeWord	(0X172FE);
	MakeName	(0X172FE,	"DI_EOS_KE_EOSD_CURMON_ENGINE_SPEED_HIGH");
	MakeRptCmt	(0X17300,	"The number of failure samples required to fail an oxygen sensor heatercurrent monitor test.\nCounts");
	MakeWord	(0X17300);
	MakeName	(0X17300,	"DI_EOS_KE_EOSD_CURMON_FAIL_LIMIT");
	MakeRptCmt	(0X17302,	"Number of samples required to complete an oxygen sensor heater current monitor test.\nCounts");
	MakeWord	(0X17302);
	MakeName	(0X17302,	"DI_EOS_KE_EOSD_CURMON_SAMPLE_LIMIT");
	MakeRptCmt	(0X17304,	"The maximum number of oxygen sensor heater current monitor tests to be run during this key cycle.\nCounts");
	MakeByte	(0X17304);
	MakeName	(0X17304,	"DI_EOS_KE_EOSD_CURMON_TEST_CTR_LIMIT");
	MakeRptCmt	(0X17306,	"If TRUE is specified for the indexed fault group, then any active fault within that group will inhibit the EOSD diagnostic.\nCal_Set_Of_Fault_Group_Type");
	MakeDword	(0X17306);
	MakeName	(0X17306,	"DI_EOS_KE_EOSD_FAULTS_THAT_DISABLE");
	MakeRptCmt	(0X1730A,	"Engine run time above which the oxygen sensor power enrichment and DFCO tests will be enabled.\nSeconds");
	MakeWord	(0X1730A);
	MakeName	(0X1730A,	"DI_EOS_KE_EOSD_PE_DFCO_RUN_TIME");
	MakeRptCmt	(0X1730C,	"Delay time after the lean test enable criteria have been met before starting data collection for lean test.\nSeconds");
	MakeWord	(0X1730C);
	MakeName	(0X1730C,	"DI_EOS_KE_EOSD_LEAN_DELAY");
	MakeRptCmt	(0X1730E,	"The ethanol percent below which the lean and power enrichment test will be enabled.\nPercent");
	MakeWord	(0X1730E);
	MakeName	(0X1730E,	"DI_EOS_KE_EOSD_LEANPE_ETHANOL_THRESH");
	MakeRptCmt	(0X17310,	"The fuel levelbelow which certain O2 sensor diagnostics will be disabled\nPercent");
	MakeWord	(0X17310);
	MakeName	(0X17310,	"DI_EOS_KE_EOSD_LOW_FUEL_DISABLE");
	MakeRptCmt	(0X17312,	"Maximum Equivalence Ratio to enable the lean and rich oxygen sensor range tests.\nRatio");
	MakeWord	(0X17312);
	MakeName	(0X17312,	"DI_EOS_KE_EOSD_MAX_EQUIVALENCE_RATIO");
	MakeRptCmt	(0X17314,	"Minimum Equivalence Ratio to enable the lean and rich oxygen sensor range tests.\nRatio");
	MakeWord	(0X17314);
	MakeName	(0X17314,	"DI_EOS_KE_EOSD_MIN_EQUIVALENCE_RATIO");
	MakeRptCmt	(0X17316,	"Used to enable or disable the activation of the O2 DFCO test.\nFlag");
	MakeByte	(0X17316);
	MakeName	(0X17316,	"DI_EOS_KE_EOSD_O2_DFCO_TEST_ENABLE");
	MakeRptCmt	(0X17317,	"Used to enable or disable the activation of the O2 lean test.\nFlag");
	MakeByte	(0X17317);
	MakeName	(0X17317,	"DI_EOS_KE_EOSD_O2_LEAN_TEST_ENABLE");
	MakeRptCmt	(0X17318,	"Used to enable or disable the activation of the O2 open test.\nFlag");
	MakeByte	(0X17318);
	MakeName	(0X17318,	"DI_EOS_KE_EOSD_O2_OPEN_TEST_ENABLE");
	MakeRptCmt	(0X17319,	"Used to enable or disable the activation of the O2 PE test.\nFlag");
	MakeByte	(0X17319);
	MakeName	(0X17319,	"DI_EOS_KE_EOSD_O2_PE_TEST_ENABLE");
	MakeRptCmt	(0X1731A,	"Used to enable or disable the activation of the O2 response test.\nFlag");
	MakeByte	(0X1731A);
	MakeName	(0X1731A,	"DI_EOS_KE_EOSD_O2_RESPONSE_TEST_ENABLE");
	MakeRptCmt	(0X1731B,	"Used to enable or disable the activation of the O2 rich test.\nFlag");
	MakeByte	(0X1731B);
	MakeName	(0X1731B,	"DI_EOS_KE_EOSD_O2_RICH_TEST_ENABLE");
	MakeRptCmt	(0X1731C,	"Minimum engine run time threshold to enable the oxygen sensor range tests.\nSeconds");
	MakeWord	(0X1731C);
	MakeName	(0X1731C,	"DI_EOS_KE_EOSD_OPEN_ENGINE_RUN_TIME");
	MakeRptCmt	(0X1731E,	"The ethanol percent below which the open test will be enabled.\nPercent");
	MakeWord	(0X1731E);
	MakeName	(0X1731E,	"DI_EOS_KE_EOSD_OPEN_ETHANOL_THRESH");
	MakeRptCmt	(0X17320,	"Post catalyst oxygen sensor fast pass period.\nSeconds");
	MakeWord	(0X17320);
	MakeName	(0X17320,	"DI_EOS_KE_EOSD_OPEN_FAST_PASS_PERIOD");
	MakeRptCmt	(0X17322,	"Delay time after the response test enable criteria have been met but before starting data collection for the response test.\nSeconds");
	MakeWord	(0X17322);
	MakeName	(0X17322,	"DI_EOS_KE_EOSD_RESP_DELAY_TIME");
	MakeRptCmt	(0X17324,	"Maximum engine speed for enabling data collection for the response test.\nRPM");
	MakeWord	(0X17324);
	MakeName	(0X17324,	"DI_EOS_KE_EOSD_RESP_ENGINE_SPEED_HIGH");
	MakeRptCmt	(0X17326,	"Mimimum engine speed for enabling data collection for the response test.\nRPM");
	MakeWord	(0X17326);
	MakeName	(0X17326,	"DI_EOS_KE_EOSD_RESP_ENGINE_SPEED_LOW");
	MakeRptCmt	(0X17328,	"The ethanol percent below which the response test will be enabled.\nPercent");
	MakeWord	(0X17328);
	MakeName	(0X17328,	"DI_EOS_KE_EOSD_RESP_ETHANOL_THRESH");
	MakeRptCmt	(0X1732A,	"Maximum airflow value for enabling data collection for the response test.\nGPS");
	MakeWord	(0X1732A);
	MakeName	(0X1732A,	"DI_EOS_KE_EOSD_RESP_FLOW_HIGH");
	MakeRptCmt	(0X1732C,	"Minimum airflow value for enabling data collection for the response test.\nGPS");
	MakeWord	(0X1732C);
	MakeName	(0X1732C,	"DI_EOS_KE_EOSD_RESP_FLOW_LOW");
	MakeRptCmt	(0X1732E,	"Minimum coolant temperature threshold required to start data collection for the response test.\nDegrees C");
	MakeWord	(0X1732E);
	MakeName	(0X1732E,	"DI_EOS_KE_EOSD_RESP_MIN_COOLANT_TEMP");
	MakeRptCmt	(0X17330,	"Minimum engine run time threshold required to start data collection for the response test.\nSeconds");
	MakeWord	(0X17330);
	MakeName	(0X17330,	"DI_EOS_KE_EOSD_RESP_MIN_ENGINE_RUN");
	MakeRptCmt	(0X17332,	"Minimum allowable purge duty cycle threshold which still permits data collection for the response test.\nPercent");
	MakeWord	(0X17332);
	MakeName	(0X17332,	"DI_EOS_KE_EOSD_RESP_PURGE_DC_MIN");
	MakeRptCmt	(0X17334,	"Minimum TPS required to enable the response diagnostic.\nPercent");
	MakeWord	(0X17334);
	MakeName	(0X17334,	"DI_EOS_KE_EOSD_RESP_TPS_MIN");
	MakeRptCmt	(0X17336,	"Delay time after the rich test enable criteria have been met before starting data collection for rich test.\nSeconds");
	MakeWord	(0X17336);
	MakeName	(0X17336,	"DI_EOS_KE_EOSD_RICH_DELAY");
	MakeRptCmt	(0X17338,	"The ethanol percent below which the rich and decel fuel cutoff test will be enabled.\nPercent");
	MakeWord	(0X17338);
	MakeName	(0X17338,	"DI_EOS_KE_EOSD_RICHDFCO_ETHANOL_THRESH");
	MakeRptCmt	(0X1733A,	"The equivalence ration below which the rich saturation counter of the DFCO test will be incremented.\nRatio");
	MakeWord	(0X1733A);
	MakeName	(0X1733A,	"DI_EOS_KE_EOSD_RICH_SATURATED_ER");
	MakeRptCmt	(0X1733C,	"Length of time the voltage must stay below the minimum voltage to disable the O2 diagnostics.\nSeconds");
	MakeWord	(0X1733C);
	MakeName	(0X1733C,	"DI_EOS_KE_EOSD_SYSTEM_VOLTAGE_TIME");
	MakeRptCmt	(0X1733E,	"Powerup ambient temperature must be less than this for an O2 diagnostic cold start.\nDegrees_C");
	MakeWord	(0X1733E);
	MakeName	(0X1733E,	"DI_EOS_KE_O2_DIAG_COLD_START_AMBIENT");
	MakeRptCmt	(0X17340,	"Powerup coolant temperature must be less than this for an O2 diagnostic cold start.\nDegrees_C");
	MakeWord	(0X17340);
	MakeName	(0X17340,	"DI_EOS_KE_O2_DIAG_COLD_START_COOLANT");
	MakeWord	(0X17342);
	MakeName	(0X17342,	"DI_EOS_KE_O2_DIAG_COLD_START_DELTA");
	MakeRptCmt	(0X17344,	"Time that the min and max TPS will be measured over.\nSeconds");
	MakeWord	(0X17344);
	MakeName	(0X17344,	"DI_EOS_KE_TRANSIENT_TPS_TIME");
	MakeRptCmt	(0X17346,	"Indicates whether reporting of the RCOHT limit part learn out of range check is enabled.\nBOOLEAN");
	MakeByte	(0X17346);
	MakeName	(0X17346,	"DI_EOS_KE_EOSD_RCOHT_OOR_CHECK_ENABLED");
	MakeRptCmt	(0X17348,	"The front O2 heaters must be below this value to allow the response diagnostic to be enabled.\nDegrees_C");
	MakeWord	(0X17348);
	MakeName	(0X17348,	"DI_EOS_KV_EOSD_O2_HTR_TEMPERATURE_MIN");
	MakeRptCmt	(0X17350,	"\n");
	MakeWord	(0X17350);
	MakeName	(0X17350,	"DI_EOS_KV_EOSD_O2_HTR_TEMPERATURE_MAX");
	MakeWord	(0X17356);
	MakeRptCmt	(0X17358,	"Delay time after the DFCO test enable criteria have been met before starting data collection for the DFCO test.\nSeconds");
	MakeName	(0X17358,	"DI_EOS_KV_EOSD_DFCO_DELAY");
	MakeWord	(0X1735E);
	MakeRptCmt	(0X17360,	"Minimum TPSThreshold below which the lean test will be disabled.\nPercent");
	MakeName	(0X17360,	"DI_EOS_KV_EOSD_LEAN_THROTTLE_LOW");
	MakeWord	(0X17366);
	MakeRptCmt	(0X17368,	"Maximum TPSThreshold above which the lean test will be disabled.\nPercent");
	MakeName	(0X17368,	"DI_EOS_KV_EOSD_LEAN_THROTTLE_HIGH");
	MakeWord	(0X1736E);
	MakeRptCmt	(0X17370,	"Delay time after the PE test enable criteria have been met before starting data collection for the PE test.\nSeconds");
	MakeName	(0X17370,	"DI_EOS_KV_EOSD_POWER_DELAY");
	MakeWord	(0X17376);
	MakeRptCmt	(0X17378,	"Minimum TPSThreshold below which the rich test will be disabled.\nPercent");
	MakeName	(0X17378,	"DI_EOS_KV_EOSD_RICH_THROTTLE_LOW");
	MakeWord	(0X1737E);
	MakeRptCmt	(0X17380,	"Maximum TPSThreshold above which the rich test will be disabled.\nPercent");
	MakeName	(0X17380,	"DI_EOS_KV_EOSD_RICH_THROTTLE_HIGH");
	MakeRptCmt	(0X17388,	"Above this speed, output driver diagnostics may be enabled.\nRPM");
	MakeWord	(0X17388);
	MakeName	(0X17388,	"DG_ODM_KE_OUTPUT_DRIVER_ENGINE_SPEED_TH");
	MakeByte	(0X1738A);
	MakeName	(0X1738A,	"DG_ODM_KV_SIDM_FAIL_COUNTER");
	MakeByte	(0X173A0);
	MakeName	(0X173A0,	"DG_ODM_KV_SIDM_SAMPLE_COUNTER");
	MakeByte	(0X173B6);
	MakeName	(0X173B6,	"DG_ODM_KV_ODM_FAIL_COUNTER");
	MakeByte	(0X173B7);
	MakeByte	(0X173B8);
	MakeByte	(0X173B9);
	MakeByte	(0X173BA);
	MakeByte	(0X173BC);
	MakeName	(0X173BC,	"DG_ODM_KV_ODM_SAMPLE_COUNTER");
	MakeByte	(0X173BD);
	MakeByte	(0X173BE);
	MakeByte	(0X173BF);
	MakeByte	(0X173C0);
	MakeByte	(0X173C2);
	MakeName	(0X173C2,	"DG_ODM_KV_MFD1_FAIL_COUNTER");
	MakeByte	(0X173C3);
	MakeByte	(0X173C4);
	MakeByte	(0X173C6);
	MakeName	(0X173C6,	"DG_ODM_KV_MFD1_SAMPLE_COUNTER");
	MakeByte	(0X173C7);
	MakeByte	(0X173C8);
	MakeRptCmt	(0X173C9,	"This is the fail counter cal for TFD diagnostics.\nSHORTCARD");
	MakeByte	(0X173C9);
	MakeName	(0X173C9,	"DG_ODM_KE_TFD_FAIL_COUNTER");
	MakeRptCmt	(0X173CA,	"This is the pass counter cal for TFD diagnostics.\nSHORTCARD");
	MakeByte	(0X173CA);
	MakeName	(0X173CA,	"DG_ODM_KE_TFD_SAMPLE_COUNTER");
	MakeWord	(0X173CC);
	MakeName	(0X173CC,	"DG_POS_KE_POSD_STAGE2_ENABLE_TIME_MIN");
	MakeRptCmt	(0X173CE,	"The number of post catalyst oxygen sensors in the system.\nUnitless");
	MakeByte	(0X173CE);
	MakeName	(0X173CE,	"DI_POS_KE_POSD_NUM_OF_POST_O2_SENSORS");
	MakeRptCmt	(0X173D0,	"The amount of time to wait during the lean intrusive test before considering the sensor failed.\nSeconds");
	MakeByte	(0X173D0);
	MakeName	(0X173D0,	"DI_POS_KV_POSD_LEAN_TIMER");
	MakeWord	(0X173D4);
	MakeRptCmt	(0X173D6,	"The voltage threshold below which the post catalyst oxygen sensor is considered to be in a lean state.\nMillivolts");
	MakeName	(0X173D6,	"DI_POS_KV_POSD_POST_O2_LEAN_THRESHOLD");
	MakeWord	(0X173D8);
	MakeRptCmt	(0X173DA,	"The voltage threshold above which the post catalyst oxygen sensor is considered to be in a rich state.\nMillivolts");
	MakeName	(0X173DA,	"DI_POS_KV_POSD_POST_O2_RICH_THRESHOLD");
	MakeWord	(0X173DC);
	MakeRptCmt	(0X173DE,	"The voltage threshold below which the pre-catalyst oxygen sensor is considered to be in a lean state.\nMillivolts");
	MakeName	(0X173DE,	"DI_POS_KV_POSD_PRE_O2_LEAN_THRESHOLD");
	MakeWord	(0X173E0);
	MakeRptCmt	(0X173E2,	"The voltage threshold above which the pre-catalyst oxygen sensor is considered to be in a rich state.\nMillivolts");
	MakeName	(0X173E2,	"DI_POS_KV_POSD_PRE_O2_RICH_THRESHOLD");
	MakeRptCmt	(0X173E6,	"The amount of time to wait during the rich intrusive test before considering the sensor failed.\nSeconds");
	MakeByte	(0X173E6);
	MakeName	(0X173E6,	"DI_POS_KV_POSD_RICH_TIMER");
	MakeRptCmt	(0X173EC,	"The maximum engine airflow above which the intrusive test is disabled.\nGrams_Per_Second");
	MakeWord	(0X173EC);
	MakeName	(0X173EC,	"DI_POS_KE_POSD_ENGINE_AIRFLOW_MAX");
	MakeRptCmt	(0X173EE,	"The minimum engine airflow below which the intrusive test is disabled.\nGrams_Per_Second");
	MakeWord	(0X173EE);
	MakeName	(0X173EE,	"DI_POS_KE_POSD_ENGINE_AIRFLOW_MIN");
}


static Bytes_6(void) {
        auto x;
#define id x

	MakeRptCmt	(0X173F0,	"Minimum engine running time before the time activated processes are run.\nSeconds");
	MakeWord	(0X173F0);
	MakeName	(0X173F0,	"DI_POS_KE_POSD_ENGINE_RUN_TIME_MIN");
	MakeRptCmt	(0X173F2,	"The maximum engine speed above which the intrusive test is disabled.\nRPM");
	MakeWord	(0X173F2);
	MakeName	(0X173F2,	"DI_POS_KE_POSD_ENGINE_SPEED_MAX");
	MakeRptCmt	(0X173F4,	"The minimum engine speed below which the intrusive test is disabled.\nRPM");
	MakeWord	(0X173F4);
	MakeName	(0X173F4,	"DI_POS_KE_POSD_ENGINE_SPEED_MIN");
	MakeRptCmt	(0X173F6,	"The A/F commanded  adjustment requested to force the fuel system lean during the intrusive test.\n0 - 32");
	MakeWord	(0X173F6);
	MakeName	(0X173F6,	"DI_POS_KE_POSD_LEAN_EQUIV_RATIO");
	MakeRptCmt	(0X173F8,	"The maximum number of intrusive tests to run during any one trip.\nSHORTCARD");
	MakeByte	(0X173F8);
	MakeName	(0X173F8,	"DI_POS_KE_POSD_NUM_STAGE2_TESTS");
	MakeRptCmt	(0X173F9,	"The number of adaptive (block learn) cells that can be configured to enable the response diagnostic in specific adaptive cells.\nSHORTCARD");
	MakeByte	(0X173F9);
	MakeName	(0X173F9,	"DI_POS_KE_POSD_NUMBER_OF_POST_LTM_CELLS");
	MakeRptCmt	(0X173FA,	"The A/F commanded  adjustment requested to force the fuel system rich during the intrusive test.\n0 - 32");
	MakeWord	(0X173FA);
	MakeName	(0X173FA,	"DI_POS_KE_POSD_RICH_EQUIV_RATIO");
	MakeRptCmt	(0X173FC,	"The minimum amount of time required for the system criteria to be stabilized before executing intrusive tests.\nSeconds");
	MakeWord	(0X173FC);
	MakeName	(0X173FC,	"DI_POS_KE_POSD_STAGE2_STABILIZATION_MIN");
	MakeRptCmt	(0X173FE,	"Determines if the fuel control will be commanded rich-to-lean or leasn-to-rich during the intrusive test.\nTest Order Type");
	MakeByte	(0X173FE);
	MakeName	(0X173FE,	"DI_POS_KE_POSD_STAGE2_TEST_ORDER");
	MakeRptCmt	(0X17400,	"The maximum vehicle speed above which the intrusive test is disabled.\nMPH");
	MakeWord	(0X17400);
	MakeName	(0X17400,	"DI_POS_KE_POSD_VEHICLE_SPEED_MAX");
	MakeRptCmt	(0X17402,	"The minimum vehicle speed below which the intrusive test is disabled.\nMPH");
	MakeWord	(0X17402);
	MakeName	(0X17402,	"DI_POS_KE_POSD_VEHICLE_SPEED_MIN");
	MakeRptCmt	(0X17404,	"Maximum short term integrator value above which the intrusive portion of the test will be disabled.\n0 - 2");
	MakeName	(0X17404,	"DI_POS_KV_POSD_CL_SHORT_TERM_INT_MAX");
	MakeByte	(0X17405);
	MakeRptCmt	(0X17406,	"Minimum short term integrator value below which the intrusive portion of the test will be disabled.\n0 - 2");
	MakeName	(0X17406,	"DI_POS_KV_POSD_CL_SHORT_TERM_INT_MIN");
	MakeByte	(0X17407);
	MakeRptCmt	(0X17408,	"A table of adaptive (block learn) cells in which to enable the post oxygen sensor tests.\nUnitless");
	MakeDword	(x=0X17408);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X17408,	"DI_POS_KV_POSD_POST_CELL_ENABLE");
	MakeRptCmt	(0X17420,	"Number of failed intermittent short to high tests within a sample size that will report a failure.\nFailures");
	MakeWord	(0X17420);
	MakeName	(0X17420,	"DG_TPS_KE_TPSD_INT_SHORT_HIGH_FAIL_LIM");
	MakeRptCmt	(0X17422,	"Number of intermittent short to high tests that make up a sample size.\nSamples");
	MakeWord	(0X17422);
	MakeName	(0X17422,	"DG_TPS_KE_TPSD_INT_SHORT_HIGH_SMPL_LIM");
	MakeRptCmt	(0X17424,	"Number of failed intermittent short to low tests within a sample size that will report a failure.\nFailures");
	MakeWord	(0X17424);
	MakeName	(0X17424,	"DG_TPS_KE_TPSD_INT_SHORT_LOW_FAIL_LIM");
	MakeRptCmt	(0X17426,	"Number of intermittent short to low tests that make up a sample size.\nSamples");
	MakeWord	(0X17426);
	MakeName	(0X17426,	"DG_TPS_KE_TPSD_INT_SHORT_LOW_SMPL_LIM");
	MakeRptCmt	(0X17428,	"The coolant value above which the TPS rationality diagnostic can be enabled.\nDegrees C");
	MakeWord	(0X17428);
	MakeName	(0X17428,	"DG_TPS_KE_TPSD_RAT_ECT_MIN");
	MakeRptCmt	(0X1742A,	"Ensures that the engine has reached stable operating conditions before enabling the TPS rationality diagnostic\nSeconds");
	MakeWord	(0X1742A);
	MakeName	(0X1742A,	"DG_TPS_KE_TPSD_RAT_ENG_RUN_TIME_MIN");
	MakeRptCmt	(0X1742C,	"Number of rationality failed tests within a sample size that  will report a failure.\nFailures");
	MakeWord	(0X1742C);
	MakeName	(0X1742C,	"DG_TPS_KE_TPSD_RAT_FAIL_LIM");
	MakeRptCmt	(0X1742E,	"Maximum MAP for TPS to be checked for rationality high failures.\nkPa");
	MakeWord	(0X1742E);
	MakeName	(0X1742E,	"DG_TPS_KE_TPSD_RAT_HIGH_MAP");
	MakeRptCmt	(0X17430,	"Minimum MAP for TPS to be checked for rationality low failures.\nkPa");
	MakeWord	(0X17430);
	MakeName	(0X17430,	"DG_TPS_KE_TPSD_RAT_LOW_MAP");
	MakeRptCmt	(0X17432,	"Maximum allowable MAP Delta over a test interval which can enable the TPS rationality diagnostic\nkPa");
	MakeWord	(0X17432);
	MakeName	(0X17432,	"DG_TPS_KE_TPSD_RAT_MAP_DELTA_MAX");
	MakeRptCmt	(0X17434,	"Minimum amount of time the delta MAP value must stay stable to enable the TPS rationality test.\nSeconds");
	MakeByte	(0X17434);
	MakeName	(0X17434,	"DG_TPS_KE_TPSD_RAT_MAP_STABLE_TIME");
	MakeRptCmt	(0X17436,	"Number of rationality tests that make up a sample size.\nSamples");
	MakeWord	(0X17436);
	MakeName	(0X17436,	"DG_TPS_KE_TPSD_RAT_SMPL_LIM");
	MakeRptCmt	(0X17438,	"Number ofNumber of failed short to high tests within a sample size that will report a failure.\nFailures");
	MakeWord	(0X17438);
	MakeName	(0X17438,	"DG_TPS_KE_TPSD_SHORT_HIGH_FAIL_LIM");
	MakeRptCmt	(0X1743A,	"Number of short to high tests that make up a sample size.\nSamples");
	MakeWord	(0X1743A);
	MakeName	(0X1743A,	"DG_TPS_KE_TPSD_SHORT_HIGH_SMPL_LIM");
	MakeRptCmt	(0X1743C,	"Number of short to low tests that make up a sample size.\nSamples");
	MakeWord	(0X1743C);
	MakeName	(0X1743C,	"DG_TPS_KE_TPSD_SHORT_LOW_FAIL_LIM");
	MakeRptCmt	(0X1743E,	"\n");
	MakeWord	(0X1743E);
	MakeName	(0X1743E,	"DG_TPS_KE_TPSD_SHORT_LOW_SMPL_LIM");
	MakeRptCmt	(0X17440,	"The threshold below which the throttle position sensor is considered opened or shorted to ground.\nPercent");
	MakeWord	(0X17440);
	MakeName	(0X17440,	"DG_TPS_KE_TPSD_SHORTED_HIGH_THRESH");
	MakeRptCmt	(0X17442,	"\n");
	MakeWord	(0X17442);
	MakeName	(0X17442,	"DG_TPS_KE_TPSD_SHORTED_LOW_THRESH");
	MakeRptCmt	(0X17444,	"A predicted TPS value based on RPM for the stuck high test.\nPercent");
	MakeWord	(0X17444);
	MakeName	(0X17444,	"DG_TPS_KV_TPSD_PREDICTED_TPS_HIGH_TEST");
	MakeRptCmt	(0X17464,	"A predicted TPS value based on RPM for the stuck low test.\nPercent");
	MakeWord	(0X17464);
	MakeName	(0X17464,	"DG_TPS_KV_TPSD_PREDICTED_TPS_LOW_TEST");
	MakeDword	(x=0X17466);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeRptCmt	(0X17484,	"Engine run time which must be exceeded to test code 562.\nSeconds");
	MakeDword	(x=0X17484);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X17484,	"DG_VOLT_KE_IGN_VOLT_LOW_ENGINE_RUN_TIME");
	MakeRptCmt	(0X17488,	"Minimum engine speed below which code 562 will not test.\nRPM");
	MakeWord	(0X17488);
	MakeName	(0X17488,	"DG_VOLT_KE_IGN_VOLT_LOW_ENGINE_SPEED");
	MakeRptCmt	(0X1748A,	"Minimum vehicle speed below which code 562 will not test.\nMPH");
	MakeWord	(0X1748A);
	MakeName	(0X1748A,	"DG_VOLT_KE_IGN_VOLT_LOW_VEHICLE_SPEED");
	MakeRptCmt	(0X1748C,	"Ignition voltage above which failure conditions have been met, and the Fail counter will be incremented.\nVolts");
	MakeWord	(0X1748C);
	MakeName	(0X1748C,	"DG_VOLT_KE_IGN_VOLTAGE_HIGH");
	MakeRptCmt	(0X1748E,	"Fail counter above which code 563 will be set.\nCounts");
	MakeByte	(0X1748E);
	MakeName	(0X1748E,	"DG_VOLT_KE_IGN_VOLTAGE_HIGH_FAIL_COUNT");
	MakeRptCmt	(0X1748F,	"Sample counter above which a pass will be indicated if Fail counter is not exceeded.\nCounts");
	MakeByte	(0X1748F);
	MakeName	(0X1748F,	"DG_VOLT_KE_IGN_VOLTAGE_HIGH_SAMPLE_COUNT");
	MakeRptCmt	(0X17490,	"Ignition voltage below which failure conditions have been met and the Fail Counter will be incremented.\nVolts");
	MakeWord	(0X17490);
	MakeName	(0X17490,	"DG_VOLT_KE_IGN_VOLTAGE_LOW");
	MakeRptCmt	(0X17492,	"Fail counter above which code 562 will be set.\nCounts");
	MakeByte	(0X17492);
	MakeName	(0X17492,	"DG_VOLT_KE_IGN_VOLTAGE_LOW_FAIL_COUNT");
	MakeRptCmt	(0X17493,	"Sample counter above which a pass will be indicated if Fail counter is not exceeded.\nCounts");
	MakeByte	(0X17493);
	MakeName	(0X17493,	"DG_VOLT_KE_IGN_VOLTAGE_LOW_SAMPLE_COUNT");
	MakeRptCmt	(0X17494,	"Time that V5B1 voltage has to be wrong for a fault to set.\nSeconds");
	MakeWord	(0X17494);
	MakeName	(0X17494,	"DG_VOLT_KE_V5B1_VOLTAGE_FAULT_TIMER");
	MakeRptCmt	(0X17496,	"Time that V5B2 voltage has to be wrong for a fault to set.\nSeconds");
	MakeWord	(0X17496);
	MakeName	(0X17496,	"DG_VOLT_KE_V5B2_VOLTAGE_FAULT_TIMER");
	MakeRptCmt	(0X17498,	"Threshold above which fuel will be cut off to all cylinders.\nRPM");
	MakeWord	(0X17498);
	MakeName	(0X17498,	"DI_CASE_KE_CASE_FUEL_CUTOFF_THRESHOLD");
	MakeRptCmt	(0X1749A,	"RPM above the KE_CASE_Fuel_Cutoff_Threshold which the ETC governor will limit engine speed to when CASE learn is in progress.\nRPM");
	MakeWord	(0X1749A);
	MakeName	(0X1749A,	"DI_CASE_KE_CASE_ETC_ENG_SPD_LIMIT_OFFSET");
	MakeRptCmt	(0X1749C,	"Engine speed below which crank error data collection and intrusive fuel control are disabled.\nRPM");
	MakeWord	(0X1749C);
	MakeName	(0X1749C,	"DI_CASE_KE_CASE_LOWER_RPM_THRESHOLD");
	MakeRptCmt	(0X1749E,	"Engine speed at which to begin the crank error calculation.\nRPM");
	MakeWord	(0X1749E);
	MakeName	(0X1749E,	"DI_CASE_KE_CASE_UPPER_RPM_THRESHOLD");
	MakeRptCmt	(0X174A0,	"Engine speed hysteresis for enabling crank error learning.\nRPM");
	MakeWord	(0X174A0);
	MakeName	(0X174A0,	"DI_CASE_KE_CASE_ENGINE_SPEED_HYSTERESIS");
	MakeRptCmt	(0X174A2,	"Minimum coolant temperature to allow learning of Crank Angle Sensing Error.\nDegrees_");
	MakeWord	(0X174A2);
	MakeName	(0X174A2,	"DI_CASE_KE_CASE_COOLANT_TEMP_ENABLE");
	MakeRptCmt	(0X174A4,	"Maximum number of times the system will attempt to learn the crank errors in one key cycle.\nCounts");
	MakeByte	(0X174A4);
	MakeName	(0X174A4,	"DI_CASE_KE_CASE_ATTEMPTS_TO_LEARN_MAX");
	MakeRptCmt	(0X174A6,	"Modifies the total air threshold for variations in the ethanol composition.\nMult_0to2");
	MakeWord	(0X174A6);
	MakeName	(0X174A6,	"DI_ECTR_KV_ECTR_ETH_COMPENSATION");
	MakeRptCmt	(0X174B0,	"The number of rationality tests or stabilized engine coolant temperature levels that will be checked.\nUnitless");
	MakeWord	(0X174B0);
	MakeName	(0X174B0,	"DI_ECTR_KE_ECTR_NUM_OF_TEMP_TESTS");
	MakeRptCmt	(0X174B2,	"Minimum coolant temperature value to be considered passing the associated rationality test.\nDegrees_C");
	MakeName	(0X174B2,	"DI_ECTR_KV_ECTR_MIN_STABILIZED_ECT_TEMP");
	MakeWord	(0X174B4);
	MakeRptCmt	(0X174B6,	"Defines the fault code associated with the rationality test index.\nPCodes");
	MakeName	(0X174B6,	"DI_ECTR_KV_ECTR_DTCS");
	MakeRptCmt	(0X174BA,	"Power up coolant temperature-related portion of the calculated minimum total air threshold.\nGramsOfAir");
	MakeName	(0X174BA,	"DI_ECTR_KA_ECTR_TTL_AIR_GRAMS_AT_PWRUP");
	MakeWord	(0X174E4);
	MakeName	(0X174E6,	"DI_ECTR_KV_ECTR_MIN_TRIP_DISTANCE");
	MakeByte	(0X174E9);
	MakeRptCmt	(0X174EA,	"Used to calculate the heat loss portion of the minimum total air threshold.\nGramsOfAir");
	MakeWord	(0X174EA);
	MakeName	(0X174EA,	"DI_ECTR_KV_ECTR_HEAT_LOSS_COEF");
	MakeRptCmt	(0X174EC,	"Maximum powerup coolant temperature value that will enable the associated rationality test.\nDegrees_C");
	MakeName	(0X174EC,	"DI_ECTR_KV_ECTR_MAX_POWERUP_ECT");
	MakeWord	(0X174EE);
	MakeRptCmt	(0X174F0,	"Minimum average engine airflow rate to renable reporting a failure condition.\nGramsPerSec");
	MakeName	(0X174F0,	"DI_ECTR_KV_ECTR_MIN_AIR_GRAMS_PER_SEC");
	MakeRptCmt	(0X174F4,	"Compensation factor to modify the expected MAP change based on ethanol content.\nMult_0to2");
	MakeWord	(0X174F4);
	MakeName	(0X174F4,	"DI_EGRQ_KV_EGRF_ETH_COMP_MULTIPLIER");
	MakeRptCmt	(0X174FE,	"First order filter coefficient for percent pintle opening during EGRF high speed mode.\nSeconds");
	MakeWord	(0X174FE);
	MakeName	(0X174FE,	"DI_EGRQ_KE_EGR_HS_POSITION_FILTER");
	MakeName	(0X17500,	"DI_EGRQ_KA_EGRF_MNRPM_MAP_CHANGE_THRESH");
	MakeName	(0X17584,	"DI_EGRQ_KA_EGRF_STRPM_MAP_CHANGE_THRESH");
	MakeRptCmt	(0X175EA,	"Used in defining the RPM range for KA_EGRF_StRPM_MAP_ Change_Thresh and KA_EGRF_MnRPM_MAP_Change_Thresh.\nRPM");
	MakeWord	(0X175EA);
	MakeName	(0X175EA,	"DI_EGRQ_KE_EGRF_RPM_OFFSET");
	MakeRptCmt	(0X175EC,	"Amount of time the test is in the TEST_STARTED mode.\nSeconds");
	MakeByte	(0X175EC);
	MakeName	(0X175EC,	"DI_EGRQ_KE_EGRF_STARTED_TIME");
	MakeRptCmt	(0X175EE,	"The ethanol percentage at which the EGR diagnostic will be disabled.\nPercent");
	MakeWord	(0X175EE);
	MakeName	(0X175EE,	"DI_EGRQ_KE_EGRF_ETHANOL_DISABLE_PERCENT");
	MakeRptCmt	(0X175F0,	"Minimum amount of time since a DFCO change before EGR considers DFCO stable.\nSeconds");
	MakeWord	(0X175F0);
	MakeName	(0X175F0,	"DI_EGRQ_KE_EGRF_DFCO_STABLE_TIME");
	MakeRptCmt	(0X175F2,	"Maximum vehicle speed allowed to run test.\nMPH");
	MakeWord	(0X175F2);
	MakeName	(0X175F2,	"DI_EGRQ_KE_EGRF_VEHICLE_SPEED_MAXIMUM");
	MakeRptCmt	(0X175F4,	"Minimum vehicle speed allowed to run test.\nMPH");
	MakeWord	(0X175F4);
	MakeName	(0X175F4,	"DI_EGRQ_KE_EGRF_VEHICLE_SPEED_MINIMUM");
	MakeRptCmt	(0X175F6,	"Minimum engine speed allowed to run test.\nRPM");
	MakeWord	(0X175F6);
	MakeName	(0X175F6,	"DI_EGRQ_KE_EGRF_ENGINE_STALL_RPM");
	MakeRptCmt	(0X175F8,	"Maximum coolant temperature allowed to run test.\nDegrees C");
	MakeWord	(0X175F8);
	MakeName	(0X175F8,	"DI_EGRQ_KE_EGRF_COOLANT_TEMP_MAXIMUM");
	MakeRptCmt	(0X175FA,	"Minimum coolant temperature allowed to run test.\nDegrees C");
	MakeWord	(0X175FA);
	MakeName	(0X175FA,	"DI_EGRQ_KE_EGRF_COOLANT_TEMP_MINIMUM");
	MakeRptCmt	(0X175FC,	"Maximum vehicle manifold air temperature allowed to run test\nDegrees C");
	MakeWord	(0X175FC);
	MakeName	(0X175FC,	"DI_EGRQ_KE_EGRF_IAT_MAXIMUM");
	MakeRptCmt	(0X175FE,	"Minimum vehicle manifold air temperature allowed to run test\nDegrees C");
	MakeWord	(0X175FE);
	MakeName	(0X175FE,	"DI_EGRQ_KE_EGRF_IAT_MINIMUM");
	MakeRptCmt	(0X17600,	"Maximum ignition voltage allowed to run test.\nVolts");
	MakeWord	(0X17600);
	MakeName	(0X17600,	"DI_EGRQ_KE_EGRF_IGNITION_VOLTAGE_MAX");
	MakeRptCmt	(0X17602,	"Minimum ignition voltage allowed to run test.\nVolts");
	MakeWord	(0X17602);
	MakeName	(0X17602,	"DI_EGRQ_KE_EGRF_IGNITION_VOLTAGE_MIN");
	MakeRptCmt	(0X17604,	"Maximum changes of IAC steps allowed while common enableconditions are met.\nSteps");
	MakeWord	(0X17604);
	MakeName	(0X17604,	"DI_EGRQ_KE_EGRF_IAC_POSITION_DELTA_MAX");
	MakeRptCmt	(0X17606,	"Maximum changes of IAC area for ETC allowed while common enableconditions are met.\nMillimeters_Squared");
	MakeWord	(0X17606);
	MakeName	(0X17606,	"DI_EGRQ_KE_EGRF_IDLE_AREA_DELTA_MAX");
	MakeRptCmt	(0X17608,	"Indication of desire to freeze the purge duty cycle duringcertain test intervals.\nTRUE/FALSE");
	MakeWord	(0X17608);
	MakeName	(0X17608,	"DI_EGRQ_KE_EGRF_PURGE_FREEZE");
	MakeRptCmt	(0X1760A,	"The desired EGR duty cycle value.\nPercent");
	MakeName	(0X1760A,	"DI_EGRQ_KV_EGRF_DUTY_CYCLE");
	MakeByte	(0X1761B);
	MakeByte	(0X17629);
	MakeRptCmt	(0X1762A,	"Coefficient applied to each 'Idle' Long Term Target used FOR this diagnostic.\nNONE 0-2");
	MakeDword	(x=0X1762A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X1762A,	"DI_FUEL_TRIM_KV_FTRM_LONG_TERM_IDLE_COEFF");
	MakeRptCmt	(0X1764C,	"Number of 'Off Idle' cells used in this diagnostic.\nCells");
	MakeByte	(0X1764C);
	MakeName	(0X1764C,	"DI_FUEL_TRIM_KE_FTRM_NUMBER_OF_OFF_IDLE_CELLS");
	MakeByte	(0X1764D);
	MakeRptCmt	(0X1764E,	"Indicates for which Adaptive Regions to use the Long Term Target for this diagnostic.\nRegion");
	MakeDword	(x=0X1764E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X1764E,	"DI_FUEL_TRIM_KV_FTRM_OFF_IDLE_CELLS_TO_AVG");
	MakeRptCmt	(0X1765E,	"Used as a modifier to the PLM multiplier for FTRM diagnostics.\n0_to_1");
	MakeWord	(0X1765E);
	MakeName	(0X1765E,	"DI_FUEL_TRIM_KE_FTRM_ENABLE_PLM_MODIFIER");
	MakeRptCmt	(0X17660,	"Number of Idle Cells the system is calibrated to use FOR this diagnostic.\nCells");
	MakeByte	(0X17660);
	MakeName	(0X17660,	"DI_FUEL_TRIM_KE_FTRM_NUMBER_OF_IDLE_CELLS");
	MakeByte	(0X17661);
	MakeRptCmt	(0X17662,	"Indicates for which adaptive regions the Long Term Target should be used for this diagnostic.\nRegion");
	MakeName	(0X17662,	"DI_FUEL_TRIM_KV_FTRM_IDLE_CELLS_TO_AVG");
	MakeRptCmt	(0X1766A,	"Initialize idle fuel trim data to that indicated in this region.\nRegion");
	MakeName	(0X1766A,	"DI_FUEL_TRIM_KE_FTRM_DEFAULT_IDLE_CELL");
	MakeRptCmt	(0X1766C,	"If TRUE is specified for the indexed fault group, then any active fault within that group will inhibit FTRM diagnostic.\nBoolean");
	MakeDword	(0X1766C);
	MakeName	(0X1766C,	"DI_FUEL_TRIM_KE_FTRM_DIAG_INHIBITING_FAULTS");
	MakeRptCmt	(0X17670,	"Coolant temperature must be > this to enable diagnostic.\nDegrees_C");
	MakeWord	(0X17670);
	MakeName	(0X17670,	"DI_FUEL_TRIM_KE_FTRM_COOLANT_TEMP_LOW");
	MakeRptCmt	(0X17672,	"Coolant temperature must be < this to enable diagnostic.\nDegrees_C");
	MakeWord	(0X17672);
	MakeName	(0X17672,	"DI_FUEL_TRIM_KE_FTRM_COOLANT_TEMP_HIGH");
	MakeRptCmt	(0X17674,	"Manifold air temperature must be > this to enable diagnostic.\nDegrees_C");
	MakeWord	(0X17674);
	MakeName	(0X17674,	"DI_FUEL_TRIM_KE_FTRM_MAT_LOW");
	MakeRptCmt	(0X17676,	"Manifold air temperature must be < this to enable diagnostic.\nDegrees_C");
	MakeWord	(0X17676);
	MakeName	(0X17676,	"DI_FUEL_TRIM_KE_FTRM_MAT_HIGH");
	MakeRptCmt	(0X17678,	"Manifold absolute pressure must be > this to enable diagnostic.\nkPa");
	MakeWord	(0X17678);
	MakeName	(0X17678,	"DI_FUEL_TRIM_KE_FTRM_MAP_LOW");
	MakeRptCmt	(0X1767A,	"Manifold absolute pressure must be < this to enable diagnostic.\nkPa");
	MakeWord	(0X1767A);
	MakeName	(0X1767A,	"DI_FUEL_TRIM_KE_FTRM_MAP_HIGH");
	MakeRptCmt	(0X1767C,	"Engine air flow must be > this to enable diagnostic.\ngm/s");
	MakeWord	(0X1767C);
	MakeName	(0X1767C,	"DI_FUEL_TRIM_KE_FTRM_ENGINE_AIR_FLOW_LOW");
	MakeRptCmt	(0X1767E,	"Engine air flow must be < this to enable diagnostic.\ngm/s");
	MakeWord	(0X1767E);
	MakeName	(0X1767E,	"DI_FUEL_TRIM_KE_FTRM_ENGINE_AIR_FLOW_HIGH");
	MakeWord	(0X17680);
	MakeName	(0X17680,	"DI_FUEL_TRIM_KE_FTRM_PURGE_TEST_TMR_OFFSET_DC");
	MakeRptCmt	(0X17682,	"Engine speed must be > this to enable diagnostic.\nRPM");
	MakeWord	(0X17682);
	MakeName	(0X17682,	"DI_FUEL_TRIM_KE_FTRM_RPM_LOW");
	MakeRptCmt	(0X17684,	"Engine speed must be < this to enable diagnostic.\nRPM");
	MakeWord	(0X17684);
	MakeName	(0X17684,	"DI_FUEL_TRIM_KE_FTRM_RPM_HIGH");
	MakeRptCmt	(0X17686,	"Vehicle speed must be < this to enable diagnostic.\nMPH");
	MakeWord	(0X17686);
	MakeName	(0X17686,	"DI_FUEL_TRIM_KE_FTRM_VEHICLE_SPEED_HIGH");
	MakeRptCmt	(0X17688,	"Throttle position (opening) must be < this to enable diagnostic.\nPercent");
	MakeName	(0X17688,	"DI_FUEL_TRIM_KE_FTRM_TPS_HIGH");
	MakeRptCmt	(0X1768A,	"Barometric pressure must be > this to enable diagnostic.\nkPa");
	MakeWord	(0X1768A);
	MakeName	(0X1768A,	"DI_FUEL_TRIM_KE_FTRM_BAROMETER_LOW");
	MakeWord	(0X1768C);
	MakeName	(0X1768C,	"DI_FUEL_TRIM_KE_FTRM_FUEL_LEVEL_MIN");
	MakeWord	(0X1768E);
	MakeName	(0X1768E,	"DI_FUEL_TRIM_KE_FTRM_FUEL_LEVEL_LOW_TIME");
	MakeRptCmt	(0X17690,	"Engine Speed must be > this to run the Excess Purge Test.\nRPM");
	MakeWord	(0X17690);
	MakeName	(0X17690,	"DI_FUEL_TRIM_KE_FTRM_PURGE_RPM_MIN");
	MakeRptCmt	(0X17692,	"Engine Airflow must be > this to run the Excess Purge Test.\ngm/S");
	MakeWord	(0X17692);
	MakeName	(0X17692,	"DI_FUEL_TRIM_KE_FTRM_ENG_AIRFLOW_LOW");
	MakeRptCmt	(0X17694,	"Engine Airflow < this to run the Excess Purge Test.\ngm/S");
	MakeWord	(0X17694);
	MakeName	(0X17694,	"DI_FUEL_TRIM_KE_FTRM_ENG_AIRFLOW_HIGH");
	MakeRptCmt	(0X17696,	"This much time must be spent in the current  adaptive index region before the Excess Purge Test can be run.\nSeconds");
	MakeName	(0X17696,	"DI_FUEL_TRIM_KV_FTRM_INDEX_OPER_TIME");
	MakeWord	(0X176B4);
	MakeRptCmt	(0X176B6,	"This much time must be spent in the current adaptive index region before the Excess Purge Test can report a pass.\nSeconds");
	MakeName	(0X176B6,	"DI_FUEL_TRIM_KV_FTRM_PR_INDEX_OPER_TIME");
	MakeWord	(0X176D6);
	MakeName	(0X176D6,	"DI_FUEL_TRIM_KV_FTRM_PURGE_LONG_TERM_DELTA");
	MakeWord	(0X176E0);
	MakeName	(0X176E0,	"DI_FUEL_TRIM_KV_FTRM_PURGE_SHORT_TERM_DELTA");
	MakeRptCmt	(0X176EA,	"Intrusive Excess Purge Test lasts this long.\nSeconds");
	MakeWord	(0X176EA);
	MakeName	(0X176EA,	"DI_FUEL_TRIM_KE_FTRM_EXCESS_PURGE_TEST_TIME");
	MakeRptCmt	(0X176EC,	"The amount of time to delay the delta calculation once the excess purge test timer begins incrementing.\nSeconds");
	MakeWord	(0X176EC);
	MakeName	(0X176EC,	"DI_FUEL_TRIM_KE_FTRM_EXCESS_PURGE_DELTA_DELAY");
	MakeRptCmt	(0X176EE,	"Amount of time to wait for integrals to correct before enabling purge test.\nSeconds");
	MakeWord	(0X176EE);
	MakeName	(0X176EE,	"DI_FUEL_TRIM_KE_FTRM_PURGE_CNTRL_STABLE_WINDO");
	MakeRptCmt	(0X176F0,	"NON-Intrusive Excess Purge Test lasts this long.\nSeconds");
	MakeWord	(0X176F0);
	MakeName	(0X176F0,	"DI_FUEL_TRIM_KE_FTRM_PURGE_WAIT_LIMIT");
	MakeRptCmt	(0X176F2,	"Purge Ducty Cycle must be >= this to make Excess Purge Test intrusive.\nPercent");
	MakeWord	(0X176F2);
	MakeName	(0X176F2,	"DI_FUEL_TRIM_KE_FTRM_PURGE_DUTY_CYCLE_MIN");
	MakeRptCmt	(0X176F4,	"Purge Ducty Cycle is set to this to shut of CCP.\nPercent");
	MakeName	(0X176F4,	"DI_FUEL_TRIM_KV_FTRM_CCP_SHUT_OFF_DUTY_CYCLE");
	MakeRptCmt	(0X17716,	"Threshold where the long term fuel trim average is failing due to lean fueling at a given level of ethanol in the fuel.\nNONE 0-2");
	MakeWord	(0X17716);
	MakeName	(0X17716,	"DI_FUEL_TRIM_KV_FTRM_LONG_TERM_TRIM_LEAN");
	MakeRptCmt	(0X17720,	"Threshold where the long term fuel trim average is failing due to rich fueling at a given level of ethanol in the fuel.\nNONE 0-2");
	MakeWord	(0X17720);
	MakeName	(0X17720,	"DI_FUEL_TRIM_KV_FTRM_LONG_TERM_TRIM_RICH");
	MakeWord	(0X17728);
	MakeName	(0X1772A,	"DI_FUEL_TRIM_KV_FTRM_IDLE_CELL_OPER_TIME_MIN");
	MakeDword	(x=0X1773A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X1773A,	"DI_FUEL_TRIM_KV_FTRM_MAX_PURGE_FLOW");
	MakeRptCmt	(0X1775C,	"Threshold of accumulated purge flow required to reduce the excess purge vapor condition before continuing testing\nGrams");
	MakeWord	(0X1775C);
	MakeName	(0X1775C,	"DI_FUEL_TRIM_KE_FTRM_ACCUM_PURGE_THRESHOLD");
	MakeRptCmt	(0X1775E,	"Threshold multiplier to compensate for the variation of excess purge vapor generation due to temperature.\nMultiplier_0_to_2");
	MakeName	(0X1775E,	"DI_FUEL_TRIM_KV_FTRM_THRESHOLD_TEMP_MULT");
	MakeRptCmt	(0X1777E,	"Minimum purge duty cycle value to begin the excess purge test and where purge valve is considered open.\nPercent");
	MakeWord	(0X1777E);
	MakeName	(0X1777E,	"DI_FUEL_TRIM_KE_FTRM_PURGE_OPEN_MIN");
	MakeRptCmt	(0X17780,	"Integral delay value to be used for the short term learn when FTRM requests override.\nSeconds");
	MakeWord	(0X17780);
	MakeName	(0X17780,	"DI_FUEL_TRIM_KE_FTRM_FUEL_TRIM_UPDATE_RATE");
	MakeRptCmt	(0X17782,	"The percent change to the average Fuel during A/F transition period 1 to cause a lean state.\nPercent");
	MakeName	(0X17782,	"DI_ICAT_KA_CAT_AFT1_FUEL_OFFSET_LEAN");
	MakeRptCmt	(0X177C6,	"The percent change to the average Fuel during A/F transition period 1 to cause a rich state.\nPercent");
	MakeName	(0X177C6,	"DI_ICAT_KA_CAT_AFT1_FUEL_OFFSET_RICH");
	MakeRptCmt	(0X1780A,	"The percent change added to the average Fuel during A/F transition period 2 to cause a lean state.\nPercent");
	MakeName	(0X1780A,	"DI_ICAT_KA_CAT_AFT2_FUEL_OFFSET_LEAN");
	MakeRptCmt	(0X1784E,	"The percent change added to the average Fuel during A/F transition period 2 to cause a rich state.\nPercent");
	MakeName	(0X1784E,	"DI_ICAT_KA_CAT_AFT2_FUEL_OFFSET_RICH");
	MakeWord	(0X17890);
	MakeRptCmt	(0X17892,	"Maximum allowed time for the post-catalyst O2 sensor to reach a stabilized voltage during the first air/fuel transition period.\nSeconds");
	MakeName	(0X17892,	"DI_ICAT_KV_CAT_AFT1_POST_RESP_TIME_MAX");
	MakeWord	(0X17894);
	MakeRptCmt	(0X17896,	"Maximum allowed time for the pre-catalyst O2 sensor to reach a stabilized voltage during the first air/fuel transition period.\nSeconds");
	MakeName	(0X17896,	"DI_ICAT_KV_CAT_AFT1_PRE_RESP_TIME_MAX");
	MakeWord	(0X17898);
	MakeRptCmt	(0X1789A,	"Maximum allowed time for the pre-catalyst O2 sensor to reach a stabilized voltage during the second air/fuel transition period.\nSeconds");
	MakeName	(0X1789A,	"DI_ICAT_KV_CAT_AFT2_PRE_RESP_TIME_MAX");
	MakeWord	(0X1789C);
	MakeName	(0X1789E,	"DI_ICAT_KV_CAT_CATALYTIC_CONVERTERS");
	MakeWord	(0X178A0);
	MakeRptCmt	(0X178A2,	"Minimum difference value to fail test if test is currently not failing.\nSeconds");
	MakeName	(0X178A2,	"DI_ICAT_KV_CAT_EWMA_THRESH_HIGH");
	MakeWord	(0X178A4);
	MakeRptCmt	(0X178A6,	"The minimum diff value to trigger the rapid step response test.\nSeconds");
	MakeByte	(0X178A6);
	MakeArray	(0X178A6,	0X2);
	MakeName	(0X178A6,	"DI_ICAT_KV_CAT_MIN_DIFF_TO_ENABLE_RSR");
	MakeWord	(0X178A8);
	MakeName	(0X178AA,	"DI_ICAT_KV_CAT_MIN_OSC_STEP_FOR_RSR");
	MakeWord	(0X178AC);
	MakeName	(0X178AE,	"DI_ICAT_KV_CAT_MIN_RSR_EWMA");
	MakeWord	(0X178B0);
	MakeRptCmt	(0X178B2,	"Maximum time difference in stage 1 to report a pass immediately to the executive.\nSeconds");
	MakeName	(0X178B2,	"DI_ICAT_KV_CAT_OSC_STG1_FAIL_THRESH");
	MakeWord	(0X178B4);
	MakeRptCmt	(0X178B6,	"Worst acceptable( lowest time ) oxygen storage time measurement to pass.\nSeconds");
	MakeName	(0X178B6,	"DI_ICAT_KV_CAT_OSC_WORST_PASS_THRESH");
	MakeRptCmt	(0X178BA,	"Required time for Fan1 and Fan2 state to remain unchanged.\nSeconds");
	MakeWord	(0X178BA);
	MakeName	(0X178BA,	"DI_ICAT_KE_CAT_FAN_STABLE_TIME");
	MakeRptCmt	(0X178BC,	"Maximum time allowed to hold the Fan1 state on.\nSeconds");
	MakeWord	(0X178BC);
	MakeName	(0X178BC,	"DI_ICAT_KE_FAN1_ON_EXTENDED_TIME_MAX");
	MakeRptCmt	(0X178BE,	"Enables the control of Fan1 Held-On feature to make conditions favorable for the Idle CAT Monitor Diagnostic to complete.\nBOOLEAN");
	MakeByte	(0X178BE);
	MakeName	(0X178BE,	"DI_ICAT_KE_CAT_CONTROLS_FAN1");
	MakeRptCmt	(0X178BF,	"The number of catalytic converters to diagnose.\nUnitless");
	MakeByte	(0X178BF);
	MakeName	(0X178BF,	"DI_ICAT_KE_CAT_NUM_CATALYST_TO_DIAGNOSE");
	MakeRptCmt	(0X178C0,	"The number of fuel control banks to loop during each process.\nUnitless");
	MakeByte	(0X178C0);
	MakeName	(0X178C0,	"DI_ICAT_KE_CAT_NUM_FUEL_CONTROL_BANKS");
	MakeName	(0X178C2,	"DI_ICAT_KA_CAT_1_COMP_LEAN_TO_RICH");
	MakeName	(0X17964,	"DI_ICAT_KA_CAT_1_COMP_RICH_TO_LEAN");
	MakeName	(0X17A06,	"DI_ICAT_KA_CAT_2_COMP_LEAN_TO_RICH");
	MakeName	(0X17AA8,	"DI_ICAT_KA_CAT_2_COMP_RICH_TO_LEAN");
	MakeRptCmt	(0X17B4A,	"Voltage level below which O2 output is considered to be leanfor switch summming\nMillivolts");
	MakeWord	(0X17B4A);
	MakeName	(0X17B4A,	"DI_ICAT_KE_ICAT_O2_VOLT_THRESHOLD");
	MakeRptCmt	(0X17B4C,	"Minimum number of O2 sensor voltage switches to completesumming.\nUnitless");
	MakeByte	(0X17B4C);
	MakeName	(0X17B4C,	"DI_ICAT_KE_ICAT_MIN_NUM_O2_SWITCHES");
	MakeRptCmt	(0X17B4E,	"Maximum time to allow switch summing process\nSeconds");
	MakeWord	(0X17B4E);
	MakeName	(0X17B4E,	"DI_ICAT_KE_ICAT_MAX_O2_SWITCH_TIME");
	MakeRptCmt	(0X17B50,	"Used to allow a stable idle to be measured before fuel controlis requested\nSeconds");
	MakeWord	(0X17B50);
	MakeName	(0X17B50,	"DI_ICAT_KE_ICAT_MIN_O2_SWITCH_TIME");
	MakeRptCmt	(0X17B52,	"Required time for AC clutch state to remain unchanged.\nSeconds");
	MakeWord	(0X17B52);
	MakeName	(0X17B52,	"DI_ICAT_KE_CAT_AC_CLUTCH_IS_STABLE_TIME");
	MakeRptCmt	(0X17B54,	"Maximum time allowed to hold AC Clutch disengaged.\nSeconds");
	MakeWord	(0X17B54);
	MakeName	(0X17B54,	"DI_ICAT_KE_CAT_AC_OFF_EXTEND_TIME_MAX");
	MakeByte	(0X17B56);
	MakeName	(0X17B56,	"DI_ICAT_KE_CAT_CONTROLS_AC");
	MakeRptCmt	(0X17B57,	"Maximum number of test attempts this trip.\nUnitless");
	MakeByte	(0X17B57);
	MakeName	(0X17B57,	"DI_ICAT_KE_CAT_ATTEMPTS_THIS_TRIP_MAX");
	MakeRptCmt	(0X17B58,	"Minimum barometric pressure value to enable the catalyst test at idle.\nkPa");
	MakeWord	(0X17B58);
	MakeName	(0X17B58,	"DI_ICAT_KE_CAT_BAROMETRIC_PRESSURE_MIN");
	MakeRptCmt	(0X17B5A,	"Maximum acceptable converter temperature value.\nDegrees_C");
	MakeWord	(0X17B5A);
	MakeName	(0X17B5A,	"DI_ICAT_KE_CAT_CONVERTER_TEMP_MAX");
	MakeRptCmt	(0X17B5C,	"Maximum coolant Temperature value to enable the catalyst test at idle.\nDegrees_C");
	MakeWord	(0X17B5C);
	MakeName	(0X17B5C,	"DI_ICAT_KE_CAT_COOLANT_TEMP_MAX");
	MakeRptCmt	(0X17B5E,	"Minimum coolant temperature value to enable the catalyst test at idle.\nDegrees_C");
	MakeWord	(0X17B5E);
	MakeName	(0X17B5E,	"DI_ICAT_KE_CAT_COOLANT_TEMP_MIN");
	MakeWord	(0X17B60);
	MakeName	(0X17B60,	"DI_ICAT_KE_CAT_DESIRED_IDLE_RPM_DROP_MAX");
	MakeWord	(0X17B62);
	MakeName	(0X17B62,	"DI_ICAT_KE_CAT_DESIRED_IDLE_RPM_GAIN_MAX");
	MakeRptCmt	(0X17B64,	"Minimum time from engine start before stabilized conditions are met.\nSeconds");
	MakeDword	(x=0X17B64);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X17B64,	"DI_ICAT_KE_CAT_ENGINE_RUN_TIME_MIN");
	MakeRptCmt	(0X17B68,	"Maximum change in desired idle effective area per 12.5 ms period.\nMillimeters_Squared");
	MakeWord	(0X17B68);
	MakeName	(0X17B68,	"DI_ICAT_KE_CAT_IDLE_EFF_AREA_MAX");
	MakeRptCmt	(0X17B6A,	"Maximum airflow value for closed loop stability.\ngm_per_sec");
	MakeByte	(0X17B6A);
	MakeName	(0X17B6A,	"DI_ICAT_KE_CAT_IDLE_AIRFLOW_MAX");
	MakeRptCmt	(0X17B6B,	"Minimum airflow value for closed loop stability.\ngm_per_sec");
	MakeByte	(0X17B6B);
	MakeName	(0X17B6B,	"DI_ICAT_KE_CAT_IDLE_AIRFLOW_MIN");
	MakeRptCmt	(0X17B6C,	"Maximum amount of idle time to enable the catalyst test at idle. A max value in this cal will never check the idle time limit,\nSeconds");
	MakeWord	(0X17B6C);
	MakeName	(0X17B6C,	"DI_ICAT_KE_CAT_EXCESS_IDLE_TIME_LIMIT");
	MakeRptCmt	(0X17B6E,	"Maximum Throttle position value to consider the vehicle idling.\nPercent");
	MakeWord	(0X17B6E);
	MakeName	(0X17B6E,	"DI_ICAT_KE_CAT_IDLE_TPS_MAX");
	MakeRptCmt	(0X17B70,	"Maximum vehicle speed value to consider the vehicle idling.\nMPH");
	MakeWord	(0X17B70);
	MakeName	(0X17B70,	"DI_ICAT_KE_CAT_IDLE_VEHICLE_SPEED_MAX");
	MakeRptCmt	(0X17B72,	"Maximum intake air temperature threshold to continue to enable the catalyst test.\nDegrees_C");
	MakeWord	(0X17B72);
	MakeName	(0X17B72,	"DI_ICAT_KE_CAT_INTAKE_AIR_TEMP_MAX");
	MakeRptCmt	(0X17B74,	"Minimum intake air temperature threshold to continue to enable the catalyst test.\nDegrees_C");
	MakeWord	(0X17B74);
	MakeName	(0X17B74,	"DI_ICAT_KE_CAT_INTAKE_AIR_TEMP_MIN");
	MakeRptCmt	(0X17B76,	"Maximum integrator value to enable the catalyst diagnostic.\nUnitless");
	MakeByte	(0X17B76);
	MakeName	(0X17B76,	"DI_ICAT_KE_CAT_INTEGRATOR_MAX");
	MakeRptCmt	(0X17B77,	"Minimum integrator value to enable the catalyst diagnostic.\nUnitless");
	MakeByte	(0X17B77);
	MakeName	(0X17B77,	"DI_ICAT_KE_CAT_INTEGRATOR_MIN");
	MakeRptCmt	(0X17B78,	"Minimum time that the minimum RPM must be maintained prior to entering idle for stabilization conditions to be satisfied.\nSeconds");
	MakeWord	(0X17B78);
	MakeName	(0X17B78,	"DI_ICAT_KE_CAT_MIN_TIME_ABOVE_MIN_RPM");
	MakeRptCmt	(0X17B7A,	"The minimum temperature required for the catalytic converter toburn off the material when it is 'green'\nDegrees C_S");
	MakeWord	(0X17B7A);
	MakeName	(0X17B7A,	"DI_ICAT_KE_CAT_MAT_BURNOFF_TEMP_THRESH");
	MakeDword	(x=0X17B7C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X17B7C,	"DI_ICAT_KE_CAT_MATERIAL_BURNOFF_DELAY");
	MakeRptCmt	(0X17B80,	"Minimum RPM that must be maintained for the catalyst warmup timer to increment.\nRPM");
	MakeWord	(0X17B80);
	MakeName	(0X17B80,	"DI_ICAT_KE_CAT_RPM_TO_WARMUP_CATALYST");
	MakeRptCmt	(0X17B82,	"Maximum amount of stabilization time before enabling the catalyst diagnostic.\nSeconds");
	MakeWord	(0X17B82);
	MakeName	(0X17B82,	"DI_ICAT_KE_CAT_STABILIZATION_TIME_MAX");
	MakeRptCmt	(0X17B84,	"Minimum amount of stabilization time to enable the catalyst diagnostic.\nSeconds");
	MakeWord	(0X17B84);
	MakeName	(0X17B84,	"DI_ICAT_KE_CAT_STABILIZATION_TIME_MIN");
	MakeRptCmt	(0X17B86,	"Minimum battery voltage threshold to enable the catalyst test at idle.\nVolts");
	MakeWord	(0X17B86);
	MakeName	(0X17B86,	"DI_ICAT_KE_CAT_VOLTAGE_MIN");
	MakeRptCmt	(0X17B88,	"Maximum engine air flow to be used in steady state temperature calculations.\nGrams_Air_Per_Second");
	MakeWord	(0X17B88);
	MakeName	(0X17B88,	"DI_ICAT_KE_EGPT_ENG_AIRFLOW_HIGH");
	MakeRptCmt	(0X17B8A,	"Maximum engine speed to be used in steady state temperature calculations.\nRevolutions per minute");
	MakeWord	(0X17B8A);
	MakeName	(0X17B8A,	"DI_ICAT_KE_EGPT_RPM_HIGH");
	MakeRptCmt	(0X17B8C,	"Maximum vehicle speed threshold to allow AC_Clutch_Has_Been_Onset to TRUE.\nMPH");
	MakeWord	(0X17B8C);
	MakeName	(0X17B8C,	"DI_ICAT_KE_CAT_AC_CLUTCH_HAS_BEEN_ON_VST");
	MakeRptCmt	(0X17B8E,	"Number of consecutive periods that all integrator values must remain within range to establish stability.\nUnitless");
	MakeWord	(0X17B8E);
	MakeName	(0X17B8E,	"DI_ICAT_KE_NUM_INTEGRATOR_SAMPLES");
	MakeRptCmt	(0X17B90,	"Minimum fuel ethanol percent threshold to enable the catalyst test.\nPercent");
	MakeWord	(0X17B90);
	MakeName	(0X17B90,	"DI_ICAT_KE_CAT_MAX_ETH_PERCENT");
	MakeWord	(0X17B92);
	MakeName	(0X17B92,	"DI_ICAT_KV_CAT_1_ETH_COMPENSATION_FACTOR");
	MakeWord	(0X17B9C);
	MakeName	(0X17B9C,	"DI_ICAT_KV_CAT_2_ETH_COMPENSATION_FACTOR");
	MakeRptCmt	(0X17BA6,	"Disable diagnostic test if any malfunctions in the groups marked TRUE are active.\nBOOLEAN");
	MakeDword	(0X17BA6);
	MakeName	(0X17BA6,	"DI_ICAT_KV_CAT_DISABLE_IF_CODE_SET");
	MakeRptCmt	(0X17BAA,	"Used to set the maximum RPM change value based on whether or not fuel control mode is active.\nRPM");
	MakeWord	(0X17BAA);
	MakeName	(0X17BAA,	"DI_ICAT_KV_CAT_RPM_CHANGE_MAX");
	MakeWord	(0X17BAC);
	MakeRptCmt	(0X17BAE,	"Minimum coolant temperature threshold for the location to enable the exhaust location temperature model.\nUnitless");
	MakeName	(0X17BAE,	"DI_ICAT_KV_EGPT_ECT_ENABLE_MIN");
	MakeWord	(0X17BB0);
	MakeRptCmt	(0X17BB2,	"Minimum exhaust location temperature threshold for the location to be considered warm enough to test.\nUnitless");
	MakeName	(0X17BB2,	"DI_ICAT_KV_EGPT_EXHAUST_TEMP_WARM_MIN");
	MakeWord	(0X17BB4);
	MakeName	(0X17BB6,	"DI_ICAT_KV_EGPT_FILTER_COEF_DECREASING");
	MakeWord	(0X17BB8);
	MakeDword	(0X17BBA);
	MakeName	(0X17BBA,	"DI_ICAT_KV_EGPT_FILTER_COEF_INCREASING");
	MakeRptCmt	(0X17BBE,	"Engine air flow multiplier used in steady state temperature calculation.\nUnitless");
	MakeDword	(x=0X17BBE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X17BBE,	"DI_ICAT_KV_EGPT_SS_ENG_AIRFLOW_COEF");
	MakeWord	(0X17BC4);
	MakeRptCmt	(0X17BC6,	"Default steady state temperature.\nDegrees Celsius");
	MakeName	(0X17BC6,	"DI_ICAT_KV_EGPT_SS_EXHAUST_TEMP_DEFAULT");
	MakeWord	(0X17BC8);
	MakeName	(0X17BCA,	"DI_ICAT_KV_EGPT_SS_LOW_OFFSET_TEMP");
	MakeWord	(0X17BCC);
	MakeName	(0X17BCE,	"DI_ICAT_KV_EGPT_SS_HIGH_OFFSET_TEMP");
	MakeWord	(0X17BD0);
	MakeRptCmt	(0X17BD2,	"Temperature boundry used to determine whether the high or low offset is used in the steady state temperature calculation.\nDegrees Celsius");
	MakeName	(0X17BD2,	"DI_ICAT_KV_EGPT_SS_OFFSET_TRANSIT_TEMP");
	MakeWord	(0X17BD4);
	MakeRptCmt	(0X17BD6,	"Engine speed multiplier used in steady state temperature calculation.\nDegrees Celsius / RPM");
	MakeName	(0X17BD6,	"DI_ICAT_KV_EGPT_SS_RPM_COEF");
	MakeRptCmt	(0X17BDA,	"Modifies the predicted steady state exhaust gas temperatureto account for variations caused by ethanol fuel.\nDegrees_Celsius");
	MakeWord	(0X17BDA);
	MakeName	(0X17BDA,	"DI_ICAT_KV_EGPT_SS_ETH_COMPENSATION");
	MakeRptCmt	(0X17BE4,	"Minimum barometric pressure threshold to enable the IAC diagnostic.\nkPa");
	MakeWord	(0X17BE4);
	MakeName	(0X17BE4,	"DI_IDLE_KE_IAC_BAROMETRIC_PRESSURE_MIN");
	MakeRptCmt	(0X17BE6,	"Minimum coolant temperature threshold to enable the IAC diagnostic.\nDegrees_C");
	MakeWord	(0X17BE6);
	MakeName	(0X17BE6,	"DI_IDLE_KE_IAC_COOL_TEMP_MIN");
	MakeRptCmt	(0X17BE8,	"Minimum engine run time to enable the IAC diagnostic.\nSeconds");
	MakeWord	(0X17BE8);
	MakeName	(0X17BE8,	"DI_IDLE_KE_IAC_ENGINE_RUN_TIME_MIN");
	MakeRptCmt	(0X17BEA,	"Maximum ignition system voltage threshold to enable the IAC diagnostic.\nVolts");
	MakeWord	(0X17BEA);
	MakeName	(0X17BEA,	"DI_IDLE_KE_IAC_IGNITION_VOLTAGE_MAX");
	MakeRptCmt	(0X17BEC,	"Minimum ignition system voltage threshold to enable the IAC diagnostic.\nVolts");
	MakeWord	(0X17BEC);
	MakeName	(0X17BEC,	"DI_IDLE_KE_IAC_IGNITION_VOLTAGE_MIN");
	MakeRptCmt	(0X17BEE,	"Minimum intake air temperature threshold to enable the IAC diagnostic.\nDegrees_C");
	MakeWord	(0X17BEE);
	MakeName	(0X17BEE,	"DI_IDLE_KE_IAC_INTAKE_AIR_TEMP_MIN");
	MakeRptCmt	(0X17BF0,	"Maximum throttle position threshold to allow idle conditions.\nPercent");
	MakeWord	(0X17BF0);
	MakeName	(0X17BF0,	"DI_IDLE_KE_IAC_IDLE_THROTTLE_POS_MAX");
	MakeRptCmt	(0X17BF2,	"Maximum vehicle speed threshold to allow idle conditions.\nMPH");
	MakeWord	(0X17BF2);
	MakeName	(0X17BF2,	"DI_IDLE_KE_IAC_IDLE_VEHICLE_SPEED_MAX");
	MakeRptCmt	(0X17BF4,	"Time for which the appropriate conditions must be stable before Idle Conditions Present flag can be SET.\nSeconds");
	MakeWord	(0X17BF4);
	MakeName	(0X17BF4,	"DI_IDLE_KE_IAC_DIAG_STABLE_WINDOW_TIME");
	MakeRptCmt	(0X17BF6,	"Maximum amount of time the  EGR valve is commanded open to 100 percent.\nSeconds");
	MakeWord	(0X17BF6);
	MakeName	(0X17BF6,	"DI_LEGR_KE_EGRP_STRK_MAX_OPEN_TIME");
	MakeWord	(0X17BF8);
	MakeName	(0X17BF8,	"DI_LEGR_KE_EGRP_STROKE_TIME_DELAY");
	MakeRptCmt	(0X17BFA,	"EGR desired must be greater than or equal to this in order to enable EGR stroking for pintle diagnostics.\nPercent");
	MakeWord	(0X17BFA);
	MakeName	(0X17BFA,	"DI_LEGR_KE_EGRP_STRK_LOW_EGR_POSITION");
	MakeRptCmt	(0X17BFC,	"Maximum amount of successful stroking events which will be allowed for one stroking set.\nStrokes");
	MakeByte	(0X17BFC);
	MakeName	(0X17BFC,	"DI_LEGR_KE_EGRP_STROKE_COUNTER_LMT");
	MakeRptCmt	(0X17BFE,	"Minimum ignition voltage required to enable the EGRP tests.\nVolts");
	MakeWord	(0X17BFE);
	MakeName	(0X17BFE,	"DI_LEGR_KE_EGRP_IGNITION_VOLTAGE_MIN");
	MakeRptCmt	(0X17C00,	"Maximum vehicle speed before cylinder mode (idle) misfire detection is disabled.\nMPH");
	MakeWord	(0X17C00);
	MakeName	(0X17C00,	"DI_MISFIRE_KE_MISF_IDLE_MODE_VEH_SPD");
	MakeRptCmt	(0X17C02,	"Number of engine cycles to delay for the enable criteria not being met, decel fuel cutoff, fuel shut off, or torque reduction.\nEng Cycles");
	MakeWord	(0X17C02);
	MakeName	(0X17C02,	"DI_MISFIRE_KE_MISF_GENERIC_DELAY");
	MakeRptCmt	(0X17C04,	"Determines if crank angle correction should be used.\nBOOLEAN");
	MakeByte	(0X17C04);
	MakeName	(0X17C04,	"DI_MISFIRE_KE_MISF_CRANK_ANGLE_CRRCTN_USED");
	MakeByte	(0X17C05);
	MakeName	(0X17C05,	"DI_MISFIRE_KE_MISF_REPORT_EMISSION_MISFIRE");
	MakeRptCmt	(0X17C06,	"If misfire counts are above this threshold, catalyst damage misfire is possible.\nUnitless");
	MakeByte	(0X17C06);
	MakeName	(0X17C06,	"DI_MISFIRE_KE_MISF_EMISSION_MISFIRE");
	MakeRptCmt	(0X17C08,	"If misfire counts are above this threshold, catalyst damage misfire is possible.\nUnitless");
	MakeName	(0X17C08,	"DI_MISFIRE_KA_MISF_CATALYST_MISFIRE");
	MakeByte	(0X17C74);
	MakeName	(0X17C74,	"DI_MISFIRE_KA_MISF_REPORT_CATALYST_MISFIRE");
	MakeWord	(0X17CE0);
	MakeName	(0X17CE0,	"DI_MISFIRE_KA_MISF_CYLINDER_MODE_IDLE");
	MakeWord	(0X17CE2);
	MakeWord	(0X17D02);
	MakeWord	(0X17D04);
	MakeWord	(0X17E34);
	MakeName	(0X17E34,	"DI_MISFIRE_KA_MISF_CYLINDER_MODE_REG1");
	MakeWord	(0X17E36);
	MakeWord	(0X17E56);
	MakeWord	(0X17E58);
	MakeWord	(0X17F88);
	MakeName	(0X17F88,	"DI_MISFIRE_KA_MISF_CYLINDER_MODE_REG2");
	MakeWord	(0X17F8A);
	MakeWord	(0X17FAA);
	MakeWord	(0X17FAC);
	MakeWord	(0X18340);
	MakeName	(0X18340,	"DI_MISFIRE_KA_MISF_CYLINDER_MODE_REG3");
	MakeWord	(0X18342);
	MakeWord	(0X18362);
	MakeWord	(0X18364);
	MakeWord	(0X18384);
	MakeName	(0X18384,	"DI_MISFIRE_KA_MISF_REVOLUTION_MODE_REG1");
	MakeWord	(0X18386);
	MakeWord	(0X183A6);
	MakeWord	(0X183A8);
	MakeWord	(0X183EA);
	MakeName	(0X183EA,	"DI_MISFIRE_KA_MISF_REVOLUTION_MODE_REG2");
	MakeWord	(0X183EC);
	MakeWord	(0X1840C);
	MakeWord	(0X1840E);
	MakeWord	(0X187A2);
	MakeName	(0X187A2,	"DI_MISFIRE_KA_MISF_REVOLUTION_MODE_REG3");
	MakeWord	(0X187A4);
	MakeWord	(0X187C4);
	MakeWord	(0X187C6);
	MakeWord	(0X1882A);
	MakeName	(0X1882A,	"DI_MISFIRE_KV_MISF_ZERO_TORQUE_REG1_SPEED");
	MakeWord	(0X1883E);
	MakeName	(0X1883E,	"DI_MISFIRE_KV_MISF_ZERO_TORQUE_REG2_SPEED");
	MakeWord	(0X18876);
	MakeName	(0X18876,	"DI_MISFIRE_KV_MISF_ZERO_TORQUE_REG3_SPEED");
	MakeRptCmt	(0X1887E,	"Identifies the actual engine block cylinder from the misfire diagnostic cylinder counter.\nUnitless");
	MakeByte	(0X1887E);
	MakeName	(0X1887E,	"DI_MISFIRE_KV_MISF_ENGINE_BLOCK_CYLINDER_ID");
	MakeRptCmt	(0X18886,	"Minimum abusive engine speed to delay the diagnostic.\nRPM");
	MakeWord	(0X18886);
	MakeName	(0X18886,	"DI_MISFIRE_KE_MISF_ABUSIVE_ENGINE_SPEED");
	MakeRptCmt	(0X18888,	"If startup coolant temp is not above CTS_At_Startup_Low cal, enable misfire detection when coolant exceeds this.\nDeg_C");
	MakeWord	(0X18888);
	MakeName	(0X18888,	"DI_MISFIRE_KE_MISF_CTS_AT_STARTUP_HIGH");
	MakeRptCmt	(0X1888A,	"Minimum engine starup coolant temperature to allow misfire detection.\nDeg_C");
	MakeWord	(0X1888A);
	MakeName	(0X1888A,	"DI_MISFIRE_KE_MISF_CTS_AT_STARTUP_LOW");
	MakeRptCmt	(0X1888C,	"Maximum coolant temperature to allow misfire detection.\nDeg_C");
	MakeWord	(0X1888C);
	MakeName	(0X1888C,	"DI_MISFIRE_KE_MISF_COOLANT_TEMP_HIGH");
	MakeRptCmt	(0X1888E,	"Minimum coolant temperature to allow misfire detection.\nDeg_C");
	MakeWord	(0X1888E);
	MakeName	(0X1888E,	"DI_MISFIRE_KE_MISF_COOLANT_TEMP_LOW");
	MakeRptCmt	(0X18890,	"Maximum engine speed to allow misfire detection.\nRPM");
	MakeWord	(0X18890);
	MakeName	(0X18890,	"DI_MISFIRE_KE_MISF_CRANK_UNLEARNED_RPM_MAX");
	MakeRptCmt	(0X18892,	"Maximum engine speed to allow misfire detection.\nRPM");
	MakeWord	(0X18892);
	MakeName	(0X18892,	"DI_MISFIRE_KE_MISF_RPM_HIGH");
	MakeRptCmt	(0X18894,	"Minimum engine speed to allow misfire detection.\nRPM");
	MakeWord	(0X18894);
	MakeName	(0X18894,	"DI_MISFIRE_KE_MISF_RPM_LOW");
	MakeRptCmt	(0X18896,	"Maximum ignition voltage to allow misfire detection.\nVolts");
	MakeWord	(0X18896);
	MakeName	(0X18896,	"DI_MISFIRE_KE_MISF_VOLTAGE_HIGH");
	MakeRptCmt	(0X18898,	"Minimum ignition voltage to allow misfire detection.\nVolts");
	MakeWord	(0X18898);
	MakeName	(0X18898,	"DI_MISFIRE_KE_MISF_VOLTAGE_LOW");
	MakeRptCmt	(0X1889A,	"If TRUE is specified for the indexed fault group, then any active fault within that group will inhibit the Misfire diagnostic.\nCal_Set_Of_Fault_Group_Type");
	MakeName	(0X1889A,	"DI_MISFIRE_KE_MISF_INHIBITING_FAULTS");
	MakeRptCmt	(0X1889E,	"This is the time limit for learning BLMs.\nSeconds");
	MakeName	(0X1889E,	"DI_MISFIRE_KE_MISF_IDLE_BLMS_LEARNED_TIME");
	MakeRptCmt	(0X188A0,	"Maximum throttle position to delay the diagnostic.\nPercent");
	MakeWord	(0X188A0);
	MakeName	(0X188A0,	"DI_MISFIRE_KE_MISF_TPS_LIMIT");
	MakeRptCmt	(0X188A2,	"Minimum vehicle speed to delay the diagnostic.\nMPH");
	MakeWord	(0X188A2);
	MakeName	(0X188A2,	"DI_MISFIRE_KE_MISF_VEHICLE_SPEED_LIMIT");
	MakeRptCmt	(0X188A4,	"Maximum allowable negative throttle position delta before misfire diagnostic is disabled.\nPercent");
	MakeWord	(0X188A4);
	MakeName	(0X188A4,	"DI_MISFIRE_KE_MISF_TPS_NEGATIVE_DELTA");
	MakeRptCmt	(0X188A6,	"Maximum allowable positive throttle position delta before misfire diagnostic is disabled.\nPercent");
	MakeWord	(0X188A6);
	MakeName	(0X188A6,	"DI_MISFIRE_KE_MISF_TPS_POSITIVE_DELTA");
	MakeRptCmt	(0X188A8,	"If fuel level is below this value, misfire diagnostic will be delayed.\nPercent");
	MakeWord	(0X188A8);
	MakeName	(0X188A8,	"DI_MISFIRE_KE_MISF_FUEL_LEVEL_MINIMUM");
	MakeRptCmt	(0X188AA,	"Disable ABS rough road detection above this engine load.\nPercent");
	MakeWord	(0X188AA);
	MakeName	(0X188AA,	"DI_MISFIRE_KE_MISF_ABS_ENGINE_LOAD");
	MakeRptCmt	(0X188AC,	"Disable ABS rough road detection above this engine speed.\nRPM");
	MakeWord	(0X188AC);
	MakeName	(0X188AC,	"DI_MISFIRE_KE_MISF_ABS_ENGINE_SPEED");
	MakeRptCmt	(0X188AE,	"Modifies the misfire catalyst damage threshold for ethanol.\nMultiplier");
	MakeWord	(0X188AE);
	MakeName	(0X188AE,	"DI_MISFIRE_KV_MISF_CAT_DAMAGE_ETH_FACTOR");
	MakeRptCmt	(0X188B8,	"Modifies the misfire emission failure threshold for ethanol.\nMultiplier");
	MakeWord	(0X188B8);
	MakeName	(0X188B8,	"DI_MISFIRE_KV_MISF_EMS_FAIL_ETHANOL_FACTOR");
	MakeByte	(0X188C2);
	MakeName	(0X188C2,	"DI_MISFIRE_KV_MISF_ABS_WITH_TCS_LIMIT");
	MakeByte	(0X188D0);
	MakeName	(0X188D0,	"DI_MISFIRE_KV_MISF_ABS_ONLY_LIMIT");
	MakeRptCmt	(0X188DE,	"Number of engine cycles to delay if an abusive high engine speed occurs.\nEng Cycles");
	MakeWord	(0X188DE);
	MakeName	(0X188DE,	"DI_MISFIRE_KE_MISF_ABUSIVE_ENGINE_SPD_DELAY");
	MakeRptCmt	(0X188E0,	"Number of engine cycles to delay if the air conditioner clutch as changed state.\nEng Cycles");
	MakeWord	(0X188E0);
	MakeName	(0X188E0,	"DI_MISFIRE_KE_MISF_AIR_CONDITIONER_DELAY");
	MakeRptCmt	(0X188E2,	"Number of engine cycles to delay if the AIR test is intrusive.\nEng Cycles");
	MakeWord	(0X188E2);
	MakeName	(0X188E2,	"DI_MISFIRE_KE_MISF_AIR_TEST_DELAY");
	MakeRptCmt	(0X188E4,	"Number of engine cycles to delay the diagnostic during automatic transmission shifts.\nEng Cycles");
	MakeWord	(0X188E4);
	MakeName	(0X188E4,	"DI_MISFIRE_KE_MISF_AUTO_TRANS_SHIFT_DELAY");
	MakeRptCmt	(0X188E6,	"Number of engine cycles to delay on a cam malfunction.\nEng Cycles");
	MakeWord	(0X188E6);
	MakeName	(0X188E6,	"DI_MISFIRE_KE_MISF_CAM_MALFUNCTION_DELAY");
	MakeRptCmt	(0X188E8,	"Number of engine cycles to delay if the EGR test is active.\nEng Cycles");
	MakeWord	(0X188E8);
	MakeName	(0X188E8,	"DI_MISFIRE_KE_MISF_EGR_TEST_DELAY");
	MakeRptCmt	(0X188EA,	"The percent ethanol in the fuel which disables the Misfire diagnostic.\nPercent");
	MakeWord	(0X188EA);
	MakeName	(0X188EA,	"DI_MISFIRE_KE_MISF_ETHANOL_PERCENT");
	MakeRptCmt	(0X188EC,	"Number of engine cycles to delay if excess acceleration is detected.\nEng Cycles");
	MakeWord	(0X188EC);
	MakeName	(0X188EC,	"DI_MISFIRE_KE_MISF_EXCESS_ACCEL_DELAY");
	MakeRptCmt	(0X188EE,	"Number of engine cycles to delay during periods of low fuel.\nEng Cycles");
	MakeWord	(0X188EE);
	MakeName	(0X188EE,	"DI_MISFIRE_KE_MISF_FUEL_DELAY");
	MakeRptCmt	(0X188F0,	"Number of engine cycles to delay on changes to the throttle position.\nEng Cycles");
	MakeWord	(0X188F0);
	MakeName	(0X188F0,	"DI_MISFIRE_KE_MISF_TPS_DELTA_DELAY");
	MakeWord	(0X188F2);
	MakeName	(0X188F2,	"DI_MISFIRE_KE_MISF_UNDETECTABLE_DELAY");
	MakeRptCmt	(0X188F4,	"Minimum number of ABS failures needed to consider an ABS fault.\ncounts");
	MakeWord	(0X188F4);
	MakeName	(0X188F4,	"DI_MISFIRE_KE_MISF_ABS_FAIL_COUNTER");
	MakeRptCmt	(0X188F6,	"Minimum number of samples necessary to restart the test.\ncounts");
	MakeWord	(0X188F6);
	MakeName	(0X188F6,	"DI_MISFIRE_KE_MISF_ABS_SAMPLE_COUNTER");
	MakeRptCmt	(0X188F8,	"Disable Misfire-ABS rough road diagnostic below this vehicle speed.\nMPH");
	MakeWord	(0X188F8);
	MakeName	(0X188F8,	"DI_MISFIRE_KE_MISF_ABS_VEHICLE_SPEED");
	MakeWord	(0X188FA);
	MakeName	(0X188FA,	"DI_MISFIRE_KE_MISF_WHEEL_SLIP_VEHICLE_SPEED");
	MakeRptCmt	(0X188FC,	"Misfire diagnostic is disabled when the driven wheels are spinning faster than the non-drive wheels BY this threshold.\nMPH");
	MakeWord	(0X188FC);
	MakeName	(0X188FC,	"DI_MISFIRE_KE_MISF_WHEEL_SLIP_LIMIT");
	MakeRptCmt	(0X188FE,	"Minimum number of serial data failures necessary to consider a fault.\nCounts");
	MakeWord	(0X188FE);
	MakeName	(0X188FE,	"DI_MISFIRE_KE_MISF_SERIAL_DATA_FAIL_CNTR");
	MakeRptCmt	(0X18900,	"Minimum timer value necessary to increment the serial data fail counter.\nSeconds");
	MakeName	(0X18900,	"DI_MISFIRE_KE_MISF_SERIAL_DATA_FAIL_DELAY");
	MakeRptCmt	(0X18902,	"Minimum number of samples necessary to restart the test.\ncounts");
	MakeWord	(0X18902);
	MakeName	(0X18902,	"DI_MISFIRE_KE_MISF_SERIAL_DATA_SAMPLE_CNTR");
	MakeWord	(0X18904);
	MakeName	(0X18904,	"DI_MISFIRE_KE_MISF_FUEL_DELAY_DISABLE_TIME");
	MakeWord	(0X18906);
	MakeName	(0X18906,	"DI_MISFIRE_KE_MISF_SHIFT_DELAY_DISABLE_TIME");
	MakeWord	(0X18908);
	MakeName	(0X18908,	"DI_MISFIRE_KE_MISF_START_DELAY_DISABLE_TIME");
	MakeRptCmt	(0X1890A,	"Minimum IAC position to be within normal operating window.\nSteps");
	MakeWord	(0X1890A);
	MakeName	(0X1890A,	"DI_TPS_KE_TPSD_IAC_POS_MIN");
	MakeRptCmt	(0X1890C,	"Maximum IAC position to be within normal operating window.\nSteps");
	MakeWord	(0X1890C);
	MakeName	(0X1890C,	"DI_TPS_KE_TPSD_IAC_POS_MAX");
	MakeWord	(0X1890E);
	MakeName	(0X1890E,	"DM_DATA_MANAGER_KE_DGDM_FUEL_SYS_CONDS_LIMIT");
	MakeWord	(0X18910);
	MakeName	(0X18910,	"DM_DATA_MANAGER_KE_DGDM_MAX_LOW_COOLANT");
	MakeWord	(0X18912);
	MakeName	(0X18912,	"DM_DATA_MANAGER_KE_DGDM_MIN_HIGH_COOLANT");
	MakeWord	(0X18914);
	MakeName	(0X18914,	"DM_DATA_MANAGER_KE_DGDM_MISFIRE_CONDS_LIMIT");
	MakeRptCmt	(0X18916,	"Defines the relationship between a DTC identifier and the DTC dependent PID list used in a Failure Record.\nEnumeration");
	MakeByte	(0X18916);
	MakeName	(0X18916,	"DM_EXECUTIVE_KV_DGDM_DTC_DEP_FR_LIST_ID");
	MakeRptCmt	(0X18A1B,	"This calibration is intended to represent the supply voltage to which an open coolant sensor input would float.\nCounts");
	MakeByte	(0X18A1B);
	MakeName	(0X18A1B,	"DM_EXECUTIVE_KE_DGDM_COOLANT_RAIL");
	MakeRptCmt	(0X18A1C,	"This calibration is intended to represent the supply voltage to which an open manifold pressure sensor input would float.\nCounts");
	MakeByte	(0X18A1C);
	MakeName	(0X18A1C,	"DM_EXECUTIVE_KE_DGDM_MAP_RAIL");
	MakeRptCmt	(0X18A1D,	"Multiplier factor for determining proper DGDM_Odo_Since_CC scaling.\nKPS/MPH");
	MakeByte	(0X18A1D);
	MakeName	(0X18A1D,	"DM_EXECUTIVE_KE_DGDM_ODO_SINCE_CC_SCALE_FACT");
	MakeRptCmt	(0X18A1E,	"Multiplier factor for determining proper DGDM_Odo_With_MIL_On scaling.\nKPS/MPH");
	MakeByte	(0X18A1E);
	MakeName	(0X18A1E,	"DM_EXECUTIVE_KE_DGDM_ODO_WITH_MIL_ON_SCALE_FA");
	MakeWord	(0X18A20);
	MakeName	(0X18A20,	"DM_EXECUTIVE_KE_DGDM_SVS_ON_MIN_DURATION");
	MakeRptCmt	(0X18A22,	"This calibration indicates what non-continuous diagnostics are supported by the diagnostic executive.\nBOOLEAN");
	MakeWord	(0X18A22);
	MakeName	(0X18A22,	"DM_TYPES_KV_NON_CONTINUOUS_TEST_SUPPORTED");
	MakeRptCmt	(0X18A24,	"A = 1 trip SES On, 3 trips SES Off; B = 2 trips SES On, 3 trips SES Off; C = SVS On; X = no reporting\nFault Type");
	MakeByte	(0X18A24);
	MakeName	(0X18A24,	"DM_TYPES_KV_DM_FAULT_TYPE");
	MakeRptCmt	(0X18B2A,	"This calibration enables or disables the telltale lamp for any fault code.\nBOOLEAN");
	MakeByte	(0X18B2A);
	MakeName	(0X18B2A,	"DM_TYPES_KV_DM_LIGHT_ENABLE");
	MakeRptCmt	(0X18C30,	"MAP based airflow diagnostic A0 filter time constant in msecs.\nMilliseconds");
	MakeName	(0X18C30,	"ETC_DIAG_KA_ETC_AIR_A0_FILT_COEF");
	MakeRptCmt	(0X18DA6,	"MAP based airflow diagnostic B0 filter time constant in msecs.\nMilliseconds");
	MakeName	(0X18DA6,	"ETC_DIAG_KA_ETC_AIR_B0_FILT_COEF");
	MakeRptCmt	(0X18F1C,	"MAF based airflow diagnostic A0 filter time constant in msecs.\nMilliseconds");
	MakeName	(0X18F1C,	"ETC_DIAG_KA_ETC_MAF_FILT_A0_COEF");
	MakeRptCmt	(0X19092,	"MAF based airflow diagnostic B0 filter time constant in msecs.\nMilliseconds");
	MakeName	(0X19092,	"ETC_DIAG_KA_ETC_MAF_FILT_B0_COEF");
	MakeRptCmt	(0X19208,	"Lookup to clamp the value of the MAF sensor based airflow usingengine speed as the index\nMilligrams_Per_Cylinder");
	MakeWord	(0X19208);
	MakeName	(0X19208,	"ETC_DIAG_KV_MAX_ETC_MAF_AIRFLOW");
	MakeRptCmt	(0X1922A,	"Nth order model coefficient vs. ignition voltage for current Desired Throttle Position.\nNth_Model_Coef_Vs_Volts_Table");
	MakeName	(0X1922A,	"ETC_DIAG_KV_DESIRED_TERM_COEF_0");
	MakeRptCmt	(0X1924A,	"Nth order model coefficient vs. ingition voltage for 1 sample old Desired Throttle Position.\nNth_Model_Coef_Vs_Volts_Table");
	MakeName	(0X1924A,	"ETC_DIAG_KV_DESIRED_TERM_COEF_1");
	MakeRptCmt	(0X1926A,	"Nth order model coefficient vs. ingition voltage for 2 samples old Desired Throttle Position.\nNth_Model_Coef_Vs_Volts_Table");
	MakeName	(0X1926A,	"ETC_DIAG_KV_DESIRED_TERM_COEF_2");
	MakeRptCmt	(0X1928A,	"Nth order model coefficient vs. ingition voltage for 1 sample old Nth order model output.\nNth_Model_Coef_Vs_Volts_Table");
	MakeName	(0X1928A,	"ETC_DIAG_KV_ESTIMATED_TERM_COEF_1");
	MakeRptCmt	(0X192AA,	"Nth order model coefficient vs. ingition voltage for 2 samples old Nth order model output.\nNth_Model_Coef_Vs_Volts_Table");
	MakeName	(0X192AA,	"ETC_DIAG_KV_ESTIMATED_TERM_COEF_2");
	MakeRptCmt	(0X192CA,	"Predicted airflow at standard pressure and temp based on currentEngine speed and commanded throttle position.\nmGPC_Vs_RPM_And_Rotation_Table");
	MakeName	(0X192CA,	"ETC_DIAG_KA_SATP_AIRFLOW");
	MakeRptCmt	(0X1950C,	"Lookup for a correction factor for barometric pressure.\nScaler_0to2_Vs_kPa_Table");
	MakeName	(0X1950C,	"ETC_DIAG_KV_BARO_CORR_FACTOR");
	MakeRptCmt	(0X19512,	"Lookup for a correction factor for induction air temperature.\nScaler_0to2_Vs_Degrees_C_Table");
	MakeName	(0X19512,	"ETC_DIAG_KV_INDUCTION_TEMP_CORR_FACTOR");
	MakeRptCmt	(0X19526,	"Pedal sensor vrs pedal sensor faults conversion constants. DISAGREE 0=1-2  1=1-3  2=2-3 X RANGE 0=PPS1, 1=PPS2, 2=PPS3\nPedal_Status_Table_Type");
	MakeByte	(0X19526);
	MakeName	(0X19526,	"ETC_DIAG_KA_PEDAL_STATUS_DECODE");
	MakeDword	(x=0X19527);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeRptCmt	(0X19566,	"Throttle status as a function of throttle related diagnostic flags0=TPS1 range 1=TPS2 Range 2=TPS Disagree\nThrottle_Status_Table_Type");
	MakeByte	(0X19566);
	MakeName	(0X19566,	"ETC_DIAG_KV_THROTTLE_STATUS_DECODE");
	MakeRptCmt	(0X1956E,	"Time that ignition voltage must be present for the MAF sensorheating element to warm up.\nSeconds");
	MakeWord	(0X1956E);
	MakeName	(0X1956E,	"ETC_DIAG_KE_MIN_MAF_VALID_TIME");
	MakeRptCmt	(0X19570,	"Limit for TPS Vs MAF airflow actuation error.\nMilligrams_Per_Cylinder");
	MakeWord	(0X19570);
	MakeName	(0X19570,	"ETC_DIAG_KE_TPS_VS_MAF_ACTUATION_ERROR");
	MakeRptCmt	(0X19572,	"Limit for TPS Vs MAP airflow actuation error.\nMilligrams_Per_Cylinder");
	MakeWord	(0X19572);
	MakeName	(0X19572,	"ETC_DIAG_KE_TPS_VS_MAP_ACTUATION_ERROR");
	MakeRptCmt	(0X19574,	"Max limit for accumulated local actuation errors\nSHORTCARD");
	MakeByte	(0X19574);
	MakeName	(0X19574,	"ETC_DIAG_KE_THROTTLE_ACTUATION_ERROR_COUN");
	MakeWord	(0X19576);
	MakeName	(0X19576,	"ETC_DIAG_KE_THROTTLE_ACTUATION_ERROR_THRE");
	MakeRptCmt	(0X19578,	"Throttle position to use when ETC link not awake or UART fault for estimating engine airflow.\nPercent_Rotation");
	MakeWord	(0X19578);
	MakeName	(0X19578,	"ETC_DIAG_KE_DEFAULT_THROTTLE_POSITION");
	MakeRptCmt	(0X1957A,	"limit of difference between primary and redundant throt position\nPercent_Rotation");
	MakeWord	(0X1957A);
	MakeName	(0X1957A,	"ETC_DIAG_KE_MAX_ALLOWABLE_INCONSISTENCY");
	MakeRptCmt	(0X1957C,	"Lowest engine speed at which behavior of the MAF sensor is deemedaccurate.\nRPM");
	MakeWord	(0X1957C);
	MakeName	(0X1957C,	"ETC_DIAG_KE_MIN_MAF_VALID_RPM");
	MakeRptCmt	(0X1957E,	"Number of times the airflow diagnostic must run before the testcomplete flag is set.\nSHORTCARD");
	MakeByte	(0X1957E);
	MakeName	(0X1957E,	"ETC_DIAG_KE_AIRFLOW_ACTUATION_COUNT_LIMIT");
	MakeRptCmt	(0X1957F,	"Limit for TPS vs MAF accumulated airflow actuation errors.\nSHORTCARD");
	MakeByte	(0X1957F);
	MakeName	(0X1957F,	"ETC_DIAG_KE_TPS_VS_MAF_ERROR_COUNT_LIMIT");
	MakeRptCmt	(0X19580,	"Amount to inc the airflow act error count when possible TPS vs MAF airflow actuation error\nSHORTCARD");
	MakeByte	(0X19580);
	MakeName	(0X19580,	"ETC_DIAG_KE_TPS_VS_MAF_ACT_UP_COUNTER");
	MakeRptCmt	(0X19581,	"Amount to dec the tps vs MAP airflow act error count when no actuation error\nSHORTCARD");
	MakeByte	(0X19581);
	MakeName	(0X19581,	"ETC_DIAG_KE_TPS_VS_MAP_ACT_DOWN_COUNTER");
	MakeRptCmt	(0X19582,	"Limit for TPS vs MAP accumulated airflow actuation errors.\nSHORTCARD");
	MakeByte	(0X19582);
	MakeName	(0X19582,	"ETC_DIAG_KE_TPS_VS_MAP_ERROR_COUNT_LIMIT");
	MakeRptCmt	(0X19583,	"Amount to inc the airflow act error count when possible TPS vs MAP airflow actuation error\nSHORTCARD");
	MakeByte	(0X19583);
	MakeName	(0X19583,	"ETC_DIAG_KE_TPS_VS_MAP_ACT_UP_COUNTER");
	MakeRptCmt	(0X19584,	"Amount to dec the tps vs MAF airflow act error count when no actuation error\nSHORTCARD");
	MakeByte	(0X19584);
	MakeName	(0X19584,	"ETC_DIAG_KE_TPS_VS_MAF_ACT_DOWN_COUNTER");
	MakeByte	(0X19585);
	MakeName	(0X19585,	"ETC_DIAG_KE_THR_HI_CTR_INC");
	MakeByte	(0X19586);
	MakeName	(0X19586,	"ETC_DIAG_KE_THR_HI_CTR_POS_ERR_DEC");
	MakeByte	(0X19587);
	MakeName	(0X19587,	"ETC_DIAG_KE_THR_HI_CTR_NEG_ERR_DEC");
	MakeByte	(0X19588);
	MakeName	(0X19588,	"ETC_DIAG_KE_THR_HI_CTR_NEG_THRESH_DEC");
	MakeByte	(0X19589);
	MakeName	(0X19589,	"ETC_DIAG_KE_THR_LO_CTR_INC");
	MakeByte	(0X1958A);
	MakeName	(0X1958A,	"ETC_DIAG_KE_THR_LO_CTR_NEG_ERR_DEC");
	MakeByte	(0X1958B);
	MakeName	(0X1958B,	"ETC_DIAG_KE_THR_LO_CTR_POS_ERR_DEC");
	MakeByte	(0X1958C);
	MakeName	(0X1958C,	"ETC_DIAG_KE_THR_LO_CTR_POS_THRESH_DEC");
	MakeRptCmt	(0X1958E,	"Manifold absolute pressure scaling factor used to convert cylinder air mass to manifold pressure for default calculation.\nkPa/Gram/Cylinder");
	MakeWord	(0X1958E);
	MakeName	(0X1958E,	"MANIFOLD_KE_MAP_DEFAULT_SLOPE");
	MakeRptCmt	(0X19590,	"Manifold absolute pressure offset value for defaultcalculation.\n");
	MakeWord	(0X19590);
	MakeName	(0X19590,	"MANIFOLD_KV_MAP_DEFAULT_OFFSET");
	MakeRptCmt	(0X195B2,	"Manifold absolute pressure offset value for defaultcalculation.\nkPa");
	MakeWord	(0X195B2);
	MakeName	(0X195B2,	"MANIFOLD_KE_MAP_DEFAULT_ENGINE_NOT_RUNNIN");
	MakeWord	(0X195B4);
	MakeName	(0X195B4,	"MANIFOLD_KE_MAF_DEFAULT_SLOPE");
	MakeWord	(0X195B6);
	MakeName	(0X195B6,	"MANIFOLD_KE_MAF_DEFAULT_MINIMUM");
	MakeRptCmt	(0X195B8,	"Manifold absolute pressure sensor scaling factor.\nkPa/Count");
	MakeWord	(0X195B8);
	MakeName	(0X195B8,	"MANIFOLD_KE_MAP_SENSOR_SCALE_FACTOR");
	MakeRptCmt	(0X195BA,	"Manifold absolute pressure sensor offset value.\nkPa");
	MakeWord	(0X195BA);
	MakeName	(0X195BA,	"MANIFOLD_KE_MAP_SENSOR_OFFSET");
	MakeRptCmt	(0X195BC,	"Disable VSS diagnostic below this temperature.\nDegrees C");
	MakeWord	(0X195BC);
	MakeName	(0X195BC,	"T_DG_TASKS_KE_MAN_VSS_COOLANT_TEMPERATURE");
	MakeRptCmt	(0X195BE,	"Delay time to meet enable criteria, before checking VSS.\nCounts");
	MakeByte	(0X195BE);
	MakeName	(0X195BE,	"T_DG_TASKS_KE_MAN_VSS_DELAY");
	MakeRptCmt	(0X195C0,	"Number of failures to fail the code.\nCounts");
	MakeWord	(0X195C0);
	MakeName	(0X195C0,	"T_DG_TASKS_KE_MAN_VSS_DIAG_FAIL");
	MakeRptCmt	(0X195C2,	"Diagnostic does not run above this throttle position.\nPercent");
	MakeWord	(0X195C2);
	MakeName	(0X195C2,	"T_DG_TASKS_KE_MAN_VSS_DIAG_MAX_THROTTLE");
	MakeRptCmt	(0X195C4,	"Diagnostic does not run below this throttle position.\nPercent");
	MakeWord	(0X195C4);
	MakeName	(0X195C4,	"T_DG_TASKS_KE_MAN_VSS_DIAG_MIN_THROTTLE");
	MakeRptCmt	(0X195C6,	"Number of passes to pass the code.\nCounts");
	MakeWord	(0X195C6);
	MakeName	(0X195C6,	"T_DG_TASKS_KE_MAN_VSS_DIAG_PASS");
	MakeRptCmt	(0X195C8,	"Diagnostic does not run below this RPM.\nRPM");
	MakeWord	(0X195C8);
	MakeName	(0X195C8,	"T_DG_TASKS_KE_MAN_VSS_DIAG_RPM");
	MakeRptCmt	(0X195CA,	"Diagnostic does not run above this pressure.\nkPa");
	MakeWord	(0X195CA);
	MakeName	(0X195CA,	"T_DG_TASKS_KV_MAN_VSS_DIAG_MAX_MAP");
	MakeRptCmt	(0X195CE,	"Diagnostic does not run below this pressure.\nkPa");
	MakeWord	(0X195CE);
	MakeName	(0X195CE,	"T_DG_TASKS_KV_MAN_VSS_DIAG_MIN_MAP");
	MakeRptCmt	(0X195D2,	"If Clutch_Switch_Fail_Count exceeds this calibration, a clutch switch failure will be logged to the diagnostic executive\nCounts");
	MakeByte	(0X195D2);
	MakeName	(0X195D2,	"T_DG_TASKS_KE_CLUTCH_SWITCH_FAIL_COUNT_MAX");
	MakeRptCmt	(0X195D3,	"If Clutch_Switch_Sample_Count exceeds this calibration, a clutch switch test passed will be logged to the diagnostic executive\nCounts");
	MakeByte	(0X195D3);
	MakeName	(0X195D3,	"T_DG_TASKS_KE_CLUTCH_SWITCH_SAMPLE_COUNT_MA");
	MakeRptCmt	(0X195D4,	"If PRNDL_Ckt_Fail_Count exceeds this value, PRNDL_Range_Fault will be logged to the diagnostic.\nCounts");
	MakeByte	(0X195D4);
	MakeName	(0X195D4,	"T_DG_TASKS_KE_PRNDL_CKT_FAIL_COUNT_MAX");
	MakeRptCmt	(0X195D5,	"If PRNDL_Ckt_Sample_Count exceeds this value, PRNDL_Range_Passed will be logged to the diagnostic.\nCounts");
	MakeByte	(0X195D5);
	MakeName	(0X195D5,	"T_DG_TASKS_KE_PRNDL_CKT_SAMPLE_COUNT_MAX");
	MakeByte	(0X195D6);
	MakeName	(0X195D6,	"T_DG_TASKS_KE_PRNDL_PNSWITCH_DR_FAIL_CNT");
	MakeByte	(0X195D7);
	MakeName	(0X195D7,	"T_DG_TASKS_KE_PRNDL_PNSWITCH_DR_PASS_CNT");
	MakeByte	(0X195D8);
	MakeName	(0X195D8,	"T_DG_TASKS_KE_PRNDL_PNSWITCH_PN_FAIL_CNT");
	MakeByte	(0X195D9);
	MakeName	(0X195D9,	"T_DG_TASKS_KE_PRNDL_PNSWITCH_PN_PASS_CNT");
	MakeRptCmt	(0X195DA,	"The vehicle speed threshold at which there should be at least one transmission clutch switch transition.\nMPH");
	MakeWord	(0X195DA);
	MakeName	(0X195DA,	"T_DG_TASKS_KE_CLUTCH_VEHICLE_SPEED_THRESH");
	MakeWord	(0X195DC);
	MakeName	(0X195DC,	"T_DG_TASKS_KE_PRNDL_PNSWITCH_ENG_RUN_MIN");
	MakeByte	(0X195DE);
	MakeName	(0X195DE,	"T_DG_TASKS_KE_PRNDL_PNSWITCH_GEAR_MIN");
	MakeWord	(0X195E0);
	MakeName	(0X195E0,	"T_DG_TASKS_KE_PRNDL_PNSWITCH_THROTTLE_MIN");
	MakeRptCmt	(0X195E2,	"Engine troque must be greater than or equal to this in order to run Park/Neutral test of the PRNDL_Switch diagnostic (P706).\nFoot_Pounds");
	MakeWord	(0X195E2);
	MakeName	(0X195E2,	"T_DG_TASKS_KE_PRNDL_PNSWITCH_TORQUE_MIN");
	MakeWord	(0X195E4);
	MakeName	(0X195E4,	"T_DG_TASKS_KE_PRNDL_PNSWITCH_VEH_SPD_MIN");
	MakeByte	(0X195E6);
	MakeName	(0X195E6,	"T_DG_TASKS_KE_PRNDL_PNSWITCH_VOLTAGE_MIN");
	MakeByte	(0X195E7);
	MakeName	(0X195E7,	"T_DG_TASKS_KE_PRNDL_PNSWITCH_VOLTAGE_MAX");
	MakeRptCmt	(0X195E8,	"Minimum threshold that the ratio of V5B1 voltage to 5volt reference can be before setting a fault.\nUnitless");
	MakeWord	(0X195E8);
	MakeName	(0X195E8,	"VOLTAGE_MONITOR_KE_SA_V5B1_FRACTION_LOW");
	MakeRptCmt	(0X195EA,	"Maximum threshold that the ratio of V5B1 voltage to 5volt reference can be before setting a fault.\nUnitless");
	MakeWord	(0X195EA);
	MakeName	(0X195EA,	"VOLTAGE_MONITOR_KE_SA_V5B1_FRACTION_HIGH");
	MakeRptCmt	(0X195EC,	"Minimum threshold that the ratio of V5B2 voltage to 5volt reference can be before setting a fault.\nUnitless");
	MakeWord	(0X195EC);
	MakeName	(0X195EC,	"VOLTAGE_MONITOR_KE_SA_V5B2_FRACTION_LOW");
	MakeRptCmt	(0X195EE,	"Maximum threshold that the ratio of V5B2 voltage to 5volt reference can be before setting a fault.\nUnitless");
	MakeWord	(0X195EE);
	MakeName	(0X195EE,	"VOLTAGE_MONITOR_KE_SA_V5B2_FRACTION_HIGH");
	MakeRptCmt	(0X19600,	"Use this cal to identify the transmission calibration set\nCal_ID_Record");
	MakeName	(0X19600,	"TRANCALIBRATIONS_HEADER");
	MakeName	(0X19604,	"Constant32_Transmission_Calibration_ID");
	MakeName	(0X19608,	"CurveTable_2_Columns_Transmission_Calibration_Level");
	MakeStr		(0X1960C,	0X19615);
	MakeName	(0X1960C,	"CurveTable_8_Columns_Transmission_Calibration_ID_ASCII");
	MakeName	(0X1961A,	"Constant16_Multiplier_for_correcting_VSS_input_for_4WD_transfer_case");
	MakeRptCmt	(0X1961C,	"Ratio of trans output speed to transfer case output.\nFactor");
	MakeWord	(0X1961C);
	MakeName	(0X1961C,	"TRANS_IO_KE_TRANSFER_CASE_RATIO");
	MakeRptCmt	(0X1961E,	"This determines which type of transmission is on the vehicle.\nXmsn. Type");
	MakeByte	(0X1961E);
	MakeName	(0X1961E,	"TRANS_IO_KE_TRANSMISSION_TYPE");
	MakeRptCmt	(0X1961F,	"Used to configure Class 2 3A3C transmission option message for manual transmissions.\nXmsn_Spd_Type");
	MakeByte	(0X1961F);
	MakeName	(0X1961F,	"TRANS_IO_KE_MANUAL_TRANSMISSION_SPEEDS");
	MakeRptCmt	(0X19620,	"Set TRUE if manual transmission has reverse lockout control solenoid.\nBoolean");
	MakeByte	(0X19620);
	MakeName	(0X19620,	"TRANS_IO_KE_REVERSE_LOCKOUT_EQUIPPED");
	MakeRptCmt	(0X19621,	"Used to configure Class 2 3A3C transmission option message for Allison LCT applications.\nAllison_LCT_Model_Type");
	MakeByte	(0X19621);
	MakeName	(0X19621,	"TRANS_IO_KE_ALLISON_LCT_MODEL");
	MakeRptCmt	(0X19622,	"Frequency at which to operate the Force Motor output.\nHertz");
	MakeWord	(0X19622);
	MakeName	(0X19622,	"TRANS_IO_KE_FORCE_MOTOR_FREQUENCY");
	MakeRptCmt	(0X19624,	"Describes the type of clutch switch, if any, used on thevehicle.\nNo_switch/Closed to IGN/GRN");
	MakeByte	(0X19624);
	MakeName	(0X19624,	"TRANS_IO_KE_CLUTCH_SWITCH_TYPE");
	MakeRptCmt	(0X19626,	"Force DRIVE4 value if PRNDL reading is bad for this length of time.\nSeconds");
	MakeWord	(0X19626);
	MakeName	(0X19626,	"TRANS_IO_KE_PRNDL_ERROR_TIME");
	MakeRptCmt	(0X19628,	"Update PRNDL position if PRNDL reading is good for this length of time.\nSeconds");
	MakeWord	(0X19628);
	MakeName	(0X19628,	"TRANS_IO_KE_PRNDL_GOOD_TIME");
	MakeRptCmt	(0X1962A,	"Force DRIVE4 value if PSM reading is bad for this length of time.\nSeconds");
	MakeWord	(0X1962A);
	MakeName	(0X1962A,	"TRANS_IO_KE_PSM_ERROR_TIME");
	MakeRptCmt	(0X1962C,	"Update PSM position if PSM reading is good for this length of time.\nSeconds");
	MakeWord	(0X1962C);
	MakeName	(0X1962C,	"TRANS_IO_KE_PSM_GOOD_TIME");
	MakeRptCmt	(0X1962E,	"PN to Drive shift occurred if RPM drops more than this.\nRPM");
	MakeWord	(0X1962E);
	MakeName	(0X1962E,	"TRANS_IO_KE_RPM_DROP");
	MakeRptCmt	(0X19630,	"Drive to PN shift occurred if RPM rises more than this.\nRPM");
	MakeWord	(0X19630);
	MakeName	(0X19630,	"TRANS_IO_KE_RPM_RISE");
	MakeRptCmt	(0X19632,	"Transmission output speed sensor scaling factor.\nPulses/Rev");
	MakeWord	(0X19632);
	MakeName	(0X19632,	"TRANS_IO_KE_SF_PULSES_PER_REVOLUTION");
	MakeRptCmt	(0X19634,	"If no transmission output speed pulses have been seen for this length of time then the speed is considered to be zero.\nSeconds");
	MakeWord	(0X19634);
	MakeName	(0X19634,	"TRANS_IO_KE_SF_MAX_TIME_SINCE_LAST_PULSE");
	MakeRptCmt	(0X19636,	"True if vehicle is equipped with a Neutral_Start_Switch or Bottom_of_Travel_Clutch_Switch.\nBoolean");
	MakeByte	(0X19636);
	MakeName	(0X19636,	"TRANS_IO_KE_NEUTRAL_START_SWITCH_EQUIPPED");
	MakeWord	(0X19638);
	MakeName	(0X19638,	"TRANS_IO_KE_XMIS_MODULATOR_OFF_DELAY_TIME");
	MakeRptCmt	(0X1963A,	"Throttle position above this cal enables high load shiftpattern in the transmission.\nPercent");
	MakeName	(0X1963A,	"TRANS_IO_KV_XMIS_MODULATOR_TPS");
	MakeRptCmt	(0X19650,	"KV_Xmis_Modulator_TPS minus this cal allows high load shiftpattern to be disabled.\nPercent");
	MakeName	(0X19650,	"TRANS_IO_KV_XMIS_MODULATOR_TPS_HYSTERESIS");
	MakeRptCmt	(0X19666,	"This determines whether manual mode is allowed as a shift pattern.\nBOOLEAN");
	MakeByte	(0X19666);
	MakeName	(0X19666,	"TRANS_IO_KE_MANUAL_MODE_ALLOWED");
	MakeRptCmt	(0X19667,	"This determines how many shift pattern switches are used as input.\nSwitches");
	MakeByte	(0X19667);
	MakeName	(0X19667,	"TRANS_IO_KE_MNP_TYPE");
	MakeRptCmt	(0X19668,	"This is the lower numerical value of NE/TOSS in first gear.MUST BE less than KE_NE_TOSS_First_High.\nNE_TOSS_Ratio");
	MakeWord	(0X19668);
	MakeName	(0X19668,	"TRANS_IO_KE_NE_TOSS_FIRST_LOW");
	MakeRptCmt	(0X1966A,	"This is the higher numerical value of NE/TOSS in first gear.MUST BE greater than KE_NE_TOSS_First_Low.\nNE_TOSS_Ratio");
	MakeWord	(0X1966A);
	MakeName	(0X1966A,	"TRANS_IO_KE_NE_TOSS_FIRST_HIGH");
	MakeRptCmt	(0X1966C,	"This is the lower numerical value of NE/TOSS in second gear.MUST BE less than KE_NE_TOSS_Second_High.\nNE_TOSS_Ratio");
	MakeWord	(0X1966C);
	MakeName	(0X1966C,	"TRANS_IO_KE_NE_TOSS_SECOND_LOW");
	MakeRptCmt	(0X1966E,	"This is the higher numerical value of NE/TOSS in second gear.MUST BE greater than KE_NE_TOSS_Second_Low.\nNE_TOSS_Ratio");
	MakeWord	(0X1966E);
	MakeName	(0X1966E,	"TRANS_IO_KE_NE_TOSS_SECOND_HIGH");
	MakeRptCmt	(0X19670,	"This is the lower numerical value of NE/TOSS in third gear.MUST BE less than KE_NE_TOSS_Third_High.\nNE_TOSS_Ratio");
	MakeWord	(0X19670);
	MakeName	(0X19670,	"TRANS_IO_KE_NE_TOSS_THIRD_LOW");
	MakeRptCmt	(0X19672,	"This is the higher numerical value of NE/TOSS in third gear.MUST BE greater than KE_NE_TOSS_Third_Low.\nNE_TOSS_Ratio");
	MakeWord	(0X19672);
	MakeName	(0X19672,	"TRANS_IO_KE_NE_TOSS_THIRD_HIGH");
	MakeRptCmt	(0X19674,	"This is the lower numerical value of NE/TOSS in fourth gear.MUST BE less than KE_NE_TOSS_Fourth_High.\nNE_TOSS_Ratio");
	MakeWord	(0X19674);
	MakeName	(0X19674,	"TRANS_IO_KE_NE_TOSS_FOURTH_LOW");
	MakeRptCmt	(0X19676,	"This is the higher numerical value of NE/TOSS in fourth gear.MUST BE greater than KE_NE_TOSS_Fourth_Low.\nNE_TOSS_Ratio");
	MakeWord	(0X19676);
	MakeName	(0X19676,	"TRANS_IO_KE_NE_TOSS_FOURTH_HIGH");
	MakeRptCmt	(0X19678,	"This is the lower numerical value of NE/TOSS in fifth gear.MUST BE less than KE_NE_TOSS_Fifth_High.\nNE_TOSS_Ratio");
	MakeWord	(0X19678);
	MakeName	(0X19678,	"TRANS_IO_KE_NE_TOSS_FIFTH_LOW");
	MakeRptCmt	(0X1967A,	"This is the higher numerical value of NE/TOSS in fifth gear.MUST BE greater than KE_NE_TOSS_Fifth_Low.\nNE_TOSS_Ratio");
	MakeWord	(0X1967A);
	MakeName	(0X1967A,	"TRANS_IO_KE_NE_TOSS_FIFTH_HIGH");
	MakeRptCmt	(0X1967C,	"This is the lower numerical value of NE/TOSS in sixth gear.MUST BE less than KE_NE_TOSS_Sixth_High.\nNE_TOSS_Ratio");
	MakeWord	(0X1967C);
	MakeName	(0X1967C,	"TRANS_IO_KE_NE_TOSS_SIXTH_LOW");
	MakeRptCmt	(0X1967E,	"This is the higher numerical value of NE/TOSS in sixth gear.MUST BE greater than KE_NE_TOSS_Sixth_Low.\nNE_TOSS_Ratio");
	MakeWord	(0X1967E);
	MakeName	(0X1967E,	"TRANS_IO_KE_NE_TOSS_SIXTH_HIGH");
	MakeRptCmt	(0X19680,	"This is the value NE_TOSS_Ratio is set to during a PCMstate transition.\nNE_TOSS_Ratio");
	MakeWord	(0X19680);
	MakeName	(0X19680,	"TRANS_IO_KE_NE_TOSS_RATIO_TRANSITION");
	MakeRptCmt	(0X19682,	"The vehicle speed below which reverse is allowed.\nMPH");
	MakeWord	(0X19682);
	MakeName	(0X19682,	"TRANS_IO_KE_REVERSE_ENABLE_ON");
	MakeRptCmt	(0X19684,	"The vehicle speed above which reverse is not allowed.\nMPH");
	MakeWord	(0X19684);
	MakeName	(0X19684,	"TRANS_IO_KE_REVERSE_ENABLE_OFF");
	MakeRptCmt	(0X19686,	"This is the minimum value of NE_TOSS_Ratio in the first CARSgear. MUST BE less than KE_CARS_First_Max.\nNE_TOSS_Ratio");
	MakeWord	(0X19686);
	MakeName	(0X19686,	"TRANS_IO_KE_CARS_FIRST_MIN");
	MakeRptCmt	(0X19688,	"This is the maximum value of NE_TOSS_Ratio in the first CARSgear. MUST BE greater than KE_CARS_First_Min.\nNE_TOSS_Ratio");
	MakeWord	(0X19688);
	MakeName	(0X19688,	"TRANS_IO_KE_CARS_FIRST_MAX");
	MakeRptCmt	(0X1968A,	"This is the minimum value of NE_TOSS_Ratio in the final CARSgear. MUST BE less than KE_CARS_Final_Max.\nNE_TOSS_Ratio");
	MakeWord	(0X1968A);
	MakeName	(0X1968A,	"TRANS_IO_KE_CARS_FINAL_MIN");
	MakeRptCmt	(0X1968C,	"This is the maximum value of NE_TOSS_Ratio in the final CARSgear. MUST BE greater than KE_CARS_Final_Min.\nNE_TOSS_Ratio");
	MakeWord	(0X1968C);
	MakeName	(0X1968C,	"TRANS_IO_KE_CARS_FINAL_MAX");
	MakeRptCmt	(0X1968E,	"Maximum accelerator pedal position for CARS to be enabled.\nPercent");
	MakeWord	(0X1968E);
	MakeName	(0X1968E,	"TRANS_IO_KE_CARS_MAX_PEDAL");
	MakeRptCmt	(0X19690,	"Minimum coolant for CARS to be enabled.\nDegreesC");
	MakeWord	(0X19690);
	MakeName	(0X19690,	"TRANS_IO_KE_CARS_COOLANT");
	MakeRptCmt	(0X19692,	"Vehicle speeds greater than this will disable CARS.\nMPH");
	MakeWord	(0X19692);
	MakeName	(0X19692,	"TRANS_IO_KE_CARS_MAX_SPEED");
	MakeRptCmt	(0X19694,	"Vehicle speeds equal to or less than this will reset the CARS logic to look for the vehicle speed window.\nMPH");
	MakeWord	(0X19694);
	MakeName	(0X19694,	"TRANS_IO_KE_CARS_RESET_SPEED");
	MakeRptCmt	(0X19696,	"Vehicle speeds equal to or greater than this will be the CARS on speed (if currently not on).\nMPH");
	MakeWord	(0X19696);
	MakeName	(0X19696,	"TRANS_IO_KE_CARS_ENABLE_SPEED");
	MakeRptCmt	(0X19698,	"Vehicle speeds hysteresis for low side of vehicle speedenables of CARS.\nMPH");
	MakeWord	(0X19698);
	MakeName	(0X19698,	"TRANS_IO_KE_CARS_SPEED_HYSTERESIS");
	MakeRptCmt	(0X1969A,	"Baro pressure below which CARS is disabled (must be lowerthan KE_CARS_Baro_Low).\nkPa");
	MakeWord	(0X1969A);
	MakeName	(0X1969A,	"TRANS_IO_KE_CARS_BARO_LOW");
	MakeRptCmt	(0X1969C,	"Baro pressure below which CARS is disabled (must be higherthan KE_CARS_Baro_Low).\nkPa");
	MakeWord	(0X1969C);
	MakeName	(0X1969C,	"TRANS_IO_KE_CARS_BARO_HIGH");
	MakeRptCmt	(0X1969E,	"The amount of time to turn CARS light on during bulb check.\nSeconds");
	MakeWord	(0X1969E);
	MakeName	(0X1969E,	"TRANS_IO_KE_CARS_BULB_TIME");
	MakeRptCmt	(0X196A0,	"Determine if the bulb check is to be used.\nBoolean");
	MakeByte	(0X196A0);
	MakeName	(0X196A0,	"TRANS_IO_KE_CARS_BULB_CHECK");
	MakeRptCmt	(0X196A1,	"Set to TRUE if the CARS (skip shift) logic should be executed\nBoolean");
	MakeByte	(0X196A1);
	MakeName	(0X196A1,	"TRANS_IO_KE_EXECUTE_CARS_ALGORITHM");
	MakeRptCmt	(0X196A2,	"Set to TRUE if the CARS (skip shift) logic should directlycontrol the CARS light PCM output. (Class2 message not used)\nBoolean");
	MakeByte	(0X196A2);
	MakeName	(0X196A2,	"TRANS_IO_KE_CONTROL_CARS_LIGHT");
	MakeByte	(0X196A3);
	MakeName	(0X196A3,	"TRANS_IO_KE_MANUAL_XMSN_HAS_TEMP_SENSOR");
	MakeRptCmt	(0X196A4,	"System voltage below which transmission diagnostics willbe disabled.\nVolts");
	MakeByte	(0X196A4);
	MakeName	(0X196A4,	"TCM_IO_INTERFACE_KE_TRANS_DIAG_SYSTEM_VOLT_LOW");
	MakeRptCmt	(0X196A5,	"System voltage above which transmission diagnostics willbe disabled.\nVolts");
	MakeByte	(0X196A5);
	MakeName	(0X196A5,	"TCM_IO_INTERFACE_KE_TRANS_DIAG_SYSTEM_VOLT_HIGH");
	MakeRptCmt	(0X196A6,	"Voltage below which the TCM MIL request will not be monitored\nVolts");
	MakeByte	(0X196A6);
	MakeName	(0X196A6,	"TCM_IO_INTERFACE_KE_ALLISON_TCM_VOLTAGE");
	MakeRptCmt	(0X196A8,	"Time after ignition on that the PCM will start monitoring theAllison TCM MIL request for line integrity check - P0802\nSeconds");
	MakeWord	(0X196A8);
	MakeName	(0X196A8,	"TCM_IO_INTERFACE_KE_TCM_POWERUP_INTEGRITY_DELAY");
	MakeRptCmt	(0X196AA,	"Time after ignition on that the PCM will stop monitoring theAllison TCM MIL request for line integrity check - P0802\nSeconds");
	MakeWord	(0X196AA);
	MakeName	(0X196AA,	"TCM_IO_INTERFACE_KE_TCM_POWERUP_INTEGRITY_COMPLET");
	MakeWord	(0X196AC);
	MakeName	(0X196AC,	"TCM_IO_INTERFACE_KE_TCM_GENERAL_DELAY_REQUEST");
	MakeRptCmt	(0X196AE,	"Allison TCM MIL request line must be active for this amount of time before PCM will log a P0700 and illuminate the MIL.\nSeconds");
	MakeWord	(0X196AE);
	MakeName	(0X196AE,	"TCM_IO_INTERFACE_KE_TCM_MIL_REQUEST_TIME");
	MakeRptCmt	(0X196B0,	"When the TCC PWM is below this threshold the TCC PWM isconsidered OFF.\nPercent");
	MakeWord	(0X196B0);
	MakeName	(0X196B0,	"TCM_IO_INTERFACE_KE_TCC_DC_LOW_THRESH");
	MakeRptCmt	(0X196B2,	"When the TCC PWM is above this threshold the TCC PWM isconsidered ON.\nPercent");
	MakeWord	(0X196B2);
	MakeName	(0X196B2,	"TCM_IO_INTERFACE_KE_TCC_DC_HIGH_THRESH");
	MakeRptCmt	(0X196B4,	"If TRUE, vehicle has four wheel drive.\nBOOLEAN");
	MakeByte	(0X196B4);
	MakeName	(0X196B4,	"TCM_OPTIONS_K_FOUR_WHEEL_DRIVE_AVAILABLE");
	MakeRptCmt	(0X196B5,	"If TRUE, a transmission input speed sensor is present.\nBOOLEAN");
	MakeByte	(0X196B5);
	MakeName	(0X196B5,	"TCM_OPTIONS_K_INPUT_SPEED_PRESENT");
	MakeRptCmt	(0X196B6,	"If TRUE, a transmission input speed sensor after overdrive is present.\nBOOLEAN");
	MakeByte	(0X196B6);
	MakeName	(0X196B6,	"TCM_OPTIONS_K_INP_SPD_SENSOR_AFTER_OVERDRV");
	MakeRptCmt	(0X196B7,	"Indicates whether the transmission has a TCC enable solenoid.\nBOOLEAN");
	MakeByte	(0X196B7);
	MakeName	(0X196B7,	"TCM_OPTIONS_K_TCC_ENABLE_SOLENOID_PRESENT");
	MakeRptCmt	(0X196B8,	"Trans has TCC Release Switch.  Used with 4T65E transmissions.\nBOOLEAN");
	MakeByte	(0X196B8);
	MakeName	(0X196B8,	"TCM_OPTIONS_KE_TRANS_HAS_TCC_RELEASE_SWITCH");
	MakeRptCmt	(0X196BA,	"Used to tune the TCC control solenoid operating frequency\nHertz");
	MakeWord	(0X196BA);
	MakeName	(0X196BA,	"TCM_OPTIONS_KE_TCC_CONTROL_OPERATING_FREQ");
	MakeRptCmt	(0X196BC,	"When TRUE, allows for signed engine torque values and uses the negative torque model.\nT/F");
	MakeByte	(0X196BC);
	MakeName	(0X196BC,	"TCM_OPTIONS_KE_TRANS_HAS_SIGNED_TORQUE_MODEL");
	MakeRptCmt	(0X196BD,	"When TRUE, signed torque pressure control is enabled if KE_Trans_Has_Signed_Torque_Model is also TRUE.\nT/F");
	MakeByte	(0X196BD);
	MakeName	(0X196BD,	"TCM_OPTIONS_KE_SIGNED_TRQ_SHIFT_PRESS_ENBL");
	MakeRptCmt	(0X196BE,	"If TRUE, then the transmission will assume third gear when the wiring harness is disabled; otherwise, second gear.\nBOOLEAN");
	MakeByte	(0X196BE);
	MakeName	(0X196BE,	"TCM_OPTIONS_K_TRANS_HAS_THIRD_GEAR_DEFAULT");
}


static Bytes_7(void) {
        auto x;
#define id x

	MakeRptCmt	(0X196BF,	"If TRUE, a stall torque reduction and/or abuse torquereduction condition is present.\nBOOLEAN");
	MakeByte	(0X196BF);
	MakeName	(0X196BF,	"TCM_OPTIONS_K_USE_STALL_ABUSE_TORQUE_RED");
	MakeRptCmt	(0X196C0,	"If TRUE, Transmission has ECCC\nBOOLEAN");
	MakeByte	(0X196C0);
	MakeName	(0X196C0,	"TCM_OPTIONS_K_TRANS_HAS_ECCC");
	MakeRptCmt	(0X196C1,	"If TRUE, electronic control of the 3-2 downshift timing is available.\nBOOLEAN");
	MakeByte	(0X196C1);
	MakeName	(0X196C1,	"TCM_OPTIONS_K_D32_PRESS_BIAS_CONTROL_AVAIL");
	MakeRptCmt	(0X196C2,	"Determines the amount of time the TCC release switch status waits before transitioning to a new state. (used with 4T65E).\nSeconds");
	MakeWord	(0X196C2);
	MakeName	(0X196C2,	"TCM_OPTIONS_KE_TCC_REL_DBNC_TIME");
	MakeRptCmt	(0X196C4,	"TRUE if force motor feedback current circuit characterization is available and desired, else FALSE.\nT/F");
	MakeByte	(0X196C4);
	MakeName	(0X196C4,	"TCM_OPTIONS_KE_FM_FDBCK_CURR_CRTN_ENABLE");
	MakeRptCmt	(0X196C5,	"Default hydraulic gear for the transmission.\nGear");
	MakeByte	(0X196C5);
	MakeName	(0X196C5,	"TCM_OPTIONS_K_DEFAULT_GEAR");
	MakeRptCmt	(0X196C6,	"Time with out input speed pulses to assume zero speed.\nSeconds");
	MakeWord	(0X196C6);
	MakeName	(0X196C6,	"T_INP_SPEED_KE_INPUT_SPD_ZERO_PULSE_TIME");
	MakeRptCmt	(0X196C8,	"Defines the number of input speed sensor pulses as Input_Speed_Pulses_Per_Rev / KE_Drive_Sproket_Ratio.\nPulses/Rev");
	MakeWord	(0X196C8);
	MakeName	(0X196C8,	"T_INP_SPEED_KE_CALCULATED_PULSES_PER_REV");
	MakeRptCmt	(0X196CA,	"Base pressure for normal pressure pattern, 2nd Gear\nPSI");
	MakeName	(0X196CA,	"T_PRESSURE_TABLES_KV_BASE_PRESSURE_NORMAL_2");
	MakeRptCmt	(0X1970C,	"Base pressure for normal pressure pattern, 3rd Gear\nPSI");
	MakeName	(0X1970C,	"T_PRESSURE_TABLES_KV_BASE_PRESSURE_NORMAL_3");
	MakeRptCmt	(0X1974E,	"Base pressure for normal pressure pattern, 4th Gear\nPSI");
	MakeName	(0X1974E,	"T_PRESSURE_TABLES_KV_BASE_PRESSURE_NORMAL_4");
	MakeRptCmt	(0X19790,	"Base pressure for performance pressure pattern, 2nd Gear\nPSI");
	MakeName	(0X19790,	"T_PRESSURE_TABLES_KV_BASE_PRESSURE_PERFORMANCE_2");
	MakeRptCmt	(0X197D2,	"Base pressure for performance pressure pattern, 3rd Gear\nPSI");
	MakeName	(0X197D2,	"T_PRESSURE_TABLES_KV_BASE_PRESSURE_PERFORMANCE_3");
	MakeRptCmt	(0X19814,	"Base pressure for performance pressure pattern, 4th Gear\nPSI");
	MakeName	(0X19814,	"T_PRESSURE_TABLES_KV_BASE_PRESSURE_PERFORMANCE_4");
	MakeRptCmt	(0X19856,	"3D Downshift Pressure Temperature Compensation\nPSI_S");
	MakeName	(0X19856,	"T_PRESSURE_TABLES_KA_2_DOWN_TEMP_PRESSURE_MOD");
	MakeRptCmt	(0X19900,	"3D Downshift Pressure Temperature Compensation\nPSI_S");
	MakeName	(0X19900,	"T_PRESSURE_TABLES_KA_3_DOWN_TEMP_PRESSURE_MOD");
	MakeRptCmt	(0X199AA,	"3D Downshift Pressure Temperature Compensation\nPSI_S");
	MakeName	(0X199AA,	"T_PRESSURE_TABLES_KA_4_DOWN_TEMP_PRESSURE_MOD");
	MakeRptCmt	(0X19A54,	"3D Pressure Temperature Compensation\nPSI_S");
	MakeName	(0X19A54,	"T_PRESSURE_TABLES_KA_2ND_PRESSURE_TEMP_COMP_TABLE");
	MakeRptCmt	(0X19AFE,	"3D Pressure Temperature Compensation\nPSI_S");
	MakeName	(0X19AFE,	"T_PRESSURE_TABLES_KA_3RD_PRESSURE_TEMP_COMP_TABLE");
	MakeRptCmt	(0X19BA8,	"3D Pressure Temperature Compensation\nPSI_S");
	MakeName	(0X19BA8,	"T_PRESSURE_TABLES_KA_4TH_PRESSURE_TEMP_COMP_TABLE");
	MakeRptCmt	(0X19C52,	"Braking pressure for 1st gear\nPSI");
	MakeName	(0X19C52,	"T_PRESSURE_TABLES_KV_1_BRAKING_PRESS_TABLE");
	MakeRptCmt	(0X19C74,	"Braking pressure for 2nd gear\nPSI");
	MakeName	(0X19C74,	"T_PRESSURE_TABLES_KV_2_BRAKING_PRESS_TABLE");
	MakeRptCmt	(0X19C96,	"Braking pressure for 3rd gear\nPSI");
	MakeName	(0X19C96,	"T_PRESSURE_TABLES_KV_3_BRAKING_PRESS_TABLE");
	MakeRptCmt	(0X19CB8,	"Normal downshift pressure offset modifier for 2nd gear\nPSI_S");
	MakeName	(0X19CB8,	"T_PRESSURE_TABLES_KV_2_1_NORMAL_PRESS_MODIFIER");
	MakeRptCmt	(0X19CDA,	"Normal downshift pressure offset modifier for 3rd gear\nPSI_S");
	MakeName	(0X19CDA,	"T_PRESSURE_TABLES_KV_3_2_NORMAL_PRESS_MODIFIER");
	MakeRptCmt	(0X19CFC,	"Normal downshift pressure offset modifier for 4th gear\nPSI_S");
	MakeName	(0X19CFC,	"T_PRESSURE_TABLES_KV_4_3_NORMAL_PRESS_MODIFIER");
	MakeRptCmt	(0X19D1E,	"Used todetermine second gear Base_Pressure during downshifts whenbraking element is applied - negative torque model.\nPSI");
	MakeName	(0X19D1E,	"T_PRESSURE_TABLES_KV_BASE_PRESSURE_BRAKE_ON_ELE_2");
	MakeRptCmt	(0X19D5E,	"Used todetermine third gear Base_Pressure during downshifts whenbraking element is applied - negative torque model.\nPSI");
	MakeName	(0X19D5E,	"T_PRESSURE_TABLES_KV_BASE_PRESSURE_BRAKE_ON_ELE_3");
	MakeRptCmt	(0X19D9E,	"Used todetermine fourth gear Base_Pressure during downshifts whenbraking element is applied - negative torque model.\nPSI");
	MakeName	(0X19D9E,	"T_PRESSURE_TABLES_KV_BASE_PRESSURE_BRAKE_ON_ELE_4");
	MakeRptCmt	(0X19DDE,	"Base pressure multiplier for a 1-2 upshift.\nScaler");
	MakeName	(0X19DDE,	"T_PRESSURE_TABLES_KA_1_2_GEARBOX_INERTIA_TRQ_MULT");
	MakeRptCmt	(0X19E88,	"Base pressure multiplier for a 1-2 upshift.\nScaler");
	MakeName	(0X19E88,	"T_PRESSURE_TABLES_KA_2_3_GEARBOX_INERTIA_TRQ_MULT");
	MakeRptCmt	(0X19F32,	"Base pressure multiplier for a 1-2 upshift.\nScaler");
	MakeName	(0X19F32,	"T_PRESSURE_TABLES_KA_3_4_GEARBOX_INERTIA_TRQ_MULT");
	MakeRptCmt	(0X19FDC,	"Time limit during which abuse mode may be active as a functionof temperature\nSeconds");
	MakeName	(0X19FDC,	"T_SEM_KV_DRIVE_RANGE_TIME");
	MakeRptCmt	(0X19FFE,	"Time limit during which abuse mode may be active as a functionof temperature\nSeconds");
	MakeName	(0X19FFE,	"T_SEM_KV_REVERSE_RANGE_TIME");
	MakeRptCmt	(0X1A020,	"Percentage of total torque reduction for 2-1 downshift\nPercent");
	MakeName	(0X1A020,	"T_SEM_KV_FIRST_DN_PERCENT_TOT_TRQ_RED");
	MakeRptCmt	(0X1A042,	"Percentage of total torque reduction for 3-2 downshift\nPercent");
	MakeName	(0X1A042,	"T_SEM_KV_SECOND_DN_PERCENT_TOT_TRQ_RED");
	MakeRptCmt	(0X1A064,	"Percentage of total torque reduction for 4-3 downshift\nPercent");
	MakeName	(0X1A064,	"T_SEM_KV_THIRD_DN_PERCENT_TOT_TRQ_RED");
	MakeName	(0X1A070,	"Constant16_D2901___TCC_Minimum_Pressure_???");
	MakeRptCmt	(0X1A086,	"Percentage of total torque reduction for 1-2 upshiftusing Normal pressure pattern\nPercent");
	MakeName	(0X1A086,	"T_SEM_KV_UPSHIFT_TOT_TRQ_RED_NORM_2");
	MakeRptCmt	(0X1A0A8,	"Percentage of total torque reduction for 2-3 upshiftusing Normal pressure pattern\nPercent");
	MakeName	(0X1A0A8,	"T_SEM_KV_UPSHIFT_TOT_TRQ_RED_NORM_3");
	MakeRptCmt	(0X1A0CA,	"Percentage of total torque reduction for 3-4 upshiftusing Normal pressure pattern\nPercent");
	MakeName	(0X1A0CA,	"T_SEM_KV_UPSHIFT_TOT_TRQ_RED_NORM_4");
	MakeRptCmt	(0X1A0EC,	"Percentage of total torque reduction for 1-2 upshiftusing Performance pressure pattern\nPercent");
	MakeName	(0X1A0EC,	"T_SEM_KV_UPSHIFT_TOT_TRQ_RED_PERF_2");
	MakeRptCmt	(0X1A10E,	"Percentage of total torque reduction for 2-3 upshiftusing Performance pressure pattern\nPercent");
	MakeName	(0X1A10E,	"T_SEM_KV_UPSHIFT_TOT_TRQ_RED_PERF_3");
	MakeRptCmt	(0X1A130,	"Percentage of total torque reduction for 3-4 upshiftusing Performance pressure pattern\nPercent");
	MakeName	(0X1A130,	"T_SEM_KV_UPSHIFT_TOT_TRQ_RED_PERF_4");
	MakeRptCmt	(0X1A152,	"These flags will enable or disable ETC shift stabilization for the indicated shift pattern.\nT/F");
	MakeByte	(0X1A152);
	MakeName	(0X1A152,	"T_SHIFT_TABLES_KV_SHIFT_STAB_SHIFT_PATTRN_ENBLE");
	MakeRptCmt	(0X1A15E,	"Normal 1st to 2nd gear upshift shift line table\nMPH");
	MakeName	(0X1A15E,	"T_SHIFT_TABLES_KV_1_2_NORMAL_LINE");
	MakeRptCmt	(0X1A180,	"Normal 2nd to 3rd gear upshift shift line table\nMPH");
	MakeName	(0X1A180,	"T_SHIFT_TABLES_KV_2_3_NORMAL_LINE");
	MakeRptCmt	(0X1A1A2,	"Normal 3rd to 4th gear upshift shift line table\nMPH");
	MakeName	(0X1A1A2,	"T_SHIFT_TABLES_KV_3_4_NORMAL_LINE");
	MakeRptCmt	(0X1A1C4,	"Normal 2nd to 1st gear downshift shift line table\nMPH");
	MakeName	(0X1A1C4,	"T_SHIFT_TABLES_KV_2_1_NORMAL_LINE");
	MakeRptCmt	(0X1A1E6,	"Normal 3rd to 2nd gear downshift shift line table\nMPH");
	MakeName	(0X1A1E6,	"T_SHIFT_TABLES_KV_3_2_NORMAL_LINE");
	MakeRptCmt	(0X1A208,	"Normal 4th to 3rd gear downshift shift line table\nMPH");
	MakeName	(0X1A208,	"T_SHIFT_TABLES_KV_4_3_NORMAL_LINE");
	MakeRptCmt	(0X1A22A,	"Cruise 1st to 2nd gear upshift shift line table\nMPH");
	MakeName	(0X1A22A,	"T_SHIFT_TABLES_KV_1_2_CRUISE_LINE");
	MakeRptCmt	(0X1A24C,	"Cruise 2nd to 3rd gear upshift shift line table\nMPH");
	MakeName	(0X1A24C,	"T_SHIFT_TABLES_KV_2_3_CRUISE_LINE");
	MakeRptCmt	(0X1A26E,	"Cruise 3rd to 4th gear upshift shift line table\nMPH");
	MakeName	(0X1A26E,	"T_SHIFT_TABLES_KV_3_4_CRUISE_LINE");
	MakeRptCmt	(0X1A290,	"Cruise 2nd to 1st gear downshift shift line table\nMPH");
	MakeName	(0X1A290,	"T_SHIFT_TABLES_KV_2_1_CRUISE_LINE");
	MakeRptCmt	(0X1A2B2,	"Cruise 3rd to 2nd gear downshift shift line table\nMPH");
	MakeName	(0X1A2B2,	"T_SHIFT_TABLES_KV_3_2_CRUISE_LINE");
	MakeRptCmt	(0X1A2D4,	"Cruise 4th to 3rd gear downshift shift line table\nMPH");
	MakeName	(0X1A2D4,	"T_SHIFT_TABLES_KV_4_3_CRUISE_LINE");
	MakeRptCmt	(0X1A2F6,	"Drive-2 1st to 2nd gear upshift shift line table\nMPH");
	MakeName	(0X1A2F6,	"T_SHIFT_TABLES_KV_1_2_DRIVE_2_LINE");
	MakeRptCmt	(0X1A318,	"Drive-2 2nd to 3rd gear downshift shift line cal\nMPH");
	MakeName	(0X1A318,	"T_SHIFT_TABLES_KE_2_3_DRIVE_2_LINE");
	MakeRptCmt	(0X1A31A,	"Drive-2 2nd to 1st gear downshift shift line table\nMPH");
	MakeName	(0X1A31A,	"T_SHIFT_TABLES_KV_2_1_DRIVE_2_LINE");
	MakeRptCmt	(0X1A33C,	"Drive-2 3rd to 2nd gear downshift shift line cal\nMPH");
	MakeName	(0X1A33C,	"T_SHIFT_TABLES_KE_3_2_DRIVE_2_LINE");
	MakeRptCmt	(0X1A33E,	"Drive-Low 1st to 2nd gear upshift shift line.\nMPH");
	MakeName	(0X1A33E,	"T_SHIFT_TABLES_KE_1_2_DRIVE_LOW_LINE");
	MakeRptCmt	(0X1A340,	"Drive-Low 2nd to 1st gear downshift shift line.\nMPH");
	MakeName	(0X1A340,	"T_SHIFT_TABLES_KE_2_1_DRIVE_LOW_LINE");
	MakeRptCmt	(0X1A342,	"Drive-Low 2nd to 3rd gear upshift shift line.\nMPH");
	MakeName	(0X1A342,	"T_SHIFT_TABLES_KE_2_3_DRIVE_LOW_LINE");
	MakeRptCmt	(0X1A344,	"Drive-Low 3rd to 2nd gear downshift shift line.\nMPH");
	MakeName	(0X1A344,	"T_SHIFT_TABLES_KE_3_2_DRIVE_LOW_LINE");
	MakeRptCmt	(0X1A346,	"Maximum amount shift point could be modified when inheater performance/engine protection mode\nMPH");
	MakeName	(0X1A346,	"T_SHIFT_TABLES_KV_1_2_HP_EP_DELTA_LINE");
	MakeRptCmt	(0X1A368,	"Maximum amount shift point could be modified when inheater performance/engine protection mode\nMPH");
	MakeName	(0X1A368,	"T_SHIFT_TABLES_KV_2_3_HP_EP_DELTA_LINE");
	MakeRptCmt	(0X1A38A,	"Maximum amount shift point could be modified when inheater performance/engine protection mode\nMPH");
	MakeName	(0X1A38A,	"T_SHIFT_TABLES_KV_3_4_HP_EP_DELTA_LINE");
	MakeRptCmt	(0X1A3AC,	"Maximum amount shift point could be modified when inheater performance/engine protection mode\nMPH");
	MakeName	(0X1A3AC,	"T_SHIFT_TABLES_KV_2_1_HP_EP_DELTA_LINE");
	MakeRptCmt	(0X1A3CE,	"Maximum amount shift point could be modified when inheater performance/engine protection mode\nMPH");
	MakeName	(0X1A3CE,	"T_SHIFT_TABLES_KV_3_2_HP_EP_DELTA_LINE");
	MakeRptCmt	(0X1A3F0,	"Maximum amount shift point could be modified when inheater performance/engine protection mode\nMPH");
	MakeName	(0X1A3F0,	"T_SHIFT_TABLES_KV_4_3_HP_EP_DELTA_LINE");
	MakeRptCmt	(0X1A412,	"Hot normal 1st to 2nd gear upshift shift line.\nMPH");
	MakeName	(0X1A412,	"T_SHIFT_TABLES_KV_1_2_HOT_NORMAL_LINE");
	MakeRptCmt	(0X1A434,	"Hot normal 2nd to 3rd gear upshift shift line.\nMPH");
	MakeName	(0X1A434,	"T_SHIFT_TABLES_KV_2_3_HOT_NORMAL_LINE");
	MakeRptCmt	(0X1A456,	"Hot normal 3rd to 4th gear upshift shift line.\nMPH");
	MakeName	(0X1A456,	"T_SHIFT_TABLES_KV_3_4_HOT_NORMAL_LINE");
	MakeRptCmt	(0X1A478,	"Hot normal 1st to 2nd gear upshift shift line.\nMPH");
	MakeName	(0X1A478,	"T_SHIFT_TABLES_KV_2_1_HOT_NORMAL_LINE");
	MakeRptCmt	(0X1A49A,	"Hot normal 2nd to 3rd gear upshift shift line.\nMPH");
	MakeName	(0X1A49A,	"T_SHIFT_TABLES_KV_3_2_HOT_NORMAL_LINE");
	MakeRptCmt	(0X1A4BC,	"Hot normal 3rd to 4th gear upshift shift line.\nMPH");
	MakeName	(0X1A4BC,	"T_SHIFT_TABLES_KV_4_3_HOT_NORMAL_LINE");
	MakeRptCmt	(0X1A4DE,	"Performance 1st to 2nd gear upshift shift line.\nMPH");
	MakeName	(0X1A4DE,	"T_SHIFT_TABLES_KV_1_2_PERFORMANCE");
	MakeRptCmt	(0X1A500,	"Performance 2nd to 3rd gear upshift shift line.\nMPH");
	MakeName	(0X1A500,	"T_SHIFT_TABLES_KV_2_3_PERFORMANCE");
	MakeRptCmt	(0X1A522,	"Performance 3rd to 4th gear upshift shift line.\nMPH");
	MakeName	(0X1A522,	"T_SHIFT_TABLES_KV_3_4_PERFORMANCE");
	MakeRptCmt	(0X1A544,	"Performance 1st to 2nd gear upshift shift line.\nMPH");
	MakeName	(0X1A544,	"T_SHIFT_TABLES_KV_2_1_PERFORMANCE");
	MakeRptCmt	(0X1A566,	"Performance 2nd to 3rd gear upshift shift line.\nMPH");
	MakeName	(0X1A566,	"T_SHIFT_TABLES_KV_3_2_PERFORMANCE");
	MakeRptCmt	(0X1A588,	"Performance 3rd to 4th gear upshift shift line.\nMPH");
	MakeName	(0X1A588,	"T_SHIFT_TABLES_KV_4_3_PERFORMANCE");
	MakeRptCmt	(0X1A5AA,	"Detent 1st to 2nd gear upshift shift point.\nMPH");
	MakeName	(0X1A5AA,	"T_SHIFT_TABLES_KE_1_2_DETENT");
	MakeRptCmt	(0X1A5AC,	"Detent 2nd to 3rd gear upshift shift point.\nMPH");
	MakeName	(0X1A5AC,	"T_SHIFT_TABLES_KE_2_3_DETENT");
	MakeRptCmt	(0X1A5AE,	"Detent 3rd to 4th gear upshift shift point.\nMPH");
	MakeName	(0X1A5AE,	"T_SHIFT_TABLES_KE_3_4_DETENT");
	MakeRptCmt	(0X1A5B0,	"Detent 1st to 2nd gear upshift shift point.\nMPH");
	MakeName	(0X1A5B0,	"T_SHIFT_TABLES_KE_2_1_DETENT");
	MakeRptCmt	(0X1A5B2,	"Detent 2nd to 3rd gear upshift shift point.\nMPH");
	MakeName	(0X1A5B2,	"T_SHIFT_TABLES_KE_3_2_DETENT");
	MakeRptCmt	(0X1A5B4,	"Detent 3rd to 4th gear upshift shift point.\nMPH");
	MakeName	(0X1A5B4,	"T_SHIFT_TABLES_KE_4_3_DETENT");
	MakeRptCmt	(0X1A5B6,	"Hot detent 1st to 2nd gear upshift shift point.\nMPH");
	MakeName	(0X1A5B6,	"T_SHIFT_TABLES_KE_1_2_HOT_DETENT");
	MakeRptCmt	(0X1A5B8,	"Hot detent 2nd to 3rd gear upshift shift point.\nMPH");
	MakeName	(0X1A5B8,	"T_SHIFT_TABLES_KE_2_3_HOT_DETENT");
	MakeRptCmt	(0X1A5BA,	"Hot detent 3rd to 4th gear upshift shift point.\nMPH");
	MakeName	(0X1A5BA,	"T_SHIFT_TABLES_KE_3_4_HOT_DETENT");
	MakeRptCmt	(0X1A5BC,	"Hot detent 1st to 2nd gear upshift shift point.\nMPH");
	MakeName	(0X1A5BC,	"T_SHIFT_TABLES_KE_2_1_HOT_DETENT");
	MakeRptCmt	(0X1A5BE,	"Hot detent 2nd to 3rd gear upshift shift point.\nMPH");
	MakeName	(0X1A5BE,	"T_SHIFT_TABLES_KE_3_2_HOT_DETENT");
	MakeRptCmt	(0X1A5C0,	"Hot detent 3rd to 4th gear upshift shift point.\nMPH");
	MakeName	(0X1A5C0,	"T_SHIFT_TABLES_KE_4_3_HOT_DETENT");
	MakeRptCmt	(0X1A5C2,	"Performance detent 1st to 2nd gear upshift shift point.\nMPH");
	MakeName	(0X1A5C2,	"T_SHIFT_TABLES_KE_1_2_PERFORMANCE_DETENT");
	MakeRptCmt	(0X1A5C4,	"Performance detent 2nd to 3rd gear upshift shift point.\nMPH");
	MakeName	(0X1A5C4,	"T_SHIFT_TABLES_KE_2_3_PERFORMANCE_DETENT");
	MakeRptCmt	(0X1A5C6,	"Performance detent 3rd to 4th gear upshift shift point.\nMPH");
	MakeName	(0X1A5C6,	"T_SHIFT_TABLES_KE_3_4_PERFORMANCE_DETENT");
	MakeRptCmt	(0X1A5C8,	"Performance detent 1st to 2nd gear upshift shift point.\nMPH");
	MakeName	(0X1A5C8,	"T_SHIFT_TABLES_KE_2_1_PERFORMANCE_DETENT");
	MakeRptCmt	(0X1A5CA,	"Performance detent 2nd to 3rd gear upshift shift point.\nMPH");
	MakeName	(0X1A5CA,	"T_SHIFT_TABLES_KE_3_2_PERFORMANCE_DETENT");
	MakeRptCmt	(0X1A5CC,	"Performance detent 3rd to 4th gear upshift shift point.\nMPH");
	MakeName	(0X1A5CC,	"T_SHIFT_TABLES_KE_4_3_PERFORMANCE_DETENT");
	MakeRptCmt	(0X1A5CE,	"Altitude compensation speed offset for 1st to 2nd normal upshift.\nMPH");
	MakeName	(0X1A5CE,	"T_SHIFT_TABLES_KV_1_2_NORMAL_ALTITUDE_OFFSET");
	MakeRptCmt	(0X1A5E0,	"Altitude compensation speed offset for 2nd to 3rd upshift.\nMPH");
	MakeName	(0X1A5E0,	"T_SHIFT_TABLES_KV_2_3_HOT_ALTITUDE_OFFSET");
	MakeRptCmt	(0X1A5F2,	"Altitude compensation speed offset for 3rd to 4th upshift.\nMPH");
	MakeName	(0X1A5F2,	"T_SHIFT_TABLES_KV_3_4_HOT_ALTITUDE_OFFSET");
	MakeRptCmt	(0X1A604,	"Altitude compensation speed offset for 3rd to 2nd downshift.\nMPH");
	MakeName	(0X1A604,	"T_SHIFT_TABLES_KV_3_2_HOT_ALTITUDE_OFFSET");
	MakeRptCmt	(0X1A616,	"Altitude compensation speed offset for 4th to 3rd downshift.\nMPH");
	MakeName	(0X1A616,	"T_SHIFT_TABLES_KV_4_3_HOT_ALTITUDE_OFFSET");
	MakeRptCmt	(0X1A628,	"Altitude compensation speed offset for 1st to 2nd detent upshift.\nMPH");
	MakeName	(0X1A628,	"T_SHIFT_TABLES_KE_1_2_DETENT_ALTITUDE_OFFSET");
	MakeRptCmt	(0X1A62A,	"Altitude compensation speed offset for 2nd to 3rd detent upshift.\nMPH");
	MakeName	(0X1A62A,	"T_SHIFT_TABLES_KE_2_3_DETENT_ALTITUDE_OFFSET");
	MakeRptCmt	(0X1A62C,	"Altitude compensation speed offset for 3rd to 4th detent upshift.\nMPH");
	MakeName	(0X1A62C,	"T_SHIFT_TABLES_KE_3_4_DETENT_ALTITUDE_OFFSET");
	MakeRptCmt	(0X1A62E,	"Altitude compensation speed offset for 2nd to 1st detent downshift.\nMPH");
	MakeName	(0X1A62E,	"T_SHIFT_TABLES_KE_2_1_DETENT_ALTITUDE_OFFSET");
	MakeRptCmt	(0X1A630,	"Altitude compensation speed offset for 3rd to 2nd detent downshift.\nMPH");
	MakeName	(0X1A630,	"T_SHIFT_TABLES_KE_3_2_DETENT_ALTITUDE_OFFSET");
	MakeRptCmt	(0X1A632,	"Altitude compensation speed offset for 4th to 3rd detent downshift.\nMPH");
	MakeName	(0X1A632,	"T_SHIFT_TABLES_KE_4_3_DETENT_ALTITUDE_OFFSET");
	MakeRptCmt	(0X1A634,	"Engine speed threshold for a 1-2 detent upshift\nRPM");
	MakeName	(0X1A634,	"T_SHIFT_TABLES_KE_1_2_DETENT_RPM_LINE");
	MakeRptCmt	(0X1A636,	"Engine speed threshold for a 2-3 detent upshift\nRPM");
	MakeName	(0X1A636,	"T_SHIFT_TABLES_KE_2_3_DETENT_RPM_LINE");
	MakeRptCmt	(0X1A638,	"Engine speed threshold for a 3-4 detent upshift\nRPM");
	MakeName	(0X1A638,	"T_SHIFT_TABLES_KE_3_4_DETENT_RPM_LINE");
	MakeRptCmt	(0X1A63A,	"Engine speed threshold for a 1-2 hot detent upshift\nRPM");
	MakeName	(0X1A63A,	"T_SHIFT_TABLES_KE_1_2_HOT_DETENT_RPM_LINE");
	MakeRptCmt	(0X1A63C,	"Engine speed threshold for a 2-3 hot detent upshift\nRPM");
	MakeName	(0X1A63C,	"T_SHIFT_TABLES_KE_2_3_HOT_DETENT_RPM_LINE");
	MakeRptCmt	(0X1A63E,	"Engine speed threshold for a 3-4 hot detent upshift\nRPM");
	MakeName	(0X1A63E,	"T_SHIFT_TABLES_KE_3_4_HOT_DETENT_RPM_LINE");
	MakeRptCmt	(0X1A640,	"Engine speed cold temperature 1-2 detent upshift modifier\nRPM");
	MakeName	(0X1A640,	"T_SHIFT_TABLES_KE_1_2_RPM_HP_EP_DELTA_LINE");
	MakeRptCmt	(0X1A642,	"Engine speed cold temperature 2-3 detent upshift modifier\nRPM");
	MakeName	(0X1A642,	"T_SHIFT_TABLES_KE_2_3_RPM_HP_EP_DELTA_LINE");
	MakeRptCmt	(0X1A644,	"Engine speed cold temperature 3-4 detent upshift modifier\nRPM");
	MakeName	(0X1A644,	"T_SHIFT_TABLES_KE_3_4_RPM_HP_EP_DELTA_LINE");
	MakeRptCmt	(0X1A646,	"Engine speed threshold for a 1-2 perf. detent upshift.\nRPM");
	MakeName	(0X1A646,	"T_SHIFT_TABLES_KE_1_2_PERF_DETENT_RPM");
	MakeRptCmt	(0X1A648,	"Engine speed threshold for a 2-3 perf. detent upshift.\nRPM");
	MakeName	(0X1A648,	"T_SHIFT_TABLES_KE_2_3_PERF_DETENT_RPM");
	MakeRptCmt	(0X1A64A,	"Engine speed threshold for a 3-4 perf. detent upshift.\nRPM");
	MakeName	(0X1A64A,	"T_SHIFT_TABLES_KE_3_4_PERF_DETENT_RPM");
	MakeRptCmt	(0X1A64C,	"Altitude compensation engine speed offset for a 1st to 2nd upshift.\nRPM");
	MakeName	(0X1A64C,	"T_SHIFT_TABLES_KE_1_2_ALTITUDE_ENG_SPD_OFFSET");
	MakeRptCmt	(0X1A64E,	"Altitude compensation engine speed offset for a 2nd to 3rd upshift.\nRPM");
	MakeName	(0X1A64E,	"T_SHIFT_TABLES_KE_2_3_ALTITUDE_ENG_SPD_OFFSET");
	MakeDword	(x=0X1A64F);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X1A64F,	"Flag_0x01_D3601___Performance_Mode_Pressure_Adjust_Disable_?");
	MakeWord	(0X1A656);
	MakeName	(0X1A658,	"T_SHIFT_TABLES_KV_DNSHFT_COOLANT_DUMP_LIMIT");
	MakeWord	(0X1A65E);
	MakeName	(0X1A65E,	"T_SHIFT_TABLES_KV_UPSHFT_COLD_ENG_STRT_LIMIT");
	MakeWord	(0X1A664);
	MakeName	(0X1A664,	"T_SHIFT_TABLES_KV_UPSHFT_COOLANT_DUMP_LIMIT");
	MakeRptCmt	(0X1A66A,	"Used tp determine maximum amount of throttle before a 2-1 downshift is commanded.\n%");
	MakeName	(0X1A66A,	"T_SHIFT_TABLES_KV_12_NORM_MAX_THR_ALLOWED");
	MakeRptCmt	(0X1A68C,	"Used tp determine maximum amount of throttle before a 3-2 downshift is commanded.\n%");
	MakeName	(0X1A68C,	"T_SHIFT_TABLES_KV_23_NORM_MAX_THR_ALLOWED");
	MakeRptCmt	(0X1A6AE,	"Used tp determine maximum amount of throttle before a 4-3 downshift is commanded.\n%");
	MakeName	(0X1A6AE,	"T_SHIFT_TABLES_KV_34_NORM_MAX_THR_ALLOWED");
	MakeRptCmt	(0X1A6D0,	"Used tp determine maximum amount of throttle before a 2-1 downshift is commanded.\n%");
	MakeName	(0X1A6D0,	"T_SHIFT_TABLES_KV_12_CRS_MAX_THR_ALLOWED");
	MakeRptCmt	(0X1A6F2,	"Used tp determine maximum amount of throttle before a 3-2 downshift is commanded.\n%");
	MakeName	(0X1A6F2,	"T_SHIFT_TABLES_KV_23_CRS_MAX_THR_ALLOWED");
	MakeRptCmt	(0X1A714,	"Used tp determine maximum amount of throttle before a 4-3 downshift is commanded.\n%");
	MakeName	(0X1A714,	"T_SHIFT_TABLES_KV_34_CRS_MAX_THR_ALLOWED");
	MakeRptCmt	(0X1A736,	"Used tp determine maximum amount of throttle before a 2-1 downshift is commanded.\n%");
	MakeName	(0X1A736,	"T_SHIFT_TABLES_KV_12_PERF_MAX_THR_ALLOWED");
	MakeRptCmt	(0X1A758,	"Used tp determine maximum amount of throttle before a 3-2 downshift is commanded.\n%");
	MakeName	(0X1A758,	"T_SHIFT_TABLES_KV_23_PERF_MAX_THR_ALLOWED");
	MakeRptCmt	(0X1A77A,	"Used tp determine maximum amount of throttle before a 4-3 downshift is commanded.\n%");
	MakeName	(0X1A77A,	"T_SHIFT_TABLES_KV_34_PERF_MAX_THR_ALLOWED");
	MakeRptCmt	(0X1A79C,	"Drive-Low urban 1st to 2nd gear upshift shift line table\nMPH");
	MakeName	(0X1A79C,	"T_SHIFT_TABLES_KV_1_2_DRIVE_LOW_URBAN_LINE");
	MakeRptCmt	(0X1A7BE,	"Drive-Low urban 2nd to 3rd gear upshift shift line table\nMPH");
	MakeName	(0X1A7BE,	"T_SHIFT_TABLES_KV_2_3_DRIVE_LOW_URBAN_LINE");
	MakeRptCmt	(0X1A7E0,	"Drive-Low urban 2nd to 1st gear downshift shift line table\nMPH");
	MakeName	(0X1A7E0,	"T_SHIFT_TABLES_KV_2_1_DRIVE_LOW_URBAN_LINE");
	MakeRptCmt	(0X1A802,	"Drive-Low urban 3rd to 2nd gear downshift shift line table\nMPH");
	MakeName	(0X1A802,	"T_SHIFT_TABLES_KV_3_2_DRIVE_LOW_URBAN_LINE");
	MakeRptCmt	(0X1A824,	"Altitude compensation speed offset for 2nd to 3rd normal upshift.\nMPH");
	MakeName	(0X1A824,	"T_SHIFT_TABLES_KV_2_3_NORMAL_ALTITUDE_OFFSET");
	MakeRptCmt	(0X1A836,	"Altitude compensation speed offset for 3rd to 4th normal upshift.\nMPH");
	MakeName	(0X1A836,	"T_SHIFT_TABLES_KV_3_4_NORMAL_ALTITUDE_OFFSET");
	MakeRptCmt	(0X1A848,	"Altitude compensation speed offset for 3rd to 2nd normal downshift.\nMPH");
	MakeName	(0X1A848,	"T_SHIFT_TABLES_KV_3_2_NORMAL_ALTITUDE_OFFSET");
	MakeRptCmt	(0X1A85A,	"Altitude compensation speed offset for 4th to 3rd normal downshift.\nMPH");
	MakeName	(0X1A85A,	"T_SHIFT_TABLES_KV_4_3_NORMAL_ALTITUDE_OFFSET");
	MakeRptCmt	(0X1A86C,	"Altitude compensation speed offset for 1st to 2nd hot normal upshift.\nMPH");
	MakeName	(0X1A86C,	"T_SHIFT_TABLES_KV_1_2_HOT_ALTITUDE_OFFSET");
	MakeRptCmt	(0X1A87E,	"Altitude compensation speed offset for 1st to 2nd performance upshift.\nMPH");
	MakeName	(0X1A87E,	"T_SHIFT_TABLES_KV_1_2_PERF_ALTITUDE_OFFSET");
	MakeRptCmt	(0X1A890,	"Altitude compensation speed offset for 2nd to 3rd performance upshift.\nMPH");
	MakeName	(0X1A890,	"T_SHIFT_TABLES_KV_2_3_PERF_ALTITUDE_OFFSET");
	MakeRptCmt	(0X1A8A2,	"Altitude compensation speed offset for 3rd to 4th performance upshift.\nMPH");
	MakeName	(0X1A8A2,	"T_SHIFT_TABLES_KV_3_4_PERF_ALTITUDE_OFFSET");
	MakeRptCmt	(0X1A8B4,	"Altitude compensation speed offset for 3rd to 2nd performance downshift.\nMPH");
	MakeName	(0X1A8B4,	"T_SHIFT_TABLES_KV_3_2_PERF_ALTITUDE_OFFSET");
	MakeRptCmt	(0X1A8C6,	"Altitude compensation speed offset for 4th to 3rd performance downshift.\nMPH");
	MakeName	(0X1A8C6,	"T_SHIFT_TABLES_KV_4_3_PERF_ALTITUDE_OFFSET");
	MakeRptCmt	(0X1A8D8,	"Altitude compensation speed offset for 1st to 2nd cruise upshift.\nMPH");
	MakeName	(0X1A8D8,	"T_SHIFT_TABLES_KV_1_2_CRUISE_ALTITUDE_OFFSET");
	MakeRptCmt	(0X1A8EA,	"Altitude compensation speed offset for 2nd to 3rd cruise upshift.\nMPH");
	MakeName	(0X1A8EA,	"T_SHIFT_TABLES_KV_2_3_CRUISE_ALTITUDE_OFFSET");
	MakeRptCmt	(0X1A8FC,	"Altitude compensation speed offset for 3rd to 4th cruise upshift.\nMPH");
	MakeName	(0X1A8FC,	"T_SHIFT_TABLES_KV_3_4_CRUISE_ALTITUDE_OFFSET");
	MakeRptCmt	(0X1A90E,	"Altitude compensation speed offset for 3rd to 2nd cruise downshift.\nMPH");
	MakeName	(0X1A90E,	"T_SHIFT_TABLES_KV_3_2_CRUISE_ALTITUDE_OFFSET");
	MakeRptCmt	(0X1A920,	"Altitude compensation speed offset for 4th to 3rd cruise downshift.\nMPH");
	MakeName	(0X1A920,	"T_SHIFT_TABLES_KV_4_3_CRUISE_ALTITUDE_OFFSET");
	MakeRptCmt	(0X1A932,	"Vehicle speed where shifts occur. Max value disables upshifsmin value disable downshifts.\nMPH");
	MakeName	(0X1A932,	"T_SHIFT_TABLES_KE_2_1_4WD_LOW_DETENT");
	MakeRptCmt	(0X1A934,	"Vehicle speed where shifts occur. Max value disables upshifsmin value disable downshifts.\nMPH");
	MakeName	(0X1A934,	"T_SHIFT_TABLES_KE_3_2_4WD_LOW_DETENT");
	MakeRptCmt	(0X1A936,	"Vehicle speed where shifts occur. Max value disables upshifsmin value disable downshifts.\nMPH");
	MakeName	(0X1A936,	"T_SHIFT_TABLES_KE_4_3_4WD_LOW_DETENT");
	MakeRptCmt	(0X1A938,	"Describe the desired engine speed points for detentupshifts when 4WD low engaged is true.\nMPH");
	MakeName	(0X1A938,	"T_SHIFT_TABLES_KE_1_2_4WD_LOW_DETENT");
	MakeRptCmt	(0X1A93A,	"Describe the desired engine speed points for detentupshifts when 4WD low engaged is true.\nMPH");
	MakeName	(0X1A93A,	"T_SHIFT_TABLES_KE_2_3_4WD_LOW_DETENT");
	MakeRptCmt	(0X1A93C,	"Describe the desired engine speed points for detentupshifts when 4WD low engaged is true.\nMPH");
	MakeName	(0X1A93C,	"T_SHIFT_TABLES_KE_3_4_4WD_LOW_DETENT");
	MakeRptCmt	(0X1A93E,	"Describe the engine speed where shifts occur. Max value disables upshifs, min value disable downshifts.\nRPM");
	MakeName	(0X1A93E,	"T_SHIFT_TABLES_KE_1_2_4WD_LOW_DETENT_RPM");
	MakeRptCmt	(0X1A940,	"Describe the engine speed where shifts occur. Max value disables upshifs, min value disable downshifts.\nRPM");
	MakeName	(0X1A940,	"T_SHIFT_TABLES_KE_2_3_4WD_LOW_DETENT_RPM");
	MakeRptCmt	(0X1A942,	"Describe the engine speed where shifts occur. Max value disables upshifs, min value disable downshifts.\nRPM");
	MakeName	(0X1A942,	"T_SHIFT_TABLES_KE_3_4_4WD_LOW_DETENT_RPM");
	MakeRptCmt	(0X1A944,	"Normal 2nd gear TCC Apply line table\nMPH");
	MakeName	(0X1A944,	"T_TCC_TABLES_KV_APPLY_2_NORMAL_LINE");
	MakeRptCmt	(0X1A966,	"Normal 3rd gear TCC Apply line table\nMPH");
	MakeName	(0X1A966,	"T_TCC_TABLES_KV_APPLY_3_NORMAL_LINE");
	MakeRptCmt	(0X1A988,	"Normal 4th gear TCC Apply line table\nMPH");
	MakeName	(0X1A988,	"T_TCC_TABLES_KV_APPLY_4_NORMAL_LINE");
	MakeRptCmt	(0X1A9AA,	"Normal 2rd gear TCC Release line table\nMPH");
	MakeName	(0X1A9AA,	"T_TCC_TABLES_KV_RELEASE_2_NORMAL_LINE");
	MakeRptCmt	(0X1A9CC,	"Normal 3rd gear TCC Release line table\nMPH");
	MakeName	(0X1A9CC,	"T_TCC_TABLES_KV_RELEASE_3_NORMAL_LINE");
	MakeRptCmt	(0X1A9EE,	"Normal 4th gear TCC Release line table\nMPH");
	MakeName	(0X1A9EE,	"T_TCC_TABLES_KV_RELEASE_4_NORMAL_LINE");
	MakeRptCmt	(0X1AA10,	"Cruise 2nd gear TCC Apply line table\nMPH");
	MakeName	(0X1AA10,	"T_TCC_TABLES_KV_APPLY_2_CRUISE_LINE");
	MakeRptCmt	(0X1AA32,	"Cruise 3rd gear TCC Apply line table\nMPH");
	MakeName	(0X1AA32,	"T_TCC_TABLES_KV_APPLY_3_CRUISE_LINE");
	MakeRptCmt	(0X1AA54,	"Cruise 4th gear TCC Apply line table\nMPH");
	MakeName	(0X1AA54,	"T_TCC_TABLES_KV_APPLY_4_CRUISE_LINE");
	MakeRptCmt	(0X1AA76,	"Cruise 2nd gear TCC Release line table\nMPH");
	MakeName	(0X1AA76,	"T_TCC_TABLES_KV_RELEASE_2_CRUISE_LINE");
	MakeRptCmt	(0X1AA98,	"Cruise 3rd gear TCC Release line table\nMPH");
	MakeName	(0X1AA98,	"T_TCC_TABLES_KV_RELEASE_3_CRUISE_LINE");
	MakeRptCmt	(0X1AABA,	"Cruise 4th gear TCC Release line table\nMPH");
	MakeName	(0X1AABA,	"T_TCC_TABLES_KV_RELEASE_4_CRUISE_LINE");
	MakeRptCmt	(0X1AADC,	"Hot 2nd gear TCC Apply line table\nMPH");
	MakeName	(0X1AADC,	"T_TCC_TABLES_KV_APPLY_2_HOT");
	MakeRptCmt	(0X1AAFE,	"Hot 3rd gear TCC Apply line table\nMPH");
	MakeName	(0X1AAFE,	"T_TCC_TABLES_KV_APPLY_3_HOT");
	MakeRptCmt	(0X1AB20,	"Hot 4th gear TCC Apply line table\nMPH");
	MakeName	(0X1AB20,	"T_TCC_TABLES_KV_APPLY_4_HOT");
	MakeRptCmt	(0X1AB42,	"Hot 2nd gear TCC Release line table\nMPH");
	MakeName	(0X1AB42,	"T_TCC_TABLES_KV_RELEASE_2_HOT");
	MakeName	(0X1AB58,	"CurveTable_4_Rows_Barometric_Pressure_Shift_Correction_Factor_?");
	MakeRptCmt	(0X1AB64,	"Hot 3rd gear TCC Release line table\nMPH");
	MakeName	(0X1AB64,	"T_TCC_TABLES_KV_RELEASE_3_HOT");
	MakeName	(0X1AB6A,	"Constant8_PCS_Force_Motor_Current_Maximum");
	MakeName	(0X1AB6B,	"Constant8_PCS_Force_Motor_Current_Minimum");
	MakeRptCmt	(0X1AB86,	"Hot 4th gear TCC Release line table\nMPH");
	MakeName	(0X1AB86,	"T_TCC_TABLES_KV_RELEASE_4_HOT");
	MakeRptCmt	(0X1ABA8,	"Performance 2nd gear TCC Apply line table\nMPH");
	MakeName	(0X1ABA8,	"T_TCC_TABLES_KV_APPLY_2_PERFORMANCE");
	MakeRptCmt	(0X1ABCA,	"Performance 3rd gear TCC Apply line table\nMPH");
	MakeName	(0X1ABCA,	"T_TCC_TABLES_KV_APPLY_3_PERFORMANCE");
	MakeRptCmt	(0X1ABEC,	"Performance 4th gear TCC Apply line table\nMPH");
	MakeName	(0X1ABEC,	"T_TCC_TABLES_KV_APPLY_4_PERFORMANCE");
	MakeRptCmt	(0X1AC0E,	"Performance 2nd gear TCC Release line table\nMPH");
	MakeName	(0X1AC0E,	"T_TCC_TABLES_KV_RELEASE_2_PERFORMANCE");
	MakeRptCmt	(0X1AC30,	"Performance 3rd gear TCC Release line table\nMPH");
	MakeName	(0X1AC30,	"T_TCC_TABLES_KV_RELEASE_3_PERFORMANCE");
	MakeRptCmt	(0X1AC52,	"Performance 4th gear TCC Release line table\nMPH");
	MakeName	(0X1AC52,	"T_TCC_TABLES_KV_RELEASE_4_PERFORMANCE");
	MakeName	(0X1AC74,	"T_TCC_TABLES_KV_APPLY_2_NORM_ALT_OFFSET");
	MakeName	(0X1AC86,	"T_TCC_TABLES_KV_APPLY_3_NORM_ALT_OFFSET");
	MakeName	(0X1AC98,	"T_TCC_TABLES_KV_APPLY_4_NORM_ALT_OFFSET");
	MakeRptCmt	(0X1ACAA,	"Altitude compensation offset for TCC Apply Cruise.\nMPH");
	MakeName	(0X1ACAA,	"T_TCC_TABLES_KV_APPLY_2_CRUISE_ALT_OFFSET");
	MakeRptCmt	(0X1ACBC,	"Altitude compensation offset for TCC Apply Cruise.\nMPH");
	MakeName	(0X1ACBC,	"T_TCC_TABLES_KV_APPLY_3_CRUISE_ALT_OFFSET");
	MakeRptCmt	(0X1ACCE,	"Altitude compensation offset for TCC Apply Cruise.\nMPH");
	MakeName	(0X1ACCE,	"T_TCC_TABLES_KV_APPLY_4_CRUISE_ALT_OFFSET");
	MakeRptCmt	(0X1ACE0,	"Altitude compensation offset for TCC Apply Hot.\nMPH");
	MakeName	(0X1ACE0,	"T_TCC_TABLES_KV_APPLY_2_HOT_ALT_OFFSET");
	MakeRptCmt	(0X1ACF2,	"Altitude compensation offset for TCC Apply Hot.\nMPH");
	MakeName	(0X1ACF2,	"T_TCC_TABLES_KV_APPLY_3_HOT_ALT_OFFSET");
	MakeRptCmt	(0X1AD04,	"Altitude compensation offset for TCC Apply Hot.\nMPH");
	MakeName	(0X1AD04,	"T_TCC_TABLES_KV_APPLY_4_HOT_ALT_OFFSET");
	MakeRptCmt	(0X1AD16,	"Altitude compensation offset for TCC Apply Performance.\nMPH");
	MakeName	(0X1AD16,	"T_TCC_TABLES_KV_APPLY_2_PERF_ALT_OFFSET");
	MakeRptCmt	(0X1AD28,	"Altitude compensation offset for TCC Apply Performance.\nMPH");
	MakeName	(0X1AD28,	"T_TCC_TABLES_KV_APPLY_3_PERF_ALT_OFFSET");
	MakeRptCmt	(0X1AD3A,	"Altitude compensation offset for TCC Apply Performance.\nMPH");
	MakeName	(0X1AD3A,	"T_TCC_TABLES_KV_APPLY_4_PERF_ALT_OFFSET");
	MakeName	(0X1AD4C,	"T_TCC_TABLES_KV_RELEASE_2_NORMAL_ALT_OFFSET");
	MakeName	(0X1AD5E,	"T_TCC_TABLES_KV_RELEASE_3_NORMAL_ALT_OFFSET");
	MakeName	(0X1AD70,	"T_TCC_TABLES_KV_RELEASE_4_NORMAL_ALT_OFFSET");
	MakeRptCmt	(0X1AD82,	"Altitude compensation offset for TCC Release Cruise.\nMPH");
	MakeName	(0X1AD82,	"T_TCC_TABLES_KV_RELEASE_2_CRUISE_ALT_OFFSET");
	MakeRptCmt	(0X1AD94,	"Altitude compensation offset for TCC Release Cruise.\nMPH");
	MakeName	(0X1AD94,	"T_TCC_TABLES_KV_RELEASE_3_CRUISE_ALT_OFFSET");
	MakeRptCmt	(0X1ADA6,	"Altitude compensation offset for TCC Release Cruise.\nMPH");
	MakeName	(0X1ADA6,	"T_TCC_TABLES_KV_RELEASE_4_CRUISE_ALT_OFFSET");
	MakeRptCmt	(0X1ADB8,	"Altitude compensation offset for TCC Release Cruise.\nMPH");
	MakeName	(0X1ADB8,	"T_TCC_TABLES_KV_RELEASE_2_HOT_ALT_OFFSET");
	MakeRptCmt	(0X1ADCA,	"Altitude compensation offset for TCC Release Hot.\nMPH");
	MakeName	(0X1ADCA,	"T_TCC_TABLES_KV_RELEASE_3_HOT_ALT_OFFSET");
	MakeRptCmt	(0X1ADDC,	"Altitude compensation offset for TCC Release Hot.\nMPH");
	MakeName	(0X1ADDC,	"T_TCC_TABLES_KV_RELEASE_4_HOT_ALT_OFFSET");
	MakeRptCmt	(0X1ADEE,	"Altitude compensation offset for TCC Release Performance.\nMPH");
	MakeName	(0X1ADEE,	"T_TCC_TABLES_KV_RELEASE_2_PERF_ALT_OFFSET");
	MakeRptCmt	(0X1AE00,	"Altitude compensation offset for TCC Release Performance.\nMPH");
	MakeName	(0X1AE00,	"T_TCC_TABLES_KV_RELEASE_3_PERF_ALT_OFFSET");
	MakeRptCmt	(0X1AE12,	"Altitude compensation offset for TCC Release Performance.\nMPH");
	MakeName	(0X1AE12,	"T_TCC_TABLES_KV_RELEASE_4_PERF_ALT_OFFSET");
	MakeRptCmt	(0X1AE24,	"Max amount TCC apply point could be modified when in heater performance or engine protection mode.\nMPH");
	MakeName	(0X1AE24,	"T_TCC_TABLES_KV_TCC_APPLY_2_HP_EP_OFFSET");
	MakeRptCmt	(0X1AE46,	"Max amount TCC apply point could be modified when in heater performance or engine protection mode.\nMPH");
	MakeName	(0X1AE46,	"T_TCC_TABLES_KV_TCC_APPLY_3_HP_EP_OFFSET");
	MakeRptCmt	(0X1AE68,	"Max amount TCC apply point could be modified when inheater performance or engine protection mode.\nMPH");
	MakeName	(0X1AE68,	"T_TCC_TABLES_KV_TCC_APPLY_4_HP_EP_OFFSET");
	MakeRptCmt	(0X1AE8A,	"Max amount TCC Release point could be modified when in heater performance or engine protection mode.\nMPH");
	MakeName	(0X1AE8A,	"T_TCC_TABLES_KV_TCC_RELEASE_2_HP_EP_OFFSET");
	MakeRptCmt	(0X1AEAC,	"Max amount TCC Release point could be modified when in heater performance or engine protection mode.\nMPH");
	MakeName	(0X1AEAC,	"T_TCC_TABLES_KV_TCC_RELEASE_3_HP_EP_OFFSET");
	MakeRptCmt	(0X1AECE,	"Max amount TCC Release point could be modified when inheater performance or engine protection mode.\nMPH");
	MakeName	(0X1AECE,	"T_TCC_TABLES_KV_TCC_RELEASE_4_HP_EP_OFFSET");
	MakeRptCmt	(0X1AEF0,	"Used to determine maximum amount of throttle before a TCC release is commanded in second gear.\n%");
	MakeName	(0X1AEF0,	"T_TCC_TABLES_KV_2_NORM_MAX_THR_BEFORE_REL");
	MakeRptCmt	(0X1AF12,	"Used to determine maximum amount of throttle before a TCC release is commanded in third gear.\n%");
	MakeName	(0X1AF12,	"T_TCC_TABLES_KV_3_NORM_MAX_THR_BEFORE_REL");
	MakeRptCmt	(0X1AF34,	"Used to determine maximum amount of throttle before a TCC release is commanded in fourth gear.\n%");
	MakeName	(0X1AF34,	"T_TCC_TABLES_KV_4_NORM_MAX_THR_BEFORE_REL");
	MakeRptCmt	(0X1AF56,	"Used to determine maximum amount of throttle before a TCC release is commanded in second gear.\n%");
	MakeName	(0X1AF56,	"T_TCC_TABLES_KV_2_CRS_MAX_THR_BEFORE_REL");
	MakeRptCmt	(0X1AF78,	"Used to determine maximum amount of throttle before a TCC release is commanded in third gear.\n%");
	MakeName	(0X1AF78,	"T_TCC_TABLES_KV_3_CRS_MAX_THR_BEFORE_REL");
	MakeRptCmt	(0X1AF9A,	"Used to determine maximum amount of throttle before a TCC release is commanded in fourth gear.\n%");
	MakeName	(0X1AF9A,	"T_TCC_TABLES_KV_4_CRS_MAX_THR_BEFORE_REL");
	MakeRptCmt	(0X1AFBC,	"Used to determine maximum amount of throttle before a TCC release is commanded in second gear.\n%");
	MakeName	(0X1AFBC,	"T_TCC_TABLES_KV_2_PERF_MAX_THR_BEFORE_REL");
	MakeRptCmt	(0X1AFDE,	"Used to determine maximum amount of throttle before a TCC release is commanded in third gear.\n%");
	MakeName	(0X1AFDE,	"T_TCC_TABLES_KV_3_PERF_MAX_THR_BEFORE_REL");
	MakeRptCmt	(0X1B000,	"Used to determine maximum amount of throttle before a TCC release is commanded in fourth gear.\n%");
	MakeName	(0X1B000,	"T_TCC_TABLES_KV_4_PERF_MAX_THR_BEFORE_REL");
	MakeRptCmt	(0X1B022,	"Desired shift time for a 1-2 shift in normal mode.\nSeconds");
	MakeName	(0X1B022,	"T_TIMING_TABLES_KV_1_2_NORMAL_DESIRED_SHIFT_TIME");
	MakeRptCmt	(0X1B044,	"Desired shift time for a 2-3 shift in normal mode.\nSeconds");
	MakeName	(0X1B044,	"T_TIMING_TABLES_KV_2_3_NORMAL_DESIRED_SHIFT_TIME");
	MakeRptCmt	(0X1B066,	"Desired shift time for a 3-4 shift in normal mode.\nSeconds");
	MakeName	(0X1B066,	"T_TIMING_TABLES_KV_3_4_NORMAL_DESIRED_SHIFT_TIME");
	MakeRptCmt	(0X1B088,	"Desired shift time for a 1-2 shift in performance mode.\nSeconds");
	MakeName	(0X1B088,	"T_TIMING_TABLES_KV_1_2_PERF_DESIRED_SHIFT_TIME");
	MakeRptCmt	(0X1B0AA,	"Desired shift time for a 2-3 shift in performance mode.\nSeconds");
	MakeName	(0X1B0AA,	"T_TIMING_TABLES_KV_2_3_PERF_DESIRED_SHIFT_TIME");
	MakeRptCmt	(0X1B0CC,	"Desired shift time for a 3-4 shift in performance mode.\nSeconds");
	MakeName	(0X1B0CC,	"T_TIMING_TABLES_KV_3_4_PERF_DESIRED_SHIFT_TIME");
	MakeRptCmt	(0X1B0EE,	"Adaptive pressure low limit for 1-2 shift.\nPSI");
	MakeName	(0X1B0EE,	"T_TIMING_TABLES_KV_1_2_PRESS_LOW_ADAPT_LIMIT");
	MakeRptCmt	(0X1B100,	"Adaptive pressure low limit for 2-3 shift.\nPSI");
	MakeName	(0X1B100,	"T_TIMING_TABLES_KV_2_3_PRESS_LOW_ADAPT_LIMIT");
	MakeRptCmt	(0X1B112,	"Adaptive pressure low limit for 3-4 shift.\nPSI");
	MakeName	(0X1B112,	"T_TIMING_TABLES_KV_3_4_PRESS_LOW_ADAPT_LIMIT");
	MakeRptCmt	(0X1B124,	"Adaptive pressure high limit.\nPSI");
	MakeName	(0X1B124,	"T_TIMING_TABLES_KV_PRESS_HIGH_ADAPT_LIMIT");
	MakeRptCmt	(0X1B136,	"Altitude compensation factor offset for 1-2 upshift in normalmode used within shift quality's Desired Shift Time algorithm.\nSeconds");
	MakeName	(0X1B136,	"T_TIMING_TABLES_KV_1_2_NORMAL_DST_OFFSET");
	MakeRptCmt	(0X1B158,	"Altitude compensation factor offset for 2-3 upshift in normalmode used within shift quality's Desired Shift Time algorithm.\nSeconds");
	MakeName	(0X1B158,	"T_TIMING_TABLES_KV_2_3_NORMAL_DST_OFFSET");
	MakeRptCmt	(0X1B17A,	"Altitude compensation factor offset for 3-4 upshift in normalmode used within shift quality's Desired Shift Time algorithm.\nSeconds");
	MakeName	(0X1B17A,	"T_TIMING_TABLES_KV_3_4_NORMAL_DST_OFFSET");
	MakeName	(0X1B19C,	"T_TIMING_TABLES_KV_1_2_PERF_DST_OFFSET");
	MakeName	(0X1B1BE,	"T_TIMING_TABLES_KV_2_3_PERF_DST_OFFSET");
	MakeName	(0X1B1E0,	"T_TIMING_TABLES_KV_3_4_PERF_DST_OFFSET");
	MakeRptCmt	(0X1B202,	"Multiplicative Altitude compensation factor based on barometricpressure for 1-2 shift normal mode within Desired Shift Times.\nFactor");
	MakeName	(0X1B202,	"T_TIMING_TABLES_KV_1_2_DST_ALTITUDE_FACTOR");
	MakeRptCmt	(0X1B208,	"Multiplicative Altitude compensation factor based on barometricpressure for 2-3 shift normal mode within Desired Shift Times.\nFactor");
	MakeName	(0X1B208,	"T_TIMING_TABLES_KV_2_3_DST_ALTITUDE_FACTOR");
	MakeRptCmt	(0X1B20E,	"Multiplicative Altitude compensation factor based on barometricpressure for 3-4 shift normal mode within Desired Shift Times.\nFactor");
	MakeName	(0X1B20E,	"T_TIMING_TABLES_KV_3_4_DST_ALTITUDE_FACTOR");
	MakeRptCmt	(0X1B213,	"Bypass shift stabilization accel routine if this is false.\nT/F");
	MakeByte	(0X1B213);
	MakeName	(0X1B213,	"X_TCM_EXECUTION_KE_USE_SHIFT_STABILIZATION_ACCEL");
	MakeRptCmt	(0X1B214,	"Minimum force motor duty cycle required for MFD chip to accurately measure the actual force motor         current.\nPercent");
	MakeWord	(0X1B214);
	MakeName	(0X1B214,	"T_FM_CONTROL_KE_FM_MIN_DUTY_CYCLE_MFD");
	MakeRptCmt	(0X1B216,	"Max allowable force motor pressure used for limitingcalculations.\nPSI");
	MakeWord	(0X1B216);
	MakeName	(0X1B216,	"XMSN_IO_KE_MAX_PRESSURE");
	MakeRptCmt	(0X1B218,	"Turbine shaft and Input shaft interconnect chain ratio.\nRatio");
	MakeWord	(0X1B218);
	MakeName	(0X1B218,	"XMSN_IO_KE_DRIVE_SPROKET_RATIO");
	MakeRptCmt	(0X1B21A,	"Ratio used to determine gearbox torque.\nRatio");
	MakeWord	(0X1B21A);
	MakeName	(0X1B21A,	"XMSN_IO_KV_CONVERTER_TORQUE_RATIO");
	MakeRptCmt	(0X1B23C,	"Gear ratio for 1st gear.\nRatio");
	MakeWord	(0X1B23C);
	MakeName	(0X1B23C,	"XMSN_IO_KE_FIRST_GEAR_RATIO");
	MakeRptCmt	(0X1B23E,	"Gear ratio for 2nd gear.\nRatio");
	MakeWord	(0X1B23E);
	MakeName	(0X1B23E,	"XMSN_IO_KE_SECOND_GEAR_RATIO");
	MakeRptCmt	(0X1B240,	"Gear ratio for 1st gear.\nRatio");
	MakeName	(0X1B240,	"XMSN_IO_KE_REVERSE_GEAR_RATIO");
	MakeRptCmt	(0X1B242,	"The low thresholdof Ignition voltage range\nVolts");
	MakeByte	(0X1B242);
	MakeName	(0X1B242,	"XMSN_IO_KE_DIAG_SYS_VOLTS_LOW");
	MakeRptCmt	(0X1B243,	"The high thresholdof Ignition voltage range\nVolts");
	MakeByte	(0X1B243);
	MakeName	(0X1B243,	"XMSN_IO_KE_DIAG_SYS_VOLTS_HIGH");
	MakeRptCmt	(0X1B244,	"Amount of time to debounce the brake switch input.\nSeconds");
	MakeWord	(0X1B244);
	MakeName	(0X1B244,	"XMSN_IO_KE_BRAKE_DEBOUNCE_TIME");
	MakeRptCmt	(0X1B246,	"Default throttle to use when throttle is faulted.\nPercent");
	MakeWord	(0X1B246);
	MakeName	(0X1B246,	"XMSN_IO_KE_DEFAULT_THROTTLE_POSITION");
	MakeRptCmt	(0X1B248,	"Negative delta for throttle recovery.\nPercent");
	MakeWord	(0X1B248);
	MakeName	(0X1B248,	"XMSN_IO_KE_DEFAULT_THROTTLE_LOW");
	MakeRptCmt	(0X1B24A,	"Positive delta for throttle recovery.\nPercent");
	MakeWord	(0X1B24A);
	MakeName	(0X1B24A,	"XMSN_IO_KE_DEFAULT_THROTTLE_HIGH");
	MakeRptCmt	(0X1B24C,	"Determines whether to set default throttle position toa calibrated value or to an undefaulted throttle position.\nT/F");
	MakeByte	(0X1B24C);
	MakeName	(0X1B24C,	"XMSN_IO_KE_USE_ENGINE_TPS");
	MakeRptCmt	(0X1B24E,	"Exit throttle kickdown when throttle is below this.\nPercent");
	MakeWord	(0X1B24E);
	MakeName	(0X1B24E,	"XMSN_IO_KE_THROTTLE_KICKDOWN_LOW_THRESH");
	MakeRptCmt	(0X1B250,	"Enter throttle kickdown when throttle is above this.\nPercent");
	MakeWord	(0X1B250);
	MakeName	(0X1B250,	"XMSN_IO_KE_THROTTLE_KICKDOWN_HIGH_THRESH");
	MakeRptCmt	(0X1B252,	"Defines the throttle position threshold below which the kickdown (detent) flag will be set to FALSE.\nPercent");
	MakeWord	(0X1B252);
	MakeName	(0X1B252,	"XMSN_IO_KE_THROT_KICKDN_4WDLOW_LO_THRESH");
	MakeRptCmt	(0X1B254,	"Defines the throttle position threshold above which the kickdown (detent) flag will be set to TRUE.\nPercent");
	MakeWord	(0X1B254);
	MakeName	(0X1B254,	"XMSN_IO_KE_THROT_KICKDN_4WDLOW_HI_THRESH");
	MakeRptCmt	(0X1B256,	"Defines the throttle position threshold for cruise below which the kickdown (detent) flag will be set to FALSE.\nPercent");
	MakeWord	(0X1B256);
	MakeName	(0X1B256,	"XMSN_IO_KE_THROT_KICKDN_CRUISE_LO_THRESH");
	MakeRptCmt	(0X1B258,	"Defines the throttle position threshold for cruise above which the kickdown (detent) flag will be set to TRUE.\nPercent");
	MakeWord	(0X1B258);
	MakeName	(0X1B258,	"XMSN_IO_KE_THROT_KICKDN_CRUISE_HI_THRESH");
	MakeRptCmt	(0X1B25A,	"Gain used in kalman filter associated with plant speed noise.\nGain");
	MakeWord	(0X1B25A);
	MakeName	(0X1B25A,	"XMSN_IO_KE_ENGINE_SPEED_KALMAN_GAIN_1");
	MakeRptCmt	(0X1B25C,	"Gain used in kalman filter associated with plant acceleration noise.\nGain");
	MakeWord	(0X1B25C);
	MakeName	(0X1B25C,	"XMSN_IO_KE_ENGINE_SPEED_KALMAN_GAIN_2");
	MakeRptCmt	(0X1B25E,	"Gain used in kalman filter associated with plant jerk noise.\nGain");
	MakeWord	(0X1B25E);
	MakeName	(0X1B25E,	"XMSN_IO_KE_ENGINE_SPEED_KALMAN_GAIN_3");
	MakeRptCmt	(0X1B260,	"Filter Coefficient for filtering engine speed.\nCoeff");
	MakeWord	(0X1B260);
	MakeName	(0X1B260,	"XMSN_IO_KE_ENGINE_SPEED_FILTER_COEFF");
	MakeRptCmt	(0X1B262,	"Filter coefficient for filtering Engine Speed at 6.25 ms for use in Modeled Ratio calculation.\nCoeff");
	MakeWord	(0X1B262);
	MakeName	(0X1B262,	"XMSN_IO_KE_ENG_SPD_FILTER_COEFF");
	MakeRptCmt	(0X1B264,	"Filter Coefficient for filtering output speed.\nCoeff");
	MakeWord	(0X1B264);
	MakeName	(0X1B264,	"XMSN_IO_KE_OUTPUT_SPEED_FILTER_COEFF");
	MakeRptCmt	(0X1B266,	"Filter Coefficient for filtering MPH output speed.\nCoeff");
	MakeWord	(0X1B266);
	MakeName	(0X1B266,	"XMSN_IO_KE_MPH_OUTPUT_SPEED_FILTER_COEFF");
	MakeRptCmt	(0X1B268,	"Filter Coefficient for filtering Slip.\nCoeff");
	MakeWord	(0X1B268);
	MakeName	(0X1B268,	"XMSN_IO_KE_SLIP_FILTER_COEFF");
	MakeRptCmt	(0X1B26A,	"Filter Coefficient for filtering turbine speed.\nCoeff");
	MakeWord	(0X1B26A);
	MakeName	(0X1B26A,	"XMSN_IO_KE_TURBINE_SPEED_FILTER_COEFF");
	MakeRptCmt	(0X1B26C,	"Filter Coefficient for filtering turbine speed.\nCoeff");
	MakeWord	(0X1B26C);
	MakeName	(0X1B26C,	"XMSN_IO_KE_ENGINE_TORQUE_FILTER_COEFF");
	MakeRptCmt	(0X1B26E,	"Filter Coefficient for determining ECCC_Engine_Torque.\nCoeff");
	MakeWord	(0X1B26E);
	MakeName	(0X1B26E,	"XMSN_IO_KE_ECCC_ENGINE_TORQ_FILTER_CONST");
	MakeRptCmt	(0X1B270,	"Update Spanned_ECCC_Engine_Torq every this many seconds.\nSeconds");
	MakeWord	(0X1B270);
	MakeName	(0X1B270,	"XMSN_IO_KE_SPANNED_TIME_ECCC_ENGINE_TORQ");
	MakeRptCmt	(0X1B272,	"Enter floating slip mode when slip is less than this.\nRPM");
	MakeWord	(0X1B272);
	MakeName	(0X1B272,	"XMSN_IO_KE_SLIP_LOW_THRESHOLD");
	MakeRptCmt	(0X1B274,	"Exit floating slip mode when slip is greater than this.\nRPM");
	MakeWord	(0X1B274);
	MakeName	(0X1B274,	"XMSN_IO_KE_SLIP_HIGH_THRESHOLD");
	MakeRptCmt	(0X1B276,	"Speed threshold above which engine is considered running.\nRPM");
	MakeWord	(0X1B276);
	MakeName	(0X1B276,	"XMSN_IO_KE_ENGINE_RUNNING_ENG_SPD_THRESH");
	MakeRptCmt	(0X1B278,	"Speed threshold below which engine speed is considered stopped.\nRPM");
	MakeWord	(0X1B278);
	MakeName	(0X1B278,	"XMSN_IO_KE_PWRTRAIN_MOVING_ENG_SPD_THRSH");
	MakeRptCmt	(0X1B27A,	"When all speed inputs indicate zero motion for this amount of time, indicate that the powertrain is not moving.\nSeconds");
	MakeWord	(0X1B27A);
	MakeName	(0X1B27A,	"XMSN_IO_KE_STOPPED_POWERTRAIN_TIME_LIMIT");
	MakeRptCmt	(0X1B27C,	"The amount of time the engine must be running not in fuel cut off.\nSeconds");
	MakeWord	(0X1B27C);
	MakeName	(0X1B27C,	"XMSN_IO_KE_ENGINE_RUN_NOT_CUT_OFF_TIME");
	MakeRptCmt	(0X1B27E,	"Filter Coefficient for filtering output acceleration.\nCoeff");
	MakeWord	(0X1B27E);
	MakeName	(0X1B27E,	"XMSN_IO_KE_OUTPUT_ACCEL_FILTER_COEFF");
	MakeRptCmt	(0X1B280,	"If output acceleration below this, TCC is turned off.\nRPM_per_Sec");
	MakeWord	(0X1B280);
	MakeName	(0X1B280,	"XMSN_IO_KE_FAST_DECEL_THRESHOLD");
	MakeRptCmt	(0X1B282,	"Table used to translate temperature sensor A/D counts into Degrees C.  This table is for the 348 Ohm pullup resistor.\nDeg C");
	MakeWord	(0X1B282);
	MakeName	(0X1B282,	"XMSN_IO_KV_LINEAR_HOT_TEMPERATURE_TABLE");
	MakeRptCmt	(0X1B2A4,	"Table used to translate temperature sensor A/D counts into Degrees C.  This table is for the 4K Ohm pullup resistor.\nDeg C");
	MakeWord	(0X1B2A4);
	MakeName	(0X1B2A4,	"XMSN_IO_KV_LINEAR_COLD_TEMPERATURE_TABLE");
	MakeRptCmt	(0X1B2C6,	"Indicates the temperatue source used to calculate thetemperature factor for heater performance\nNONE");
	MakeByte	(0X1B2C6);
	MakeName	(0X1B2C6,	"XMSN_IO_KE_TEMPERATURE_FACTOR_SOURCE");
	MakeRptCmt	(0X1B2C8,	"Filter coefficient for filtering Transmission Temperature.\nCoeff");
	MakeWord	(0X1B2C8);
	MakeName	(0X1B2C8,	"XMSN_IO_KE_TRANS_TEMP_FILTER_COEFFICIENT");
	MakeRptCmt	(0X1B2CA,	"Default transmission temperature when sensor fails.\nDeg C");
	MakeWord	(0X1B2CA);
	MakeName	(0X1B2CA,	"XMSN_IO_KE_DEFAULT_TRANS_TEMPERATURE");
	MakeRptCmt	(0X1B2CC,	"When Coolant temperature falls below this value, inhibit max gear.\nDeg C");
	MakeByte	(0X1B2CC);
	MakeName	(0X1B2CC,	"XMSN_IO_KE_LOW_MAX_GEAR_INHIBIT_THRESH");
	MakeRptCmt	(0X1B2CD,	"When Coolant temperature rises above this value, Enable max gear.\nDeg C");
	MakeByte	(0X1B2CD);
	MakeName	(0X1B2CD,	"XMSN_IO_KE_HIGH_MAX_GEAR_INHIBIT_THRESH");
	MakeRptCmt	(0X1B2CE,	"When Coolant temperature falls below this value, the engine cold indicator is set.\nDeg C");
	MakeByte	(0X1B2CE);
	MakeName	(0X1B2CE,	"XMSN_IO_KE_COLD_ENGINE_LOW_THRESHOLD");
	MakeRptCmt	(0X1B2CF,	"When Coolant temperature rises above this value, the engine cold indicator is cleared.\nDeg C");
	MakeByte	(0X1B2CF);
	MakeName	(0X1B2CF,	"XMSN_IO_KE_COLD_ENGINE_HIGH_THRESHOLD");
	MakeRptCmt	(0X1B2D0,	"When Coolant temperature falls below this value, the engine hot indicator is cleared.\nDeg C");
	MakeByte	(0X1B2D0);
	MakeName	(0X1B2D0,	"XMSN_IO_KE_HOT_ENGINE_LOW_THRESHOLD");
	MakeRptCmt	(0X1B2D1,	"When Coolant temperature rises above this value, the engine Hot indicator is Set.\nDeg C");
	MakeByte	(0X1B2D1);
	MakeName	(0X1B2D1,	"XMSN_IO_KE_HOT_ENGINE_HIGH_THRESHOLD");
	MakeRptCmt	(0X1B2D2,	"Offset added to coolant temperature to determine defaulttrans temp when air temp is below a threshold.\nDeg C");
	MakeWord	(0X1B2D2);
	MakeName	(0X1B2D2,	"XMSN_IO_KE_INTAKE_AIR_TEMP_LOW_OFFSET");
	MakeRptCmt	(0X1B2D4,	"Offset added to coolant temperature to determine defaulttrans temp when air temp is above a threshold.\nDeg C");
	MakeWord	(0X1B2D4);
	MakeName	(0X1B2D4,	"XMSN_IO_KE_INTAKE_AIR_TEMP_HIGH_OFFSET");
	MakeRptCmt	(0X1B2D6,	"Default transmission temperature when a reliable engine coolant temperature is not available.\nDeg C");
	MakeWord	(0X1B2D6);
	MakeName	(0X1B2D6,	"XMSN_IO_KE_TRANS_TEMP_COND_UNKNOWN");
	MakeRptCmt	(0X1B2D8,	"Default transmission temperature when engine run time is above a cal and coolant temperature is below a cal.\nDeg C");
	MakeWord	(0X1B2D8);
	MakeName	(0X1B2D8,	"XMSN_IO_KE_TRANS_TEMP_ENG_TEMP_LOW");
	MakeRptCmt	(0X1B2DA,	"Default transmission temperature when engine run time is below a cal and coolant temperature is below a cal.\nDeg C");
	MakeWord	(0X1B2DA);
	MakeName	(0X1B2DA,	"XMSN_IO_KE_TRANS_TEMP_STARTUP");
	MakeRptCmt	(0X1B2DC,	"Engine run time threshold for deteremining which default transmission temperature to use.\nSeconds");
	MakeDword	(x=0X1B2DC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X1B2DC,	"XMSN_IO_KE_MIN_ENGINE_RUN_TIME");
	MakeRptCmt	(0X1B2E0,	"High threshold for the throttle position to switch  Heater Performance Mode to Engine Protection Mode.\nPercent");
	MakeWord	(0X1B2E0);
	MakeName	(0X1B2E0,	"XMSN_IO_KE_ENG_PROT_MODE_HIGH_THROT_THR");
	MakeWord	(0X1B2E2);
	MakeName	(0X1B2E2,	"XMSN_IO_KE_ENG_PROT_MODE_LOW_THROT_THR");
	MakeRptCmt	(0X1B2E4,	"If coolant temperature of a Cold Day is below this threshold then Temperature_Factor is 1\nDegrees_C");
	MakeByte	(0X1B2E4);
	MakeName	(0X1B2E4,	"XMSN_IO_KE_COLD_DAY_LOW_TEMP_FACT_THR");
	MakeRptCmt	(0X1B2E5,	"If coolant temperature of a Cold Day is above this threshold then Temperature_Factor is 0\nDegrees_C");
	MakeByte	(0X1B2E5);
	MakeName	(0X1B2E5,	"XMSN_IO_KE_COLD_DAY_HIGH_TEMP_FACT_THR");
	MakeRptCmt	(0X1B2E6,	"If coolant temperature of a Cool Day is below this threshold then Temperature_Factor is 1\nDegrees_C");
	MakeByte	(0X1B2E6);
	MakeName	(0X1B2E6,	"XMSN_IO_KE_COOL_DAY_LOW_TEMP_FACT_THR");
	MakeRptCmt	(0X1B2E7,	"If coolant temperature of a Cool Day is above this threshold then Temperature_Factor is 0\nDegrees_C");
	MakeByte	(0X1B2E7);
	MakeName	(0X1B2E7,	"XMSN_IO_KE_COOL_DAY_HIGH_TEMP_FACT_THR");
	MakeRptCmt	(0X1B2E8,	"If Startup_Intake_Air_Temp is below this threshold then cold day is present\nDegrees_C");
	MakeByte	(0X1B2E8);
	MakeName	(0X1B2E8,	"XMSN_IO_KE_COLD_DAY_KUM_THRESH");
	MakeRptCmt	(0X1B2E9,	"If Startup_Intake_Air_Temp is below this threshold andthen cool day is present\nDegrees_C");
	MakeByte	(0X1B2E9);
	MakeName	(0X1B2E9,	"XMSN_IO_KE_COOL_DAY_KUM_THRESH");
	MakeRptCmt	(0X1B2EA,	"Temperature Factor in Engine Protection Mode\nFactor 0_1");
	MakeByte	(0X1B2EA);
	MakeName	(0X1B2EA,	"XMSN_IO_KV_ENGINE_PROTECTION_TEMP_FACTOR");
	MakeRptCmt	(0X1B2FC,	"Gear ratio for 1st gear.\nRatio");
	MakeName	(0X1B2FC,	"XMSN_IO_KE_THIRD_GEAR_RATIO");
	MakeRptCmt	(0X1B2FE,	"Gear ratio for 1st gear.\nRatio");
	MakeName	(0X1B2FE,	"XMSN_IO_KE_FOURTH_GEAR_RATIO");
	MakeWord	(0X1B300);
	MakeName	(0X1B300,	"XMSN_IO_KE_DEFAULT_TEMP_ENG_TO_HOT");
	MakeWord	(0X1B302);
	MakeName	(0X1B302,	"XMSN_IO_KE_MIN_COOLANT_TEMP_THRESH");
	MakeWord	(0X1B304);
	MakeName	(0X1B304,	"XMSN_IO_KE_MAX_COOLANT_TEMP_THRESH");
	MakeWord	(0X1B306);
	MakeName	(0X1B306,	"XMSN_IO_KE_STARTUP_TEMP_LOW_THRESH");
	MakeWord	(0X1B308);
	MakeName	(0X1B308,	"XMSN_IO_KE_STARTUP_TEMP_HIGH_THRESH");
	MakeRptCmt	(0X1B30A,	"The minimum amount of time engine must be running beforeStoring Trans_Temp_At_Engine_Start.\nSeconds");
	MakeDword	(x=0X1B30A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X1B30A,	"XMSN_IO_KE_TRANS_STARTUP_DELAY_TIME");
	MakeByte	(0X1B30E);
	MakeName	(0X1B30E,	"XMSN_IO_KE_USE_CONST_FOR_TRANS_TEMP");
	MakeRptCmt	(0X1B310,	"Amount of time that system voltage must be out of range before taking remedial action in transmission.\nSeconds");
	MakeWord	(0X1B310);
	MakeName	(0X1B310,	"XMSN_IO_KE_DIAG_SYS_VOLTS_RANGE_TIME");
	MakeRptCmt	(0X1B312,	"Freeze output speed for this long after the start of an upshift or downshift if an ISS is present.\nSeconds");
	MakeWord	(0X1B312);
	MakeName	(0X1B312,	"XMSN_IO_KE_OUTPUT_SPEED_FREEZE_TIME");
	MakeRptCmt	(0X1B314,	"Time that the filtered IMS can be set to the last positive IMS value when the IMS value is Transition or Illegal_Range\nSeconds");
	MakeWord	(0X1B314);
	MakeName	(0X1B314,	"XMSN_IO_KE_IMS_DEBOUNCE_TIME");
	MakeRptCmt	(0X1B316,	"TRUE if starter motor control is from the PCM, FALSE otherwise.\nT/F");
	MakeName	(0X1B316,	"XMSN_IO_KE_STARTER_MOTOR_CONTROL");
	MakeRptCmt	(0X1B317,	"TRUE if the predictive algorithm is to be used when the IMSstate is Transition or Illegal_Range, FALSE otherwise.\nT/F");
	MakeByte	(0X1B317);
	MakeName	(0X1B317,	"XMSN_IO_KE_IMS_PREDICTIVE_STATE");
	MakeRptCmt	(0X1B318,	"Default range used when IMS is requesting failsoft.\nRange");
	MakeByte	(0X1B318);
	MakeName	(0X1B318,	"XMSN_IO_KE_IMS_DEFAULTED_DRIVE_RANGE");
	MakeRptCmt	(0X1B31A,	"Used to derive Predicted Internal Mode Switch State from Last Positive IMS State and Current IMS State.\nIMS Type");
	MakeName	(0X1B31A,	"XMSN_IO_KA_PREDICTED_TRANS_FAILSOFT_IMS");
	MakeByte	(0X1B392);
	MakeRptCmt	(0X1B39A,	"Used to derive Predicted Internal Mode Switch State from Last Positive IMS State and Current IMS State.\nIMS Type");
	MakeName	(0X1B39A,	"XMSN_IO_KA_PREDICTED_ENG_FAILSOFT_IMS");
	MakeByte	(0X1B412);
	MakeRptCmt	(0X1B41A,	"Bypass the oil life counter feature if this is false.\nT/F");
	MakeByte	(0X1B41A);
	MakeName	(0X1B41A,	"XMSN_IO_KE_USE_TRANSMISSION_OIL_LIFE");
	MakeRptCmt	(0X1B41C,	"Slip accross Torque Converter used to determine if engine braking present torque being transmitted from transmission to engine.\nRPM_s");
	MakeWord	(0X1B41C);
	MakeName	(0X1B41C,	"XPRS_BRAKING_PRESSURE_KE_BRAKING_SLIP");
	MakeRptCmt	(0X1B41E,	"Braking Pressure Throttle position opening for use in determining a coast or power-on shift.\nPercent");
	MakeWord	(0X1B41E);
	MakeName	(0X1B41E,	"XPRS_BRAKING_PRESSURE_KE_BRAKING_PRESSURE_TPS_LIMIT");
	MakeByte	(0X1B420);
	MakeName	(0X1B420,	"XPRS_BRAKING_PRESSURE_KE_COAST_SOL_CHANGE_ENABLE");
	MakeWord	(0X1B422);
	MakeName	(0X1B422,	"XPRS_GARAGE_PRESSURE_KE_GS_PARK_NEUTRAL_MPH");
	MakeWord	(0X1B424);
	MakeName	(0X1B424,	"XPRS_GARAGE_PRESSURE_KE_GS_REVERSE_DRIVE_MPH");
	MakeRptCmt	(0X1B426,	"Pressure is used at the beginning of the initial abuseramp when in a forward range\nPSI");
	MakeWord	(0X1B426);
	MakeName	(0X1B426,	"XPRS_GARAGE_PRESSURE_KE_ABUSE_PRESS_RAMP_START_FORWRD");
	MakeRptCmt	(0X1B428,	"Pressure is used at the beginning of the initial abuseramp when in a reverse range\nPSI");
	MakeWord	(0X1B428);
	MakeName	(0X1B428,	"XPRS_GARAGE_PRESSURE_KE_ABUSE_PRESS_RAMP_START_REVRS");
	MakeRptCmt	(0X1B42A,	"The end value for the torque signal pressure ramp in an initial abuse situation while in a forward range\nPSI");
	MakeWord	(0X1B42A);
	MakeName	(0X1B42A,	"XPRS_GARAGE_PRESSURE_KE_ABUSE_PRESS_RAMP_END_FORWRD");
	MakeRptCmt	(0X1B42C,	"The end value for the torque signal pressure ramp in an initial abuse situation while in a reverse range\nPSI");
	MakeWord	(0X1B42C);
	MakeName	(0X1B42C,	"XPRS_GARAGE_PRESSURE_KE_ABUSE_PRESS_RAMP_END_REVRS");
	MakeRptCmt	(0X1B42E,	"This calibration is used in determining the garageshift type when a garage shift occurs\nRPM");
	MakeWord	(0X1B42E);
	MakeName	(0X1B42E,	"XPRS_GARAGE_PRESSURE_KE_GARAGE_SHIFT_SLIP_THRESH");
	MakeWord	(0X1B430);
	MakeName	(0X1B430,	"XPRS_GARAGE_PRESSURE_KE_GS_CLUTCH_SLIP_HIGH_THRESH");
	MakeWord	(0X1B432);
	MakeName	(0X1B432,	"XPRS_GARAGE_PRESSURE_KE_GS_CLUTCH_SLIP_LOW_THRESH");
	MakeRptCmt	(0X1B434,	"The maximum amount of time that a garageshift may take.\nSeconds");
	MakeWord	(0X1B434);
	MakeName	(0X1B434,	"XPRS_GARAGE_PRESSURE_KE_GS_MAXIMUM_TIME");
	MakeRptCmt	(0X1B436,	"Rolling modifier to account for a garage shift made into drive with a moving powertrain\nPSI_s");
	MakeName	(0X1B436,	"XPRS_GARAGE_PRESSURE_KA_GS_DRIVE_ROLLING_MODIFIER");
	MakeRptCmt	(0X1B468,	"Rolling modifier to account for a garage shift made into reverse with a moving powertrain\nPSI_s");
	MakeName	(0X1B468,	"XPRS_GARAGE_PRESSURE_KA_GS_REVERSE_ROLLING_MODIFIER");
	MakeRptCmt	(0X1B49A,	"Three dimensional table determining base garage pressurewhen a reverse to drive garage shift occurs\nPSI");
	MakeName	(0X1B49A,	"XPRS_GARAGE_PRESSURE_KA_GS_REVERSE_TO_DRIVE_BASE_PRES");
	MakeRptCmt	(0X1B53C,	"Three dimensional table determining base garage pressurewhen a Drive to reverse garage shift occurs\nPSI");
	MakeName	(0X1B53C,	"XPRS_GARAGE_PRESSURE_KA_GS_DRIVE_TO_REVERSE_BASE_PRES");
	MakeRptCmt	(0X1B5DE,	"Three dimensional table determining base garage pressurewhen a park/neutral to drive garage shift occurs\nPSI");
	MakeName	(0X1B5DE,	"XPRS_GARAGE_PRESSURE_KA_GS_PN_TO_DRIVE_BASE_PRES");
	MakeRptCmt	(0X1B680,	"Three dimensional table determining base garage pressurewhen a park/neutral to drive garage shift occurs\nPSI");
	MakeName	(0X1B680,	"XPRS_GARAGE_PRESSURE_KA_GS_PN_TO_REVERSE_BASE_PRES");
	MakeRptCmt	(0X1B722,	"The sum of this calibration and the adapt table is thetotal pulse time commanded for garage shit type Drive_To_Reverse\nSeconds");
	MakeName	(0X1B722,	"XPRS_GARAGE_PRESSURE_KA_GS_DRIVE_TO_REV_PULSE_TIME");
	MakeRptCmt	(0X1B7C4,	"The sum of this calibration and the adapt table is thetotal pulse time commanded for garage shit type Park_Neutral_To_Drive\nSeconds");
	MakeName	(0X1B7C4,	"XPRS_GARAGE_PRESSURE_KA_GS_PN_TO_DRIVE_PULSE_TIME");
	MakeRptCmt	(0X1B866,	"The sum of this calibration and the adapt table is thetotal pulse time commanded for garage shit type Park_Neutral_To_Reverse\nSeconds");
	MakeName	(0X1B866,	"XPRS_GARAGE_PRESSURE_KA_GS_PN_TO_REVERSE_PULSE_TIME");
	MakeRptCmt	(0X1B908,	"The sum of this calibration and the adapt table is thetotal pulse time commanded for garage shit typeReverse_To_Drive\nSeconds");
	MakeName	(0X1B908,	"XPRS_GARAGE_PRESSURE_KA_GS_REV_TO_DRIVE_PULSE_TIME");
	MakeRptCmt	(0X1B9AA,	"The time since last drive range must be greater than orequal to this calibration in order for a pulse to becommanded\nSeconds");
	MakeWord	(0X1B9AA);
	MakeName	(0X1B9AA,	"XPRS_GARAGE_PRESSURE_KV_GS_LAST_DRIVE_TIME_THRESH");
	MakeRptCmt	(0X1B9BC,	"The time since last reverse range must be greater thanor equal to this calibration in order for a pulse to becommanded\nSeconds");
	MakeWord	(0X1B9BC);
	MakeName	(0X1B9BC,	"XPRS_GARAGE_PRESSURE_KV_GS_LAST_REVERSE_TIME_THRESH");
	MakeRptCmt	(0X1B9CE,	"This calibraions returns a pressure pulse value for garageshift type of Drive_To_Reverse\nPSI");
	MakeWord	(0X1B9CE);
	MakeName	(0X1B9CE,	"XPRS_GARAGE_PRESSURE_KE_GS_DRIVE_TO_REVERSE_PULSE");
	MakeRptCmt	(0X1B9D0,	"This calibrations returns a pressure pulse value forgarage shift type of Park_Neutral_To_Drive\nPSI");
	MakeWord	(0X1B9D0);
	MakeName	(0X1B9D0,	"XPRS_GARAGE_PRESSURE_KE_GS_PN_TO_DRIVE_PULSE");
	MakeRptCmt	(0X1B9D2,	"This calibrations returns a pressure pulse value forgarage shift type of Park_Neutral_To_Reverse\nPSI");
	MakeWord	(0X1B9D2);
	MakeName	(0X1B9D2,	"XPRS_GARAGE_PRESSURE_KE_GS_PN_TO_REVERSE_PULSE");
	MakeRptCmt	(0X1B9D4,	"This calibrations returns a pressure pulse value forgarage shift type of Reverse_To_Drive\nPSI");
	MakeWord	(0X1B9D4);
	MakeName	(0X1B9D4,	"XPRS_GARAGE_PRESSURE_KE_GS_REVERSE_TO_DRIVE_PULSE");
	MakeRptCmt	(0X1B9D6,	"Garage shift delay time must be less than this calibrationin order for garage shift fill pulse time adapt to bemodified\nSeconds");
	MakeWord	(0X1B9D6);
	MakeName	(0X1B9D6,	"XPRS_GARAGE_PRESSURE_KE_GS_DELAY_TIME_MAX");
	MakeRptCmt	(0X1B9D8,	"The high limit of engine speed for garage shift fillpulse time adapt to be modified\nRPM");
	MakeWord	(0X1B9D8);
	MakeName	(0X1B9D8,	"XPRS_GARAGE_PRESSURE_KE_GS_ENGINE_SPEED_HIGH");
	MakeRptCmt	(0X1B9DA,	"The low limit of engine speed for garage shift fillpulse time adapt to be modified\nRPM");
	MakeWord	(0X1B9DA);
	MakeName	(0X1B9DA,	"XPRS_GARAGE_PRESSURE_KE_GS_ENGINE_SPEED_LOW");
	MakeRptCmt	(0X1B9DC,	"The high limit of transmission temperature for garageshift fill pulse time adapt to be modified\nDegreesC");
	MakeWord	(0X1B9DC);
	MakeName	(0X1B9DC,	"XPRS_GARAGE_PRESSURE_KE_GS_TRANS_TEMP_HIGH");
	MakeRptCmt	(0X1B9DE,	"The low limit of transmission temperature for garageshift fill pulse time adapt to be modified\nDegreesC");
	MakeWord	(0X1B9DE);
	MakeName	(0X1B9DE,	"XPRS_GARAGE_PRESSURE_KE_GS_TRANS_TEMP_LOW");
	MakeRptCmt	(0X1B9E0,	"Value that iscontinuously added to garage shift pressure profilemodifier until phase 1 time has been reached\nPSI/Second");
	MakeWord	(0X1B9E0);
	MakeName	(0X1B9E0,	"XPRS_GARAGE_PRESSURE_KE_GS_PROFILE_PHASE_1_RATE");
	MakeRptCmt	(0X1B9E2,	"Time limit for phase 1 of the garage shift pressureprofile\nSeconds");
	MakeWord	(0X1B9E2);
	MakeName	(0X1B9E2,	"XPRS_GARAGE_PRESSURE_KE_GS_PROFILE_PHASE_1_TIME");
	MakeRptCmt	(0X1B9E4,	"Value that iscontinuously added to garage shift pressure profilemodifier until phase 2 time has been reached\nPSI/Second");
	MakeWord	(0X1B9E4);
	MakeName	(0X1B9E4,	"XPRS_GARAGE_PRESSURE_KE_GS_PROFILE_PHASE_2_RATE");
	MakeRptCmt	(0X1B9E6,	"Time limit for phase 2 of the garage shift pressureprofile\nSeconds");
	MakeWord	(0X1B9E6);
	MakeName	(0X1B9E6,	"XPRS_GARAGE_PRESSURE_KE_GS_PROFILE_PHASE_2_TIME");
	MakeWord	(0X1B9E8);
	MakeName	(0X1B9E8,	"XPRS_GARAGE_PRESSURE_KE_GS_PROFILE_PHASE_3_RATE");
	MakeRptCmt	(0X1B9EA,	"Time limit for phase 3 of the garage shift pressureprofile\nSeconds");
	MakeWord	(0X1B9EA);
	MakeName	(0X1B9EA,	"XPRS_GARAGE_PRESSURE_KE_GS_PROFILE_PHASE_3_TIME");
	MakeRptCmt	(0X1B9EC,	"This calibration is used to determine the start of thegarage shift when turbine speed acceleration drops belowthis calibration\nRPM/Second");
	MakeWord	(0X1B9EC);
	MakeName	(0X1B9EC,	"XPRS_GARAGE_PRESSURE_KE_GS_INPUT_SPEED_ACCEL_THRESH");
	MakeWord	(0X1B9EE);
	MakeName	(0X1B9EE,	"XPRS_GARAGE_PRESSURE_KE_GS_RD_TO_DR_INPUT_ACCEL_HIGH");
	MakeWord	(0X1B9F0);
	MakeName	(0X1B9F0,	"XPRS_GARAGE_PRESSURE_KE_GS_RD_TO_DR_INPUT_ACCEL_LOW");
	MakeWord	(0X1B9F2);
	MakeName	(0X1B9F2,	"XPRS_GARAGE_PRESSURE_KE_GS_PN_TO_RD_INPUT_ACCEL_THRE");
	MakeRptCmt	(0X1B9F4,	"Maximum throttle position for disabling garage profile.\nPercent");
	MakeWord	(0X1B9F4);
	MakeName	(0X1B9F4,	"XPRS_GARAGE_PRESSURE_KE_GS_PROFILE_MAX_TPS");
	MakeRptCmt	(0X1B9F6,	"This calibration is for setting the Garage PressureModifier to 0.\nDegrees C");
	MakeWord	(0X1B9F6);
	MakeName	(0X1B9F6,	"XPRS_GARAGE_PRESSURE_KE_GS_PROFILE_TEMP_HIGH");
	MakeRptCmt	(0X1B9F8,	"This calibration is for setting the Garage PressureModifier to 0.\nDegrees C");
	MakeWord	(0X1B9F8);
	MakeName	(0X1B9F8,	"XPRS_GARAGE_PRESSURE_KE_GS_PROFILE_TEMP_LOW");
	MakeWord	(0X1B9FA);
	MakeName	(0X1B9FA,	"XPRS_GARAGE_PRESSURE_KE_GS_ADAPT_TOTAL_PULSE_TIME_MAX");
	MakeRptCmt	(0X1B9FC,	"This calibrationis the desired pulse time percent of the shift delayfor Park-Neutral to Drive shifts.\nFactor");
	MakeByte	(0X1B9FC);
	MakeName	(0X1B9FC,	"XPRS_GARAGE_PRESSURE_KE_GS_PULSE_TIME_PERCENT_DRV");
	MakeRptCmt	(0X1B9FD,	"This calibrationis the desired pulse time percent of the shift delayfor Park-Neutral to Reverse shifts.\nFactor");
	MakeByte	(0X1B9FD);
	MakeName	(0X1B9FD,	"XPRS_GARAGE_PRESSURE_KE_GS_PULSE_TIME_PERCENT_RVRS");
	MakeByte	(0X1B9FE);
	MakeArray	(0X1B9FE,	0X2);
	MakeName	(0X1B9FE,	"XPRS_GARAGE_PRESSURE_KV_GS_ADAPT_CELL_WEIGHT_FACTOR");
	MakeByte	(0X1BA00);
	MakeRptCmt	(0X1BA04,	"Pulse time adapt modifier table for a drive garage shift\nSeconds");
	MakeName	(0X1BA04,	"XPRS_GARAGE_PRESSURE_KV_GS_PULSE_MOD_DRIVE_TABLE");
	MakeRptCmt	(0X1BA26,	"Pulse time adapt modifier table for a reverse garage shift\nSeconds");
	MakeName	(0X1BA26,	"XPRS_GARAGE_PRESSURE_KV_GS_PULSE_MOD_REVERSE_TABLE");
	MakeRptCmt	(0X1BA48,	"Offset added to Garage Pressure when First Garage Shift Cold Drive is indicated.\nPSI");
	MakeWord	(0X1BA48);
	MakeName	(0X1BA48,	"XPRS_GARAGE_PRESSURE_KV_GS_FIRST_SHIFT_COLD_DRV_MOD");
	MakeRptCmt	(0X1BA5A,	"Offset added to Garage Pressure when First Garage Shift Cold Reverse is indicated.\nPSI");
	MakeWord	(0X1BA5A);
	MakeName	(0X1BA5A,	"XPRS_GARAGE_PRESSURE_KV_GS_FIRST_SHIFT_COLD_RVRS_MOD");
	MakeRptCmt	(0X1BA6C,	"Transmission temperature must be greater than thisfor power-on garage shifts to be activated.\nDegreesC");
	MakeName	(0X1BA6C,	"XPRS_GARAGE_PRESSURE_KE_GS_PWRON_MIN_TEMP");
	MakeRptCmt	(0X1BA6E,	"Throttle must be greater than thisfor power-on garage shifts to be activated.\nPercent");
	MakeName	(0X1BA6E,	"XPRS_GARAGE_PRESSURE_KE_GS_PWRON_MIN_TPS");
	MakeRptCmt	(0X1BA70,	"Clutch_Slip must exceed this before Power-On GarageBase Pressure is allowed to start ramping.\nRPM");
	MakeName	(0X1BA70,	"XPRS_GARAGE_PRESSURE_KE_GS_PWRON_CLUTCH_SLIP_HI");
	MakeName	(0X1BA72,	"XPRS_GARAGE_PRESSURE_KE_GS_PWRON_DRV_MAX_PLS_TIME");
	MakeName	(0X1BA74,	"XPRS_GARAGE_PRESSURE_KE_GS_PWRON_REV_MAX_PLS_TIME");
	MakeRptCmt	(0X1BA76,	"If Clutch_Slip is less than this, Power-On Garage BasePressure starts to ramp for P/N to Drive or Reverse toDrive Pwron GS.\nRPM");
	MakeName	(0X1BA76,	"XPRS_GARAGE_PRESSURE_KE_GS_PWRON_DRV_PROF_CLSLIP");
	MakeRptCmt	(0X1BA78,	"If Clutch_Slip is less than this, Power-On Garage BasePressure starts to ramp for P/N to Reverse or Drive toReverse Pwron GS.\nRPM");
	MakeName	(0X1BA78,	"XPRS_GARAGE_PRESSURE_KE_GS_PWRON_REV_PROF_CLSLIP");
	MakeRptCmt	(0X1BA7A,	"If GS_Pwron_End_Timer is greater than this, the Power-OnGarage Shift Pressure Calculation is terminated.\nSeconds");
	MakeName	(0X1BA7A,	"XPRS_GARAGE_PRESSURE_KE_GS_PWRON_END_TIME");
	MakeRptCmt	(0X1BA7C,	"If Pwron_Clutch_Slip_Status is equal to End_Triggered,Pwron_Garage_Pressure_Base is set equal to this.\nPSI");
	MakeName	(0X1BA7C,	"XPRS_GARAGE_PRESSURE_KE_GS_PWRON_END_PTS");
	MakeRptCmt	(0X1BA7E,	"Temperature compensation factor used in base pressurecalculation for Power-On Garage Shift Pressure.\nFactor");
	MakeName	(0X1BA7E,	"XPRS_GARAGE_PRESSURE_KV_GS_PWRON_BASE_TEMP_FACTOR");
	MakeRptCmt	(0X1BA8E,	"If Clutch_Slip is less than this, Status is End_Triggeredfor P/N to drive or reverse to drive garage shift.\nRPM");
	MakeName	(0X1BA8E,	"XPRS_GARAGE_PRESSURE_KV_GS_PWRON_DRV_END_CLSLIP");
	MakeRptCmt	(0X1BAA4,	"If Clutch_Slip is less than this, Status is End_Triggeredfor P/N to reverse or drive to reverse garage shift.\nRPM");
	MakeName	(0X1BAA4,	"XPRS_GARAGE_PRESSURE_KV_GS_PWRON_REV_END_CLSLIP");
	MakeRptCmt	(0X1BABA,	"Pressure_Ramp_Rate when P/N to drive or reverse to drivegarage shift occurs.\nPSI/Sec");
	MakeName	(0X1BABA,	"XPRS_GARAGE_PRESSURE_KV_GS_PWRON_DRV_PROFILE");
	MakeRptCmt	(0X1BACC,	"Pressure_Ramp_Rate when P/N to reverse or drive to reversegarage shift occurs.\nPSI/Sec");
	MakeName	(0X1BACC,	"XPRS_GARAGE_PRESSURE_KV_GS_PWRON_REV_PROFILE");
	MakeRptCmt	(0X1BADE,	"Pressure pulse temperature compensation factorfor Power-On Garage Shift Pressure control.\nFactor");
	MakeName	(0X1BADE,	"XPRS_GARAGE_PRESSURE_KV_GS_PWRON_PLS_TEMP_FACTOR");
	MakeRptCmt	(0X1BAEE,	"Base Pressure for Power-On Garage Shift for aP/N to drive or a reverse to drive garage shift.\nPSI");
	MakeName	(0X1BAEE,	"XPRS_GARAGE_PRESSURE_KA_GS_PWRON_DRV_BASE");
	MakeRptCmt	(0X1BB90,	"Base Pressure for Power-On Garage Shift for aP/N to reverse or a drive to reverse garage shift.\nPSI");
	MakeName	(0X1BB90,	"XPRS_GARAGE_PRESSURE_KA_GS_PWRON_REV_BASE");
	MakeRptCmt	(0X1BC32,	"Pulse Magnitude for Power-On Garage Shift for aP/N to drive or a reverse to drive garage shift.\nPSI");
	MakeName	(0X1BC32,	"XPRS_GARAGE_PRESSURE_KA_GS_PWRON_DRV_PULSE");
	MakeRptCmt	(0X1BC64,	"Pulse Magnitude for Power-On Garage Shift for aP/N to drive or a reverse to drive garage shift.\nPSI");
	MakeName	(0X1BC64,	"XPRS_GARAGE_PRESSURE_KA_GS_PWRON_REV_PULSE");
	MakeName	(0X1BC96,	"XPRS_GARAGE_PRESSURE_KA_GS_PWRON_DRV_PULSE_MOD_TIME");
	MakeName	(0X1BCC8,	"XPRS_GARAGE_PRESSURE_KA_GS_PWRON_REV_PULSE_MOD_TIME");
	MakeRptCmt	(0X1BCFA,	"Reduction Magnitude for Power-On Garage Shift TorqueManagement for P/N to drive or reverse to drive shift.\nPercent");
	MakeName	(0X1BCFA,	"XPRS_GARAGE_PRESSURE_KA_ATM_PWRON_DRV_RDCTN_MAG");
	MakeRptCmt	(0X1BD2C,	"Reduction Magnitude for Power-On Garage Shift TorqueManagement for P/N to reverse or drive to reverse shift.\nPercent");
	MakeName	(0X1BD2C,	"XPRS_GARAGE_PRESSURE_KA_ATM_PWRON_REV_RDCTN_MAG");
	MakeRptCmt	(0X1BD5E,	"Clutch_Slip must exceed this before Power-On GarageShift Torque Control is activated.\nRPM");
	MakeName	(0X1BD5E,	"XPRS_GARAGE_PRESSURE_KE_ATM_PWRON_CLSLIP_HI");
	MakeRptCmt	(0X1BD60,	"Clutch_Slip must be below this for PowerOn_GS_Reductionto start to ramp for a P/N to drive or a reverseto drive shift.\nRPM");
	MakeName	(0X1BD60,	"XPRS_GARAGE_PRESSURE_KE_ATM_PWRON_DRV_CLSLIP_LO");
	MakeRptCmt	(0X1BD62,	"Clutch_Slip must be below this for PowerOn_GS_Reductionto start to ramp for a P/N to reverse or a driveto reverse shift.\nRPM");
	MakeName	(0X1BD62,	"XPRS_GARAGE_PRESSURE_KE_ATM_PWRON_REV_CLSLIP_LO");
	MakeRptCmt	(0X1BD64,	"This is the time duration that PowerOn_GS_Reductionis linearly ramped during a P/N to drive or a reverseto drive shift.\nSeconds");
	MakeName	(0X1BD64,	"XPRS_GARAGE_PRESSURE_KE_ATM_PWRON_DRV_RAMP_TIME");
	MakeRptCmt	(0X1BD66,	"This is the time duration that PowerOn_GS_Reductionis linearly ramped during a P/N to reverse or a driveto reverse shift.\nSeconds");
	MakeName	(0X1BD66,	"XPRS_GARAGE_PRESSURE_KE_ATM_PWRON_REV_RAMP_TIME");
	MakeRptCmt	(0X1BD68,	"Coolant_Temperature must be greater than this forpower-on garage shift torque control to be activated.\nDegreesC");
	MakeName	(0X1BD68,	"XPRS_GARAGE_PRESSURE_KE_ATM_PWRON_MIN_COOLANT");
	MakeRptCmt	(0X1BD6A,	"Engine_Run_Time must be greater than this forpower-on garage shift torque control to be activated.\nSeconds");
	MakeName	(0X1BD6A,	"XPRS_GARAGE_PRESSURE_KE_ATM_PWRON_MIN_RUNTIME");
	MakeRptCmt	(0X1BD6E,	"To add an initial offset to thePressure_Profile_Modifier before it begins ramping with the1st offset\nPSI_s");
	MakeName	(0X1BD6E,	"XPRS_RATIO_KA_PRESSURE_PROFILE_INIT_OFFSET");
	MakeRptCmt	(0X1BDBC,	"Used to determine pressure profile modifier.\nPSI_s");
	MakeName	(0X1BDBC,	"XPRS_RATIO_KA_PRESSURE_PROFILE_1ST_OFFSET");
	MakeName	(0X1BE0A,	"XPRS_RATIO_KA_PRESSURE_PROFILE_2ND_OFFSET");
	MakeRptCmt	(0X1BE58,	"Contains the starting gear ratio values for upshift timing.\nRatio");
	MakeName	(0X1BE58,	"XPRS_RATIO_KA_PRESS_PROFILE_START_RATIO");
	MakeRptCmt	(0X1BEA6,	"Ratio values used to trigger 2nd pressure profile modifier to Shift_Pressure.\nRatio");
	MakeName	(0X1BEA6,	"XPRS_RATIO_KA_PRESS_PROFILE_MIDDLE_RATIO");
	MakeRptCmt	(0X1BEF4,	"Contains the ending gear ratio values for upshift timing.\nRatio");
	MakeName	(0X1BEF4,	"XPRS_RATIO_KA_PRESS_PROFILE_END_RATIO");
	MakeWord	(0X1BF42);
	MakeName	(0X1BF42,	"XPRS_RATIO_KV_12_DLOW_ACCUM_PROF_OFFSET");
	MakeWord	(0X1BF64);
	MakeName	(0X1BF64,	"XPRS_RATIO_KV_12_DLOW_ACCUM_PROF_RATE");
	MakeRptCmt	(0X1BF86,	"Time threshold for the start of the 1-2 drive low urban shift accumulator ramp\nSeconds");
	MakeWord	(0X1BF86);
	MakeName	(0X1BF86,	"XPRS_RATIO_KV_DLOW_ACCUM_PROF_START");
	MakeRptCmt	(0X1BFA8,	"Enables base pressure modification for upshifts based on ratio of gearbox and inertia torque.\nT/F");
	MakeByte	(0X1BFA8);
	MakeName	(0X1BFA8,	"XPRS_SHIFT_KE_ENABLE_G_I_TRQ_RATIO_MULT");
	MakeRptCmt	(0X1BFAA,	"Used to find Inertia_Torque\nPSI_S");
	MakeName	(0X1BFAA,	"XPRS_SHIFT_KA_DOWNSHIFT_PRESS_MODIFICATION");
	MakeName	(0X1BFFE,	"XPRS_SHIFT_KA_JUMP_DS_PRESS_OFFSET");
	MakeWord	(0X1C034);
	MakeRptCmt	(0X1C036,	"The amount of time to limit Jump_Down_Modifier to seejump downshift.\nSeconds");
	MakeName	(0X1C036,	"XPRS_SHIFT_KV_JUMP_DS_MOD_TIME_LIMIT");
	MakeRptCmt	(0X1C03A,	"\n");
	MakeName	(0X1C03A,	"XPRS_SHIFT_KA_JUMP_DS_BASE_PRESS_OFFSET");
	MakeRptCmt	(0X1C07E,	"Offset addedto Base_Pressure during 1-2 and 2-1 shifts in Drive_2\nPSI_S");
	MakeName	(0X1C07E,	"XPRS_SHIFT_KV_DRIVE2_PRESS_OFFSET_TABLE");
	MakeWord	(0X1C09E);
	MakeRptCmt	(0X1C0A0,	"Contains the wheel slipgear ratio value FOR calculating the wheel slip modifier\nRatio");
	MakeName	(0X1C0A0,	"XPRS_SHIFT_KV_WHEEL_SLIP_RATIO");
	MakeWord	(0X1C0A4);
	MakeRptCmt	(0X1C0A6,	"Used to determinethe wheel slip modifier\nPSI");
	MakeName	(0X1C0A6,	"XPRS_SHIFT_KV_WHEEL_SLIP_PRESSURE");
	MakeRptCmt	(0X1C0AC,	"When TRUE, eliminate the use of the downshift pressuremodifier when the braking element is applied.\nT/F");
	MakeByte	(0X1C0AC);
	MakeName	(0X1C0AC,	"XPRS_SHIFT_KE_ELIMINATE_DN_TURB_MOD_ELE_ON");
	MakeRptCmt	(0X1C0AE,	"Factor multiplied by Base Pressure when First Upshift Cold  is indicated.\nFactor");
	MakeName	(0X1C0AE,	"XPRS_SHIFT_KA_FIRST_UPSHIFT_COLD_FACTOR");
	MakeRptCmt	(0X1C0E4,	"Amount of time an adapt cell update will be delayed after a previous adapt update.\nSeconds");
	MakeWord	(0X1C0E4);
	MakeName	(0X1C0E4,	"XPRS_STEADY_STATE_KE_SS_DISABLE_ADAPT_TIME");
	MakeRptCmt	(0X1C0E6,	"The amount of time that Time_Since_Last_Range_Change must be greater than in order to allow a SS adapt.\nSeconds");
	MakeWord	(0X1C0E6);
	MakeName	(0X1C0E6,	"XPRS_STEADY_STATE_KE_SS_ADAPT_RANGE_CHANGE_TIME");
	MakeRptCmt	(0X1C0E8,	"Vehicle speed must be greater than this for a valid steady state adapts update.\nMPH");
	MakeWord	(0X1C0E8);
	MakeName	(0X1C0E8,	"XPRS_STEADY_STATE_KE_SS_ADAPT_OUTPUT_SPEED_VALID");
	MakeRptCmt	(0X1C0EA,	"This calibration defines a minimum limit of clutchcontrol capacity before allowing steady state adapts.\nScaler");
	MakeWord	(0X1C0EA);
	MakeName	(0X1C0EA,	"XPRS_STEADY_STATE_KE_SS_ADAPT_CC_HIGH");
	MakeRptCmt	(0X1C0EC,	"Update steady state adapt up pressure cells when slip counter exceeds this cal.\nCounts");
	MakeWord	(0X1C0EC);
	MakeName	(0X1C0EC,	"XPRS_STEADY_STATE_KE_SS_ADAPT_COUNT_HIGH");
	MakeRptCmt	(0X1C0EE,	"Update steady state adapt down pressure cells when slip counter exceeds this cal.\nCounts");
	MakeWord	(0X1C0EE);
	MakeName	(0X1C0EE,	"XPRS_STEADY_STATE_KE_SS_ADAPT_COUNT_LOW");
	MakeRptCmt	(0X1C0F0,	"This is subtracted from the steady state adaptive pressure cells when adapt down conditions are met.\nPSI");
	MakeWord	(0X1C0F0);
	MakeName	(0X1C0F0,	"XPRS_STEADY_STATE_KV_SS_ADAPTIVE_CELLS_DOWN");
	MakeByte	(0X1C0F2);
	MakeArray	(0X1C0F2,	0XE);
	MakeRptCmt	(0X1C100,	"This is added to the steady state adaptive pressure cells when adapt up conditions are met.\nPSI");
	MakeWord	(0X1C100);
	MakeName	(0X1C100,	"XPRS_STEADY_STATE_KV_SS_ADAPTIVE_CELLS_UP");
	MakeByte	(0X1C102);
	MakeArray	(0X1C102,	0XE);
	MakeRptCmt	(0X1C110,	"Gain used to calculate steady state line pressure.\nGain");
	MakeByte	(0X1C110);
	MakeName	(0X1C110,	"XPRS_STEADY_STATE_KV_LINE_CLUTCH_GAIN");
}


static Bytes_8(void) {
        auto x;
#define id x

	MakeRptCmt	(0X1C118,	"Amount of clutch gain to be used in steady state linedetermination when in coast braking.\nGain");
	MakeByte	(0X1C118);
	MakeName	(0X1C118,	"XPRS_STEADY_STATE_KV_BRK_ELEMENT_LINE_CLUTCH_GAIN");
	MakeByte	(0X1C119);
	MakeArray	(0X1C119,	0X7);
	MakeRptCmt	(0X1C120,	"Temperature compensation factor to steady state line pressure.\nPSI/Ftlb");
	MakeByte	(0X1C120);
	MakeName	(0X1C120,	"XPRS_STEADY_STATE_KV_SS_LINE_TEMP_COMP");
	MakeRptCmt	(0X1C132,	"Offset used to calculate steady state line pressure.\nPSI");
	MakeWord	(0X1C132);
	MakeName	(0X1C132,	"XPRS_STEADY_STATE_KV_LINE_CLUTCH_OFFSET");
	MakeRptCmt	(0X1C142,	"Offset used to calculate steady state line pressure.\nPSI");
	MakeWord	(0X1C142);
	MakeName	(0X1C142,	"XPRS_STEADY_STATE_KV_BRK_ELEMENT_LINE_CLUTCH_OFST");
	MakeRptCmt	(0X1C152,	"Pressure offset used in steady state pressure calculation.\nPSI");
	MakeWord	(0X1C152);
	MakeName	(0X1C152,	"XPRS_STEADY_STATE_KV_PRESSURE_OFFSET");
	MakeRptCmt	(0X1C160,	"Clutch pressure offset used in steady state pressure calculation when TCC is on.\nPSI");
	MakeWord	(0X1C160);
	MakeName	(0X1C160,	"XPRS_STEADY_STATE_KV_LINE_TCC_OFFSET_PRESSURE");
	MakeRptCmt	(0X1C182,	"Pressure gain used in steady state pressure calculation.\nGain");
	MakeWord	(0X1C182);
	MakeName	(0X1C182,	"XPRS_STEADY_STATE_KV_PRESSURE_GAIN");
	MakeRptCmt	(0X1C190,	"This determines if clutch slip is high enough to adapt up steady state pressure.\nRPM");
	MakeWord	(0X1C190);
	MakeName	(0X1C190,	"XPRS_STEADY_STATE_KE_SS_ADAPT_CLUTCH_SLIP_HIGH");
	MakeRptCmt	(0X1C192,	"This determines if clutch slip is low enough to adapt down steady state pressure.\nRPM");
	MakeWord	(0X1C192);
	MakeName	(0X1C192,	"XPRS_STEADY_STATE_KE_SS_ADAPT_CLUTCH_SLIP_LOW");
	MakeRptCmt	(0X1C194,	"This determines if TCC slip is high enough to adapt up steady state pressure.\nRPM");
	MakeWord	(0X1C194);
	MakeName	(0X1C194,	"XPRS_STEADY_STATE_KE_SS_ADAPT_SLIP_HIGH");
	MakeRptCmt	(0X1C196,	"This determines if TCC slip is low enough to adapt down steady state pressure.\nRPM");
	MakeWord	(0X1C196);
	MakeName	(0X1C196,	"XPRS_STEADY_STATE_KE_SS_ADAPT_SLIP_LOW");
	MakeRptCmt	(0X1C198,	"Amount to increment slip counter by when clutch slip conditions are met for steady state adapt up pressure.\nCounts");
	MakeWord	(0X1C198);
	MakeName	(0X1C198,	"XPRS_STEADY_STATE_KV_CLUTCH_SLIP_ADAPT_UP_COUNTER");
	MakeRptCmt	(0X1C1A2,	"Amount to increment slip counter by when TCC slip conditions are met for steady state adapt up pressure.\nCounts");
	MakeWord	(0X1C1A2);
	MakeName	(0X1C1A2,	"XPRS_STEADY_STATE_KV_TCC_SLIP_ADAPT_UP");
	MakeRptCmt	(0X1C1AC,	"Amount to decrement slip counter by when slip conditions are met for steady state adapt down pressure.\nCounts");
	MakeWord	(0X1C1AC);
	MakeName	(0X1C1AC,	"XPRS_STEADY_STATE_KV_SS_ADAPT_DOWN_COUNTER");
	MakeWord	(0X1C1BC);
	MakeName	(0X1C1BC,	"XPRS_STEADY_STATE_KE_SS_BRAKING_TORQUE");
	MakeByte	(0X1C1BE);
	MakeName	(0X1C1BE,	"XPRS_STEADY_STATE_KA_SS_BRAKING_ADAPT_ENABLED");
	MakeRptCmt	(0X1C1CE,	"Indicates if braking element is applied for Drive_Low dueto the hydromechanical design of the transmission.\nBOOLEAN");
	MakeName	(0X1C1CE,	"XPRS_STEADY_STATE_KV_D1_BRAKING_ELEMENT_ON_RANGE");
	MakeRptCmt	(0X1C1D2,	"Indicates if braking element is applied for Drive_Low dueto the hydromechanical design of the transmission.\nBOOLEAN");
	MakeName	(0X1C1D2,	"XPRS_STEADY_STATE_KV_D2_BRAKING_ELEMENT_ON_RANGE");
	MakeRptCmt	(0X1C1D6,	"Indicates if braking element is applied for Drive_Low dueto the hydromechanical design of the transmission.\nBOOLEAN");
	MakeName	(0X1C1D6,	"XPRS_STEADY_STATE_KV_D3_BRAKING_ELEMENT_ON_RANGE");
	MakeRptCmt	(0X1C1DA,	"Indicates if braking element is applied for Drive_Low dueto the hydromechanical design of the transmission.\nBOOLEAN");
	MakeName	(0X1C1DA,	"XPRS_STEADY_STATE_KV_D4_BRAKING_ELEMENT_ON_RANGE");
	MakeRptCmt	(0X1C1DE,	"Lag filter coefficient used to achieve the filtered steadystate throttle.\nCoeff");
	MakeWord	(0X1C1DE);
	MakeName	(0X1C1DE,	"XPRS_STEADY_STATE_KE_SS_DELTA_THROTTLE_FILTER_COEF");
	MakeRptCmt	(0X1C1E0,	"This calibration is multiplied with the steady state deltathrotttle to yield steady state delta throttle modifier.\nPSI/Percent");
	MakeDword	(0X1C1E0);
	MakeName	(0X1C1E0,	"XPRS_STEADY_STATE_KE_SS_DELTA_THROTTLE_GAIN");
	MakeRptCmt	(0X1C1E4,	"The steady state delta throttle modifier is limited to thisvalue.\nPSI");
	MakeWord	(0X1C1E4);
	MakeName	(0X1C1E4,	"XPRS_STEADY_STATE_KE_SS_DELTA_THROTTLE_MOD_LIMIT");
	MakeWord	(0X1C1E6);
	MakeName	(0X1C1E6,	"XPRS_STEADY_STATE_KE_SS_DELTA_THROTTLE_THRESHOLD");
	MakeRptCmt	(0X1C1E8,	"\n");
	MakeWord	(0X1C1E8);
	MakeName	(0X1C1E8,	"XPRS_STEADY_STATE_KE_SS_CLOSED_THROT_MIN_TPS");
	MakeRptCmt	(0X1C1EA,	"Do Closed Throttle calculation of steady state pressure if MPH is less than this.\nMPH");
	MakeWord	(0X1C1EA);
	MakeName	(0X1C1EA,	"XPRS_STEADY_STATE_KE_SS_CLOSED_THROT_MIN_MPH");
	MakeRptCmt	(0X1C1EC,	"Steady state line pressure in Closed Throttle mode.\nPSI");
	MakeName	(0X1C1EC,	"XPRS_STEADY_STATE_KA_SS_CLOSED_THROT_LINE_PRES");
	MakeRptCmt	(0X1C26A,	"Bypass the steady state adapt update if this is false.\nT/F");
	MakeByte	(0X1C26A);
	MakeName	(0X1C26A,	"XPRS_STEADY_STATE_KE_USE_STEADY_STATE_ADAPTS");
	MakeRptCmt	(0X1C26C,	"Amount of time to ramp the torque reduction to stall torquereduction when range = Drive\nSeconds");
	MakeWord	(0X1C26C);
	MakeName	(0X1C26C,	"XSEM_ABUSE_TORQUE_KE_DRIVE_RAMP_OUT_TIME");
	MakeRptCmt	(0X1C26E,	"Amount of time to ramp the torque reduction to stall torquereduction when range = Reverse\nSeconds");
	MakeWord	(0X1C26E);
	MakeName	(0X1C26E,	"XSEM_ABUSE_TORQUE_KE_REVERSE_RAMP_OUT_TIME");
	MakeRptCmt	(0X1C270,	"Engine speed limit for detecting abuse conditions\nRPM");
	MakeWord	(0X1C270);
	MakeName	(0X1C270,	"XSEM_ABUSE_TORQUE_KE_SEM_ENGINE_SPD_ABUSE_LIMIT");
	MakeRptCmt	(0X1C272,	"Minimum input speed limit used to determine  garage shiftinformation\nRPM");
	MakeWord	(0X1C272);
	MakeName	(0X1C272,	"XSEM_ABUSE_TORQUE_KE_SEM_INPUT_SPEED_LIMIT");
	MakeRptCmt	(0X1C274,	"Percent throttle limit for detecting abuse conditions\nPercent");
	MakeWord	(0X1C274);
	MakeName	(0X1C274,	"XSEM_ABUSE_TORQUE_KE_SEM_THROTTLE_ABUSE_LIMIT");
	MakeRptCmt	(0X1C276,	"Amount of time to ramp the torque reduction to stall torquereduction when input speed becomes less thanKE_SEM_Input_Speed_Limit\nSeconds");
	MakeWord	(0X1C276);
	MakeName	(0X1C276,	"XSEM_ABUSE_TORQUE_KE_SPEED_RAMP_OUT_TIME");
	MakeRptCmt	(0X1C278,	"Vehicle speed threshold used to determine abuse mode\nMPH");
	MakeWord	(0X1C278);
	MakeName	(0X1C278,	"XSEM_ABUSE_TORQUE_KE_VEHICLE_SPEED_THRESHOLD");
	MakeRptCmt	(0X1C27A,	"Amount of abuse torque reduction as function of engine speed\nPercent");
	MakeWord	(0X1C27A);
	MakeName	(0X1C27A,	"XSEM_ABUSE_TORQUE_KV_ABUSE_TORQUE_REDUCTION");
	MakeByte	(0X1C27C);
	MakeArray	(0X1C27C,	0X4);
	MakeRptCmt	(0X1C29E,	"Duration of the abuse ramp for the Torque_Signal_Pressure for the initial occurance of the abuse mode.\nSeconds");
	MakeWord	(0X1C29E);
	MakeName	(0X1C29E,	"XSEM_ABUSE_TORQUE_KV_ABUSE_RAMP_TIME");
	MakeRptCmt	(0X1C2AE,	"Ramp out begin time used to determine when maximum torquereduction should end and begin ramping from maximum to zero\nSeconds");
	MakeName	(0X1C2AE,	"XSEM_RATIO_KA_DNSHFT_SEM_RAMP_OUT_STRT_TIME");
	MakeName	(0X1C314,	"XSEM_RATIO_KA_DNSHIFT_SEM_RAMP_IN_END_RATIO");
	MakeRptCmt	(0X1C37A,	"Ramp in start ratio limit used to determine when downshifttorque reduction ramping up should be begin\nRatio");
	MakeName	(0X1C37A,	"XSEM_RATIO_KA_DWN_SEM_STRT_RAMP_IN_RATIO");
	MakeRptCmt	(0X1C3E0,	"Ratio thresholds that decide when torque reduction shouldbegin ramping from maximum to zero\nRatio");
	MakeName	(0X1C3E0,	"XSEM_RATIO_KA_UPSHFT_SEM_RMP_OUT_STRT_RATIO");
	MakeRptCmt	(0X1C446,	"Ratio thresholds that decide when torque reduction shouldstop ramping from maximum to zero\nRatio");
	MakeName	(0X1C446,	"XSEM_RATIO_KA_UPSHIFT_SEM_RMP_OUT_END_RATIO");
	MakeRptCmt	(0X1C4AC,	"Ratio thresholds that decide when torque reduction shouldbegin ramping from zero to maximum\nRatio");
	MakeName	(0X1C4AC,	"XSEM_RATIO_KA_UPSHIFT_SEM_RMP_IN_STRT_RATIO");
	MakeRptCmt	(0X1C512,	"Ratio thresholds that decide when torque reduction shouldstop ramping from zero to maximum and stay at maximum\nRatio");
	MakeName	(0X1C512,	"XSEM_RATIO_KA_UPSHIFT_SEM_RAMP_IN_END_RATIO");
	MakeRptCmt	(0X1C578,	"End time threshold table used to end ratio-based torque management for a downshift.\nSeconds");
	MakeName	(0X1C578,	"XSEM_RATIO_KA_SEM_END_TIME_THRESHOLD");
	MakeRptCmt	(0X1C5DE,	"Minimum engine speed to enable brake torque management.\nRPM");
	MakeWord	(0X1C5DE);
	MakeName	(0X1C5DE,	"XSEM_RATIO_KV_BRK_TRQ_MGT_MIN_ENGINE_SPEED");
	MakeRptCmt	(0X1C5E4,	"Ratio value to start requesting brake torque management for an underlap manual downshift.\nRatio");
	MakeWord	(0X1C5E4);
	MakeName	(0X1C5E4,	"XSEM_RATIO_KV_BRK_TRQ_MGT_UNDERLAP_RATIO_A");
	MakeRptCmt	(0X1C5EA,	"Ratio value to start requesting brake torque management for a regular manual downshift.\nRatio");
	MakeWord	(0X1C5EA);
	MakeName	(0X1C5EA,	"XSEM_RATIO_KV_BRK_TRQ_MGT_RATIO_A");
	MakeRptCmt	(0X1C5F0,	"Ratio value to finish requesting brake torque management for a regular manual downshift.\nRatio");
	MakeWord	(0X1C5F0);
	MakeName	(0X1C5F0,	"XSEM_RATIO_KV_BRK_TRQ_MGT_RATIO_B");
	MakeRptCmt	(0X1C5F6,	"Amount of time to continue brake torque management after a ratio reaches KV_Brk_Trq_Mgt_Ratio_B for a manual downshift.\nSeconds");
	MakeWord	(0X1C5F6);
	MakeName	(0X1C5F6,	"XSEM_RATIO_KV_BRK_TRQ_MGT_END_TIME");
	MakeRptCmt	(0X1C5FC,	"Defines the highest throttle pedal position allowed forsetting the percent of reduction torque equal to zero.\nPercent");
	MakeWord	(0X1C5FC);
	MakeName	(0X1C5FC,	"XSEM_SHIFT_TORQUE_KE_SEM_PN_DISABLE_TPS");
	MakeRptCmt	(0X1C5FE,	"The vehicle speed limits to disable downshift torque management.\nMPH");
	MakeWord	(0X1C5FE);
	MakeName	(0X1C5FE,	"XSEM_SHIFT_TORQUE_KV_DNSHFT_SEM_MPH_SPEED_DISABLE");
	MakeRptCmt	(0X1C604,	"\n");
	MakeName	(0X1C604,	"XSEM_SHIFT_TORQUE_KE_SEM_START_TIME_LIMIT");
	MakeRptCmt	(0X1C606,	"Engine speed limit above which stall could be selected\nRPM");
	MakeWord	(0X1C606);
	MakeName	(0X1C606,	"XSEM_STALL_TORQUE_KE_SEM_STALL_ENGINE_SPEED_HIGH");
	MakeRptCmt	(0X1C608,	"Engine speed below which stall will not be selected\nRPM");
	MakeWord	(0X1C608);
	MakeName	(0X1C608,	"XSEM_STALL_TORQUE_KE_SEM_STALL_ENGINE_SPEED_LOW");
	MakeRptCmt	(0X1C60A,	"Throttle limit above which stall could be selected\nPercent");
	MakeWord	(0X1C60A);
	MakeName	(0X1C60A,	"XSEM_STALL_TORQUE_KE_SEM_STALL_THROTTLE_HIGH");
	MakeRptCmt	(0X1C60C,	"Throttle below which stall will not be selected\nPercent");
	MakeWord	(0X1C60C);
	MakeName	(0X1C60C,	"XSEM_STALL_TORQUE_KE_SEM_STALL_THROTTLE_LOW");
	MakeRptCmt	(0X1C60E,	"When soft landing is in affect and desired gear is second gear and engine speed is greater than this, don't allow shifts.\nRPM");
	MakeWord	(0X1C60E);
	MakeName	(0X1C60E,	"XSHFT_3RD_GEAR_DEFAULT_KE_ENGINE_SPEED_DEFAULT_LIMIT");
	MakeRptCmt	(0X1C610,	"Adapt Enabling timer for 1-2 detent upshifts.\nSeconds");
	MakeName	(0X1C610,	"XSHFT_ADAPT_KE_1_2_DETENT_ADAPT_UP_ENABLE");
	MakeRptCmt	(0X1C612,	"Adapt Enabling timer for 2-3 detent upshifts.\nSeconds");
	MakeName	(0X1C612,	"XSHFT_ADAPT_KE_2_3_DETENT_ADAPT_UP_ENABLE");
	MakeRptCmt	(0X1C614,	"Adapt Enabling timer for 3-4 detent upshifts.\nSeconds");
	MakeName	(0X1C614,	"XSHFT_ADAPT_KE_3_4_DETENT_ADAPT_UP_ENABLE");
	MakeRptCmt	(0X1C616,	"Used as an enabling contingency for performing a 1-2 detent upshift adapt.\nSeconds");
	MakeName	(0X1C616,	"XSHFT_ADAPT_KE_1_2_DETENT_ADAPT_DOWN_ENABLE");
	MakeRptCmt	(0X1C618,	"Used as an enabling contingency for performing a 2-3 detent upshift adapt.\nSeconds");
	MakeName	(0X1C618,	"XSHFT_ADAPT_KE_2_3_DETENT_ADAPT_DOWN_ENABLE");
	MakeRptCmt	(0X1C61A,	"Used as an enabling contingency for performing a 3-4 detent upshift adapt.\nSeconds");
	MakeDword	(x=0X1C61A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X1C61A,	"XSHFT_ADAPT_KE_3_4_DETENT_ADAPT_DOWN_ENABLE");
	MakeRptCmt	(0X1C61E,	"Enable 2-3 detent upshift adatps when Delay_Time_Error is greater than or equal to this.\nSeconds");
	MakeDword	(x=0X1C61E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X1C61E,	"XSHFT_ADAPT_KE_2_3_DETENT_ADAPT_ERROR");
	MakeRptCmt	(0X1C622,	"Minimum value of adapt cells for a 1-2 detent upshift.\nSeconds");
	MakeName	(0X1C622,	"XSHFT_ADAPT_KE_1_2_DETENT_ERROR_MIN");
	MakeRptCmt	(0X1C624,	"Minimum value of adapt cells for a 2-3 detent upshift.\nSeconds");
	MakeName	(0X1C624,	"XSHFT_ADAPT_KE_2_3_DETENT_ERROR_MIN");
	MakeRptCmt	(0X1C626,	"Minimum value of adapt cells for a 3-4 detent upshift.\nSeconds");
	MakeDword	(x=0X1C626);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X1C626,	"XSHFT_ADAPT_KE_3_4_DETENT_ERROR_MIN");
	MakeRptCmt	(0X1C62A,	"Maximum value of adapt cells for a 2-3 detent upshift.\nSeconds");
	MakeName	(0X1C62A,	"XSHFT_ADAPT_KE_2_3_DETENT_ERROR_MAX");
	MakeRptCmt	(0X1C62C,	"Maximum value of adapt cells for a 3-4 detent upshift.\nSeconds");
	MakeDword	(x=0X1C62C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X1C62C,	"XSHFT_ADAPT_KE_3_4_DETENT_ERROR_MAX");
	MakeRptCmt	(0X1C630,	"Upper limitthat Transmission Temperature can be during a 2 3 shiftand still adapt\nDegreesC");
	MakeName	(0X1C630,	"XSHFT_ADAPT_KE_2_3_DETENT_HIGH_TEMP_ENABLE");
	MakeRptCmt	(0X1C632,	"Upper limitthat Transmission Temperature can be during a 3 4 shiftand still adapt\nDegreesC");
	MakeName	(0X1C632,	"XSHFT_ADAPT_KE_3_4_DETENT_HIGH_TEMP_ENABLE");
	MakeRptCmt	(0X1C634,	"Lower limitthat Transmission Temperature can be during a 1 2 shiftand still adapt\nDegreesC");
	MakeName	(0X1C634,	"XSHFT_ADAPT_KE_1_2_DETENT_LOW_TEMP_ENABLE");
	MakeRptCmt	(0X1C636,	"Lower limitthat Transmission Temperature can be during a 2 3 shiftand still adapt\nDegreesC");
	MakeName	(0X1C636,	"XSHFT_ADAPT_KE_2_3_DETENT_LOW_TEMP_ENABLE");
	MakeRptCmt	(0X1C638,	"Lower limitthat Transmission Temperature can be during a 3 4 shiftand still adapt\nDegreesC");
	MakeName	(0X1C638,	"XSHFT_ADAPT_KE_3_4_DETENT_LOW_TEMP_ENABLE");
	MakeRptCmt	(0X1C63A,	"To scale the amount the lower cell is adapted by\nNONE");
	MakeName	(0X1C63A,	"XSHFT_ADAPT_KE_DETENT_LOW_CELL_WEIGHT_FACTOR");
	MakeRptCmt	(0X1C63B,	"To scale the amount the target cell is adapted by\nNONE");
	MakeName	(0X1C63B,	"XSHFT_ADAPT_KE_DETENT_CELL_WEIGHT_FACTOR");
	MakeRptCmt	(0X1C63C,	"To scale the amount the upper cell is adapted by\nNONE");
	MakeName	(0X1C63C,	"XSHFT_ADAPT_KE_DETENT_HIG_CELL_WEIGHT_FACTOR");
	MakeRptCmt	(0X1C63E,	"\n");
	MakeWord	(0X1C63E);
	MakeName	(0X1C63E,	"XSHFT_ADAPT_KV_DETENT_ADAPT_ERROR");
	MakeRptCmt	(0X1C650,	"Delay line time modifier for 1-2 detent upshifts.\nSeconds");
	MakeName	(0X1C650,	"XSHFT_ADAPT_KV_1_2_DETENT_UPSHIFT_MODIFIER");
	MakeRptCmt	(0X1C662,	"Predicted delay time for a 1-2 detent upshift.\nSeconds");
	MakeName	(0X1C662,	"XSHFT_ADAPT_KV_1_2_DETENT_UPSHIFT_DELAY");
	MakeRptCmt	(0X1C674,	"Predicted delay time for a 2-3 detent upshift.\nSeconds");
	MakeName	(0X1C674,	"XSHFT_ADAPT_KV_2_3_DETENT_UPSHIFT_DELAY");
	MakeRptCmt	(0X1C686,	"Predicted delay time for a 3-4 detent upshift.\nSeconds");
	MakeName	(0X1C686,	"XSHFT_ADAPT_KV_3_4_DETENT_UPSHIFT_DELAY");
	MakeWord	(0X1C696);
	MakeRptCmt	(0X1C698,	"Disable detent adapts if wheel slip accel is less than this.\nMPH/Sec");
	MakeName	(0X1C698,	"XSHFT_ADAPT_KV_WHLSLP_INH_DETENT_ADAPT_LOW");
	MakeWord	(0X1C69C);
	MakeRptCmt	(0X1C69E,	"Disable detent adapts if wheel slip accel is greater than this.\nMPH/Sec");
	MakeName	(0X1C69E,	"XSHFT_ADAPT_KV_WHLSLP_INH_DETENT_ADAPT_HIGH");
	MakeRptCmt	(0X1C6A4,	"Delay a downshift until TCC has been off for this amount of time.\nSeconds");
	MakeWord	(0X1C6A4);
	MakeName	(0X1C6A4,	"XSHFT_MODIFICATIONS_KE_DOWNSHIFT_TCC_DELAY_TIME");
	MakeRptCmt	(0X1C6A6,	"Delay a downshift until TCC slip is less than this RPM threshold.\nRPM_s");
	MakeWord	(0X1C6A6);
	MakeName	(0X1C6A6,	"XSHFT_MODIFICATIONS_KE_DOWNSHIFT_DELAY_SLIP_THRESH");
	MakeRptCmt	(0X1C6A8,	"Delay a 3-2 downshift when the gear change time is greater than this low window time and less than the high window time.\nSeconds");
	MakeWord	(0X1C6A8);
	MakeName	(0X1C6A8,	"XSHFT_MODIFICATIONS_KE_DOWNSHIFT_42_LOW_TIME");
	MakeRptCmt	(0X1C6AA,	"Delay a 3-2 downshift when the gear change time is less thanthis high window time and greater than the low window time.\nSeconds");
	MakeWord	(0X1C6AA);
	MakeName	(0X1C6AA,	"XSHFT_MODIFICATIONS_KE_DOWNSHIFT_42_HIGH_TIME");
	MakeRptCmt	(0X1C6AC,	"The maximum downshift delay used with the 4-3-2 downshiftsequencing delay\nSeconds");
	MakeWord	(0X1C6AC);
	MakeName	(0X1C6AC,	"XSHFT_MODIFICATIONS_KE_DOWNSHIFT_SEQ_DELAY_MAX_TIME");
	MakeRptCmt	(0X1C6AE,	"The minimum downshift delay used with the 4-3-2 downshiftsequencing delay\nSeconds");
	MakeWord	(0X1C6AE);
	MakeName	(0X1C6AE,	"XSHFT_MODIFICATIONS_KE_DOWNSHIFT_SEQ_DELAY_MIN_TIME");
	MakeRptCmt	(0X1C6B0,	"Vehicle speed low threshold used to determine the downshiftdelay time used with the 4-3-2 downshift sequencing delay\nMPH");
	MakeWord	(0X1C6B0);
	MakeName	(0X1C6B0,	"XSHFT_MODIFICATIONS_KE_DOWNSHIFT_DELAY_HI_MPH_THRESH");
	MakeRptCmt	(0X1C6B2,	"Vehicle speed high threshold used to determine the downshiftdelay time used with the 4-3-2 downshift sequencing delay\nMPH");
	MakeWord	(0X1C6B2);
	MakeName	(0X1C6B2,	"XSHFT_MODIFICATIONS_KE_DOWNSHIFT_DELAY_LO_MPH_THRESH");
	MakeWord	(0X1C6B4);
	MakeName	(0X1C6B4,	"XSHFT_MODIFICATIONS_KE_2_1_INHIBIT_MIN_MPH");
	MakeRptCmt	(0X1C6B6,	"Used in comparison with Positive_Delta_Throttle toinhibit a 2-1 downshift.\nPercent");
	MakeWord	(0X1C6B6);
	MakeName	(0X1C6B6,	"XSHFT_MODIFICATIONS_KE_2_1_INHIBIT_POS_DELTA_THR");
	MakeWord	(0X1C6B8);
	MakeName	(0X1C6B8,	"XSHFT_MODIFICATIONS_KE_2_1_INHIBIT_THR_THRESHOLD");
	MakeRptCmt	(0X1C6BA,	"If the vehicle acceleration falls below this value,the 2-1 downshift inhibit is disabled.\nMPH_per_Second_S");
	MakeWord	(0X1C6BA);
	MakeName	(0X1C6BA,	"XSHFT_MODIFICATIONS_KE_2_1_INHIBIT_ACC_THRESH_LO");
	MakeRptCmt	(0X1C6BC,	"If the filtered vehicle acceleration is above this value,the 2-1 downshift inhibit is enabled.\nMPH_per_Second_S");
	MakeWord	(0X1C6BC);
	MakeName	(0X1C6BC,	"XSHFT_MODIFICATIONS_KE_2_1_INHIBIT_ACC_THRESH_HI");
	MakeRptCmt	(0X1C6BE,	"Total time required to be in second gear before allowing a shift to third.\nSeconds");
	MakeWord	(0X1C6BE);
	MakeName	(0X1C6BE,	"XSHFT_MODIFICATIONS_KE_1_3_UPSHIFT_SEQUENCING_TIME");
	MakeRptCmt	(0X1C6C0,	"Total time required to be in second and third gear before allowing a shift to fourth.\nSeconds");
	MakeWord	(0X1C6C0);
	MakeName	(0X1C6C0,	"XSHFT_MODIFICATIONS_KE_1_4_UPSHIFT_SEQUENCING_TIME");
	MakeRptCmt	(0X1C6C2,	"Total time required to be in third gear before allowing a shift to fourth.\nSeconds");
	MakeWord	(0X1C6C2);
	MakeName	(0X1C6C2,	"XSHFT_MODIFICATIONS_KE_2_4_UPSHIFT_SEQUENCING_TIME");
	MakeRptCmt	(0X1C6C4,	"Used to determine if the downshift to second should beinhibited if the diagnostic malf has occurred.\nMPH");
	MakeWord	(0X1C6C4);
	MakeName	(0X1C6C4,	"XSHFT_MODIFICATIONS_KE_INHIBIT_DOWN_TO_SECOND_MPH");
	MakeRptCmt	(0X1C6C6,	"Total time required to be in third gear before allowing a shift to fourth.\nSeconds");
	MakeWord	(0X1C6C6);
	MakeName	(0X1C6C6,	"XSHFT_MODIFICATIONS_KV_MANUAL_DWNSHFT_42_DELAY_TIME");
	MakeByte	(0X1C6C8);
	MakeArray	(0X1C6C8,	0X8);
	MakeWord	(0X1C6D0);
	MakeName	(0X1C6D0,	"XSHFT_MODIFICATIONS_KE_INHIBIT_2_1_SINCE_1ST_GEAR");
	MakeRptCmt	(0X1C6D2,	"Inhibit a 2-1 downshift after a 1-2 upshift only if vehicle speed is greater than this value.\nMPH");
	MakeWord	(0X1C6D2);
	MakeName	(0X1C6D2,	"XSHFT_MODIFICATIONS_KE_INHIBIT_2_1_SINCE_1ST_MPH_THR");
	MakeRptCmt	(0X1C6D4,	"When Transmission temperature falls below this value, the transmission cold indicator is set.\nDeg C");
	MakeWord	(0X1C6D4);
	MakeName	(0X1C6D4,	"XTEMP_STATUS_KE_COLD_TRANS_LOW_THRESHOLD");
	MakeWord	(0X1C6D6);
	MakeName	(0X1C6D6,	"XTEMP_STATUS_KV_HOT_MODE_STATOR_ENTRANCE");
	MakeRptCmt	(0X1C718,	"TCC Speed ratio value at which Hot_Mode_Stator_Entrance_Timer gets reset to zero, in hot mode stator temperature test\nFactor");
	MakeByte	(0X1C718);
	MakeName	(0X1C718,	"XTEMP_STATUS_KE_HOT_MODE_STATOR_SPD_RATIO_MAX");
	MakeRptCmt	(0X1C719,	"Minimum TCC speed ratio value to enable hot mode stator  temperature test.\nFactor");
	MakeByte	(0X1C719);
	MakeName	(0X1C719,	"XTEMP_STATUS_KE_HOT_MODE_STATOR_SPD_RATIO_MIN");
	MakeRptCmt	(0X1C71A,	"Maximum amount of time before Hot_Mode_Stator_Delay_Timer  and Hot_Mode_Stator_Entrance_Timer are reset to zero.\nSeconds");
	MakeWord	(0X1C71A);
	MakeName	(0X1C71A,	"XTEMP_STATUS_KE_HOT_MODE_STATOR_DELAY_TIMER");
	MakeRptCmt	(0X1C71C,	"Transmission sump temperature threshold value to exit      hot mode stator temperature test (static).\nDeg C");
	MakeWord	(0X1C71C);
	MakeName	(0X1C71C,	"XTEMP_STATUS_KE_HOT_MODE_STATOR_EXIT_TEMP");
	MakeRptCmt	(0X1C71E,	"Minimum transmission sump temperature value to enable   hot mode stator temperature test.\nDeg C");
	MakeWord	(0X1C71E);
	MakeName	(0X1C71E,	"XTEMP_STATUS_KE_HOT_MODE_STATOR_TEMP_MIN");
	MakeRptCmt	(0X1C720,	"Minimum vehicle speed value to enable hot mode stator    temperature test.\nMPH");
	MakeWord	(0X1C720);
	MakeName	(0X1C720,	"XTEMP_STATUS_KE_HOT_MODE_STATOR_VEHSPD_MIN");
	MakeRptCmt	(0X1C722,	"Temperature above which stator hot mode is exited.\nDeg C");
	MakeName	(0X1C722,	"XTEMP_STATUS_KE_HOT_STATOR_LOW_THRESHOLD");
	MakeRptCmt	(0X1C724,	"Temperature above which stator hot mode is activated.\nDeg C");
	MakeName	(0X1C724,	"XTEMP_STATUS_KE_HOT_STATOR_HIGH_THRESHOLD");
	MakeRptCmt	(0X1C726,	"Amount of time stator hot mode is active before returning  to normal operation.\nSeconds");
	MakeName	(0X1C726,	"XTEMP_STATUS_KE_HOT_STATOR_MIN_TIME_LIMIT");
	MakeRptCmt	(0X1C728,	"Determine base transmission fluid temperature rate of change  during normal mode in order to enter transmission hot mode\nDegC/Min");
	MakeByte	(0X1C728);
	MakeName	(0X1C728,	"XTEMP_STATUS_KV_HOT_MODE_BASE_DELTA_TABLE");
	MakeRptCmt	(0X1C737,	"Desired hot mod peak transmission fluid sump temperature\nDeg C");
	MakeByte	(0X1C737);
	MakeName	(0X1C737,	"XTEMP_STATUS_KE_HOT_MODE_DESIRED_PEAK_TEMP");
	MakeRptCmt	(0X1C738,	"Kalman filter rate of change of  transmission sump temperature.\nInverse_Minute");
	MakeWord	(0X1C738);
	MakeName	(0X1C738,	"XTEMP_STATUS_KE_KALMAN_RATE_OF_CHANGE_GAIN");
	MakeWord	(0X1C73A);
	MakeName	(0X1C73A,	"XTEMP_STATUS_KE_HOT_MODE_EXIT_TIMER");
	MakeRptCmt	(0X1C73C,	"Determine transmission fluid sump temperature threshold  to exit hot mode return to normal mode.\nDeg C");
	MakeWord	(0X1C73C);
	MakeName	(0X1C73C,	"XTEMP_STATUS_KV_HOT_MODE_EXIT_TEMP_TABLE");
	MakeDword	(x=0X1C73E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1C742);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1C746);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1C74A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeRptCmt	(0X1C75A,	"Minimum transmission sump temperature  value to enable hot  mode sump temperature test.\nDeg C");
	MakeByte	(0X1C75A);
	MakeName	(0X1C75A,	"XTEMP_STATUS_KE_HOT_MODE_SUMP_TEMP_MIN");
	MakeRptCmt	(0X1C75C,	"Hot mode adaptive outputs modifier table.\nDegC_per_Min_vs_DegC_Delta_Table");
	MakeByte	(0X1C75C);
	MakeName	(0X1C75C,	"XTEMP_STATUS_KV_HOT_MODE_ADAPT_MOD_TABLE");
	MakeRptCmt	(0X1C76E,	"Kalman filter gain of transmission sump  temperature.\nGain");
	MakeWord	(0X1C76E);
	MakeName	(0X1C76E,	"XTEMP_STATUS_KE_KALMAN_TEMPERATURE_GAIN");
	MakeRptCmt	(0X1C770,	"When trans. temperature falls below this value, the TCC Off diagnostic override is cleared.\nDeg C");
	MakeWord	(0X1C770);
	MakeName	(0X1C770,	"XTEMP_STATUS_KE_TCC_TEMP_DIAG_LOW_THRESH");
	MakeRptCmt	(0X1C772,	"When trans. temperature rises below this value, the TCC Off diagnostic override is set.\nDeg C");
	MakeWord	(0X1C772);
	MakeName	(0X1C772,	"XTEMP_STATUS_KE_TCC_TEMP_DIAG_HIGH_THRESH");
	MakeRptCmt	(0X1C774,	"When Transmission temperature rises above this value, the transmission cold indicator is cleared.\nDeg C");
	MakeWord	(0X1C774);
	MakeName	(0X1C774,	"XTEMP_STATUS_KE_COLD_TRANS_HIGH_THRESHOLD");
	MakeWord	(0X1C776);
	MakeName	(0X1C776,	"XTCC_CONTROL_KE_TCC_BRAKE_VEHICLE_SPEED_HIGH");
	MakeWord	(0X1C778);
	MakeName	(0X1C778,	"XTCC_CONTROL_KE_TCC_BRAKE_THROTTLE_HIGH");
	MakeRptCmt	(0X1C77A,	"Flag that indicates whether to allow ECCC full lockup inHot Mode.\nBOOLEAN");
	MakeByte	(0X1C77A);
	MakeName	(0X1C77A,	"XTCC_CONTROL_KE_HOT_MODE_FULL_LOCK_ENABLE");
	MakeRptCmt	(0X1C77C,	"TCC Enable is turned on after this amount of time has elapsed from the start of an apply.\nSeconds");
	MakeWord	(0X1C77C);
	MakeName	(0X1C77C,	"XTCC_CONTROL_KE_TCC_ENABLE_ON_DELAY_TIME");
	MakeRptCmt	(0X1C77E,	"TCC apply ramping begins after this amount of time has elapsed from when TCC Enable was turned on.\nSeconds");
	MakeWord	(0X1C77E);
	MakeName	(0X1C77E,	"XTCC_CONTROL_KE_TCC_APPLY_RAMP_DELAY_TIME");
	MakeRptCmt	(0X1C780,	"Used by release logic to help enable Failsafe Delay Phase.\nSeconds");
	MakeWord	(0X1C780);
	MakeName	(0X1C780,	"XTCC_CONTROL_KE_TCC_ENABLE_OFF_DELAY_TIME");
	MakeRptCmt	(0X1C782,	"TCC apply is completed when KE_TCC_Apply_Slip_Difference + TCC_On_Reference_Slip >= Slip.\nRPM");
	MakeWord	(0X1C782);
	MakeName	(0X1C782,	"XTCC_CONTROL_KE_TCC_APPLY_SLIP_DIFFERENCE");
	MakeWord	(0X1C784);
	MakeName	(0X1C784,	"XTCC_CONTROL_KE_TCC_LOW_FAILSAFE_THRESHOLD");
	MakeWord	(0X1C786);
	MakeName	(0X1C786,	"XTCC_CONTROL_KE_TCC_HIGH_FAILSAFE_THRESHOLD");
	MakeRptCmt	(0X1C788,	"Maximum time that the Release Failsafe Phase is in affect.\nSeconds");
	MakeWord	(0X1C788);
	MakeName	(0X1C788,	"XTCC_CONTROL_KE_TCC_FAILSAFE_DELAY_TIME");
	MakeRptCmt	(0X1C78A,	"TCC release is completed when release time exceeds this amount of time.\nSeconds");
	MakeWord	(0X1C78A);
	MakeName	(0X1C78A,	"XTCC_CONTROL_KE_TCC_MAX_RELEASE_DELAY");
	MakeRptCmt	(0X1C78C,	"TCC release is completed when release time exceeds this amount of time.\nSeconds");
	MakeWord	(0X1C78C);
	MakeName	(0X1C78C,	"XTCC_CONTROL_KE_TCC_MAX_RAMP_OFF_TIME");
	MakeRptCmt	(0X1C78E,	"TCC release complete when Slip > KE_TCC_Release_Slip_Threshold\nRPM");
	MakeWord	(0X1C78E);
	MakeName	(0X1C78E,	"XTCC_CONTROL_KE_TCC_RELEASE_SLIP_THRESHOLD");
	MakeRptCmt	(0X1C790,	"Enable AC Locked Mode Cal.\nBOOLEAN");
	MakeName	(0X1C790,	"XTCC_CONTROL_KE_AC_LOCKED_MODE_ENABLE");
	MakeRptCmt	(0X1C792,	"Reenable Full Lockup possible when Vehicle Speed > this cal.\nMPH");
	MakeWord	(0X1C792);
	MakeName	(0X1C792,	"XTCC_CONTROL_KE_LOCK_HIGH_VEHICLE_SPEED");
	MakeRptCmt	(0X1C794,	"Enable Full Lockup if Vehicle Speed > this cal.\nMPH");
	MakeWord	(0X1C794);
	MakeName	(0X1C794,	"XTCC_CONTROL_KE_LOCK_LOW_VEHICLE_SPEED");
	MakeRptCmt	(0X1C796,	"Time-Out for TCC_Lock_Reenable_Timer.\nSeconds");
	MakeWord	(0X1C796);
	MakeName	(0X1C796,	"XTCC_CONTROL_KE_LOCK_REENABLE_TIME");
	MakeRptCmt	(0X1C798,	"Offset KV_TCC_On_Reference_Slip in TCC Full Lockup Select Logic.\nRPM_s");
	MakeWord	(0X1C798);
	MakeName	(0X1C798,	"XTCC_CONTROL_KE_LOCKED_OFF_SLIP_OFFSET");
	MakeRptCmt	(0X1C79A,	"Offset KV_TCC_On_Reference_Slip in TCC Full Lockup Select Logic.\nRPM_s");
	MakeWord	(0X1C79A);
	MakeName	(0X1C79A,	"XTCC_CONTROL_KE_LOCKED_ON_SLIP_OFFSET");
	MakeRptCmt	(0X1C79C,	"Time-Out for Locked_Off_Timer.\nSeconds");
	MakeWord	(0X1C79C);
	MakeName	(0X1C79C,	"XTCC_CONTROL_KE_LOCKED_OFF_TIME");
	MakeRptCmt	(0X1C79E,	"Time-Out for Locked_On_Timer.\nSeconds");
	MakeWord	(0X1C79E);
	MakeName	(0X1C79E,	"XTCC_CONTROL_KE_LOCKED_ON_TIME");
	MakeRptCmt	(0X1C7A0,	"Boolean calibration to show if the shift stabilization is enabled or disabled.\nBOOLEAN");
	MakeDword	(x=0X1C7A0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X1C7A0,	"XTCC_CONTROL_KE_SHIFT_STABILIZATION_ENABLE");
	MakeRptCmt	(0X1C7A4,	"One contingencies that must be met before entering ECCC full lockup is that Engine Torque must be greater than this cal.\nFtLb");
	MakeDword	(x=0X1C7A4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X1C7A4,	"XTCC_CONTROL_KE_LOCK_ENGINE_TORQUE_HIGH");
	MakeWord	(0X1C7A8);
	MakeName	(0X1C7A8,	"XTCC_CONTROL_KE_TCC_ON_MIN_REF_SLIP");
	MakeWord	(0X1C7AA);
	MakeName	(0X1C7AA,	"XTCC_CONTROL_KE_TCC_UPSHIFT_SLIP_MIN");
	MakeRptCmt	(0X1C7AC,	"When this time is reached, the Ramp freeze is cleared which allows the ramp to be adjusted(if not frozen due to an upshift).\nSec");
	MakeByte	(0X1C7AC);
	MakeArray	(0X1C7AC,	0X4);
	MakeName	(0X1C7AC,	"XTCC_CONTROL_KV_TCC_RAMP_HOLD_DELAY");
	MakeWord	(0X1C7B0);
	MakeRptCmt	(0X1C7B2,	"Amount of time to freeze the ramp after an upshift has completed.\nSec");
	MakeDword	(x=0X1C7B2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X1C7B2,	"XTCC_CONTROL_KV_UPSHIFT_TCC_RAMP_DELAY");
	MakeWord	(0X1C7B8);
	MakeName	(0X1C7B8,	"XTCC_CONTROL_KE_TCC_APPLY_CROWD_DELAY_TIME");
	MakeRptCmt	(0X1C7BA,	"Apply_Delay_Timer is set to a cal if Barometric Pressure  is less than this.\nKPA");
	MakeByte	(0X1C7BA);
	MakeName	(0X1C7BA,	"XTCC_CONTROL_KE_TCC_LOW_BARO_DELAY_ENABLE");
	MakeRptCmt	(0X1C7BB,	"Apply_Delay_Timer is set to Reapply_Delay_Timer if Barometric Pressure is greater than this.\nKPA");
	MakeByte	(0X1C7BB);
	MakeName	(0X1C7BB,	"XTCC_CONTROL_KE_TCC_HIGH_BARO_DELAY_DISABLE");
	MakeRptCmt	(0X1C7BC,	"Extend apply delay by this at altitude.\nSeconds");
	MakeWord	(0X1C7BC);
	MakeName	(0X1C7BC,	"XTCC_CONTROL_KE_ALT_APPLY_DELAY_TIME");
	MakeRptCmt	(0X1C7BE,	"If true, manual downshifts will continue to stay in coast mode if in coast mode at start of shift.\nT/F");
	MakeByte	(0X1C7BE);
	MakeName	(0X1C7BE,	"XTCC_CONTROL_KE_TCC_COAST_WHILE_MANUAL_DNSHFT");
	MakeByte	(0X1C7BF);
	MakeName	(0X1C7BF,	"XTCC_CONTROL_KE_TCC_COAST_WHILE_BRAKE_ENGAGED");
	MakeRptCmt	(0X1C7C0,	"TRUE enables coast mode for this gear and range combination.\nT/F");
	MakeName	(0X1C7C0,	"XTCC_CONTROL_KA_COAST_MODE_RANGE_GEAR_ENABLE");
	MakeRptCmt	(0X1C7CC,	"Enables Drive 2 Range Check.\nBoolean");
	MakeByte	(0X1C7CC);
	MakeName	(0X1C7CC,	"XTCC_CONTROL_KE_TCC_LO_DRIVE2_OFF");
	MakeRptCmt	(0X1C7CD,	"Enables Drive 3 Range Check.\nBoolean");
	MakeByte	(0X1C7CD);
	MakeName	(0X1C7CD,	"XTCC_CONTROL_KE_TCC_DRIVE3_OFF");
	MakeRptCmt	(0X1C7CE,	"Enables Drive 4 Range Check.\nBoolean");
	MakeByte	(0X1C7CE);
	MakeName	(0X1C7CE,	"XTCC_CONTROL_KE_TCC_DRIVE4_OFF");
	MakeByte	(0X1C7CF);
	MakeName	(0X1C7CF,	"XTCC_CONTROL_KE_TCC_UPSHIFT_OFF");
	MakeRptCmt	(0X1C7D0,	"Re-apply delay for scheduled release.\nSeconds");
	MakeWord	(0X1C7D0);
	MakeName	(0X1C7D0,	"XTCC_CONTROL_KE_SCHEDULED_RELEASE_DELAY");
	MakeRptCmt	(0X1C7D2,	"Re-apply delay for scheduled release.\nSeconds");
	MakeWord	(0X1C7D2);
	MakeName	(0X1C7D2,	"XTCC_CONTROL_KE_SCH_REL_BUSY_DETECT_TIME");
	MakeRptCmt	(0X1C7D4,	"Business added re-apply delay for scheduled release.\nSeconds");
	MakeWord	(0X1C7D4);
	MakeName	(0X1C7D4,	"XTCC_CONTROL_KE_SCH_REL_BUSY_DELAY_TIME");
	MakeRptCmt	(0X1C7D6,	"Amount of time a TCC minimum throttle release re-applyshould be incremented due to busyness.\nSeconds");
	MakeWord	(0X1C7D6);
	MakeName	(0X1C7D6,	"XTCC_CONTROL_KE_INC_BUSYNESS_DELAY");
	MakeRptCmt	(0X1C7D8,	"Amount of time a TCC minimum throttle release re-applyshould be decremented due to busyness.\nSeconds");
	MakeWord	(0X1C7D8);
	MakeName	(0X1C7D8,	"XTCC_CONTROL_KE_DEC_BUSYNESS_DELAY");
	MakeRptCmt	(0X1C7DA,	"Amount of steps the apply counter must increment in orderfor the lock delay to be decremented by cal. value.\nSHORTCARD");
	MakeByte	(0X1C7DA);
	MakeName	(0X1C7DA,	"XTCC_CONTROL_KE_APPLY_COUNTER_STEP");
	MakeRptCmt	(0X1C7DC,	"Specifies the amount of time that TCC will be turned off for when an upshift is desired.\nSeconds");
	MakeWord	(0X1C7DC);
	MakeName	(0X1C7DC,	"XTCC_CONTROL_KV_TCC_UPSHIFT_OFF_TIME");
	MakeByte	(0X1C7DE);
	MakeArray	(0X1C7DE,	0X2);
	MakeRptCmt	(0X1C7E4,	"Specifies the amount of time that TCC will be turned off for when a downshift is desired.\nSeconds");
	MakeWord	(0X1C7E4);
	MakeName	(0X1C7E4,	"XTCC_CONTROL_KV_TCC_DOWNSHIFT_OFF_TIME");
	MakeByte	(0X1C7E6);
	MakeArray	(0X1C7E6,	0X2);
	MakeWord	(0X1C7EA);
	MakeRptCmt	(0X1C7EC,	"Upper speed limit at which TCC is enabled when AC is on.\nMPH");
	MakeByte	(0X1C7EC);
	MakeArray	(0X1C7EC,	0X4);
	MakeName	(0X1C7EC,	"XTCC_CONTROL_KV_TCC_AC_ON_HIGH_LIMIT");
	MakeWord	(0X1C7F0);
	MakeRptCmt	(0X1C7F2,	"Lower speed limit at which TCC is disabled when AC is on.\nMPH");
	MakeByte	(0X1C7F2);
	MakeArray	(0X1C7F2,	0X6);
	MakeName	(0X1C7F2,	"XTCC_CONTROL_KV_TCC_AC_ON_LOW_LIMIT");
	MakeRptCmt	(0X1C7F8,	"Base Re-apply delay time after a minimum throttle release.\nSeconds");
	MakeWord	(0X1C7F8);
	MakeName	(0X1C7F8,	"XTCC_CONTROL_KE_MIN_THROTTLE_DELAY_TIME");
	MakeRptCmt	(0X1C7FA,	"Amount of time after a minimum throttle release to detect throttle busyness\nSeconds");
	MakeDword	(0X1C7FA);
	MakeName	(0X1C7FA,	"XTCC_CONTROL_KE_BUSYNESS_DETECTION_TIME");
	MakeRptCmt	(0X1C7FE,	"Maximum time in Coast Mode if Slip > KE_Coast_Slip_High.\nSeconds");
	MakeWord	(0X1C7FE);
	MakeName	(0X1C7FE,	"XTCC_CONTROL_KE_COAST_STOP_TIME");
	MakeRptCmt	(0X1C800,	"Maximum time in Coast Mode if Slip > KE_Coast_Slip_High.\nRPM_s");
	MakeWord	(0X1C800);
	MakeName	(0X1C800,	"XTCC_CONTROL_KE_COAST_SLIP_HIGH");
	MakeRptCmt	(0X1C802,	"Exit Coast Mode if Throttle > KE_Coast_Slip_High.\nPercent");
	MakeWord	(0X1C802);
	MakeName	(0X1C802,	"XTCC_CONTROL_KE_TCC_COAST_THROTTLE_HIGH");
	MakeRptCmt	(0X1C804,	"Enter Coast Mode if Throttle < KE_Coast_Slip_Low and no Minimum Throttle.\nPercent");
	MakeWord	(0X1C804);
	MakeName	(0X1C804,	"XTCC_CONTROL_KE_TCC_COAST_THROTTLE_LOW");
	MakeRptCmt	(0X1C806,	"TCC Apply point offset during third gear and baro pressure below a threshold.\nMPH_s");
	MakeWord	(0X1C806);
	MakeName	(0X1C806,	"XTCC_CONTROL_KE_TCC_ALT_APPLY_OFFSET");
	MakeRptCmt	(0X1C808,	"TCC Release point offset during third gear and baro pressure below a threshold.\nMPH_s");
	MakeWord	(0X1C808);
	MakeName	(0X1C808,	"XTCC_CONTROL_KE_TCC_ALT_RELEASE_OFFSET");
	MakeRptCmt	(0X1C80A,	"Lower baro pressure threshold below which TCC will not apply.\nKPa");
	MakeByte	(0X1C80A);
	MakeName	(0X1C80A,	"XTCC_CONTROL_KE_TCC_BARO_APPLY_LOW");
	MakeRptCmt	(0X1C80B,	"Upper baro pressure threshold above which TCC will apply.\nKPa");
	MakeByte	(0X1C80B);
	MakeName	(0X1C80B,	"XTCC_CONTROL_KE_TCC_BARO_APPLY_HIGH");
	MakeRptCmt	(0X1C80C,	"When vehicle speed is less than this, use min throttle threshold 1.\nMPH");
	MakeWord	(0X1C80C);
	MakeName	(0X1C80C,	"XTCC_CONTROL_KE_MIN_THROTTLE_SPEED_LOW");
	MakeRptCmt	(0X1C80E,	"When vehicle speed is greater than this, use min throttle threshold 2.\nMPH");
	MakeWord	(0X1C80E);
	MakeName	(0X1C80E,	"XTCC_CONTROL_KE_MIN_THROTTLE_SPEED_HIGH");
	MakeRptCmt	(0X1C810,	"Enter minimum throttle mode when throttle is below this.\nPercent");
	MakeWord	(0X1C810);
	MakeName	(0X1C810,	"XTCC_CONTROL_KE_MIN_THROTTLE_1_LOW_THRESHOLD");
	MakeRptCmt	(0X1C812,	"Exit minimum throttle mode when throttle is above this.\nPercent");
	MakeWord	(0X1C812);
	MakeName	(0X1C812,	"XTCC_CONTROL_KE_MIN_THROTTLE_1_HIGH_THRESHOLD");
	MakeRptCmt	(0X1C814,	"Enter minimum throttle mode when throttle is below this.\nPercent");
	MakeWord	(0X1C814);
	MakeName	(0X1C814,	"XTCC_CONTROL_KE_MIN_THROTTLE_2_LOW_THRESHOLD");
	MakeRptCmt	(0X1C816,	"Exit minimum throttle mode when throttle is above this.\nPercent");
	MakeWord	(0X1C816);
	MakeName	(0X1C816,	"XTCC_CONTROL_KE_MIN_THROTTLE_2_HIGH_THRESHOLD");
	MakeWord	(0X1C818);
	MakeName	(0X1C818,	"XTCC_CONTROL_KE_TCC_BRAKE_THROTTLE_LOW");
	MakeWord	(0X1C81A);
	MakeName	(0X1C81A,	"XTCC_CONTROL_KE_TCC_BRAKE_VEHICLE_SPEED_LOW");
	MakeRptCmt	(0X1C81C,	"Amount of time off mode is selected after negative delta throttle and previously TCC is On or applying.\nSec");
	MakeWord	(0X1C81C);
	MakeName	(0X1C81C,	"XTCC_CONTROL_KE_NEGDELTHR_OFF_TIME_FROM_ECCC");
	MakeRptCmt	(0X1C81E,	"Amount of time off mode is selected after negative delta throttle and previously TCC is Off or releasing.\nSec");
	MakeWord	(0X1C81E);
	MakeName	(0X1C81E,	"XTCC_CONTROL_KE_NEGDELTHR_OFF_TIME_FROM_OFF");
	MakeWord	(0X1C820);
	MakeName	(0X1C820,	"XTCC_CONTROL_KE_POS_DELTA_THROT_SPEED");
	MakeWord	(0X1C822);
	MakeName	(0X1C822,	"XTCC_CONTROL_KE_POSDELTHR_HIMPH_OFF_TIME_ECCC");
	MakeWord	(0X1C824);
	MakeName	(0X1C824,	"XTCC_CONTROL_KE_POSDELTHR_HIMPH_OFF_TIME_OFF");
	MakeWord	(0X1C826);
	MakeName	(0X1C826,	"XTCC_CONTROL_KE_POSDELTHR_LOMPH_OFF_TIME_ECCC");
	MakeWord	(0X1C828);
	MakeName	(0X1C828,	"XTCC_CONTROL_KE_POSDELTHR_LOMPH_OFF_TIME_OFF");
	MakeRptCmt	(0X1C82A,	"Amount of release time after positive delta throttle condition has occurred and previously TCC is On or Releasing.\nSec");
	MakeWord	(0X1C82A);
	MakeName	(0X1C82A,	"XTCC_CONTROL_KE_POSDELTHR_RELEASE_TIME");
	MakeWord	(0X1C82C);
	MakeName	(0X1C82C,	"XTCC_CONTROL_KE_NEG_DELTA_OFF_THROTTLE_THRESH");
	MakeWord	(0X1C82E);
	MakeName	(0X1C82E,	"XTCC_CONTROL_KE_NEG_DELTA_ON_THROTTLE_THRESH");
	MakeWord	(0X1C830);
	MakeName	(0X1C830,	"XTCC_CONTROL_KE_POS_DEL_THR_OFF_THRESH_HIMPH");
	MakeWord	(0X1C832);
	MakeName	(0X1C832,	"XTCC_CONTROL_KE_POS_DEL_THR_OFF_THRESH_LOMPH");
	MakeWord	(0X1C834);
	MakeName	(0X1C834,	"XTCC_CONTROL_KE_POS_DEL_THR_ON_THRESH_HIMPH");
	MakeWord	(0X1C836);
	MakeName	(0X1C836,	"XTCC_CONTROL_KE_POS_DEL_THR_ON_THRESH_LOMPH");
	MakeRptCmt	(0X1C838,	"TCC on mode reference slip for second gear.\nRPM");
	MakeName	(0X1C838,	"XTCC_CONTROL_KV_TCC_REFERENCE_SLIP_2");
	MakeRptCmt	(0X1C84A,	"TCC on mode reference slip for third gear.\nRPM");
	MakeName	(0X1C84A,	"XTCC_CONTROL_KV_TCC_REFERENCE_SLIP_3");
	MakeRptCmt	(0X1C85C,	"TCC on mode reference slip for fourth gear.\nRPM");
	MakeName	(0X1C85C,	"XTCC_CONTROL_KV_TCC_REFERENCE_SLIP_4");
	MakeRptCmt	(0X1C86E,	"Enables the coast mode conditions.\nBoolean");
	MakeByte	(0X1C86E);
	MakeName	(0X1C86E,	"XTCC_CONTROL_KE_COAST_MODE_ENABLE");
	MakeRptCmt	(0X1C870,	"Output Speed must exceed this value to meet coast speed conditions.\nMPH");
	MakeWord	(0X1C870);
	MakeName	(0X1C870,	"XTCC_CONTROL_KE_COAST_VEH_SPD_HIGH");
	MakeRptCmt	(0X1C872,	"Minimum Output Speed to meet coast speed conditions.\nMPH");
	MakeWord	(0X1C872);
	MakeName	(0X1C872,	"XTCC_CONTROL_KE_COAST_VEH_SPD_LOW");
	MakeRptCmt	(0X1C874,	"Rate off TCC release when Pos. Delta Throttle.\nPSI/Sec");
	MakeWord	(0X1C874);
	MakeName	(0X1C874,	"XTCC_EXECUTION_KE_TCC_TRQ_POS_TPS_RELEASE_RATE");
	MakeRptCmt	(0X1C876,	"TCC pressure set to this in off mode.\nPSI");
	MakeWord	(0X1C876);
	MakeName	(0X1C876,	"XTCC_EXECUTION_KE_TCC_MINIMUM_PRESSURE");
	MakeRptCmt	(0X1C878,	"Used to find Torque based Apply Operating Point.\nPSI/FtLB");
	MakeWord	(0X1C878);
	MakeName	(0X1C878,	"XTCC_EXECUTION_KE_TCC_APPLY_PRESSURE_GAIN");
	MakeRptCmt	(0X1C87A,	"Used to find Torque based Apply Operating Point.\nPSI_s");
	MakeWord	(0X1C87A);
	MakeName	(0X1C87A,	"XTCC_EXECUTION_KV_TCC_APPLY_PRESSURE_OFFSET");
	MakeRptCmt	(0X1C89C,	"Used to find Torque based Locked Point.\nPSI_s");
	MakeWord	(0X1C89C);
	MakeName	(0X1C89C,	"XTCC_EXECUTION_KE_TCC_FULL_LOCKUP_OFFSET_TRQ");
	MakeRptCmt	(0X1C89E,	"Ramp rate for Release mode.\nPSI/Sec");
	MakeWord	(0X1C89E);
	MakeName	(0X1C89E,	"XTCC_EXECUTION_KE_TCC_RELEASE_RAMP_RATE");
	MakeRptCmt	(0X1C8A0,	"Maximum TCC pressure.\nPSI");
	MakeWord	(0X1C8A0);
	MakeName	(0X1C8A0,	"XTCC_EXECUTION_KE_TCC_MAX_ALLOWED_PRESSURE");
	MakeRptCmt	(0X1C8A2,	"Sets maximum duty cycle for Control TCC Solenoids.\nCapacity");
	MakeName	(0X1C8A2,	"XTCC_EXECUTION_KA_TCC_MAXIMUM_CAPACITY");
	MakeRptCmt	(0X1C94C,	"Used to find TCC_PSI Pressure from Pressure.\nPSI");
	MakeWord	(0X1C94C);
	MakeName	(0X1C94C,	"XTCC_EXECUTION_KV_TCC_MAXIMUM_PRESSURE");
	MakeRptCmt	(0X1C96E,	"Used to find minimum duty cycle for Control TCC Solenoids.\nPercent");
	MakeName	(0X1C96E,	"XTCC_EXECUTION_KA_TCC_MINIMUM_CAPACITY");
	MakeRptCmt	(0X1CA18,	"TCC On mode pressure ramp rate.\nPSI/Sec");
	MakeWord	(0X1CA18);
	MakeName	(0X1CA18,	"XTCC_EXECUTION_KV_TCC_ON_RATE_TRQ");
	MakeRptCmt	(0X1CA3A,	"Used during Coast mode to set initial operating point.\nPSI_vs_RPM");
	MakeWord	(0X1CA3A);
	MakeName	(0X1CA3A,	"XTCC_EXECUTION_KV_COAST_PRESS_OP_PT");
	MakeWord	(0X1CA5C);
	MakeName	(0X1CA5C,	"XTCC_EXECUTION_KE_TCC_LOW_SLIP_RATE_TRQ");
	MakeWord	(0X1CA5E);
	MakeName	(0X1CA5E,	"XTCC_EXECUTION_KE_ADAPT_COMPLETE_CONF");
	MakeRptCmt	(0X1CA60,	"Used in determining changes in TCC_Ramp value when there is a significant ECCC engien torque increase over the previous loop.\nPSI/Ft_Lb");
	MakeWord	(0X1CA60);
	MakeName	(0X1CA60,	"XTCC_EXECUTION_KE_ECCC_ANTI_LOCK_GAIN");
	MakeRptCmt	(0X1CA62,	"Used to determine if there is a significant increase or decrease in ECCC engine torque over the previous loop\nFt_Lb");
	MakeWord	(0X1CA62);
	MakeName	(0X1CA62,	"XTCC_EXECUTION_KE_ANTI_LOCK_TORQUE_STEP");
	MakeRptCmt	(0X1CA64,	"Membership variable for each cell used as an index into KV_TCC_Adapt_Cell_Weight.\nFactor");
	MakeWord	(0X1CA64);
	MakeName	(0X1CA64,	"XTCC_EXECUTION_KA_TCC_ADAPT_MEMBERSHIP");
	MakeRptCmt	(0X1CA96,	"Adapt Cell Weight value used in the calculations of each of the TCC Adapt Cells.\nFactor");
	MakeWord	(0X1CA96);
	MakeName	(0X1CA96,	"XTCC_EXECUTION_KV_TCC_ADAPT_CELL_WEIGHT");
	MakeByte	(0X1CA98);
	MakeArray	(0X1CA98,	0X8);
	MakeRptCmt	(0X1CAA0,	"Adapt confidence factor gain used in the calculations of each of the TCC Adapt Cells.\nFactor");
	MakeName	(0X1CAA0,	"XTCC_EXECUTION_KA_TCC_ADAPT_CONF_FACT_GAIN");
	MakeRptCmt	(0X1CAFA,	"If the ECCC adapt modification value for a cell is BELOW this threshold, then no adapting is performed on that particular cell.\nPSI");
	MakeWord	(0X1CAFA);
	MakeName	(0X1CAFA,	"XTCC_EXECUTION_KE_TCC_ADAPT_DEADBAND");
	MakeRptCmt	(0X1CAFC,	"Each individual adapt cell is limited to this minimum value.\nPSI");
	MakeWord	(0X1CAFC);
	MakeName	(0X1CAFC,	"XTCC_EXECUTION_KE_TCC_ADAPT_MIN");
	MakeRptCmt	(0X1CAFE,	"Each individual adapt cell is limited to this maximum value.\nPSI");
	MakeWord	(0X1CAFE);
	MakeName	(0X1CAFE,	"XTCC_EXECUTION_KE_TCC_ADAPT_MAX");
	MakeRptCmt	(0X1CB00,	"Percentage used in calculating the increased value for the neighboring cellswhen  updating TCC_Adapt_Conf_Factor cells\n%");
	MakeWord	(0X1CB00);
	MakeName	(0X1CB00,	"XTCC_EXECUTION_KE_TCC_CONF_FACT_INC");
	MakeRptCmt	(0X1CB02,	"Used in calculating the decreased value of the neighboring cells when updating TCC_Adapt_Conf_Factor cells.\n%");
	MakeWord	(0X1CB02);
	MakeName	(0X1CB02,	"XTCC_EXECUTION_KV_TCC_CONF_FACT_DEC");
	MakeByte	(0X1CB0C);
	MakeName	(0X1CB0C,	"XTCC_EXECUTION_KE_TCC_ADAPT_TEMP_LOW");
	MakeByte	(0X1CB0D);
	MakeName	(0X1CB0D,	"XTCC_EXECUTION_KE_TCC_ADAPT_TEMP_HIGH");
	MakeRptCmt	(0X1CB0E,	"When the steady state adapts in the current mode is above this, the ECCC adapts are disabled.\nPSI");
	MakeWord	(0X1CB0E);
	MakeName	(0X1CB0E,	"XTCC_EXECUTION_KE_TCC_ADAPT_SS_ADAPT_LOW");
	MakeRptCmt	(0X1CB10,	"When throttle is below this value, the ECCC adapts are disabled.\n%");
	MakeWord	(0X1CB10);
	MakeName	(0X1CB10,	"XTCC_EXECUTION_KE_TCC_ADAPT_TPS_LOW");
	MakeRptCmt	(0X1CB12,	"When throttle is below this value, the ECCC adapts are disabled.\n%");
	MakeWord	(0X1CB12);
	MakeName	(0X1CB12,	"XTCC_EXECUTION_KE_TCC_ADAPT_TPS_HIGH");
	MakeRptCmt	(0X1CB14,	"ECCC adapts are disabled if ECCC engine torque is below this.\nFt_Lb");
	MakeWord	(0X1CB14);
	MakeName	(0X1CB14,	"XTCC_EXECUTION_KE_TCC_ADAPT_TORQUE_LOW");
	MakeRptCmt	(0X1CB16,	"ECCC adapts are disabled if ECCC engine torque is above this.\nFt_Lb");
	MakeWord	(0X1CB16);
	MakeName	(0X1CB16,	"XTCC_EXECUTION_KE_TCC_ADAPT_TORQUE_HIGH");
	MakeRptCmt	(0X1CB18,	"ECCC adapts are disabled if MPH Output speed is below this.\nMPH");
	MakeWord	(0X1CB18);
	MakeName	(0X1CB18,	"XTCC_EXECUTION_KE_TCC_ADAPT_VSPD_LOW");
	MakeRptCmt	(0X1CB1A,	"ECCC adapts are disabled if MPH Output speed is above this.\nMPH");
	MakeWord	(0X1CB1A);
	MakeName	(0X1CB1A,	"XTCC_EXECUTION_KE_TCC_ADAPT_VSPD_HIGH");
	MakeRptCmt	(0X1CB1C,	"Conditions must be valid for this long before ECCC adapts are allowed.\nSeconds");
	MakeName	(0X1CB1C,	"XTCC_EXECUTION_KE_TCC_ADAPT_UPDATE_TIME");
	MakeByte	(0X1CB1D);
	MakeRptCmt	(0X1CB1E,	"Enable ECCC adapts by Range and Gear.\nT/F");
	MakeDword	(x=0X1CB1E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X1CB1E,	"XTCC_EXECUTION_KA_TCC_ADAPT_RANGE_GEAR");
	MakeDword	(x=0X1CB22);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1CB26);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeByte	(0X1CB2A);
	MakeArray	(0X1CB2A,	0X2);
	MakeRptCmt	(0X1CB2E,	"Filter coefficient used in determining TCC_On_Ramp_Avg.\nCoeff");
	MakeWord	(0X1CB2E);
	MakeName	(0X1CB2E,	"XTCC_EXECUTION_KE_TCC_STABLE_RAMP_FILT");
	MakeRptCmt	(0X1CB30,	"Filter coefficient used in determining TCC_Eng_Torque_Avg.\nCoeff");
	MakeWord	(0X1CB30);
	MakeName	(0X1CB30,	"XTCC_EXECUTION_KE_TCC_STABLE_TORQUE_FILT");
	MakeRptCmt	(0X1CB32,	"Filter coefficient used in determining TCC_Throttle_Avg.\nCoeff");
	MakeWord	(0X1CB32);
	MakeName	(0X1CB32,	"XTCC_EXECUTION_KE_TCC_STABLE_THROTTLE_FILT");
	MakeRptCmt	(0X1CB34,	"Reset ramp stability variables if Ramp_Stability is above this.\nPSI");
	MakeWord	(0X1CB34);
	MakeName	(0X1CB34,	"XTCC_EXECUTION_KE_TCC_RAMP_STABILITY_LOW");
	MakeRptCmt	(0X1CB36,	"Reset torque stability variables if Torque_Stability is above this.\nFt_Lb");
	MakeWord	(0X1CB36);
	MakeName	(0X1CB36,	"XTCC_EXECUTION_KE_TCC_TORQUE_STABILITY_LOW");
	MakeRptCmt	(0X1CB38,	"Reset throttle stability variables if Throttle_Stability is above this.\n%");
	MakeWord	(0X1CB38);
	MakeName	(0X1CB38,	"XTCC_EXECUTION_KE_TCC_THROTTLE_STABILITY_LOW");
	MakeRptCmt	(0X1CB3A,	"Reset TCC_Stability_Timer if abs ( slip_error ) is above this.\nRPM");
	MakeWord	(0X1CB3A);
	MakeName	(0X1CB3A,	"XTCC_EXECUTION_KE_TCC_SLIPERR_STABILITY_LOW");
	MakeRptCmt	(0X1CB3C,	"ECCC must be stable this long before updating ECCC adapts.\nSeconds");
	MakeWord	(0X1CB3C);
	MakeName	(0X1CB3C,	"XTCC_EXECUTION_KE_TCC_STABLE_TIME");
	MakeRptCmt	(0X1CB3E,	"Select which ECCC adapt algorithms will run.\nENUM");
	MakeByte	(0X1CB3E);
	MakeName	(0X1CB3E,	"XTCC_EXECUTION_KE_TCC_ADAPT_CONTROL");
	MakeRptCmt	(0X1CB40,	"Used in determining changes in TCC_Ramp value when there is a significant change in engine torque.\nFactor");
	MakeName	(0X1CB40,	"XTCC_EXECUTION_KA_TCC_LESS_CONF_FACTOR");
	MakeRptCmt	(0X1CB60,	"Used in determining changes in TCC_Ramp value when there is a significant change in engine torque.\nFactor");
	MakeWord	(0X1CB60);
	MakeName	(0X1CB60,	"XTCC_EXECUTION_KV_ECCC_POS_ANTI_LOCK_FACTOR");
	MakeByte	(0X1CB62);
	MakeArray	(0X1CB62,	0X6);
	MakeWord	(0X1CB68);
	MakeRptCmt	(0X1CB6A,	"Used in determining changes in TCC_Ramp value when there is a significant change in engine torque.\nFactor");
	MakeWord	(0X1CB6A);
	MakeName	(0X1CB6A,	"XTCC_EXECUTION_KV_ECCC_NEG_ANTI_LOCK_FACTOR");
	MakeWord	(0X1CB72);
	MakeRptCmt	(0X1CB74,	"Used in determining changes in TCC_Ramp value when there is a significant change in engine torque.\nFactor");
	MakeWord	(0X1CB74);
	MakeName	(0X1CB74,	"XTCC_EXECUTION_KV_NEG_TORQ_CONF_FACTOR");
	MakeRptCmt	(0X1CB7E,	"TCC Apply Confidence Factor based offset used in determining TCC_Apply_Init_Offset.\nPSI");
	MakeWord	(0X1CB7E);
	MakeName	(0X1CB7E,	"XTCC_EXECUTION_KV_TCC_APPLY_CONF_OFFSET");
	MakeRptCmt	(0X1CB88,	"TCC Apply Temperature based offset used in determining TCC_Apply_Init_Offset.\nPSI");
	MakeWord	(0X1CB88);
	MakeName	(0X1CB88,	"XTCC_EXECUTION_KV_TCC_APPLY_TEMP_OFFSET");
	MakeRptCmt	(0X1CB9A,	"TCC Apply Base offset for 2nd gear used in determining TCC_Apply_Init_Offset.\nPSI");
	MakeName	(0X1CB9A,	"XTCC_EXECUTION_KA_TCC_APPLY_BASE_OFFSET_2");
	MakeRptCmt	(0X1CBF4,	"TCC Apply Base offset for 3rd gear used in determining TCC_Apply_Init_Offset.\nPSI");
	MakeName	(0X1CBF4,	"XTCC_EXECUTION_KA_TCC_APPLY_BASE_OFFSET_3");
	MakeRptCmt	(0X1CC4E,	"TCC Apply Base offset for 4th gear used in determining TCC_Apply_Init_Offset.\nPSI");
	MakeName	(0X1CC4E,	"XTCC_EXECUTION_KA_TCC_APPLY_BASE_OFFSET_4");
	MakeRptCmt	(0X1CCA8,	"Offset for the ECCC adapt and confidence factor cells.\nFt_Lb");
	MakeWord	(0X1CCA8);
	MakeName	(0X1CCA8,	"XTCC_EXECUTION_KE_TCC_TORQUE_STEP_OFFSET");
	MakeRptCmt	(0X1CCAA,	"Spacing  value of the ECCC adapt and confidence factor cells.\nFt_Lb");
	MakeWord	(0X1CCAA);
	MakeName	(0X1CCAA,	"XTCC_EXECUTION_KE_TCC_TORQUE_STEP_SIZE");
	MakeRptCmt	(0X1CCAC,	"Weighting factors for adaptive cells\nFactor");
	MakeName	(0X1CCAC,	"XTIM_ADAPT_KV_ADAPT_CELL_WEIGHT_FACTOR");
	MakeByte	(0X1CCAE);
	MakeWord	(0X1CCB0);
	MakeRptCmt	(0X1CCB2,	"Shift time error to be considered as a long shift.\nSeconds");
	MakeName	(0X1CCB2,	"XTIM_ADAPT_KV_LONG_SHIFT_TIME_ERROR");
	MakeRptCmt	(0X1CCB8,	"Amount of pressure to add to adaptive cells.\nPSI_s");
	MakeName	(0X1CCB8,	"XTIM_ADAPT_KA_PRESSURE_ADAPT_CELL_MODIFIER");
	MakeByte	(0X1CCED);
	MakeRptCmt	(0X1CCEE,	"Modifiers for long shifts adaption.\nPSI_s");
	MakeDword	(x=0X1CCEE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X1CCEE,	"XTIM_ADAPT_KV_LONG_SHIFT_ADAPTIVE_MODIFIER");
	MakeRptCmt	(0X1CCF2,	"Long shift delay base correction used in calculatinglong delay adaptive modifier.\nPSI");
	MakeName	(0X1CCF2,	"XTIM_ADAPT_KA_SHIFT_DELAY_BASE_CORRECTION");
	MakeRptCmt	(0X1CD28,	"Long shift delay multiplier used in calculating longdelay adaptive modifier.\nFactor");
	MakeName	(0X1CD28,	"XTIM_ADAPT_KA_SHIFT_DELAY_MULT_COEF");
	MakeRptCmt	(0X1CD46,	"Long shift delay error limit used to determine whento calculate long delay adaptive modifier.\nSeconds");
	MakeName	(0X1CD46,	"XTIM_ADAPT_KA_SHIFT_DELAY_LIMIT");
	MakeRptCmt	(0X1CD7C,	"This is the maximum long shift delay time allowedin using the long shift delay modifier.\nPSI");
	MakeWord	(0X1CD7C);
	MakeName	(0X1CD7C,	"XTIM_ADAPT_KE_SHIFT_DELAY_MOD_HYSTERESIS");
	MakeRptCmt	(0X1CD7E,	"Low limit transmission temperature rise used to determineshift adapt factor due to temperature rise\nDegree C");
	MakeWord	(0X1CD7E);
	MakeName	(0X1CD7E,	"XTIM_ADAPT_KE_FACTOR_MIN_TEMP_RISE");
	MakeWord	(0X1CD80);
	MakeName	(0X1CD80,	"XTIM_ADAPT_KE_FACTOR_TEMP_RISE");
	MakeRptCmt	(0X1CD82,	"Lower limit transmission temperature in warm state for shiftadapt factor rising point A\nDegree C");
	MakeWord	(0X1CD82);
	MakeName	(0X1CD82,	"XTIM_ADAPT_KE_FACTOR_WARM_TEMP_A");
	MakeWord	(0X1CD84);
	MakeName	(0X1CD84,	"XTIM_ADAPT_KE_FACTOR_WARM_TEMP_B");
	MakeWord	(0X1CD86);
	MakeName	(0X1CD86,	"XTIM_ADAPT_KE_FACTOR_WARM_TEMP_C");
	MakeWord	(0X1CD88);
	MakeName	(0X1CD88,	"XTIM_ADAPT_KE_FACTOR_WARM_TEMPERATURE");
	MakeRptCmt	(0X1CD8A,	"Limit shift throttle deviation for shift adapt factorfalling down\nFactor");
	MakeByte	(0X1CD8A);
	MakeName	(0X1CD8A,	"XTIM_ADAPT_KE_FACTOR_TPS_1_MINUS_PERCENT");
	MakeRptCmt	(0X1CD8B,	"Weight factor for shift adapt factor due to transmissiontemperature rise\nFactor");
	MakeByte	(0X1CD8B);
	MakeName	(0X1CD8B,	"XTIM_ADAPT_KE_SHIFT_ADAPT_TEMP_RISE_WEIGHT");
	MakeRptCmt	(0X1CD8C,	"Weight factor for shift adapt factor due to transmissiontemperature in warm state\nFactor");
	MakeByte	(0X1CD8C);
	MakeName	(0X1CD8C,	"XTIM_ADAPT_KE_SHIFT_ADAPT_WARM_TEMP_WEIGHT");
	MakeRptCmt	(0X1CD8E,	"Shift torque compensation factor.\nFactor");
	MakeName	(0X1CD8E,	"XTIM_ADAPT_KA_PRESSURE_ADAPT_TORQUE_FACTOR");
	MakeRptCmt	(0X1CDC4,	"Preload Checksum value for Shift Adaptive Cells.\nCardinal");
	MakeWord	(0X1CDC4);
	MakeName	(0X1CDC4,	"XTIM_ADAPT_KE_ADAPTIVE_PRELOAD_CHECKSUM");
	MakeRptCmt	(0X1CDC6,	"These define preloadable values for the Adaptive_Cells; There are 17 cells per shift.\nPSI_s");
	MakeName	(0X1CDC6,	"XTIM_ADAPT_KA_ADAPTIVE_CELL_PRELOADS");
	MakeRptCmt	(0X1CDFC,	"Maximum delay time period to wait for starting engine speed acceleration to be reached.\nSeconds");
	MakeWord	(0X1CDFC);
	MakeName	(0X1CDFC,	"XTIM_DOWNSHIFT_KE_DOWNSHIFT_DELAY_TIME_LIMIT");
	MakeRptCmt	(0X1CDFE,	"Amount of time to apply downshift pressure modifiers.\nSeconds");
	MakeName	(0X1CDFE,	"XTIM_DOWNSHIFT_KV_DOWNSHIFT_TIME");
	MakeWord	(0X1CE02);
	MakeRptCmt	(0X1CE04,	"Ratio used to start timing the upshift time\nRatio");
	MakeName	(0X1CE04,	"XTIM_RATIO_KV_UPSHIFT_START_RATIO");
	MakeWord	(0X1CE08);
	MakeRptCmt	(0X1CE0A,	"Ratio used to determine if a new gear is reached\nRatio");
	MakeName	(0X1CE0A,	"XTIM_RATIO_KV_UPSHIFT_END_RATIO");
	MakeRptCmt	(0X1CE10,	"Ratio used to start timing the downshift time.\nRatio");
	MakeWord	(0X1CE10);
	MakeName	(0X1CE10,	"XTIM_RATIO_KV_DOWNSHIFT_START_RATIO");
	MakeRptCmt	(0X1CE16,	"Ratio used to determine if a new gear is reached.\nRatio");
	MakeWord	(0X1CE16);
	MakeName	(0X1CE16,	"XTIM_RATIO_KV_DOWNSHIFT_END_RATIO");
	MakeRptCmt	(0X1CE1C,	"Time used to determine if end of downshift reached.\nSeconds");
	MakeWord	(0X1CE1C);
	MakeName	(0X1CE1C,	"XTIM_RATIO_KV_DS_END_OF_SHIFT_TIME");
	MakeRptCmt	(0X1CE22,	"End of downshift time. If exceeded, this timer will always end the current downshift.\nSeconds");
	MakeWord	(0X1CE22);
	MakeName	(0X1CE22,	"XTIM_RATIO_KV_DOWNSHIFT_MAX_TIME");
	MakeWord	(0X1CE26);
	MakeName	(0X1CE28,	"XTIM_UPSHIFT_KV_UPSHIFT_MAX_TIME");
	MakeWord	(0X1CE2C);
	MakeRptCmt	(0X1CE2E,	"The amount of time after shift complete is set until end of shift flag is set.\nSeconds");
	MakeName	(0X1CE2E,	"XTIM_UPSHIFT_KV_END_OF_SHIFT_TIME");
	MakeName	(0X1CE34,	"XTIM_VALIDATION_KV_THROTTLE_VARIATION_LIMIT");
	MakeRptCmt	(0X1CE3E,	"The lowest transmission temperature to be considered valid.\nDegrees_C");
	MakeWord	(0X1CE3E);
	MakeName	(0X1CE3E,	"XTIM_VALIDATION_KE_TRANSMISSION_TEMP_LOW_VALID");
	MakeRptCmt	(0X1CE40,	"The highest transmission temperature to be considered valid.\nDegrees_C");
	MakeWord	(0X1CE40);
	MakeName	(0X1CE40,	"XTIM_VALIDATION_KE_TRANSMISSION_TEMP_HIGH_VALID");
	MakeRptCmt	(0X1CE42,	"If wheel slipacceleration is greater than this cal then the wheel isslipping\nMPH/Sec");
	MakeName	(0X1CE42,	"XTIM_VALIDATION_KV_WHEEL_SLIP_ACCEL_HI");
	MakeWord	(0X1CE46);
	MakeRptCmt	(0X1CE48,	"If wheel slipacceleration is less than this cal then the wheel isslipping\nMPH/Sec");
	MakeName	(0X1CE48,	"XTIM_VALIDATION_KV_WHEEL_SLIP_ACCEL_LO");
	MakeWord	(0X1CE4C);
	MakeName	(0X1CE4E,	"XTIM_VALIDATION_KV_ALLOWED_SHIFT_DELAY");
	MakeRptCmt	(0X1CE54,	"Allow adapts when transmission is in hot mode if this is true.\nT/F");
	MakeByte	(0X1CE54);
	MakeName	(0X1CE54,	"XTIM_VALIDATION_KE_HOT_MODE_ADAPT_VALID");
	MakeRptCmt	(0X1CE55,	"When TRUE, performance mode adapts are NOT allowed.\nTrue/False");
	MakeByte	(0X1CE55);
	MakeName	(0X1CE55,	"XTIM_VALIDATION_KE_INHIBIT_PERFORMANCE_ADAPT");
	MakeRptCmt	(0X1CE56,	"Time for between-gear change to be a valid Upshift.\nSeconds");
	MakeWord	(0X1CE56);
	MakeName	(0X1CE56,	"XTIM_VALIDATION_KE_GEAR_CHANGE_TIME_VALID");
	MakeRptCmt	(0X1CE58,	"Time for between-range change to be a valid Upshift.\nSeconds");
	MakeWord	(0X1CE58);
	MakeName	(0X1CE58,	"XTIM_VALIDATION_KE_RANGE_CHANGE_TIME_VALID");
	MakeRptCmt	(0X1CE5A,	"The lower limit of shift torque for a shift to be considered valid.\nFt_lb");
	MakeWord	(0X1CE5A);
	MakeName	(0X1CE5A,	"XTIM_VALIDATION_KE_ADAPTIVE_TORQUE_LIMIT_LOW");
	MakeRptCmt	(0X1CE5C,	"The upper limit of shift torque for a shift to be considered valid.\nFt_lb");
	MakeWord	(0X1CE5C);
	MakeName	(0X1CE5C,	"XTIM_VALIDATION_KE_ADAPTIVE_TORQUE_LIMIT_HIGH");
	MakeRptCmt	(0X1CE5E,	"The lowest throttle position for an upshift to be considered valid.\nPercent");
	MakeName	(0X1CE5E,	"XTIM_VALIDATION_KV_THROTTLE_LOW_LIMIT_VALID");
	MakeWord	(0X1CE62);
	MakeRptCmt	(0X1CE64,	"The maximum vehicle speed variation for an upshift to be considered valid.\nMPH");
	MakeName	(0X1CE64,	"XTIM_VALIDATION_KV_VEHICLE_SPEED_VARIATION");
	MakeWord	(0X1CE68);
	MakeRptCmt	(0X1CE6A,	"Actual shift time to be considered long.\nSeconds");
	MakeName	(0X1CE6A,	"XTIM_VALIDATION_KV_LONG_UPSHIFT_TIME");
	MakeRptCmt	(0X1CE70,	"The minimum time allowed before the ratio or engine acceleration reaches the starting point.\nSeconds");
	MakeWord	(0X1CE70);
	MakeName	(0X1CE70,	"XTIM_VALIDATION_KE_INITIAL_UPSHIFT_TIME");
	MakeRptCmt	(0X1CE72,	"Actual shift time to be considered short.\nSeconds");
	MakeName	(0X1CE72,	"XTIM_VALIDATION_KV_SHORT_UPSHIFT_TIME");
	MakeByte	(0X1CE74);
	MakeRptCmt	(0X1CE78,	"This table indicates whether shift adapts are enabled for eachtype of shift, based on Gear and Range.\nBoolean");
	MakeName	(0X1CE78,	"XTIM_VALIDATION_KA_ENABLE_UPSHIFT_ADAPT_TABLE");
	MakeRptCmt	(0X1CE84,	"Used to select adapt table and solenoid status at start of the 3-2 downshift.\nMPH");
	MakeWord	(0X1CE84);
	MakeName	(0X1CE84,	"X_D32_CONTROL_KE_32_VEHICLE_SPEED");
	MakeRptCmt	(0X1CE86,	"Transmission temperature threshold FOR determining the 3-2 solenoid status.\nDegrees_C");
	MakeWord	(0X1CE86);
	MakeName	(0X1CE86,	"X_D32_CONTROL_KE_32_SOLENOID_TEMP");
	MakeRptCmt	(0X1CE88,	"Pressure modifier when Mode = Diagnostic.\nPSI");
	MakeWord	(0X1CE88);
	MakeName	(0X1CE88,	"X_D32_CONTROL_KE_D32_DIAGNOSTIC_MODE_PRESSURE");
	MakeRptCmt	(0X1CE8A,	"Pressure modifier when Mode = Range.\nPSI");
	MakeWord	(0X1CE8A);
	MakeName	(0X1CE8A,	"X_D32_CONTROL_KE_D32_RANGE_MODE_PRESSURE");
	MakeRptCmt	(0X1CE8C,	"Used to determine the base 3-2 pressure when the 3-2 vehicle speed is less than the 3-2 vehicle speed check value.\nPSI");
	MakeName	(0X1CE8C,	"X_D32_CONTROL_KA_D32_LOW_SPEED_MAIN_PRESSURE");
	MakeRptCmt	(0X1CFBE,	"Used to determine the base 3-2 pressure when the 3-2 vehicle speed is greater than the 3-2 vehicle speed check value.\nPSI");
	MakeName	(0X1CFBE,	"X_D32_CONTROL_KA_D32_HIGH_SPEED_MAIN_PRESSURE");
	MakeRptCmt	(0X1D0F0,	"Used to modify 3-2 base pressure as a function of engine speed.\nPSI_s");
	MakeName	(0X1D0F0,	"X_D32_CONTROL_KA_D32_LOW_SPD_ENG_SPD_MODIFIER");
	MakeRptCmt	(0X1D160,	"Used to modify 3-2 base pressure as a function of engine speed.\nPSI_s");
	MakeName	(0X1D160,	"X_D32_CONTROL_KA_D32_HIGH_SPD_ENG_SPD_MODIFIER");
	MakeRptCmt	(0X1D1D0,	"Used to determine 3-2 shift pressure modifications due to temperature.\nPSI_s");
	MakeWord	(0X1D1D0);
	MakeName	(0X1D1D0,	"X_D32_CONTROL_KV_D32_TRANS_TEMP_PRESS_MODIFIER");
	MakeRptCmt	(0X1D1E2,	"Vehicle speed condition for 3-2 downshift to coastdown mode.\nMPH");
	MakeWord	(0X1D1E2);
	MakeName	(0X1D1E2,	"X_D32_CONTROL_KE_32_COASTDOWN_SPEED");
	MakeRptCmt	(0X1D1E4,	"Throttle condition for 3-2 downshift to coastdown mode.\nPercent");
	MakeWord	(0X1D1E4);
	MakeName	(0X1D1E4,	"X_D32_CONTROL_KE_32_COASTDOWN_THROTTLE");
	MakeRptCmt	(0X1D1E6,	"This calibration is used to determine the 3-2 solenoid state when it is in coastdown mode.\nENUM");
	MakeByte	(0X1D1E6);
	MakeName	(0X1D1E6,	"X_D32_CONTROL_KE_32_COASTDOWN_SOL_STATE");
	MakeRptCmt	(0X1D1E8,	"Time in which force motor current is over range before the force motor is considered out of control.\nSeconds");
	MakeWord	(0X1D1E8);
	MakeName	(0X1D1E8,	"X_FM_CONTROL_KE_FM_CURRENT_OVER_LIMIT_TIME");
	MakeRptCmt	(0X1D1EA,	"Time in which force motor current is under range before the force motor is considered out of control.\nSeconds");
	MakeWord	(0X1D1EA);
	MakeName	(0X1D1EA,	"X_FM_CONTROL_KE_FM_CURRENT_UNDER_LIMIT_TIME");
	MakeRptCmt	(0X1D1EC,	"When TRUE, will enable the Force Motor Retest Logic.\nT/F");
	MakeByte	(0X1D1EC);
	MakeName	(0X1D1EC,	"X_FM_CONTROL_KE_FM_ENABLE_RETEST");
	MakeRptCmt	(0X1D1ED,	"\nGain used when calculating the F");
	MakeByte	(0X1D1ED);
	MakeName	(0X1D1ED,	"X_FM_CONTROL_KE_FM_HIGH_CURRENT_THRSH_GAIN");
	MakeRptCmt	(0X1D1EE,	"Offset used when calculating the Force Motor HIGH current threshold.\nAmps");
	MakeByte	(0X1D1EE);
	MakeName	(0X1D1EE,	"X_FM_CONTROL_KE_FM_HIGH_CURRENT_THRSH_OFFSET");
	MakeRptCmt	(0X1D1EF,	"The high voltage threshold used in determining if ignition voltage is out of range.\nVolts");
	MakeByte	(0X1D1EF);
	MakeName	(0X1D1EF,	"X_FM_CONTROL_KE_FM_HIGH_VOLT_THRSH_DISABLE");
	MakeRptCmt	(0X1D1F0,	"Gain used when calculating the Force Motor LOW current threshold.\nAmps");
	MakeByte	(0X1D1F0);
	MakeName	(0X1D1F0,	"X_FM_CONTROL_KE_FM_LOW_CURRENT_THRSH_GAIN");
	MakeRptCmt	(0X1D1F2,	"Offset used when calculating the Force Motor LOW current threshold.\nAmps");
	MakeWord	(0X1D1F2);
	MakeName	(0X1D1F2,	"X_FM_CONTROL_KE_FM_LOW_CURRENT_THRSH_OFFSET");
	MakeRptCmt	(0X1D1F4,	"The HIGH value used in calculating the low voltage threshold used to determine if ignition voltage is out of range.\nVolts");
	MakeByte	(0X1D1F4);
	MakeName	(0X1D1F4,	"X_FM_CONTROL_KE_FM_LOW_VOLT_THRSH_DISABLE_HI");
	MakeRptCmt	(0X1D1F5,	"The LOW value used in calculating the low voltage threshold used to determine if ignition voltage is out of range.\nVolts");
	MakeByte	(0X1D1F5);
	MakeName	(0X1D1F5,	"X_FM_CONTROL_KE_FM_LOW_VOLT_THRSH_DISABLE_LO");
	MakeRptCmt	(0X1D1F6,	"The HIGH value used in calculating the low voltage threshold used to determine if ignition voltage is within range.\nVolts");
	MakeByte	(0X1D1F6);
	MakeName	(0X1D1F6,	"X_FM_CONTROL_KE_FM_LOW_VOLT_THRSH_ENABLE_HI");
	MakeByte	(0X1D1F7);
	MakeName	(0X1D1F7,	"X_FM_CONTROL_KE_FM_LOW_VOLT_THRSH_ENABLE_LO");
	MakeRptCmt	(0X1D1F8,	"This calibration defines the limit for the number of times that the force motor can fail while in the retest operating state.\nCounts");
	MakeByte	(0X1D1F8);
	MakeName	(0X1D1F8,	"X_FM_CONTROL_KE_FM_MAX_FAIL_IN_RETEST");
	MakeWord	(0X1D1FA);
	MakeName	(0X1D1FA,	"X_FM_CONTROL_KE_FM_OFF_BEFORE_RETEST_TIME");
	MakeWord	(0X1D1FC);
	MakeName	(0X1D1FC,	"X_FM_CONTROL_KE_FM_VOLTAGE_LIMIT_TIME");
	MakeByte	(0X1D1FE);
	MakeName	(0X1D1FE,	"X_FM_CONTROL_KE_FM_MAX_TRANSITION_TO_RETEST");
	MakeWord	(0X1D200);
	MakeName	(0X1D200,	"X_FM_CONTROL_KE_FM_RETEST_PASS_TIME");
	MakeRptCmt	(0X1D202,	"Table 1 of force motor gains.\nGain");
	MakeWord	(0X1D202);
	MakeName	(0X1D202,	"X_FM_CONTROL_KV_FORCE_MOTOR_GAIN_TABLE_1");
	MakeRptCmt	(0X1D212,	"Table 2 of force motor gains.\nGain");
	MakeWord	(0X1D212);
	MakeName	(0X1D212,	"X_FM_CONTROL_KV_FORCE_MOTOR_GAIN_TABLE_2");
	MakeRptCmt	(0X1D222,	"Desired Force Motor current in retest mode.\nAmps");
	MakeByte	(0X1D222);
	MakeName	(0X1D222,	"X_FM_CONTROL_KE_FM_RETEST_DESIRED_CURRENT");
	MakeRptCmt	(0X1D223,	"Above this value, full compensation applied.\nAmps");
	MakeByte	(0X1D223);
	MakeName	(0X1D223,	"X_FM_CONTROL_KE_FM_FDBCK_CRTN_CURR_ENABLE");
	MakeRptCmt	(0X1D224,	"Below this value, no compensation applied.\nAmps");
	MakeByte	(0X1D224);
	MakeName	(0X1D224,	"X_FM_CONTROL_KE_FM_FDBCK_CRTN_CURR_DISABLE");
	MakeRptCmt	(0X1D225,	"Maximum value of corrected desired current.\nAmps");
	MakeByte	(0X1D225);
	MakeName	(0X1D225,	"X_FM_CONTROL_KE_FM_CRTD_DSRD_CURR_LIMIT_MAX");
	MakeRptCmt	(0X1D226,	"Minimum value of corrected desired current.\nAmps");
	MakeByte	(0X1D226);
	MakeName	(0X1D226,	"X_FM_CONTROL_KE_FM_CRTD_DSRD_CURR_LIMIT_MIN");
	MakeRptCmt	(0X1D228,	"Value of FM ckt characterization offset incase of a checksum failure or other failsoftingcondition.\nAmps_s");
	MakeWord	(0X1D228);
	MakeName	(0X1D228,	"X_FM_CONTROL_KE_FM_FDBCK_CRTN_CURR_FAILSOFT");
	MakeRptCmt	(0X1D22A,	"FM current converted FROM pressure.\nAmps");
	MakeName	(0X1D22A,	"X_FM_CONTROL_KA_FM_PRESSURE_TO_CURRENT");
	MakeRptCmt	(0X1D35C,	"Filter Coefficient for filtering input speed.\nCoeff");
	MakeWord	(0X1D35C);
	MakeName	(0X1D35C,	"X_INP_SPEED_KE_INPUT_SPEED_FILTER_COEFF");
	MakeRptCmt	(0X1D35E,	"This is a gain used in the Kalman Filter routine, and isassociated with plant speed noise\nGain");
	MakeWord	(0X1D35E);
	MakeName	(0X1D35E,	"X_INP_SPEED_KE_INPUT_SPEED_KALMAN_GAIN_1");
	MakeRptCmt	(0X1D360,	"This is a gain used in the Kalman Filter routine, and isassociated with plant acceleration noise\nGain");
	MakeWord	(0X1D360);
	MakeName	(0X1D360,	"X_INP_SPEED_KE_INPUT_SPEED_KALMAN_GAIN_2");
	MakeRptCmt	(0X1D362,	"This is a gain used in the Kalman Filter routine, and isassociated with plant jerk noise\nGain");
	MakeWord	(0X1D362);
	MakeName	(0X1D362,	"X_INP_SPEED_KE_INPUT_SPEED_KALMAN_GAIN_3");
	MakeRptCmt	(0X1D364,	"Shift point altitude compensation gain factor\nFactor 0-1");
	MakeByte	(0X1D364);
	MakeName	(0X1D364,	"X_LIBRARY_KV_ALTITUDE_FACTOR");
	MakeRptCmt	(0X1D36A,	"This calibration is used to determine the range and step size of tables that have shift torque as the independant variable.\nFt_lb");
	MakeWord	(0X1D36A);
	MakeName	(0X1D36A,	"X_LOOKUP_PROCEDURES_KE_SHIFT_TORQUE_STEP_SIZE");
	MakeRptCmt	(0X1D36C,	"The limit of engine speed for a Class II gear shift\nRPM");
	MakeWord	(0X1D36C);
	MakeName	(0X1D36C,	"X_OVERRIDES_KE_C2_SHIFT_ENG_SPEED_ALLOWABLE");
	MakeRptCmt	(0X1D36E,	"The limit of vehicle speed for a Class II gear shift\nMPH");
	MakeWord	(0X1D36E);
	MakeName	(0X1D36E,	"X_OVERRIDES_KE_C2_SHIFT_MPH_SPEED_ALLOWABLE");
	MakeRptCmt	(0X1D370,	"The limit of vehicle speed for a Class II 32 downshift\nMPH");
	MakeWord	(0X1D370);
	MakeName	(0X1D370,	"X_OVERRIDES_KE_C2_32_DOWN_SPEED_ALLOWABLE");
	MakeRptCmt	(0X1D372,	"The limit of vehicle speed for a Class II 21 downshift\nMPH");
	MakeWord	(0X1D372);
	MakeName	(0X1D372,	"X_OVERRIDES_KE_C2_21_DOWN_SPEED_ALLOWABLE");
	MakeRptCmt	(0X1D374,	"The limit of engine speed for a Class II force motor\nRPM");
	MakeWord	(0X1D374);
	MakeName	(0X1D374,	"X_OVERRIDES_KE_C2_FM_ENG_LIMIT");
	MakeRptCmt	(0X1D376,	"The high threshold of Force Motor current for theClass II Device Control Limits\nAmps");
	MakeByte	(0X1D376);
	MakeName	(0X1D376,	"X_OVERRIDES_KE_C2_FM_OVERRIDE_HI_LIMIT");
	MakeRptCmt	(0X1D377,	"The low threshold of Force Motor current for theClass II Device Control Limits\nAmps");
	MakeByte	(0X1D377);
	MakeName	(0X1D377,	"X_OVERRIDES_KE_C2_FM_OVERRIDE_LO_LIMIT");
	MakeRptCmt	(0X1D378,	"The limit amount of time that TCC can be commanded OFFwhen using the Class II Device\nSeconds");
	MakeWord	(0X1D378);
	MakeName	(0X1D378,	"X_OVERRIDES_KE_C2_TCC_OVERRIDE_OFF_TIME");
	MakeRptCmt	(0X1D37A,	"This ca;ibration is used to enable First Cold Garage Pressure and Base Upshift Pressure Logic.\nT/F");
	MakeByte	(0X1D37A);
	MakeName	(0X1D37A,	"X_PRESSURE_KE_FIRST_SHIFT_COLD_ENABLED");
	MakeRptCmt	(0X1D37B,	"Temperature below which First Upshift Cold is indicated.\nDeg_C");
	MakeByte	(0X1D37B);
	MakeName	(0X1D37B,	"X_PRESSURE_KE_FIRST_SHIFT_COLD_DELTA_1");
	MakeRptCmt	(0X1D37C,	"Temperature below which First Upshift Cold is indicated.\nDeg_C");
	MakeByte	(0X1D37C);
	MakeName	(0X1D37C,	"X_PRESSURE_KE_FIRST_SHIFT_COLD_DELTA_2");
	MakeRptCmt	(0X1D37E,	"Offset added to Pressure when Torque PressureOffset Malf present.\nPSI_S");
	MakeWord	(0X1D37E);
	MakeName	(0X1D37E,	"X_PRESSURE_KE_PRESSURE_OFFSET_MALF");
	MakeRptCmt	(0X1D380,	"Lube pressure based on the gear and output speed.\nPSI");
	MakeName	(0X1D380,	"X_PRESSURE_KA_LUBE_PRESSURE");
	MakeWord	(0X1D3C8);
	MakeName	(0X1D3C8,	"X_PRESSURE_KE_UPSHFT_VS_SS_PRES_OFFSET");
	MakeWord	(0X1D3CA);
	MakeName	(0X1D3CA,	"X_PRESSURE_KE_DNSHFT_VS_SS_PRES_OFFSET");
	MakeWord	(0X1D3CC);
	MakeName	(0X1D3CC,	"X_PRESSURE_KV_DNSHFT_VS_BRAKING_PRES_OFFSET");
	MakeWord	(0X1D3D4);
	MakeName	(0X1D3D4,	"X_PRESSURE_KV_UPSHFT_VS_BRAKING_PRES_OFFSET");
	MakeWord	(0X1D3DC);
	MakeName	(0X1D3DC,	"X_PRESSURE_KE_BRAKING_VS_SS_PRES_OFFSET");
	MakeWord	(0X1D3DE);
	MakeName	(0X1D3DE,	"X_PRESSURE_KE_GS_PRESSURE_DIFFERENCE");
	MakeRptCmt	(0X1D3E0,	"Minimum time allowed fro shift delay. If Time_Since_Shift _Init is greater than this, shift_State is set to  shifting.\nSeconds");
	MakeName	(0X1D3E0,	"X_RATIO_KV_UPSHIFT_DELAY_TIME_MIN");
	MakeRptCmt	(0X1D3E6,	"IF true, set MRatio_Engine_Torque to Actual_Engine_Torque, otherwise, set to Unmanaged_Engine_Out_Torque.\nT/F");
	MakeByte	(0X1D3E6);
	MakeName	(0X1D3E6,	"X_RATIO_KE_USE_ACTUAL_ENGINE_TORQUE");
	MakeRptCmt	(0X1D3E8,	"Filter coefficient for filtering MRatio_Engine_Torque.\nCoeff");
	MakeWord	(0X1D3E8);
	MakeName	(0X1D3E8,	"X_RATIO_KE_MRATIO_ENG_TORQ_FILTER_COEFF");
	MakeRptCmt	(0X1D3EA,	"Filter coefficient for filtering calculated TCC Pressure.\nCoeff");
	MakeWord	(0X1D3EA);
	MakeName	(0X1D3EA,	"X_RATIO_KE_TCC_PRESSURE_FILTER_COEFF");
	MakeRptCmt	(0X1D3EC,	"Filter coefficient for filtering calculated TCC slip.\nCoeff");
	MakeWord	(0X1D3EC);
	MakeName	(0X1D3EC,	"X_RATIO_KE_MRATIO_SLIP_FILTER_COEFF");
	MakeRptCmt	(0X1D3EE,	"Filter coefficient for filtering ratio error.\nCoeff");
	MakeWord	(0X1D3EE);
	MakeName	(0X1D3EE,	"X_RATIO_KE_RATIO_ERROR_FILTER_COEFF");
	MakeRptCmt	(0X1D3F0,	"Moment of inertia for calculating Inertia Torque.\nKg-m-m");
	MakeWord	(0X1D3F0);
	MakeName	(0X1D3F0,	"X_RATIO_KE_ENG_INERTIA");
	MakeRptCmt	(0X1D3F2,	"Pressure offset subtracted from filtered TCC Pressure.\nPSI");
	MakeWord	(0X1D3F2);
	MakeName	(0X1D3F2,	"X_RATIO_KE_TCC_OFFSET");
	MakeRptCmt	(0X1D3F4,	"Gain multiplied with filtered TCC Pressure minus offset to yield TCC Torque.\nFtlb/PSI");
	MakeWord	(0X1D3F4);
	MakeName	(0X1D3F4,	"X_RATIO_KE_TCC_GAIN");
	MakeRptCmt	(0X1D3F6,	"Calibration above which K Factor Torque Compensation is set to zero.\nFtlb");
	MakeWord	(0X1D3F6);
	MakeName	(0X1D3F6,	"X_RATIO_KE_KFACT_E_TORQUE_HI");
	MakeRptCmt	(0X1D3F8,	"Calibration below which K Factor Torque Compensation is set to KE_KFact_Offset_At_Lo_Torq.\nFtlb");
	MakeWord	(0X1D3F8);
	MakeName	(0X1D3F8,	"X_RATIO_KE_KFACT_E_TORQUE_LO");
	MakeRptCmt	(0X1D3FA,	"K Factor Torque Compensation when MRatio_Engine_Torque is less than a calibration.\nRPM/SQRTNM");
	MakeWord	(0X1D3FA);
	MakeName	(0X1D3FA,	"X_RATIO_KE_KFACT_OFFSET_AT_LO_TORQ");
	MakeRptCmt	(0X1D3FC,	"K Factor Temperature Compensation at minus 40 degrees.\nRPM/SQRTNM");
	MakeWord	(0X1D3FC);
	MakeName	(0X1D3FC,	"X_RATIO_KE_TEMP_COMP_AT_MINUS_40");
	MakeRptCmt	(0X1D3FE,	"Transmission Temperature above which K Factor Temperature compensation returns to zero.\nDegrees_C");
	MakeWord	(0X1D3FE);
	MakeName	(0X1D3FE,	"X_RATIO_KE_TEMP_COMP_START");
	MakeRptCmt	(0X1D400,	"Used to determine the step size of KV_Sqrt_Torque Table\nN_Meter");
	MakeWord	(0X1D400);
	MakeName	(0X1D400,	"X_RATIO_KE_SQRT_STEP");
	MakeRptCmt	(0X1D402,	"Square root of torque (in Newton-meters) used in the calculation for K_Factor_wo_Compensation.\nSQRT_N_Meter");
	MakeWord	(0X1D402);
	MakeName	(0X1D402,	"X_RATIO_KV_SQRT_TORQUE");
	MakeRptCmt	(0X1D424,	"Gear below which adapt of K_Factor is disabled.\nGear");
	MakeByte	(0X1D424);
	MakeName	(0X1D424,	"X_RATIO_KE_ADAPT_AT_OR_ABOVE_GEAR");
	MakeRptCmt	(0X1D426,	"MRatio_Engine_Torque above which adapt of the K_Factor is disabled.\nFtlb");
	MakeWord	(0X1D426);
	MakeName	(0X1D426,	"X_RATIO_KE_ADAPT_HI_TORQUE");
	MakeRptCmt	(0X1D428,	"MRatio_Engine_Torque below which adapt of the K_Factor is disabled.\nFtlb");
	MakeWord	(0X1D428);
	MakeName	(0X1D428,	"X_RATIO_KE_ADAPT_LO_TORQUE");
	MakeRptCmt	(0X1D42A,	"Speed Ratio below which adapt of the K_Factor is disabled.\nFactor_0_To_2");
	MakeByte	(0X1D42A);
	MakeName	(0X1D42A,	"X_RATIO_KE_ADAPT_MIN_S_RATIO");
	MakeRptCmt	(0X1D42C,	"Transmission Temperature below which adapt of the K_Factor is disabled.\nDegrees_C");
	MakeWord	(0X1D42C);
	MakeName	(0X1D42C,	"X_RATIO_KE_ADAPT_MIN_TRANS_TEMP");
	MakeRptCmt	(0X1D42E,	"The Adapt_Time_Counter is decremented when modeled ratio is less than Ratio multiplied by this calibration.\nFactor_0_T0_2");
	MakeByte	(0X1D42E);
	MakeName	(0X1D42E,	"X_RATIO_KE_ADAPT_RATIO_LOW_MULT");
	MakeRptCmt	(0X1D42F,	"The Adapt_Time_Counter is incremented when modeled ratio is greater than Ratio multiplied by this calibration.\nFactor_0_To_2");
	MakeByte	(0X1D42F);
	MakeName	(0X1D42F,	"X_RATIO_KE_ADAPT_RATIO_HIGH_MULT");
	MakeWord	(0X1D430);
	MakeName	(0X1D430,	"X_RATIO_KE_ADAPT_TIME_COUNTER");
	MakeRptCmt	(0X1D432,	"The Adapt_K_Factor is limited to this value.\nRPM/SQRTNM");
	MakeWord	(0X1D432);
	MakeName	(0X1D432,	"X_RATIO_KE_ADAPT_LIMIT");
	MakeWord	(0X1D434);
	MakeName	(0X1D434,	"X_RATIO_KE_ADAPT_RANGE");
	MakeWord	(0X1D436);
	MakeName	(0X1D436,	"X_RATIO_KE_COUPLING_KFACT_OR_ABV");
	MakeRptCmt	(0X1D438,	"Used to determine the step size of KV_Trq_Cnv_SRatio Table.\nRPM/SQRTNM");
	MakeWord	(0X1D438);
	MakeName	(0X1D438,	"X_RATIO_KE_KFACT_STEP");
	MakeRptCmt	(0X1D43A,	"This calibration is used in the calculation of Speed Ratio.\nFactor_0_To_2");
	MakeDword	(x=0X1D43A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X1D43A,	"X_RATIO_KV_TRQ_CNV_SRATIO");
	MakeWord	(0X1D44C);
	MakeName	(0X1D44C,	"X_RATIO_KE_SNGLE_CAL_COUPLING_APPROX");
	MakeRptCmt	(0X1D44E,	"Amount of total torque reduction requested if no reductionis desired. Should probably always be 0.0\nPercent");
	MakeWord	(0X1D44E);
	MakeName	(0X1D44E,	"X_SEM_KE_SEM_NO_REDUCTION");
	MakeRptCmt	(0X1D450,	"Output_Speed / Vehicle_Speed Ratio.\n60 RPMI");
	MakeWord	(0X1D450);
	MakeName	(0X1D450,	"X_SHIFT_KE_VEHICLE_SPEED_RATIO");
	MakeRptCmt	(0X1D452,	"Maximum allowable gear based of range selector.\nGear");
	MakeByte	(0X1D452);
	MakeName	(0X1D452,	"X_SHIFT_KV_MAX_GEAR_TABLE");
	MakeRptCmt	(0X1D456,	"Time used to determine a shift caused be a range change.\nSeconds");
	MakeWord	(0X1D456);
	MakeName	(0X1D456,	"X_SHIFT_KE_SHIFT_CAUSED_BY_RANGE_TIME");
	MakeRptCmt	(0X1D458,	"This calibration disables urban conditions if you are above this cal for KE_Urban_Above_MPH_Time.\nMPH");
	MakeWord	(0X1D458);
	MakeName	(0X1D458,	"X_SHIFT_KE_URBAN_ABOVE_MPH");
	MakeRptCmt	(0X1D45A,	"This calibration is used to disable the Urban Pattern if time has expired.\nSecs");
	MakeWord	(0X1D45A);
	MakeName	(0X1D45A,	"X_SHIFT_KE_URBAN_ABOVE_MPH_TIME");
	MakeByte	(0X1D45C);
	MakeName	(0X1D45C,	"X_SHIFT_KE_URBAN_BARO");
	MakeByte	(0X1D45D);
	MakeName	(0X1D45D,	"X_SHIFT_KE_URBAN_COOLANT_TEMP");
	MakeWord	(0X1D45E);
	MakeName	(0X1D45E,	"X_SHIFT_KE_URBAN_HI_TIME");
	MakeWord	(0X1D460);
	MakeName	(0X1D460,	"X_SHIFT_KE_URBAN_LO_TIME");
	MakeRptCmt	(0X1D462,	"This calibration is used as an upper bound for the range that vehicle speed must be in to meet a condition for the urban tests.\nMPH");
	MakeWord	(0X1D462);
	MakeName	(0X1D462,	"X_SHIFT_KE_URBAN_MPH_HIGH");
	MakeRptCmt	(0X1D464,	"This calibration is used as a lower bound for the range that vehicle speed must be in to meet a condition for the urban tests.\nMPH");
	MakeWord	(0X1D464);
	MakeName	(0X1D464,	"X_SHIFT_KE_URBAN_MPH_LOW");
	MakeByte	(0X1D466);
	MakeName	(0X1D466,	"X_SHIFT_KE_DISABLE_URBAN_DUE_TO_4WD_LO");
	MakeByte	(0X1D467);
	MakeName	(0X1D467,	"X_SHIFT_KE_DISABLE_URBAN_DUE_TO_CRUISE");
	MakeRptCmt	(0X1D468,	"This is the threshold which Urban_Vehicle_Speed must be greater than in order to satisfy urban engine braking conditions.\nMPH");
	MakeWord	(0X1D468);
	MakeName	(0X1D468,	"X_SHIFT_KE_URBAN_ENG_BRAKE_MPH");
	MakeWord	(0X1D46A);
	MakeName	(0X1D46A,	"X_SHIFT_KE_URBAN_ENG_BRAKE_THR");
	MakeRptCmt	(0X1D46C,	"This specifies how long the vehicle must be in urban engine braking conditions before exiting urban conditions.\nSecs");
	MakeWord	(0X1D46C);
	MakeName	(0X1D46C,	"X_SHIFT_KE_URBAN_ENG_BRAKE_TIME");
	MakeByte	(0X1D46E);
	MakeName	(0X1D46E,	"X_SHIFT_KE_DRIVE_LOW_URBAN_TEST_ENABLE");
	MakeRptCmt	(0X1D470,	"If throttle is greater than this cal and Urban conditions are met we want to delay downshift to reduce noise emmisions.\n%");
	MakeWord	(0X1D470);
	MakeName	(0X1D470,	"X_SHIFT_KE_URBAN_THROTTLE");
	MakeRptCmt	(0X1D472,	"Lag filter coefficient for filtering vehicle acceleration.\nCoeff");
	MakeWord	(0X1D472);
	MakeName	(0X1D472,	"X_SHIFT_KE_VEH_ACCELERATION_FILTER_COEFF");
	MakeRptCmt	(0X1D474,	"The filter coefficient for filtering the wheel slip acceleration\nNone");
	MakeWord	(0X1D474);
	MakeName	(0X1D474,	"X_SHIFT_KE_WHEEL_SLIP_FILTER_COEFF");
	MakeRptCmt	(0X1D476,	"Amount of time to delay downshift when noise cond. met.\nSeconds");
	MakeName	(0X1D476,	"X_SHIFT_KV_DELAY_DOWNSHIFT_TIMER");
	MakeWord	(0X1D47C);
	MakeName	(0X1D47C,	"X_SHIFT_KV_SHIFT_STABLE_OVERALL_RATIO");
	MakeRptCmt	(0X1D484,	"Used to calculate the current torque converter K factor.\nKFactor");
	MakeWord	(0X1D484);
	MakeName	(0X1D484,	"X_SHIFT_KV_TRQ_CONV_K_FACTOR");
	MakeByte	(0X1D4A5);
	MakeRptCmt	(0X1D4A6,	"Used to calculate predicted ( after upshift ) torque converter K factor from the current K factor.\nRatio");
	MakeName	(0X1D4A6,	"X_SHIFT_KV_UPSHIFT_K_FACTOR_RATIO");
	MakeRptCmt	(0X1D4AA,	"Used to calculate the predicted torque converter speed ratio.\nRatio");
	MakeWord	(0X1D4AA);
	MakeName	(0X1D4AA,	"X_SHIFT_KV_PRED_TRQ_CONV_SPD_RATIO");
	MakeRptCmt	(0X1D4CC,	"The amount of time to delay the state change of the shift solenoidfor downshift.\nSeconds");
	MakeByte	(0X1D4CC);
	MakeName	(0X1D4CC,	"X_SHIFT_KV_DS_SOLENOID_DELAY_TIME");
	MakeRptCmt	(0X1D4D0,	"The amount of time to delay the state change of the shift solenoidfor a jump downshift.\nSeconds");
	MakeByte	(0X1D4D0);
	MakeName	(0X1D4D0,	"X_SHIFT_KV_DS_JUMP_SOLENOID_DELAY_TIME");
	MakeByte	(0X1D4D1);
	MakeRptCmt	(0X1D4D2,	"This is a calibration table based on Range which will enable the urban test for the specified PRNDL Range.\nT/F");
	MakeByte	(0X1D4D2);
	MakeArray	(0X1D4D2,	0X2);
	MakeName	(0X1D4D2,	"X_SHIFT_KV_URBAN_TEST_ENABLED");
	MakeRptCmt	(0X1D4D6,	"If Vehicle acceleration is grater than this cal then shift stabilization is disabled.\nMPH_per_Second_S");
	MakeWord	(0X1D4D6);
	MakeName	(0X1D4D6,	"X_SHIFT_KV_STABIL_DISABLE_VEH_ACCEL_HI");
	MakeRptCmt	(0X1D4DE,	"If Vehicle acceleration is less than this cal then shift stabilization is enabled.\nMPH_per_Second_S");
	MakeWord	(0X1D4DE);
	MakeName	(0X1D4DE,	"X_SHIFT_KV_STABIL_DISABLE_VEH_ACCEL_LO");
	MakeRptCmt	(0X1D4E6,	"Used to calculate normalized engine torque for the shift stabilization algorithm.\nNorm Torque");
	MakeDword	(x=0X1D4E6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X1D4E6,	"X_SHIFT_KA_SHIFT_STABLE_ENG_TORQUE");
	MakeRptCmt	(0X1D728,	"Time to inhibit upshift once power off inhibiting is triggered.\nseconds");
	MakeWord	(0X1D728);
	MakeName	(0X1D728,	"X_SHIFT_KE_LIFT_FOOT_TIME");
}


static Bytes_9(void) {
        auto x;
#define id x

	MakeRptCmt	(0X1D72A,	"The rate of change in throttle which is considered apower-on manuver.\n%/sec");
	MakeWord	(0X1D72A);
	MakeName	(0X1D72A,	"X_SHIFT_KE_POWER_ON_THROTTLE");
	MakeRptCmt	(0X1D72C,	"Threshold of rate of change of throttle to trigger power offshift stabilization.\n%/sec");
	MakeWord	(0X1D72C);
	MakeName	(0X1D72C,	"X_SHIFT_KE_SHIFT_STAB_DELTHR_LFTFT");
	MakeRptCmt	(0X1D72E,	"The time to freeze the power-off vehicle torque modifier duringa power-on manuever.\nSeconds");
	MakeWord	(0X1D72E);
	MakeName	(0X1D72E,	"X_SHIFT_KE_SHIFT_STAB_POWER_ON_TIME");
	MakeRptCmt	(0X1D730,	"Maximum acceleration defining steady state within shiftstabilization power off routine.\nMPH/Sec");
	MakeWord	(0X1D730);
	MakeName	(0X1D730,	"X_SHIFT_KE_VEHICLE_ACCELERATING_MAX");
	MakeRptCmt	(0X1D732,	"Minimum acceleration defining steady state within shiftstabilization power off routine.\nMPH/Sec");
	MakeWord	(0X1D732);
	MakeName	(0X1D732,	"X_SHIFT_KE_VEHICLE_ACCELERATING_MIN");
	MakeWord	(0X1D734);
	MakeName	(0X1D734,	"X_SHIFT_KE_SHIFT_STAB_UPSHF_DELAY_TIME");
	MakeRptCmt	(0X1D736,	"Normalized Tractive Effort on a level road table used in theShift Stabilization power off rountine.\nNone");
	MakeWord	(0X1D736);
	MakeName	(0X1D736,	"X_SHIFT_KV_PRED_BASE_NORM_VEH_TORQUE");
	MakeDword	(0X1D758);
	MakeName	(0X1D758,	"X_SHIFT_KV_VEH_TORQ_MOD_ERR_TABLE");
	MakeRptCmt	(0X1D79C,	"Lag filter weighting used for Vehicle_Torque_Error used withinthe power off shift stabilization power off routine.\nNONE");
	MakeByte	(0X1D79C);
	MakeName	(0X1D79C,	"X_SHIFT_KE_VEH_TORQ_ERR_FILTCOEF");
	MakeRptCmt	(0X1D79E,	"Threshold delay time for the solenoid state change for 2-3 upshift after 3-2 downshift.\nSeconds");
	MakeWord	(0X1D79E);
	MakeName	(0X1D79E,	"X_SHIFT_KE_32_23_SOL_DELAY_TIME");
	MakeRptCmt	(0X1D7A0,	"If time since 3-2 downshift is greater than this, the 2-3 shift should not be delayed.\nSeconds");
	MakeWord	(0X1D7A0);
	MakeName	(0X1D7A0,	"X_SHIFT_KE_32_23_HIGH_TIME");
	MakeRptCmt	(0X1D7A2,	"If time since 3-2 downshift is less than this, the 2-3 shift should not be delayed.\nSeconds");
	MakeWord	(0X1D7A2);
	MakeName	(0X1D7A2,	"X_SHIFT_KE_32_23_LOW_TIME");
	MakeRptCmt	(0X1D7A4,	"2-3 upshift solenoid state change delay is active after a 2-3 upshift.\nT/F");
	MakeByte	(0X1D7A4);
	MakeName	(0X1D7A4,	"X_SHIFT_KE_32_23_SOLENOID_DELAY_ENABLE");
	MakeRptCmt	(0X1D7A6,	"Minimum gear that when manually selected disables the ETC shift stability algorithm.\nGear");
	MakeByte	(0X1D7A6);
	MakeName	(0X1D7A6,	"X_SHIFT_KV_ETC_STAB_DISABLED_MIN_GEAR");
	MakeRptCmt	(0X1D7AA,	"Amount to scale the gear offset by as a function of temperature.\nFactor");
	MakeWord	(0X1D7AA);
	MakeName	(0X1D7AA,	"X_SHIFT_KV_ETC_STAB_OFFSET_TEMP_SCALAR");
	MakeRptCmt	(0X1D7CA,	"First gear offset used to calculate the target maximum engine speed in the ETC shift stabilization algorithm.\nRPM");
	MakeName	(0X1D7CA,	"X_SHIFT_KE_ETC_STAB_1ST_GEAR_OFFSET");
	MakeRptCmt	(0X1D7CC,	"Second gear offset used to calculate the target maximum engine speed in the ETC shift stabilization algorithm.\nRPM");
	MakeName	(0X1D7CC,	"X_SHIFT_KE_ETC_STAB_2ND_GEAR_OFFSET");
	MakeRptCmt	(0X1D7CE,	"Third gear offset used to calculate the target maximum engine speed in the ETC shift stabilization algorithm.\nRPM");
	MakeName	(0X1D7CE,	"X_SHIFT_KE_ETC_STAB_3RD_GEAR_OFFSET");
	MakeRptCmt	(0X1D7D0,	"Threshold for the difference between actual and target engine speed that causes the target to jump down.\nRPM");
	MakeWord	(0X1D7D0);
	MakeName	(0X1D7D0,	"X_SHIFT_KE_ETC_STAB_JUMP_DOWN_THRESHOLD");
	MakeRptCmt	(0X1D7D2,	"Rate at which the engine speed limit is ramped down.\nRPM/Sec");
	MakeWord	(0X1D7D2);
	MakeName	(0X1D7D2,	"X_SHIFT_KE_ETC_STAB_RPM_DECREASE_RATE");
	MakeRptCmt	(0X1D7D4,	"Rate at which the engine speed limit is ramped up.\nRPM/Sec");
	MakeWord	(0X1D7D4);
	MakeName	(0X1D7D4,	"X_SHIFT_KE_ETC_STAB_RPM_INCREASE_RATE");
	MakeRptCmt	(0X1D7D6,	"Threshold for the difference between actual and target engine speed that causes the target to jump up.\nRPM");
	MakeWord	(0X1D7D6);
	MakeName	(0X1D7D6,	"X_SHIFT_KE_ETC_STAB_JUMP_UP_THRESHOLD");
	MakeRptCmt	(0X1D7D8,	"Boolean calibration to show if the ETC shift stabilization is enabled or disabled.\nT/F");
	MakeByte	(0X1D7D8);
	MakeName	(0X1D7D8,	"X_SHIFT_KE_ETC_STAB_ENABLE");
	MakeRptCmt	(0X1D7D9,	"Boolean calibration to show whether to reactivate ETC Shift Stabilization.  When FALSE, ETC Stabilization can be reactivated.\nT/F");
	MakeByte	(0X1D7D9);
	MakeName	(0X1D7D9,	"X_SHIFT_KE_ETC_SHIFT_STAB_ONCE_PER_GEAR");
	MakeRptCmt	(0X1D7DA,	"This is a calibration table to enable or disable detent shiftstabilization.\nT/F");
	MakeByte	(0X1D7DA);
	MakeName	(0X1D7DA,	"X_SHIFT_KV_DETENT_RPM_POINT_ENABLE");
	MakeRptCmt	(0X1D7DE,	"Used to detect an increase in throttleby a specific amount.\nPercent");
	MakeWord	(0X1D7DE);
	MakeName	(0X1D7DE,	"X_TIMING_KE_POSITIVE_DELTA_SHIFT_THROTTLE");
	MakeRptCmt	(0X1D7E0,	"Used to detect an increase in throttleby a specific amount.\nPercent");
	MakeWord	(0X1D7E0);
	MakeName	(0X1D7E0,	"X_TIMING_KE_NEGATIVE_DELTA_SHIFT_THROTTLE");
	MakeRptCmt	(0X1D7E2,	"Used to detect when a minimum threshold              throttle has been exceeded.\nPercent");
	MakeWord	(0X1D7E2);
	MakeName	(0X1D7E2,	"X_TIMING_KE_MINIMUM_SHIFT_THROTTLE");
	MakeRptCmt	(0X1D7E4,	"Used to detect when a liftfoot throttle condition has taken place.\nPercent");
	MakeWord	(0X1D7E4);
	MakeName	(0X1D7E4,	"X_TIMING_KE_SHIFT_LIFTFOOT_THROTTLE");
	MakeRptCmt	(0X1D7E6,	"Used to find Inertia_Torque\nFt-lb");
	MakeDword	(x=0X1D7E6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X1D7E6,	"X_TIMING_KA_INERTIA_TORQUE");
	MakeName	(0X1D800,	"Constant16_Transmission_Diagnostics_Calibration_Checksum");
	MakeName	(0X1D804,	"Constant32_Transmission_Diagnostics_Calibration_ID");
	MakeDword	(x=0X1D808);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X1D808,	"CurveTable_2_Columns_Transmission_Diagnostics_Calibration_Level");
	MakeName	(0X1D80C,	"CurveTable_8_Columns_Transmission_Diagnostics_Calibration_ID_ASCII");
	MakeRptCmt	(0X1D84C,	"Enable/disable manual downshift inertia torque management.\nT/F");
	MakeByte	(0X1D84C);
	MakeName	(0X1D84C,	"X_TIMING_KE_FRZ_SHFTTRQ_MAN_DNSHFT_TRQMNT");
	MakeRptCmt	(0X1D84E,	"Sampling period oftransmission oil temperature for transmission oil life.\nSeconds");
	MakeWord	(0X1D84E);
	MakeName	(0X1D84E,	"XOIL_LIFE_KE_TRANS_OIL_LIFE_TIME_TO_TEST");
	MakeRptCmt	(0X1D850,	"Counts to add to oil life counter based on transmission oil temperature.\nSeconds");
	MakeDword	(0X1D850);
	MakeName	(0X1D850,	"XOIL_LIFE_KV_TRANS_OIL_LIFE_COUNTER");
	MakeDword	(0X1D854);
	MakeDword	(0X1D858);
	MakeDword	(0X1D85C);
	MakeDword	(0X1D860);
	MakeDword	(0X1D864);
	MakeDword	(x=0X1D868);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1D86C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeRptCmt	(0X1D870,	"Low threshold value of transmission oil life remaining.\n%");
	MakeWord	(0X1D870);
	MakeName	(0X1D870,	"XOIL_LIFE_KE_TRANS_OIL_LIFE_TIME_TO_CHANGE");
	MakeRptCmt	(0X1D872,	"Transmission oil life expectancy.\nCounts");
	MakeDword	(0X1D872);
	MakeName	(0X1D872,	"XOIL_LIFE_KE_TRANS_OIL_LIFE_EXPECTANCY");
	MakeRptCmt	(0X1D876,	"Default transmission oil life expectancy upon EEPROM reset.\n%");
	MakeWord	(0X1D876);
	MakeName	(0X1D876,	"XOIL_LIFE_KE_TRANS_OIL_LIFE_UPON_RESET");
	MakeRptCmt	(0X1D8B0,	"Use this cal to identify the Transmission Diag calibration\nCal_ID_Record");
	MakeName	(0X1D8B0,	"TRAN_DIAGNOSTICS_HEADER");
	MakeStr		(0X1D8BC,	0X1D8C5);
	MakeName	(0X1D8BC,	"a12579115");
	MakeRptCmt	(0X1D8CC,	"This parameter defines which diagnostics are enabled\nBOOLEAN");
	MakeByte	(0X1D8CC);
	MakeName	(0X1D8CC,	"T_DG_TYPES_KV_DIAGNOSTIC_TEST_ENABLED");
	MakeByte	(0X1D8CD);
	MakeByte	(0X1D8CE);
	MakeByte	(0X1D8CF);
	MakeByte	(0X1D8D0);
	MakeByte	(0X1D8D1);
	MakeByte	(0X1D8D2);
	MakeByte	(0X1D8D3);
	MakeByte	(0X1D8D4);
	MakeByte	(0X1D8DB);
	MakeByte	(0X1D8DC);
	MakeByte	(0X1D8DD);
	MakeByte	(0X1D8DF);
	MakeByte	(0X1D8E0);
	MakeByte	(0X1D8E1);
	MakeByte	(0X1D8E2);
	MakeByte	(0X1D8E3);
	MakeByte	(0X1D8E4);
	MakeByte	(0X1D8E5);
	MakeByte	(0X1D8E6);
	MakeByte	(0X1D8E7);
	MakeByte	(0X1D8E8);
	MakeByte	(0X1D8E9);
	MakeByte	(0X1D8EA);
	MakeByte	(0X1D8EB);
	MakeByte	(0X1D8EC);
	MakeArray	(0X1D8EC,	0X4);
	MakeByte	(0X1D8F0);
	MakeRptCmt	(0X1D8F2,	"Diagnostic faults which will cause the ECCC adapts to be frozen.\nTrue/False");
	MakeByte	(0X1D8F2);
	MakeName	(0X1D8F2,	"T_DG_TYPES_KV_FREEZE_ECCC_ADAPT_MALF");
	MakeRptCmt	(0X1D934,	"This parameter defines which action for the corresponding diagnostic faults are enabled.\nBOOLEAN");
	MakeByte	(0X1D934);
	MakeName	(0X1D934,	"T_DG_TYPES_KV_DIAGNOSTIC_ACTION_ENABLED");
	MakeByte	(0X1D96A);
	MakeRptCmt	(0X1D976,	"This parameter defines which diagnostic tests are Fault_Active or Fault_Active_This_Key_On.\nF_A/This_Key_On");
	MakeByte	(0X1D976);
	MakeName	(0X1D976,	"T_DG_TYPES_KV_FAULT_DIAGNOSTIC_RECOVER_INFO");
	MakeRptCmt	(0X1D9AC,	"Dianostic faults which will cause thedefault gear action to occur\nBOOLEAN");
	MakeByte	(0X1D9AC);
	MakeName	(0X1D9AC,	"T_DG_TYPES_KV_SPEED_LIMIT_DEFAULT_GEAR_MALF");
	MakeRptCmt	(0X1D9EE,	"Diagnostic faults which will cause softlanding to occur\nBOOLEAN");
	MakeByte	(0X1D9EE);
	MakeName	(0X1D9EE,	"T_DG_TYPES_KV_SPEED_LIMIT_SOFT_LANDING_MALF");
	MakeRptCmt	(0X1DA30,	"Diagnostic faults which will cause the 3-2 pressure bias remedial action to be taken\nBOOLEAN");
	MakeByte	(0X1DA30);
	MakeName	(0X1DA30,	"T_DG_TYPES_KV_DISABLE_32_MALFUNCTIONS");
	MakeRptCmt	(0X1DA72,	"Diagnostic faults which will cause the SEM disabled remedial action to be taken.\nBOOLEAN");
	MakeByte	(0X1DA72);
	MakeName	(0X1DA72,	"T_DG_TYPES_KV_INHIBIT_SEM_MALFUNCTIONS");
	MakeRptCmt	(0X1DAB4,	"Diagnostic faults which will cause default gear action to be taken\nTrue/False");
	MakeByte	(0X1DAB4);
	MakeName	(0X1DAB4,	"T_DG_TYPES_KV_DEFAULT_GEAR_MALFUNCTIONS");
	MakeRptCmt	(0X1DAF6,	"Diagnostic faults which will cause soft landing action to be taken\nTrue/False");
	MakeByte	(0X1DAF6);
	MakeName	(0X1DAF6,	"T_DG_TYPES_KV_SOFT_LANDING_MALFUNCTIONS");
	MakeRptCmt	(0X1DB38,	"Diagnostic faults which will cause limiting gear action to be taken\nTrue/False");
	MakeByte	(0X1DB38);
	MakeName	(0X1DB38,	"T_DG_TYPES_KV_LIMIT_GEAR_MALFUNCTIONS");
	MakeRptCmt	(0X1DB7A,	"Diagnostic faults which will cause limiting gear action to be taken\nTrue/False");
	MakeByte	(0X1DB7A);
	MakeName	(0X1DB7A,	"T_DG_TYPES_KV_LIMIT_GEAR_TRANS_HOT_MALF");
	MakeRptCmt	(0X1DBBC,	"Diagnostic faults will result in inhibiting downshift to second.\nTrue/False");
	MakeByte	(0X1DBBC);
	MakeName	(0X1DBBC,	"T_DG_TYPES_KV_INHIBIT_DOWN_TO_SECOND");
	MakeRptCmt	(0X1DBFE,	"Diagnostic faults which will cause disabling FM action to be taken.\nBOOLEAN");
	MakeByte	(0X1DBFE);
	MakeName	(0X1DBFE,	"T_DG_TYPES_KV_DIAGNOSTIC_FM_OVERRIDE");
	MakeRptCmt	(0X1DC40,	"Diagnostic faults which will cause drive 2 pressure schedule action to be taken.\nBOOLEAN");
	MakeByte	(0X1DC40);
	MakeName	(0X1DC40,	"T_DG_TYPES_KV_DRIVE_2_PRESSURE_MALFUNCTIONS");
	MakeRptCmt	(0X1DC82,	"Diagnostic faults which will cause maximum pressure action to be taken.\nBOOLEAN");
	MakeByte	(0X1DC82);
	MakeName	(0X1DC82,	"T_DG_TYPES_KV_MAXIMUM_PRESSURE_MALFUNCTIONS");
	MakeRptCmt	(0X1DCC4,	"Diagnostic faults which will cause the freezing of the adaptive pressure modifier to be taken.\nBOOLEAN");
	MakeByte	(0X1DCC4);
	MakeName	(0X1DCC4,	"T_DG_TYPES_KV_FREEZE_ADAPT_MALFUNCTIONS");
	MakeRptCmt	(0X1DD06,	"Diagnostic faults that disable the torque pressure offsets.\nBOOLEAN");
	MakeByte	(0X1DD06);
	MakeName	(0X1DD06,	"T_DG_TYPES_KV_TORQUE_PRESSURE_OFFSET_MALF");
	MakeRptCmt	(0X1DD48,	"Diagnostic faults that involvethe Engine Torque Calc.\nBOOLEAN");
	MakeByte	(0X1DD48);
	MakeName	(0X1DD48,	"T_DG_TYPES_KV_ENGINE_TORQUE_MALFUNCTION");
	MakeRptCmt	(0X1DD8A,	"Diagnostic faults which will cause the TCC be turned off action to be taken\nTrue/False");
	MakeByte	(0X1DD8A);
	MakeName	(0X1DD8A,	"T_DG_TYPES_KV_TCC_OFF_MALFUNCTIONS");
	MakeRptCmt	(0X1DDCC,	"Diagnostic faults which will cause the TCC applying in 4th gear action to be taken\nTrue/False");
	MakeByte	(0X1DDCC);
	MakeName	(0X1DDCC,	"T_DG_TYPES_KV_APPLY_IN_4TH_MALFUNCTIONS");
	MakeRptCmt	(0X1DE0E,	"Diagnostic faults which will cause the TCC output to be inhibited.\nTrue/False");
	MakeByte	(0X1DE0E);
	MakeName	(0X1DE0E,	"T_DG_TYPES_KV_TCC_INHIBIT_OUTPUTS_MALFS");
	MakeRptCmt	(0X1DE50,	"Defines which diagnostic faults will resultin the TCC applying in 3rd or 4th gear.\nTrue/False");
	MakeByte	(0X1DE50);
	MakeName	(0X1DE50,	"T_DG_TYPES_KV_APPLY_IN_3RD_OR_4TH_MALFS");
	MakeRptCmt	(0X1DE92,	"TRUE indicates soft limit max gear is desired. FALSE indicates immediate limit max gear is desired for diagnostic action.\nTrue/False");
	MakeByte	(0X1DE92);
	MakeName	(0X1DE92,	"T_DG_TYPES_KE_SOFT_LIMIT_GEAR_MALF");
	MakeRptCmt	(0X1DE93,	"To disable diagnostics when PTO is active, set this to TRUE.\nT/F");
	MakeByte	(0X1DE93);
	MakeName	(0X1DE93,	"XDT_COMMON_KE_DISABLE_DIAG_FOR_PTO");
	MakeRptCmt	(0X1DE94,	"Number of times that the TCC control solenoid status can be tested before the test counters are reset.\nCounts");
	MakeByte	(0X1DE94);
	MakeName	(0X1DE94,	"XDTA_CTCC_KE_TCC_CTRL_SOLENOID_TOTAL_MAX");
	MakeRptCmt	(0X1DE95,	"Number of times that an illegal TCC control solenoid status must be seen before the fault is set.\nCounts");
	MakeByte	(0X1DE95);
	MakeName	(0X1DE95,	"XDTA_CTCC_KE_TCC_CTRL_SOLENOID_FAIL_MAX");
	MakeRptCmt	(0X1DE96,	"Number of times that a valid TCC control solenoid status must be seen before the fault is passed.\nCounts");
	MakeByte	(0X1DE96);
	MakeName	(0X1DE96,	"XDTA_CTCC_KE_TCC_CTRL_SOLENOID_PASS_MAX");
	MakeRptCmt	(0X1DE98,	"TCC DutyCycle(Capacity)should be ABOVE this threshold to enablethe test for TCC control solenoid\nPercent");
	MakeWord	(0X1DE98);
	MakeName	(0X1DE98,	"XDTA_CTCC_KE_TCC_CTRL_DUTY_CYCLE_HIGH");
	MakeRptCmt	(0X1DE9A,	"TCC DutyCycle(Capacity)should be BELOW this threshold to enablethe test for TCC control solenoid\nPercent");
	MakeWord	(0X1DE9A);
	MakeName	(0X1DE9A,	"XDTA_CTCC_KE_TCC_CTRL_DUTY_CYCLE_LOW");
	MakeRptCmt	(0X1DE9C,	"TCC control solenoid output will not be tested if ignition voltage is out of range for longer than this.\nSeconds");
	MakeWord	(0X1DE9C);
	MakeName	(0X1DE9C,	"XDTA_CTCC_KE_DIAG_TCC_CS_SYS_VOLT_TIME");
	MakeRptCmt	(0X1DE9E,	"Number of times that an illegal downshift 3-2 solenoid status must be seen before the fault is set.\nCounts");
	MakeByte	(0X1DE9E);
	MakeName	(0X1DE9E,	"XDTA_D32_KE_D32_SOLENOID_FAIL_COUNT");
	MakeRptCmt	(0X1DE9F,	"Number of times that a legal downshift 3-2 solenoid status must be seen before the fault is cleared.\nCounts");
	MakeByte	(0X1DE9F);
	MakeName	(0X1DE9F,	"XDTA_D32_KE_D32_SOLENOID_PASS_COUNT");
	MakeRptCmt	(0X1DEA0,	"Total number of times that a legal/ illegal downshift 3-2 solenoid status must be seen before the test counters are reset.\nCounts");
	MakeByte	(0X1DEA0);
	MakeName	(0X1DEA0,	"XDTA_D32_KE_D32_SOLENOID_TEST_COUNT");
	MakeRptCmt	(0X1DEA2,	"3-2 downshift solenoid output will not be tested if ignition voltage is out of range for longer than this.\nSeconds");
	MakeWord	(0X1DEA2);
	MakeName	(0X1DEA2,	"XDTA_D32_KE_DIAG_32DSO_SYS_VOLT_TIME");
	MakeRptCmt	(0X1DEA4,	"Number of times that an illegal TCC Enable solenoid status must be seen before the fault is set.\nCounts");
	MakeByte	(0X1DEA4);
	MakeName	(0X1DEA4,	"XDTA_ETCC_KE_TCC_ENABLE_FAIL_COUNT");
	MakeRptCmt	(0X1DEA5,	"Number of times that a legal TCC Enable solenoid status must be seen before the fault is cleared.\nCounts");
	MakeByte	(0X1DEA5);
	MakeName	(0X1DEA5,	"XDTA_ETCC_KE_TCC_ENABLE_PASS_COUNT");
	MakeRptCmt	(0X1DEA6,	"Total number of times that a legal/illegal TCC Enable solenoid status must be seen before the counters are reset.\nCounts");
	MakeByte	(0X1DEA6);
	MakeName	(0X1DEA6,	"XDTA_ETCC_KE_TCC_ENABLE_MAX_COUNT");
	MakeRptCmt	(0X1DEA8,	"TCC enable solenoid output will not be tested if ignition voltage is out of range for longer than this.\nSeconds");
	MakeWord	(0X1DEA8);
	MakeName	(0X1DEA8,	"XDTA_ETCC_KE_DIAG_TCC_ENABLE_SO_SVOLT_TIME");
	MakeRptCmt	(0X1DEAA,	"The number of times an invalid status on solenoid A must be seen before the diagnostic fault is set.\nCounts");
	MakeByte	(0X1DEAA);
	MakeName	(0X1DEAA,	"XDTA_SHIFT_SOL_KE_SHIFT_SOLENOID_A_FAIL_COUNT");
	MakeRptCmt	(0X1DEAB,	"The number of times solenoid A must be tested before resetting all solenoid A diagnostic counters.\nCounts");
	MakeByte	(0X1DEAB);
	MakeName	(0X1DEAB,	"XDTA_SHIFT_SOL_KE_SHIFT_SOLENOID_A_MAX_COUNT");
	MakeRptCmt	(0X1DEAC,	"The number of times a valid status on solenoid A must be seen before the pass condition is set.\nCounts");
	MakeByte	(0X1DEAC);
	MakeName	(0X1DEAC,	"XDTA_SHIFT_SOL_KE_SHIFT_SOLENOID_A_PASS_COUNT");
	MakeRptCmt	(0X1DEAD,	"The number of times an invalid status on solenoid B must be seen before the diagnostic fault is set.\nCounts");
	MakeByte	(0X1DEAD);
	MakeName	(0X1DEAD,	"XDTA_SHIFT_SOL_KE_SHIFT_SOLENOID_B_FAIL_COUNT");
	MakeRptCmt	(0X1DEAE,	"The number of times solenoid B must be tested before resetting all solenoid B diagnostic counters.\nCounts");
	MakeByte	(0X1DEAE);
	MakeName	(0X1DEAE,	"XDTA_SHIFT_SOL_KE_SHIFT_SOLENOID_B_MAX_COUNT");
	MakeRptCmt	(0X1DEAF,	"The number of times a valid status on solenoid A must be seen before the pass condition is set.\nCounts");
	MakeByte	(0X1DEAF);
	MakeName	(0X1DEAF,	"XDTA_SHIFT_SOL_KE_SHIFT_SOLENOID_B_PASS_COUNT");
	MakeRptCmt	(0X1DEB0,	"Shift solenoid A output will not be tested if ignition voltage is out of range for longer than this.\nSeconds");
	MakeWord	(0X1DEB0);
	MakeName	(0X1DEB0,	"XDTA_SHIFT_SOL_KE_DIAG_SSA_SYS_VOLT_TIME");
	MakeRptCmt	(0X1DEB2,	"Shift solenoid B output will not be tested if ignition voltage is out of range for longer than this.\nSeconds");
	MakeWord	(0X1DEB2);
	MakeName	(0X1DEB2,	"XDTA_SHIFT_SOL_KE_DIAG_SSB_SYS_VOLT_TIME");
	MakeRptCmt	(0X1DEB4,	"Lower engine torque threshold to enable 4WD-Lo diagnostic. Used in a hysteresis pair with KE_4WD_Etorque_High.\nFt_lb");
	MakeWord	(0X1DEB4);
	MakeName	(0X1DEB4,	"XDTP_4W_LOW_KE_4WD_ETORQUE_LOW");
	MakeRptCmt	(0X1DEB6,	"Higher engine torque threshold to enable 4WD-Lo diagnostic. Used in a hysteresis pair with KE_4WD_Etorque_Low.\nFt_lb");
	MakeWord	(0X1DEB6);
	MakeName	(0X1DEB6,	"XDTP_4W_LOW_KE_4WD_ETORQUE_HIGH");
	MakeRptCmt	(0X1DEB8,	"Lower engine vacuum threshold to enable 4WD-Lo diagnostic. Used in a hysteresis pair with KE_4WD_Vac_High_Thresh.\nkPa");
	MakeByte	(0X1DEB8);
	MakeName	(0X1DEB8,	"XDTP_4W_LOW_KE_4WD_VAC_LOW_THRESH");
	MakeRptCmt	(0X1DEB9,	"Higher engine vacuum threshold to enable 4WD-Lo diagnostic. Used in a hysteresis pair with KE_4WD_Vac_Low_Thresh.\nkPa");
	MakeByte	(0X1DEB9);
	MakeName	(0X1DEB9,	"XDTP_4W_LOW_KE_4WD_VAC_HIGH_THRESH");
	MakeRptCmt	(0X1DEBA,	"Lower throttle range threshold to enable 4WD-Lo diagnostic. Used in a hysteresis pair with KE_4WD_High_TPS.\nPercent");
	MakeWord	(0X1DEBA);
	MakeName	(0X1DEBA,	"XDTP_4W_LOW_KE_4WD_LOW_TPS");
	MakeRptCmt	(0X1DEBC,	"Upper throttle range threshold to enable 4WD-Lo diagnostic. Used in a hysteresis pair with KE_4WD_Low_TPS.\nPercent");
	MakeWord	(0X1DEBC);
	MakeName	(0X1DEBC,	"XDTP_4W_LOW_KE_4WD_HIGH_TPS");
	MakeWord	(0X1DEBE);
	MakeName	(0X1DEBE,	"XDTP_4W_LOW_KE_4WD_LOW_TRANS_TEMP");
	MakeWord	(0X1DEC0);
	MakeName	(0X1DEC0,	"XDTP_4W_LOW_KE_4WD_HIGH_TRANS_TEMP");
	MakeRptCmt	(0X1DEC2,	"Vehicle speed threshold above which enables the 4WD-Lo diagnostic.\nMPH");
	MakeWord	(0X1DEC2);
	MakeName	(0X1DEC2,	"XDTP_4W_LOW_KE_4WD_MPH_THRESH");
	MakeRptCmt	(0X1DEC4,	"Transfer Case Ratio; when in 4WD-Lo, manimum value. Used in a hysteresis pair with KE_4WD_Low_TCR_Max_Ratio.\nUnitless");
	MakeWord	(0X1DEC4);
	MakeName	(0X1DEC4,	"XDTP_4W_LOW_KE_4WD_LOW_TCR_MIN_RATIO");
	MakeRptCmt	(0X1DEC6,	"Transfer Case Ratio; when in 4WD-Lo, maximum value. Used in a hysteresis pair with KE_4WD_Low_TCR_Min_Ratio.\nUnitless");
	MakeWord	(0X1DEC6);
	MakeName	(0X1DEC6,	"XDTP_4W_LOW_KE_4WD_LOW_TCR_MAX_RATIO");
	MakeRptCmt	(0X1DEC8,	"Transfer case ratio, when not in 4WD-Lo, minimum value. Used in a hysteresis pair with KE_4WD_High_TCR_Max_Ratio.\nUnitless");
	MakeWord	(0X1DEC8);
	MakeName	(0X1DEC8,	"XDTP_4W_LOW_KE_4WD_HIGH_TCR_MIN_RATIO");
	MakeRptCmt	(0X1DECA,	"Transfer case ratio, when not in 4WD-Lo, maximum value. Used in a hysteresis pair with KE_4WD_High_TCR_Min_Ratio.\nUnitless");
	MakeWord	(0X1DECA);
	MakeName	(0X1DECA,	"XDTP_4W_LOW_KE_4WD_HIGH_TCR_MAX_RATIO");
	MakeRptCmt	(0X1DECC,	"4WD-Lo switch stuck off fail counter limit\nCounts");
	MakeByte	(0X1DECC);
	MakeName	(0X1DECC,	"XDTP_4W_LOW_KE_4WD_LO_STUCK_OFF_FAIL_COUNTS");
	MakeRptCmt	(0X1DECD,	"4WD-Lo switch stuck on fail counter limit\nCounts");
	MakeByte	(0X1DECD);
	MakeName	(0X1DECD,	"XDTP_4W_LOW_KE_4WD_LO_STUCK_ON_FAIL_COUNTS");
	MakeWord	(0X1DECE);
	MakeName	(0X1DECE,	"XDTP_4W_LOW_KE_4WD_STUCK_OFF_FAIL_TIME");
	MakeWord	(0X1DED0);
	MakeName	(0X1DED0,	"XDTP_4W_LOW_KE_4WD_STUCK_OFF_PASS_TIME");
	MakeWord	(0X1DED2);
	MakeName	(0X1DED2,	"XDTP_4W_LOW_KE_4WD_STUCK_ON_FAIL_TIME");
	MakeWord	(0X1DED4);
	MakeName	(0X1DED4,	"XDTP_4W_LOW_KE_4WD_STUCK_ON_PASS_TIME");
	MakeWord	(0X1DED6);
	MakeName	(0X1DED6,	"XDTP_4W_LOW_KE_4WD_LO_FAIL_STCK_OFF_SLIP_LO");
	MakeWord	(0X1DED8);
	MakeName	(0X1DED8,	"XDTP_4W_LOW_KE_4WD_LO_FAIL_STCK_OFF_SLIP_HI");
	MakeWord	(0X1DEDA);
	MakeName	(0X1DEDA,	"XDTP_4W_LOW_KE_4WD_LO_FAIL_STCK_ON_SLIP_LO");
	MakeWord	(0X1DEDC);
	MakeName	(0X1DEDC,	"XDTP_4W_LOW_KE_4WD_LO_FAIL_STCK_ON_SLIP_HI");
	MakeWord	(0X1DEDE);
	MakeName	(0X1DEDE,	"XDTP_4W_LOW_KE_4WD_LO_PASS_STCK_OFF_SLIP_LO");
	MakeWord	(0X1DEE0);
	MakeName	(0X1DEE0,	"XDTP_4W_LOW_KE_4WD_LO_PASS_STCK_OFF_SLIP_HI");
	MakeWord	(0X1DEE2);
	MakeName	(0X1DEE2,	"XDTP_4W_LOW_KE_4WD_LO_PASS_STCK_ON_SLIP_LO");
	MakeWord	(0X1DEE4);
	MakeName	(0X1DEE4,	"XDTP_4W_LOW_KE_4WD_LO_PASS_STCK_ON_SLIP_HI");
	MakeRptCmt	(0X1DEE6,	"Time limit above which shift time is considered long\nSeconds");
	MakeName	(0X1DEE6,	"XDTP_SHIFT_TIME_KV_SHIFT_TIME_LONG_DIAG_LIMIT");
	MakeByte	(0X1DEEB);
	MakeRptCmt	(0X1DEEC,	"Limit for number of long transmission upshifts with adapts at the max limit. When the limit is reached, the diagnostic is set\nCounts");
	MakeName	(0X1DEEC,	"XDTP_SHIFT_TIME_KV_LONG_SHIFT_AT_MAX_ADAPT_LIMIT");
	MakeRptCmt	(0X1DEF0,	"TCC Slip must be in a calibratable range for this long before 1st fault can be set in trans comp slip test.\nSeconds");
	MakeWord	(0X1DEF0);
	MakeName	(0X1DEF0,	"XDTP_SLIP_COMPONENT_KE_SLIP_COMP_EXTENDED_TIME_1");
	MakeRptCmt	(0X1DEF2,	"TCC Slip must be in a calibratable range for this long before 2nd fault can be set in trans comp slip test.\nSeconds");
	MakeWord	(0X1DEF2);
	MakeName	(0X1DEF2,	"XDTP_SLIP_COMPONENT_KE_SLIP_COMP_EXTENDED_TIME_2");
	MakeRptCmt	(0X1DEF4,	"TCC Slip must be in a calibratable range for this long before fault can be set in trans comp slip test.\nSeconds");
	MakeWord	(0X1DEF4);
	MakeName	(0X1DEF4,	"XDTP_SLIP_COMPONENT_KE_SLIP_COMP_EXTENDED_TIME_3");
	MakeRptCmt	(0X1DEF6,	"Low threshold for TCC slip fail band in condition 1, fail case 2, trans comp slip test.\nRPM");
	MakeWord	(0X1DEF6);
	MakeName	(0X1DEF6,	"XDTP_SLIP_COMPONENT_KE_SLIP_COMP_FAIL_LOW_LIMIT_1");
	MakeRptCmt	(0X1DEF8,	"Low threshold for TCC slip fail band in condition 2, fail case 2, trans comp slip test.\nRPM");
	MakeWord	(0X1DEF8);
	MakeName	(0X1DEF8,	"XDTP_SLIP_COMPONENT_KE_SLIP_COMP_FAIL_LOW_LIMIT_2");
	MakeRptCmt	(0X1DEFA,	"Low threshold for TCC slip fail band in condition 3, fail case 2, trans comp slip test.\nRPM");
	MakeWord	(0X1DEFA);
	MakeName	(0X1DEFA,	"XDTP_SLIP_COMPONENT_KE_SLIP_COMP_FAIL_LOW_LIMIT_3");
	MakeRptCmt	(0X1DEFC,	"High threshold for TCC slip fail band in condition 1, fail case2, trans comp slip test.\nRPM");
	MakeWord	(0X1DEFC);
	MakeName	(0X1DEFC,	"XDTP_SLIP_COMPONENT_KE_SLIP_COMP_FAIL_HIGH_LIMIT_1");
	MakeRptCmt	(0X1DEFE,	"High threshold for TCC slip fail band in condition 2, fail case2, trans comp slip test.\nRPM");
	MakeWord	(0X1DEFE);
	MakeName	(0X1DEFE,	"XDTP_SLIP_COMPONENT_KE_SLIP_COMP_FAIL_HIGH_LIMIT_2");
	MakeRptCmt	(0X1DF00,	"High threshold for TCC slip fail band in condition 3, fail case2, trans comp slip test.\nRPM");
	MakeWord	(0X1DF00);
	MakeName	(0X1DF00,	"XDTP_SLIP_COMPONENT_KE_SLIP_COMP_FAIL_HIGH_LIMIT_3");
	MakeRptCmt	(0X1DF02,	"The lower limit of throttle position for enabling fail case 2 in the Trans Slip Comp test.\n%");
	MakeWord	(0X1DF02);
	MakeName	(0X1DF02,	"XDTP_SLIP_COMPONENT_KE_SLIP_COMP_FC2_THROTTLE_LOW");
	MakeRptCmt	(0X1DF04,	"The upper limit of throttle position for enabling fail case 2 in the Trans Slip Comp test.\n%");
	MakeWord	(0X1DF04);
	MakeName	(0X1DF04,	"XDTP_SLIP_COMPONENT_KE_SLIP_COMP_FC2_THROTTLE_HIGH");
	MakeRptCmt	(0X1DF06,	"Enables fail case 2 in Trans Comp Slip test.\nT/F");
	MakeByte	(0X1DF06);
	MakeName	(0X1DF06,	"XDTP_SLIP_COMPONENT_KE_SLIP_COMP_FC2_ENABLE");
	MakeRptCmt	(0X1DF08,	"Amount of time TCC must be turned off due to TCC slipping detected in Trans Comp Slip test, fail case 2, cond 2.\nSeconds");
	MakeWord	(0X1DF08);
	MakeName	(0X1DF08,	"XDTP_SLIP_COMPONENT_KE_COMP_SLIP_TCC_TURN_OFF_TIME");
	MakeRptCmt	(0X1DF0A,	"Transmission component slipping fail case counter.\nCounts");
	MakeByte	(0X1DF0A);
	MakeName	(0X1DF0A,	"XDTP_SLIP_COMPONENT_KE_TRANS_COMP_SLIP_MAX_COUNT");
	MakeRptCmt	(0X1DF0C,	"Amount of time TCC must be commanded on before the transmission component slipping test is run.\nSeconds");
	MakeWord	(0X1DF0C);
	MakeName	(0X1DF0C,	"XDTP_SLIP_COMPONENT_KE_SLIPPING_COMP_TCC_ON_TIME");
	MakeRptCmt	(0X1DF0E,	"Amount of time which slip must be above threshold to set the malfunction\nSeconds");
	MakeWord	(0X1DF0E);
	MakeName	(0X1DF0E,	"XDTP_SLIP_COMPONENT_KE_SLIPPING_COMPONENT_DIAG_TIME");
	MakeRptCmt	(0X1DF10,	"Maximum throttle position for enabling the Transmission Slipping Component test.\nPercent");
	MakeWord	(0X1DF10);
	MakeName	(0X1DF10,	"XDTP_SLIP_COMPONENT_KE_SLIPPING_COMP_THROTTLE_HIGH");
	MakeRptCmt	(0X1DF12,	"Minimum throttle position for enabling the Transmission Slipping Component test.\nPercent");
	MakeWord	(0X1DF12);
	MakeName	(0X1DF12,	"XDTP_SLIP_COMPONENT_KE_SLIPPING_COMP_THROTTLE_LOW");
	MakeRptCmt	(0X1DF14,	"Maximum transmission temperature for enabling the Transmission Slipping Component tests.\nDegrees_C");
	MakeWord	(0X1DF14);
	MakeName	(0X1DF14,	"XDTP_SLIP_COMPONENT_KE_SLIPPING_COMP_TRANS_TEMP_HIGH");
	MakeRptCmt	(0X1DF16,	"Minimum transmission temperature for enabling the Transmission Slipping Component tests.\nDegrees_C");
	MakeWord	(0X1DF16);
	MakeName	(0X1DF16,	"XDTP_SLIP_COMPONENT_KE_SLIPPING_COMP_TRANS_TEMP_LOW");
	MakeRptCmt	(0X1DF18,	"Upper engine torque bound for transmission component slipping diagnostic test to be enabled.\nFoot Lbs");
	MakeWord	(0X1DF18);
	MakeName	(0X1DF18,	"XDTP_SLIP_COMPONENT_KE_TRANS_SLIP_COMP_ENG_TRQ_LOW");
	MakeRptCmt	(0X1DF1A,	"Lower engine torque bound for transmission component slipping diagnostic test to be enabled.\nFoot Lbs");
	MakeWord	(0X1DF1A);
	MakeName	(0X1DF1A,	"XDTP_SLIP_COMPONENT_KE_TRANS_SLIP_COMP_ENG_TRQ_HIGH");
	MakeRptCmt	(0X1DF1C,	"Upper bound of engine vacuum constraint.\nkPa");
	MakeByte	(0X1DF1C);
	MakeName	(0X1DF1C,	"XDTP_SLIP_COMPONENT_KE_TRANS_SLIP_COMP_ENG_VAC_LOW");
	MakeRptCmt	(0X1DF1D,	"Lower bound of engine vacuum constraint.\nkPa");
	MakeByte	(0X1DF1D);
	MakeName	(0X1DF1D,	"XDTP_SLIP_COMPONENT_KE_TRANS_SLIP_COMP_ENG_VAC_HIGH");
	MakeRptCmt	(0X1DF1E,	"Maximum throttle position for enabling the TCC stuck off test.\nPercent");
	MakeWord	(0X1DF1E);
	MakeName	(0X1DF1E,	"XDTP_SLIP_COMPONENT_KE_TCC_OFF_THROTTLE_HIGH");
	MakeRptCmt	(0X1DF20,	"Minimum throttle position for enabling the TCC stuck off test.\nPercent");
	MakeWord	(0X1DF20);
	MakeName	(0X1DF20,	"XDTP_SLIP_COMPONENT_KE_TCC_OFF_THROTTLE_LOW");
	MakeRptCmt	(0X1DF22,	"Maximum transmission temperature for enabling the TCC Stuck Off tests.\nDegrees_C");
	MakeWord	(0X1DF22);
	MakeName	(0X1DF22,	"XDTP_SLIP_COMPONENT_KE_TCC_OFF_TRANS_TEMP_HIGH");
	MakeRptCmt	(0X1DF24,	"Minimum transmission temperature for enabling the TCC Stuck Off tests.\nDegrees_C");
	MakeWord	(0X1DF24);
	MakeName	(0X1DF24,	"XDTP_SLIP_COMPONENT_KE_TCC_OFF_TRANS_TEMP_LOW");
	MakeRptCmt	(0X1DF26,	"Above this value the TCC Stuck Off malfunction may be set\nRPM");
	MakeWord	(0X1DF26);
	MakeName	(0X1DF26,	"XDTP_SLIP_COMPONENT_KE_TCC_OFF_FAIL_SLIP_LIMIT");
	MakeRptCmt	(0X1DF28,	"Above this value the TCC Stuck Off malfunction may be cleared\nRPM");
	MakeWord	(0X1DF28);
	MakeName	(0X1DF28,	"XDTP_SLIP_COMPONENT_KE_TCC_OFF_PASS_SLIP_LIMIT");
	MakeRptCmt	(0X1DF2A,	"Amount of time slip must be above threshold to clear the malfunction\nSeconds");
	MakeWord	(0X1DF2A);
	MakeName	(0X1DF2A,	"XDTP_SLIP_COMPONENT_KE_TCC_OFF_FAIL_DIAG_TIME");
	MakeRptCmt	(0X1DF2C,	"Amount of time slip must be above threshold to clear the malfunction\nSeconds");
	MakeWord	(0X1DF2C);
	MakeName	(0X1DF2C,	"XDTP_SLIP_COMPONENT_KE_TCC_OFF_PASS_DIAG_TIME");
	MakeRptCmt	(0X1DF2E,	"High threshold for TCC slip failband\nRPM");
	MakeWord	(0X1DF2E);
	MakeName	(0X1DF2E,	"XDTP_SLIP_COMPONENT_KE_SLIP_COMP_FAIL_HIGH_LIMIT");
	MakeRptCmt	(0X1DF30,	"Low threshold for TCC slip failband\nRPM");
	MakeWord	(0X1DF30);
	MakeName	(0X1DF30,	"XDTP_SLIP_COMPONENT_KE_SLIP_COMP_FAIL_LOW_LIMIT");
	MakeRptCmt	(0X1DF32,	"High threshold for TCC slip pass.\nRPM");
	MakeWord	(0X1DF32);
	MakeName	(0X1DF32,	"XDTP_SLIP_COMPONENT_KE_SLIP_COMP_PASS_HIGH_LIMIT");
	MakeRptCmt	(0X1DF34,	"Low threshold for TCC slip pass.\nRPM");
	MakeWord	(0X1DF34);
	MakeName	(0X1DF34,	"XDTP_SLIP_COMPONENT_KE_SLIP_COMP_PASS_LOW_LIMIT");
	MakeRptCmt	(0X1DF36,	"Time TCC must be commanded at fullat full duty cycle before fail test enables.\nSeconds");
	MakeWord	(0X1DF36);
	MakeName	(0X1DF36,	"XDTP_SLIP_COMPONENT_KE_SLIP_COMP_FULL_LOCK_TIME");
	MakeRptCmt	(0X1DF38,	"Higher Ratio bound for 2nd gear in the TCCstuck off diagnostic test.\nRatio_Type");
	MakeWord	(0X1DF38);
	MakeName	(0X1DF38,	"XDTP_SLIP_COMPONENT_KE_2_TCC_STUCK_OFF_RATIO_HIGH");
	MakeRptCmt	(0X1DF3A,	"Lower Ratio bound for 2nd gear in the TCCstuck off diagnostic test.\nRatio_Type");
	MakeWord	(0X1DF3A);
	MakeName	(0X1DF3A,	"XDTP_SLIP_COMPONENT_KE_2_TCC_STUCK_OFF_RATIO_LOW");
	MakeRptCmt	(0X1DF3C,	"Higher Ratio bound for 3rd gear in the TCCstuck off diagnostic test.\nRatio_Type");
	MakeWord	(0X1DF3C);
	MakeName	(0X1DF3C,	"XDTP_SLIP_COMPONENT_KE_3_TCC_STUCK_OFF_RATIO_HIGH");
	MakeRptCmt	(0X1DF3E,	"Lower Ratio bound for 3rd gear in the TCCstuck off diagnostic test.\nRatio_Type");
	MakeWord	(0X1DF3E);
	MakeName	(0X1DF3E,	"XDTP_SLIP_COMPONENT_KE_3_TCC_STUCK_OFF_RATIO_LOW");
	MakeRptCmt	(0X1DF40,	"Higher Ratio bound for 4th gear in the TCCstuck off diagnostic test.\nRatio_Type");
	MakeWord	(0X1DF40);
	MakeName	(0X1DF40,	"XDTP_SLIP_COMPONENT_KE_4_TCC_STUCK_OFF_RATIO_HIGH");
	MakeRptCmt	(0X1DF42,	"Lower Ratio bound for 4th gear in the TCCstuck off diagnostic test.\nRatio_Type");
	MakeWord	(0X1DF42);
	MakeName	(0X1DF42,	"XDTP_SLIP_COMPONENT_KE_4_TCC_STUCK_OFF_RATIO_LOW");
	MakeRptCmt	(0X1DF44,	"Amount of time TCCmust be in locked mode before TCC Stuck OffDiagnostic Test is run.\nSeconds");
	MakeWord	(0X1DF44);
	MakeName	(0X1DF44,	"XDTP_SLIP_COMPONENT_KE_TCC_LOCKED_OFF_TIME");
	MakeRptCmt	(0X1DF46,	"Fail counter for TCC_Stuck_Off.\nCounts");
	MakeByte	(0X1DF46);
	MakeName	(0X1DF46,	"XDTP_SLIP_COMPONENT_KE_TCC_STUCK_OFF_MAX_COUNT");
	MakeRptCmt	(0X1DF48,	"Vehicle speed must be less than this to enable torque converter overstress diagnostic.\nMPH");
	MakeWord	(0X1DF48);
	MakeName	(0X1DF48,	"XDTP_SLIP_COMPONENT_KE_TORQUE_CONV_STRESS_MPH");
	MakeRptCmt	(0X1DF4A,	"Throttle must be greater than this to fail the torque converter overstress diagnostic.\nPercent");
	MakeWord	(0X1DF4A);
	MakeName	(0X1DF4A,	"XDTP_SLIP_COMPONENT_KE_TORQUE_CONV_STRESS_THR_HIGH");
	MakeRptCmt	(0X1DF4C,	"Slip must be greater than this to fail the torque converter overstress diagnostic.\nRPM");
	MakeWord	(0X1DF4C);
	MakeName	(0X1DF4C,	"XDTP_SLIP_COMPONENT_KE_TORQUE_CONV_STRESS_SLIP_HIGH");
	MakeRptCmt	(0X1DF4E,	"Amount of time the torque converter overstress fail conditions must be met before the diagnostic Fails.\nSeconds");
	MakeWord	(0X1DF4E);
	MakeName	(0X1DF4E,	"XDTP_SLIP_COMPONENT_KE_TORQUE_CONV_STRESS_FAIL_TIME");
	MakeRptCmt	(0X1DF50,	"Throttle must be less than this to pass the torque converter overstress diagnostic.\nPercent");
	MakeWord	(0X1DF50);
	MakeName	(0X1DF50,	"XDTP_SLIP_COMPONENT_KE_TORQUE_CONV_STRESS_THR_LOW");
	MakeRptCmt	(0X1DF52,	"Slip must be less than this to pass the torque converter overstress diagnostic.\nRPM");
	MakeWord	(0X1DF52);
	MakeName	(0X1DF52,	"XDTP_SLIP_COMPONENT_KE_TORQUE_CONV_STRESS_SLIP_LOW");
	MakeRptCmt	(0X1DF54,	"Amount of time the torque converter overstress pass conditions must be met before the diagnostic Passes.\nSeconds");
	MakeWord	(0X1DF54);
	MakeName	(0X1DF54,	"XDTP_SLIP_COMPONENT_KE_TORQUE_CONV_STRESS_PASS_TIME");
	MakeRptCmt	(0X1DF56,	"Amount of time since the last change in transmission range status before the TCC Stuck Off diagnostic can be enabled.\nSeconds");
	MakeWord	(0X1DF56);
	MakeName	(0X1DF56,	"XDTP_SLIP_COMPONENT_KE_TCC_OFF_LAST_RANGE_CHNG_TIME");
	MakeRptCmt	(0X1DF58,	"Enable criterion for the diagnostic  Note: Drive_3 exclusively for the 3T40-E trans.\nPRNDL_Type");
	MakeByte	(0X1DF58);
	MakeName	(0X1DF58,	"XDTP_SLIP_COMPONENT_KE_TRANS_SLIP_COMP_DRIVE_RANGE");
	MakeRptCmt	(0X1DF5A,	"Low limit for the engine speed to enable diagnostic\nRPM");
	MakeWord	(0X1DF5A);
	MakeName	(0X1DF5A,	"XDTP_SLIP_COMPONENT_KE_TRANS_SLIP_COMP_ENG_SPD_LOW");
	MakeRptCmt	(0X1DF5C,	"High limit for the engine speed to enable diagnostic\nRPM");
	MakeWord	(0X1DF5C);
	MakeName	(0X1DF5C,	"XDTP_SLIP_COMPONENT_KE_TRANS_SLIP_COMP_ENG_SPD_HIGH");
	MakeRptCmt	(0X1DF5E,	"Low limit for the speed ratio to enable diagnostic\nRatio");
	MakeWord	(0X1DF5E);
	MakeName	(0X1DF5E,	"XDTP_SLIP_COMPONENT_KE_TRANS_SLIP_CMP_SPD_RATIO_LOW");
	MakeRptCmt	(0X1DF60,	"High limit for the speed ratio to enable diagnostic\nRatio");
	MakeWord	(0X1DF60);
	MakeName	(0X1DF60,	"XDTP_SLIP_COMPONENT_KE_TRANS_SLIP_CMP_SPD_RATIO_HIGH");
	MakeRptCmt	(0X1DF62,	"Low limit for the Vehicle speed to enable diagnostic\nMPH");
	MakeWord	(0X1DF62);
	MakeName	(0X1DF62,	"XDTP_SLIP_COMPONENT_KE_TRANS_SLIP_COMP_VEH_SPD_LOW");
	MakeRptCmt	(0X1DF64,	"High limit for the Vehicle speed to enable diagnostic\nMPH");
	MakeWord	(0X1DF64);
	MakeName	(0X1DF64,	"XDTP_SLIP_COMPONENT_KE_TRANS_SLIP_COMP_VEH_SPD_HIGH");
	MakeWord	(0X1DF66);
	MakeName	(0X1DF66,	"XDTP_SLIP_COMPONENT_KE_TCC_LOCKED_CAPACITY");
	MakeRptCmt	(0X1DF68,	"TCC stuck on low limit, above this value malfucntion will be set\nRPM_S");
	MakeWord	(0X1DF68);
	MakeName	(0X1DF68,	"XDTP_TCC_SLIP_KE_TCC_STUCK_ON_FAIL_LOW_SLIP");
	MakeRptCmt	(0X1DF6A,	"TCC stuck on high limit, below this value malfucntion will be set\nRPM_S");
	MakeWord	(0X1DF6A);
	MakeName	(0X1DF6A,	"XDTP_TCC_SLIP_KE_TCC_STUCK_ON_FAIL_HIGH_SLIP");
	MakeRptCmt	(0X1DF6C,	"TCC stuck on low limit, above this value malfucntion will be cleared\nRPM_S");
	MakeWord	(0X1DF6C);
	MakeName	(0X1DF6C,	"XDTP_TCC_SLIP_KE_TCC_STUCK_ON_PASS_LOW_SLIP");
	MakeRptCmt	(0X1DF6E,	"TCC stuck on high limit, below this value malfucntion will be cleared\nRPM_S");
	MakeWord	(0X1DF6E);
	MakeName	(0X1DF6E,	"XDTP_TCC_SLIP_KE_TCC_STUCK_ON_PASS_HIGH_SLIP");
	MakeRptCmt	(0X1DF70,	"TCC Stuck On diagnostic will not execute if torque below this level\nFtLB");
	MakeWord	(0X1DF70);
	MakeName	(0X1DF70,	"XDTP_TCC_SLIP_KE_TCC_STUCK_ON_ETORQUE_LOW");
	MakeRptCmt	(0X1DF72,	"TCC Stuck On diagnostic will not execute if torque above this level\nFtLB");
	MakeWord	(0X1DF72);
	MakeName	(0X1DF72,	"XDTP_TCC_SLIP_KE_TCC_STUCK_ON_ETORQUE_HIGH");
	MakeRptCmt	(0X1DF74,	"In order to execute the TCC stuck on diagnostic, engine vac < this cal\nKpa");
	MakeByte	(0X1DF74);
	MakeName	(0X1DF74,	"XDTP_TCC_SLIP_KE_TCC_STUCK_ON_VAC_HIGH_THRESH");
	MakeRptCmt	(0X1DF75,	"In order to execute the TCC stuck on diagnostic, engine vac > this cal\nKpa");
	MakeByte	(0X1DF75);
	MakeName	(0X1DF75,	"XDTP_TCC_SLIP_KE_TCC_STUCK_ON_VAC_LOW_THRESH");
	MakeRptCmt	(0X1DF76,	"Amount of time TCC slip must be between thresholds in order to set malfunction\nSeconds");
	MakeWord	(0X1DF76);
	MakeName	(0X1DF76,	"XDTP_TCC_SLIP_KE_TCC_STUCK_ON_FAIL_TIME");
	MakeRptCmt	(0X1DF78,	"Amount of time TCC slip must be between thresholds in order to clear malfunction\nSeconds");
	MakeWord	(0X1DF78);
	MakeName	(0X1DF78,	"XDTP_TCC_SLIP_KE_TCC_STUCK_ON_PASS_TIME");
	MakeRptCmt	(0X1DF7A,	"Maximum throttle position for enabling the TCC stuck on diagnostic\nPercent");
	MakeWord	(0X1DF7A);
	MakeName	(0X1DF7A,	"XDTP_TCC_SLIP_KE_TCC_STUCK_ON_THROTTLE_HIGH");
	MakeRptCmt	(0X1DF7C,	"Minimum throttle position for enabling the TCC stuck on diagnostic\nPercent");
	MakeWord	(0X1DF7C);
	MakeName	(0X1DF7C,	"XDTP_TCC_SLIP_KE_TCC_STUCK_ON_THROTTLE_LOW");
	MakeRptCmt	(0X1DF7E,	"Number of times fail condition must occur in order for the test to report a failure\nSHORTCARD");
	MakeByte	(0X1DF7E);
	MakeName	(0X1DF7E,	"XDTP_TCC_SLIP_KE_TCC_STUCK_ON_FAIL_COUNTER");
	MakeRptCmt	(0X1DF80,	"Amount of time since the last change in in transmission range status before the TCCStuck On diagnostic can be enabled\nSeconds");
	MakeWord	(0X1DF80);
	MakeName	(0X1DF80,	"XDTP_TCC_SLIP_KE_TCC_ON_LAST_RANGE_CHNG_TIME");
	MakeRptCmt	(0X1DF82,	"Disable TCC Stuck On with release switch diagnostic if transmission temperature is above this.\nDegrees_C");
	MakeByte	(0X1DF82);
	MakeName	(0X1DF82,	"XDTP_TCC_SLIP_KE_TCC_SYST_PERF_STU_ON_TEMP_HI");
	MakeRptCmt	(0X1DF83,	"Disable TCC Stuck On with release switch diagnostic if transmission temperature is below this.\nDegrees_C");
	MakeByte	(0X1DF83);
	MakeName	(0X1DF83,	"XDTP_TCC_SLIP_KE_TCC_SYST_PERF_STU_ON_TEMP_LO");
	MakeRptCmt	(0X1DF84,	"The amount of time that the TCC_Release_Switchindicates TCC release oil is not presentin order to fail\nSeconds");
	MakeWord	(0X1DF84);
	MakeName	(0X1DF84,	"XDTP_TCC_SLIP_KE_TCC_ON_REL_SWITCH_TIME_FAIL");
	MakeRptCmt	(0X1DF86,	"The amount of time that the TCC ReleaseSwitch indicates TCC Release oil is presentin order to pass\nSeconds");
	MakeWord	(0X1DF86);
	MakeName	(0X1DF86,	"XDTP_TCC_SLIP_KE_TCC_ON_REL_SWITCH_TIME_PASS");
	MakeRptCmt	(0X1DF88,	"High threshold throttle position for TCC Systemstuck on with release switch diagnostic test\nPercent");
	MakeWord	(0X1DF88);
	MakeName	(0X1DF88,	"XDTP_TCC_SLIP_KE_TCC_ON_W_REL_THROTTLE_HIGH");
	MakeRptCmt	(0X1DF8A,	"Low threshold throttle position for TCC Systemstuck on with release switch diagnostic test\nPercent");
	MakeWord	(0X1DF8A);
	MakeName	(0X1DF8A,	"XDTP_TCC_SLIP_KE_TCC_ON_W_REL_THROTTLE_LOW");
	MakeRptCmt	(0X1DF8C,	"Enable criterion for the diagnostic  Note: Drive_3 exclusively for the 3T40-E trans.\nPRNDL_Type");
	MakeByte	(0X1DF8C);
	MakeName	(0X1DF8C,	"XDTP_TCC_SLIP_KE_TCC_STUCK_ON_DRIVE_RANGE");
	MakeRptCmt	(0X1DF8E,	"High limit for the engine speed to enable diagnostic\nRPM");
	MakeWord	(0X1DF8E);
	MakeName	(0X1DF8E,	"XDTP_TCC_SLIP_KE_TCC_STUCK_ON_ENG_SPD_HIGH");
	MakeRptCmt	(0X1DF90,	"Low limit for the engine speed to enable diagnostic\nRPM");
	MakeWord	(0X1DF90);
	MakeName	(0X1DF90,	"XDTP_TCC_SLIP_KE_TCC_STUCK_ON_ENG_SPD_LOW");
	MakeRptCmt	(0X1DF92,	"High limit for the speed ratio to enable diagnostic\nRatio");
	MakeWord	(0X1DF92);
	MakeName	(0X1DF92,	"XDTP_TCC_SLIP_KE_TCC_STUCK_ON_SPD_RATIO_HIGH");
	MakeRptCmt	(0X1DF94,	"Low limit for the speed ratio to enable diagnostic\nRatio");
	MakeWord	(0X1DF94);
	MakeName	(0X1DF94,	"XDTP_TCC_SLIP_KE_TCC_STUCK_ON_SPD_RATIO_LOW");
	MakeRptCmt	(0X1DF96,	"High limit for the Vehicle speed to enable diagnostic\nMPH");
	MakeWord	(0X1DF96);
	MakeName	(0X1DF96,	"XDTP_TCC_SLIP_KE_TCC_STUCK_ON_VEH_SPD_HIGH");
	MakeRptCmt	(0X1DF98,	"Low limit for the Vehicle speed to enable diagnostic\nMPH");
	MakeWord	(0X1DF98);
	MakeName	(0X1DF98,	"XDTP_TCC_SLIP_KE_TCC_STUCK_ON_VEH_SPD_LOW");
	MakeRptCmt	(0X1DF9A,	"Degrees Ctemperature threshold above which the transmission over temperature fault may occur\nDegrees_C");
	MakeWord	(0X1DF9A);
	MakeName	(0X1DF9A,	"XDTP_TEMP_KE_TRANS_OVER_TEMPERATURE_HIGH");
	MakeRptCmt	(0X1DF9C,	"Degrees Ctemperature threshold below which the transmission over temperature fault isreset\nDegrees_C");
	MakeWord	(0X1DF9C);
	MakeName	(0X1DF9C,	"XDTP_TEMP_KE_TRANS_OVER_TEMPERATURE_LOW");
	MakeRptCmt	(0X1DF9E,	"Amountof time which transmission temperature must be above the high thresholds before a fault is set\nSeconds");
	MakeDword	(x=0X1DF9E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X1DF9E,	"XDTP_TEMP_KE_TRANS_OVER_TEMP_FAIL_TIME");
	MakeRptCmt	(0X1DFA2,	"Amountof time which transmission temperature must be below the low thresholds before a fault is cleared\nSeconds");
	MakeWord	(0X1DFA2);
	MakeName	(0X1DFA2,	"XDTP_TEMP_KE_TRANS_OVER_TEMP_PASS_TIME");
	MakeRptCmt	(0X1DFA4,	"Maximumstart up transmission fluid temperaturethreshold to enable fail case of thetransmission temperature performance test\nDegrees C");
	MakeWord	(0X1DFA4);
	MakeName	(0X1DFA4,	"XDTP_TEMP_KE_TEMP_AT_START_UP_HIGH_THRESH");
	MakeRptCmt	(0X1DFA6,	"Minimumstart up transmission fluid temperaturethreshold to enable fail case of thetransmission temperature performance test\nDegrees C");
	MakeWord	(0X1DFA6);
	MakeName	(0X1DFA6,	"XDTP_TEMP_KE_TEMP_AT_START_UP_LOW_THRESH");
	MakeByte	(0X1DFA8);
	MakeName	(0X1DFA8,	"XDTP_TEMP_KE_TEMP_PERF_COOLANT_DELTA");
	MakeRptCmt	(0X1DFA9,	"Minimum enginecoolant temperature threshold to enable failcase of the transmission temperatureperformance diagnostic test\nDegrees C");
	MakeByte	(0X1DFA9);
	MakeName	(0X1DFA9,	"XDTP_TEMP_KE_TEMP_PERF_COOLANT_THRESH");
	MakeRptCmt	(0X1DFAA,	"The minimumamount of time engine must be running toenable fail case of the transmissiontemperature performance diagnostic test\nSeconds");
	MakeDword	(x=0X1DFAA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X1DFAA,	"XDTP_TEMP_KE_TEMP_PERF_ENGINE_RUN_TIME");
	MakeRptCmt	(0X1DFAE,	"Minimumoutput speed threshold to enable fail caseof the transmission temperature performancediagnostic test\nMPH");
	MakeWord	(0X1DFAE);
	MakeName	(0X1DFAE,	"XDTP_TEMP_KE_TEMP_PERF_MPH_OUTPUT_SPD_THRE");
	MakeDword	(x=0X1DFB0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X1DFB0,	"XDTP_TEMP_KE_TEMP_PERF_MPH_OUTPUT_SPD_TIME");
	MakeRptCmt	(0X1DFB4,	"Minimum slipthreshold to enable fail case of thetransmission temperature performancediagnostic test\nRPM_S");
	MakeWord	(0X1DFB4);
	MakeName	(0X1DFB4,	"XDTP_TEMP_KE_TEMP_PERF_SLIP_THRESH");
	MakeDword	(x=0X1DFB6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X1DFB6,	"XDTP_TEMP_KE_TEMP_PERF_SLIP_TIME");
	MakeRptCmt	(0X1DFBA,	"The maximumtransmission temperature A/D counts to enablethe transmission temperature diagnostictest\nA/D Counts");
	MakeByte	(0X1DFBA);
	MakeName	(0X1DFBA,	"XDTP_TEMP_KE_TRANS_TEMP_AD_COUNTS_HIGH");
	MakeRptCmt	(0X1DFBB,	"The minimumtransmission temperature A/D counts to enablethe transmission temperature diagnostictest\nA/D Counts");
	MakeByte	(0X1DFBB);
	MakeName	(0X1DFBB,	"XDTP_TEMP_KE_TRANS_TEMP_AD_COUNTS_LOW");
	MakeRptCmt	(0X1DFBC,	"Minimummabsolute delta transmission fluid temperaturefor fail case 1 of the transmissiontemperature performance diagnostic\nDegrees C");
	MakeByte	(0X1DFBC);
	MakeName	(0X1DFBC,	"XDTP_TEMP_KE_TRANS_TEMP_FAIL_1_DELTA_THRES");
	MakeWord	(0X1DFBE);
	MakeName	(0X1DFBE,	"XDTP_TEMP_KE_TRANS_TEMP_FAIL_1_DIAG_TIME");
	MakeByte	(0X1DFC0);
	MakeName	(0X1DFC0,	"XDTP_TEMP_KE_TRANS_TEMP_FAIL_2_COUNT");
	MakeRptCmt	(0X1DFC1,	"Minimummabsolute delta transmission fluid temperaturefor fail case 2 of the transmissiontemperature performance diagnostic\nDegrees C");
	MakeByte	(0X1DFC1);
	MakeName	(0X1DFC1,	"XDTP_TEMP_KE_TRANS_TEMP_FAIL_2_DELTA_THRES");
	MakeWord	(0X1DFC2);
	MakeName	(0X1DFC2,	"XDTP_TEMP_KE_TRANS_TEMP_FAIL_2_DIAG_TIME");
	MakeRptCmt	(0X1DFC4,	"Minimummabsolute delta transmission fluid temperaturefor pass case 1 of the transmissiontemperature performance diagnostic\nDegrees C");
	MakeByte	(0X1DFC4);
	MakeName	(0X1DFC4,	"XDTP_TEMP_KE_TRANS_TEMP_PASS_1_DELTA_THRES");
	MakeWord	(0X1DFC6);
	MakeName	(0X1DFC6,	"XDTP_TEMP_KE_TRANS_TEMP_PASS_1_DIAG_TIME");
	MakeWord	(0X1DFC8);
	MakeName	(0X1DFC8,	"XDTP_TEMP_KE_DIAG_SYS_VOLT_FAULT_TIME");
	MakeRptCmt	(0X1DFCA,	"Low  Throttle limit for Gear Ratio test enable.\nThrottle");
	MakeWord	(0X1DFCA);
	MakeName	(0X1DFCA,	"XDTP_TRANS_RATIO_KE_RATIO_DIAG_THROTTLE_THRESH");
	MakeRptCmt	(0X1DFCC,	"Low MPH limit for Gear Ratio test enable.\nMPH");
	MakeWord	(0X1DFCC);
	MakeName	(0X1DFCC,	"XDTP_TRANS_RATIO_KE_RATIO_DIAG_OUT_SPD_THRESH");
	MakeRptCmt	(0X1DFCE,	"Low Degrees C limit for Gear Ratio test enable.\nDeg_C");
	MakeName	(0X1DFCE,	"XDTP_TRANS_RATIO_KE_LOW_RATIO_TRAN_TEMP_THRESH");
	MakeRptCmt	(0X1DFD0,	"Amount of time ratio is outside of the thresholds in order to set malfunction\nSeconds");
	MakeWord	(0X1DFD0);
	MakeName	(0X1DFD0,	"XDTP_TRANS_RATIO_KE_UNKNOWN_RATIO_DIAG_TIME");
	MakeRptCmt	(0X1DFD2,	"High limit for 1st gear ratio used in determining if the ratio is unknown\nGear Ratio");
	MakeWord	(0X1DFD2);
	MakeName	(0X1DFD2,	"XDTP_TRANS_RATIO_KE_UNKNOWN_RATIO_1ST_GEAR_HIGH");
	MakeRptCmt	(0X1DFD4,	"Low limit for 1st gear ratio used in determining if the ratio is unknown\nGear Ratio");
	MakeWord	(0X1DFD4);
	MakeName	(0X1DFD4,	"XDTP_TRANS_RATIO_KE_UNKNOWN_RATIO_1ST_GEAR_LOW");
	MakeRptCmt	(0X1DFD6,	"High limit for reverse gear ratio used in determining if the ratio is unknown\nGear Ratio");
	MakeWord	(0X1DFD6);
	MakeName	(0X1DFD6,	"XDTP_TRANS_RATIO_KE_UNKNOWN_RATIO_REV_GEAR_HIGH");
	MakeRptCmt	(0X1DFD8,	"Low limit for reverse gear ratio used in determining if the ratio is unknown\nGear Ratio");
	MakeWord	(0X1DFD8);
	MakeName	(0X1DFD8,	"XDTP_TRANS_RATIO_KE_UNKNOWN_RATIO_REV_GEAR_LOW");
	MakeRptCmt	(0X1DFDA,	"High limit for 2nd gear ratio used in determining if the ratio is unknown\nGear Ratio");
	MakeWord	(0X1DFDA);
	MakeName	(0X1DFDA,	"XDTP_TRANS_RATIO_KE_UNKNOWN_RATIO_2ND_GEAR_HIGH");
	MakeRptCmt	(0X1DFDC,	"Low limit for 2nd gear ratio used in determining if the ratio is unknown\nGear Ratio");
	MakeWord	(0X1DFDC);
	MakeName	(0X1DFDC,	"XDTP_TRANS_RATIO_KE_UNKNOWN_RATIO_2ND_GEAR_LOW");
	MakeRptCmt	(0X1DFDE,	"High limit for 3rd gear ratio used in determining if the ratio is unknown\nGear Ratio");
	MakeWord	(0X1DFDE);
	MakeName	(0X1DFDE,	"XDTP_TRANS_RATIO_KE_UNKNOWN_RATIO_3RD_GEAR_HIGH");
	MakeRptCmt	(0X1DFE0,	"Low limit for 3rd gear ratio used in determining if the ratio is unknown\nGear Ratio");
	MakeWord	(0X1DFE0);
	MakeName	(0X1DFE0,	"XDTP_TRANS_RATIO_KE_UNKNOWN_RATIO_3RD_GEAR_LOW");
	MakeRptCmt	(0X1DFE2,	"High limit for 4th gear ratio used in determining if the ratio is unknown\nGear Ratio");
	MakeWord	(0X1DFE2);
	MakeName	(0X1DFE2,	"XDTP_TRANS_RATIO_KE_UNKNOWN_RATIO_4TH_GEAR_HIGH");
	MakeRptCmt	(0X1DFE4,	"Low limit for 4th gear ratio used in determining if the ratio is unknown\nGear Ratio");
	MakeWord	(0X1DFE4);
	MakeName	(0X1DFE4,	"XDTP_TRANS_RATIO_KE_UNKNOWN_RATIO_4TH_GEAR_LOW");
	MakeRptCmt	(0X1DFE6,	"High limit of Engine Torque constraint in undefined ratio diagnostic test.\nFt_lbs");
	MakeWord	(0X1DFE6);
	MakeName	(0X1DFE6,	"XDTP_TRANS_RATIO_KE_UNKNOWN_RATIO_ENG_TRQ_HIGH");
	MakeRptCmt	(0X1DFE8,	"Low limit of Engine Torque constraint in undefined ratio diagnostic test.\nFt_lbs");
	MakeWord	(0X1DFE8);
	MakeName	(0X1DFE8,	"XDTP_TRANS_RATIO_KE_UNKNOWN_RATIO_ENG_TRQ_LOW");
	MakeRptCmt	(0X1DFEA,	"High limit of Engine Vacuum constraint in undefined ratio diagnostic test.\nk_Pa");
	MakeByte	(0X1DFEA);
	MakeName	(0X1DFEA,	"XDTP_TRANS_RATIO_KE_UNKNOWN_RATIO_ENG_VAC_HIGH");
	MakeRptCmt	(0X1DFEB,	"Low limit of Engine Vacuum constraint in undefined ratio diagnostic test.\nk_Pa");
	MakeByte	(0X1DFEB);
	MakeName	(0X1DFEB,	"XDTP_TRANS_RATIO_KE_UNKNOWN_RATIO_ENG_VAC_LOW");
	MakeRptCmt	(0X1DFEC,	"Minimum amount of time since manual valve change constraint for undefined ratio diag. test.\nSeconds");
	MakeWord	(0X1DFEC);
	MakeName	(0X1DFEC,	"XDTP_TRANS_RATIO_KE_UNKNOWN_RATIO_RANGE_TIME");
	MakeRptCmt	(0X1DFEE,	"Amount of transmission temp. constraint for undefined ratio test.\nDeg_C");
	MakeByte	(0X1DFEE);
	MakeName	(0X1DFEE,	"XDTP_TRANS_RATIO_KE_UNKNOWN_RATIO_TRANS_TEMP");
	MakeWord	(0X1DFF0);
	MakeName	(0X1DFF0,	"XDTP_TRANS_RATIO_KE_UNKNW_RATIO_4WD_HIGH_MTCR_MAX");
	MakeWord	(0X1DFF2);
	MakeName	(0X1DFF2,	"XDTP_TRANS_RATIO_KE_UNKNW_RATIO_4WD_HIGH_MTCR_MIN");
	MakeWord	(0X1DFF4);
	MakeName	(0X1DFF4,	"XDTP_TRANS_RATIO_KE_UNKNW_RATIO_4WD_LOW_MTCR_MAX");
	MakeWord	(0X1DFF6);
	MakeName	(0X1DFF6,	"XDTP_TRANS_RATIO_KE_UNKNW_RATIO_4WD_LOW_MTCR_MIN");
	MakeRptCmt	(0X1DFF8,	"4WD High/Max measured transfer case ratio for Shift Solenoid Perfornce Diagnostic\nNONE");
	MakeWord	(0X1DFF8);
	MakeName	(0X1DFF8,	"XDTP_TRANS_RATIO_KE_SS_PERF_ENAB_4WD_HI_MTCR_MAX");
	MakeRptCmt	(0X1DFFA,	"4WD High/Min measured transfer case ratio for Shift Solenoid Performance Diagnostic\nNONE");
	MakeWord	(0X1DFFA);
	MakeName	(0X1DFFA,	"XDTP_TRANS_RATIO_KE_SS_PERF_ENAB_4WD_HI_MTCR_MIN");
	MakeRptCmt	(0X1DFFC,	"4WD Low/Max measured transfer case ratio for Shift Solenoid Performance Diagnostic\nNONE");
	MakeWord	(0X1DFFC);
	MakeName	(0X1DFFC,	"XDTP_TRANS_RATIO_KE_SS_PERF_ENAB_4WD_LO_MTCR_MAX");
	MakeRptCmt	(0X1DFFE,	"4WD Low/Min measured transfer case rario for Shift Solenoid Performance Diagnostic\nNONE");
	MakeWord	(0X1DFFE);
	MakeName	(0X1DFFE,	"XDTP_TRANS_RATIO_KE_SS_PERF_ENAB_4WD_LO_MTCR_MIN");
	MakeRptCmt	(0X1E000,	"High transmission temperature calibration limit for Shift Solenoid Performance Diagnostic enabling condition\nDeg_C");
	MakeByte	(0X1E000);
	MakeName	(0X1E000,	"XDTP_TRANS_RATIO_KE_SS_PERF_ENABLE_DIAGTT_HIGH");
	MakeRptCmt	(0X1E001,	"Low transmission temperature calibration limit for Shift Solenoid Performance Diagnostic\nDeg_C");
	MakeByte	(0X1E001);
	MakeName	(0X1E001,	"XDTP_TRANS_RATIO_KE_SS_PERF_ENABLE_DIAGTT_LOW");
	MakeRptCmt	(0X1E002,	"High ignition voltage calibration for enabling conditions for shift solenoid circuit performance\nVolts");
	MakeByte	(0X1E002);
	MakeName	(0X1E002,	"XDTP_TRANS_RATIO_KE_SS_PERF_ENABLE_IGVOLT_HIGH");
	MakeRptCmt	(0X1E003,	"Low Ignition Voltage Calibration for enabling condition\nVolts");
	MakeByte	(0X1E003);
	MakeName	(0X1E003,	"XDTP_TRANS_RATIO_KE_SS_PERF_ENABLE_IGVOLT_LOW");
	MakeRptCmt	(0X1E004,	"High calibration limit for enabling conditions in Shift Solenoid Performance Diagnostic\nRPM");
	MakeWord	(0X1E004);
	MakeName	(0X1E004,	"XDTP_TRANS_RATIO_KE_SS_PERF_ENABLE_INPSPD_HIGH");
	MakeRptCmt	(0X1E006,	"Low input speed  calibration limit for Shift Solenoid Performance Diagnostic\nRPM");
	MakeWord	(0X1E006);
	MakeName	(0X1E006,	"XDTP_TRANS_RATIO_KE_SS_PERF_ENABLE_INPSPD_LOW");
	MakeRptCmt	(0X1E008,	"Output Speed calibratiofor Shift Solenoid Performance Diagnostic\nRPM");
	MakeWord	(0X1E008);
	MakeName	(0X1E008,	"XDTP_TRANS_RATIO_KE_SS_PERF_ENABLE_OUTSPD");
	MakeRptCmt	(0X1E00A,	"High Limit calibration for fail case 1 Engine Torque Shift Solenoid Performance Diagnostic\nFt_Lb");
	MakeWord	(0X1E00A);
	MakeName	(0X1E00A,	"XDTP_TRANS_RATIO_KE_SS_PERF_ETORQUE_FC1_HIGH");
	MakeRptCmt	(0X1E00C,	"Lower Limit Engine Torque used for Shift Solenoid Performance diagnostic Fail Case 1\nFt_Lb");
	MakeWord	(0X1E00C);
	MakeName	(0X1E00C,	"XDTP_TRANS_RATIO_KE_SS_PERF_ETORQUE_FC1_LOW");
	MakeRptCmt	(0X1E00E,	"High Limit calibration for fail case 2 Engine Torque Shift Solenoid Performance Diagnostic\nFt_Lb");
	MakeWord	(0X1E00E);
	MakeName	(0X1E00E,	"XDTP_TRANS_RATIO_KE_SS_PERF_ETORQUE_FC2_HIGH");
	MakeRptCmt	(0X1E010,	"Lower Limit Engine Torque Used for Shift Solenoid Performance Fail Case 2 diagnostic Test\nFt_Lb");
	MakeWord	(0X1E010);
	MakeName	(0X1E010,	"XDTP_TRANS_RATIO_KE_SS_PERF_ETORQUE_FC2_LOW");
	MakeRptCmt	(0X1E012,	"High Limit calibration for fail case 3 Engine Torque Shift Solenoid Performance Diagnostic\nFt_Lb");
	MakeWord	(0X1E012);
	MakeName	(0X1E012,	"XDTP_TRANS_RATIO_KE_SS_PERF_ETORQUE_FC3_HIGH");
	MakeRptCmt	(0X1E014,	"Lower Limit Engine Torque used for Shift Solenoid Performance (Fail Case 3) diagnostic test\nFt_Lb");
	MakeWord	(0X1E014);
	MakeName	(0X1E014,	"XDTP_TRANS_RATIO_KE_SS_PERF_ETORQUE_FC3_LOW");
	MakeRptCmt	(0X1E016,	"High Limit calibration for fail case 4 Engine Torque Shift Solenoid Performance Diagnostic\nFt_Lb");
	MakeWord	(0X1E016);
	MakeName	(0X1E016,	"XDTP_TRANS_RATIO_KE_SS_PERF_ETORQUE_FC4_HIGH");
	MakeRptCmt	(0X1E018,	"Lower Limit for fail Case 4 Engine Torque in Shift Solenoid Performance Diagnostic test\nFt_Lb");
	MakeWord	(0X1E018);
	MakeName	(0X1E018,	"XDTP_TRANS_RATIO_KE_SS_PERF_ETORQUE_FC4_LOW");
	MakeRptCmt	(0X1E01A,	"High Limit calibration for fail case 5 Engine Torque Shift Solenoid Performance Diagnostic\nFt_Lb");
	MakeWord	(0X1E01A);
	MakeName	(0X1E01A,	"XDTP_TRANS_RATIO_KE_SS_PERF_ETORQUE_FC5_HIGH");
	MakeRptCmt	(0X1E01C,	"Lower Limit for fail Case 5 Engine Torque in Shift Solenoid Performance Diagnostic test\nFt_Lb");
	MakeWord	(0X1E01C);
	MakeName	(0X1E01C,	"XDTP_TRANS_RATIO_KE_SS_PERF_ETORQUE_FC5_LOW");
	MakeRptCmt	(0X1E01E,	"High Limit calibration for fail case 1 Engine Torque Shift Solenoid Performance Diagnostic\nFt_Lb");
	MakeWord	(0X1E01E);
	MakeName	(0X1E01E,	"XDTP_TRANS_RATIO_KE_SS_PERF_ETORQUE_FC6_HIGH");
	MakeRptCmt	(0X1E020,	"Lower Limit for fail Case 6 Engine Torque in Shift Solenoid Performance Diagnostic Tset\nFt_Lb");
	MakeWord	(0X1E020);
	MakeName	(0X1E020,	"XDTP_TRANS_RATIO_KE_SS_PERF_ETORQUE_FC6_LOW");
	MakeRptCmt	(0X1E022,	"High Limit calibration for fail case 7 Engine Torque Shift Solenoid Performance Diagnostic\nFt_Lb");
	MakeWord	(0X1E022);
	MakeName	(0X1E022,	"XDTP_TRANS_RATIO_KE_SS_PERF_ETORQUE_FC7_HIGH");
	MakeRptCmt	(0X1E024,	"Lower Limit for fail Case 7 Engine Torque in Shift Solenoid Performance Diagnostic Test\nFt_Lb");
	MakeWord	(0X1E024);
	MakeName	(0X1E024,	"XDTP_TRANS_RATIO_KE_SS_PERF_ETORQUE_FC7_LOW");
	MakeRptCmt	(0X1E026,	"High limit calibration for fail case 8 Engine Torque Shift Solenoid Performance Diagnostic\nFt_Lb");
	MakeWord	(0X1E026);
	MakeName	(0X1E026,	"XDTP_TRANS_RATIO_KE_SS_PERF_ETORQUE_FC8_HIGH");
	MakeRptCmt	(0X1E028,	"Lower Limit for Fail case 8 Engine Torque in Shift Solenoid Diagnostic Test\nFt_Lb");
	MakeWord	(0X1E028);
	MakeName	(0X1E028,	"XDTP_TRANS_RATIO_KE_SS_PERF_ETORQUE_FC8_LOW");
	MakeRptCmt	(0X1E02A,	"High pass case 1 limit Engine Torque used for Shift Solenoid Performance Diagnostio\nFt_Lb");
	MakeWord	(0X1E02A);
	MakeName	(0X1E02A,	"XDTP_TRANS_RATIO_KE_SS_PERF_ETORQUE_PC1_HIGH");
	MakeRptCmt	(0X1E02C,	"Lower pass case 1 Engine Torque calibration limit for Shift Solenoid Performance Diagnostic\nFt_Lb");
	MakeWord	(0X1E02C);
	MakeName	(0X1E02C,	"XDTP_TRANS_RATIO_KE_SS_PERF_ETORQUE_PC1_LOW");
	MakeRptCmt	(0X1E02E,	"High pass case 2 calibration limit for Shift Solenoid Performance Diagnostic\nFt_Lb");
	MakeWord	(0X1E02E);
	MakeName	(0X1E02E,	"XDTP_TRANS_RATIO_KE_SS_PERF_ETORQUE_PC2_HIGH");
	MakeRptCmt	(0X1E030,	"Low pass case 2 Engine Torque calibration limit for Shift Solenoid Perfromance Diagnostic\nFt_Lb");
	MakeWord	(0X1E030);
	MakeName	(0X1E030,	"XDTP_TRANS_RATIO_KE_SS_PERF_ETORQUE_PC2_LOW");
	MakeRptCmt	(0X1E032,	"High pass 3 Engine Torque calibration limit for Shift Solenoid Performance Diagnostic\nFt_Lb");
	MakeWord	(0X1E032);
	MakeName	(0X1E032,	"XDTP_TRANS_RATIO_KE_SS_PERF_ETORQUE_PC3_HIGH");
	MakeRptCmt	(0X1E034,	"Low pass case 3 Engine Torque calibration limit For Shift Solenoid Performance Diagnostic\nFt_Lb");
	MakeWord	(0X1E034);
	MakeName	(0X1E034,	"XDTP_TRANS_RATIO_KE_SS_PERF_ETORQUE_PC3_LOW");
	MakeRptCmt	(0X1E036,	"High pass case 4 Engine Torque calibration limit for Shift Solenoid Performance Diagnostic\nFt_Lb");
	MakeWord	(0X1E036);
	MakeName	(0X1E036,	"XDTP_TRANS_RATIO_KE_SS_PERF_ETORQUE_PC4_HIGH");
	MakeRptCmt	(0X1E038,	"Low pass case 4 Engine Torque  calibration limit for Shift Solenoid Performance Diagnostic\nFt_Lb");
	MakeWord	(0X1E038);
	MakeName	(0X1E038,	"XDTP_TRANS_RATIO_KE_SS_PERF_ETORQUE_PC4_LOW");
	MakeRptCmt	(0X1E03A,	"Shift Solenoid Performance Diagnostic Fail Counter for 1144 Failure Mode\ncounts");
	MakeByte	(0X1E03A);
	MakeName	(0X1E03A,	"XDTP_TRANS_RATIO_KE_SS_PERF_FAIL_D1144_COUNTER");
	MakeRptCmt	(0X1E03B,	"Shift Solenoid Performance Diagnostic Fail Counter for 1221 Failure Mode\ncounts");
	MakeByte	(0X1E03B);
	MakeName	(0X1E03B,	"XDTP_TRANS_RATIO_KE_SS_PERF_FAIL_D1221_COUNTER");
	MakeRptCmt	(0X1E03C,	"Shift Solenoid Performance Diagnostic Fail Counter for 2233 Failure Mode\ncounts");
	MakeByte	(0X1E03C);
	MakeName	(0X1E03C,	"XDTP_TRANS_RATIO_KE_SS_PERF_FAIL_D2233_COUNTER");
	MakeRptCmt	(0X1E03D,	"Shift Solenoid Performance Diagnostic Fail Counter for 4334 Failure Mode\ncounts");
	MakeByte	(0X1E03D);
	MakeName	(0X1E03D,	"XDTP_TRANS_RATIO_KE_SS_PERF_FAIL_D4334_COUNTER");
	MakeRptCmt	(0X1E03E,	"Fail case 1 timer for Shift Solenoid Performance Diagnostic\nSeconds");
	MakeWord	(0X1E03E);
	MakeName	(0X1E03E,	"XDTP_TRANS_RATIO_KE_SS_PERF_FAIL_TIME_FC1");
	MakeRptCmt	(0X1E040,	"Fail case 2 timer for Shift Solenoid Perfromance Diagnostic\nSeconds");
	MakeWord	(0X1E040);
	MakeName	(0X1E040,	"XDTP_TRANS_RATIO_KE_SS_PERF_FAIL_TIME_FC2");
	MakeRptCmt	(0X1E042,	"Fail case 3 timer for Shift Solenoid Performance Diagnostic\nSeconds");
	MakeWord	(0X1E042);
	MakeName	(0X1E042,	"XDTP_TRANS_RATIO_KE_SS_PERF_FAIL_TIME_FC3");
	MakeRptCmt	(0X1E044,	"Fail case 4 timer for Shift Solenoid Performance Diagnostic\nSeconds");
	MakeWord	(0X1E044);
	MakeName	(0X1E044,	"XDTP_TRANS_RATIO_KE_SS_PERF_FAIL_TIME_FC4");
	MakeRptCmt	(0X1E046,	"Fail case 5 timer for Shift Solenoid Performance Diagnostic\nSeconds");
	MakeWord	(0X1E046);
	MakeName	(0X1E046,	"XDTP_TRANS_RATIO_KE_SS_PERF_FAIL_TIME_FC5");
	MakeRptCmt	(0X1E048,	"Fail case 6 timer for Shift Solenoid Performance Diagnostic\nSeconds");
	MakeWord	(0X1E048);
	MakeName	(0X1E048,	"XDTP_TRANS_RATIO_KE_SS_PERF_FAIL_TIME_FC6");
	MakeRptCmt	(0X1E04A,	"Fail case 7 timer for Shift Solenoid Performance Diagnostic\nSeconds");
	MakeWord	(0X1E04A);
	MakeName	(0X1E04A,	"XDTP_TRANS_RATIO_KE_SS_PERF_FAIL_TIME_FC7");
	MakeRptCmt	(0X1E04C,	"Fail case 8 timer for Shift Solenoid Performance Diagnostic\nSeconds");
	MakeWord	(0X1E04C);
	MakeName	(0X1E04C,	"XDTP_TRANS_RATIO_KE_SS_PERF_FAIL_TIME_FC8");
	MakeRptCmt	(0X1E04E,	"Fail case 1 Gear change timer calibration for Shift Solenoid Performance Diagnostic\nSeconds");
	MakeWord	(0X1E04E);
	MakeName	(0X1E04E,	"XDTP_TRANS_RATIO_KE_SS_PERF_GEAR_CHANGE_TIMER_FC1");
	MakeRptCmt	(0X1E050,	"Fail case 2 gear change timer calibration for Shift Solenoid Performnace Diagnostic\nSeconds");
	MakeWord	(0X1E050);
	MakeName	(0X1E050,	"XDTP_TRANS_RATIO_KE_SS_PERF_GEAR_CHANGE_TIMER_FC2");
	MakeRptCmt	(0X1E052,	"Fail case 3 Gear change timer for Shift Solenoid Performnace Diagnostic\nSeconds");
	MakeWord	(0X1E052);
	MakeName	(0X1E052,	"XDTP_TRANS_RATIO_KE_SS_PERF_GEAR_CHANGE_TIMER_FC3");
	MakeRptCmt	(0X1E054,	"Fail case 4 Gear change timer calibration for Shift Solenoid Performance Diagnostic\nSeconds");
	MakeWord	(0X1E054);
	MakeName	(0X1E054,	"XDTP_TRANS_RATIO_KE_SS_PERF_GEAR_CHANGE_TIMER_FC4");
	MakeRptCmt	(0X1E056,	"Fail case 5 gear change timer for Shift Solenoid Performance Diagnostic\nSeconds");
	MakeWord	(0X1E056);
	MakeName	(0X1E056,	"XDTP_TRANS_RATIO_KE_SS_PERF_GEAR_CHANGE_TIMER_FC5");
	MakeRptCmt	(0X1E058,	"Fail case 6 gear change timer calibration for Shift Solenoid Performance Diagnostic\nSeconds");
	MakeWord	(0X1E058);
	MakeName	(0X1E058,	"XDTP_TRANS_RATIO_KE_SS_PERF_GEAR_CHANGE_TIMER_FC6");
	MakeRptCmt	(0X1E05A,	"Fail case 7 gear change timer calibration for Shift Solenoid Performance Diagnostic\nSeconds");
	MakeWord	(0X1E05A);
	MakeName	(0X1E05A,	"XDTP_TRANS_RATIO_KE_SS_PERF_GEAR_CHANGE_TIMER_FC7");
	MakeRptCmt	(0X1E05C,	"Fail case 8 gear change timer calibration for Shift Solenoid Performance Diagnostic\nSeconds");
	MakeWord	(0X1E05C);
	MakeName	(0X1E05C,	"XDTP_TRANS_RATIO_KE_SS_PERF_GEAR_CHANGE_TIMER_FC8");
	MakeRptCmt	(0X1E05E,	"Bit select enble calibration for fail case four\nT/F");
	MakeByte	(0X1E05E);
	MakeName	(0X1E05E,	"XDTP_TRANS_RATIO_KE_SS_PERF_ENABLE_FC4");
	MakeRptCmt	(0X1E05F,	"Bit select enable calibrationfor fail case eight\nT/F");
	MakeByte	(0X1E05F);
	MakeName	(0X1E05F,	"XDTP_TRANS_RATIO_KE_SS_PERF_ENABLE_FC8");
	MakeRptCmt	(0X1E060,	"Fail case 1 Modeled Speed Ratio calibration for Shift Solenoid Performance Diagnostic\nFactor");
	MakeByte	(0X1E060);
	MakeName	(0X1E060,	"XDTP_TRANS_RATIO_KE_SS_PERF_MODELSR_FC1");
	MakeRptCmt	(0X1E061,	"Fail case 2 Modeled Speed Ratio calibration for Shift Solenoid Performance Diagnostic\nFactor");
	MakeByte	(0X1E061);
	MakeName	(0X1E061,	"XDTP_TRANS_RATIO_KE_SS_PERF_MODELSR_FC2");
	MakeRptCmt	(0X1E062,	"Fail case 3 Modeled Speed Ratio calibration\nFactor");
	MakeByte	(0X1E062);
	MakeName	(0X1E062,	"XDTP_TRANS_RATIO_KE_SS_PERF_MODELSR_FC3");
	MakeRptCmt	(0X1E063,	"Fail case 4 Modeled Speed Ratio calibration for Shift Solenoid Perfromance Diagnostic\nFactor");
	MakeByte	(0X1E063);
	MakeName	(0X1E063,	"XDTP_TRANS_RATIO_KE_SS_PERF_MODELSR_FC4");
	MakeRptCmt	(0X1E064,	"Fail case 5 Modeled Speed Ratio calibration for Shift Solenoid Perfromance Diagnostic\nFactor");
	MakeByte	(0X1E064);
	MakeName	(0X1E064,	"XDTP_TRANS_RATIO_KE_SS_PERF_MODELSR_FC5");
	MakeRptCmt	(0X1E065,	"Fail case 6 Modeled Speed Ratio calibration for Shift Solenoid Performance Diagnostic\nFactor");
	MakeByte	(0X1E065);
	MakeName	(0X1E065,	"XDTP_TRANS_RATIO_KE_SS_PERF_MODELSR_FC6");
	MakeRptCmt	(0X1E066,	"Fail case 7 Modeled Speed Ratio calibration for Shift Solenoid Performance Diagnostic\nFactor");
	MakeByte	(0X1E066);
	MakeName	(0X1E066,	"XDTP_TRANS_RATIO_KE_SS_PERF_MODELSR_FC7");
	MakeRptCmt	(0X1E067,	"Fail case 8 Modeled Speed Ratio calibration for Shift Solenoid Performance Diagnostic\nFactor");
	MakeByte	(0X1E067);
	MakeName	(0X1E067,	"XDTP_TRANS_RATIO_KE_SS_PERF_MODELSR_FC8");
	MakeRptCmt	(0X1E068,	"Pass case 1 Modeled Speed ratio calibration for Shift Solenoid Performance Diagnostic\nFactor");
	MakeByte	(0X1E068);
	MakeName	(0X1E068,	"XDTP_TRANS_RATIO_KE_SS_PERF_MODELSR_PC1");
	MakeRptCmt	(0X1E069,	"Pass case 2 Modeled Speed Ratio calibration for Shift Solenoid Performance Diagnostic\nFactor");
	MakeByte	(0X1E069);
	MakeName	(0X1E069,	"XDTP_TRANS_RATIO_KE_SS_PERF_MODELSR_PC2");
	MakeRptCmt	(0X1E06A,	"Pass case 3 Model Speed Ratio calibration\nFactor");
	MakeByte	(0X1E06A);
	MakeName	(0X1E06A,	"XDTP_TRANS_RATIO_KE_SS_PERF_MODELSR_PC3");
	MakeRptCmt	(0X1E06B,	"Pass case 4 Model Speed Ratio calibration\nFactor");
	MakeByte	(0X1E06B);
	MakeName	(0X1E06B,	"XDTP_TRANS_RATIO_KE_SS_PERF_MODELSR_PC4");
	MakeRptCmt	(0X1E06C,	"Fail case 5 output speed calibration for Shift Solenoid Performance Diagnostic\nRPM");
	MakeWord	(0X1E06C);
	MakeName	(0X1E06C,	"XDTP_TRANS_RATIO_KE_SS_PERF_OUTSPD_FC5");
	MakeRptCmt	(0X1E06E,	"Pass case 1 time calibration for Shift Solenoid Performance Diagnostic\nSeconds");
	MakeWord	(0X1E06E);
	MakeName	(0X1E06E,	"XDTP_TRANS_RATIO_KE_SS_PERF_PASS_TIME_PC1");
	MakeRptCmt	(0X1E070,	"Pass case 2 time calibration for Shift Solenoid Performnace Diagnostic\nSeconds");
	MakeWord	(0X1E070);
	MakeName	(0X1E070,	"XDTP_TRANS_RATIO_KE_SS_PERF_PASS_TIME_PC2");
	MakeRptCmt	(0X1E072,	"Pass case 3 timer calibration for Shift Solenoid Performance Diagnostic\nSeconds");
	MakeWord	(0X1E072);
	MakeName	(0X1E072,	"XDTP_TRANS_RATIO_KE_SS_PERF_PASS_TIME_PC3");
	MakeRptCmt	(0X1E074,	"Pass case 4 timer for Shift Solenoid Performance diagnostic\nSeconds");
	MakeWord	(0X1E074);
	MakeName	(0X1E074,	"XDTP_TRANS_RATIO_KE_SS_PERF_PASS_TIME_PC4");
	MakeRptCmt	(0X1E076,	"High ratio limit for fail case 1 in Shift Solenoid Performance Diagnostic\nRatio");
	MakeWord	(0X1E076);
	MakeName	(0X1E076,	"XDTP_TRANS_RATIO_KE_SS_PERF_RATIO_FC1_HIGH");
	MakeRptCmt	(0X1E078,	"Lower ratio limt for fail case 1 in Shift Solenoid Performance Diagnostic\nRatio");
	MakeWord	(0X1E078);
	MakeName	(0X1E078,	"XDTP_TRANS_RATIO_KE_SS_PERF_RATIO_FC1_LOW");
	MakeRptCmt	(0X1E07A,	"Higher ratio limit for fail case 2 in Shift Solenoid Performance Diagnostic\nRatio");
	MakeWord	(0X1E07A);
	MakeName	(0X1E07A,	"XDTP_TRANS_RATIO_KE_SS_PERF_RATIO_FC2_HIGH");
	MakeRptCmt	(0X1E07C,	"Lower ratio limit for fail case 2 in Shift Solenoid Performnace Diagnostic\nRatio");
	MakeWord	(0X1E07C);
	MakeName	(0X1E07C,	"XDTP_TRANS_RATIO_KE_SS_PERF_RATIO_FC2_LOW");
	MakeRptCmt	(0X1E07E,	"Higher ratio limit for fail case 3 in Shift Solenoid Performance Diagnostic\nRatio");
	MakeWord	(0X1E07E);
	MakeName	(0X1E07E,	"XDTP_TRANS_RATIO_KE_SS_PERF_RATIO_FC3_HIGH");
	MakeRptCmt	(0X1E080,	"Lower ratio limit for fail case 3 in Shift Solenoid Performance Diagnostic\nRatio");
	MakeWord	(0X1E080);
	MakeName	(0X1E080,	"XDTP_TRANS_RATIO_KE_SS_PERF_RATIO_FC3_LOW");
	MakeRptCmt	(0X1E082,	"High ratio limit for fail case 4 in Shift Solenoid Performance Diagnostic\nRatio");
	MakeWord	(0X1E082);
	MakeName	(0X1E082,	"XDTP_TRANS_RATIO_KE_SS_PERF_RATIO_FC4_HIGH");
	MakeRptCmt	(0X1E084,	"Low ratio limit for fail case 4 in Shift Solenoid Performance Diagnostic\nRatio");
	MakeWord	(0X1E084);
	MakeName	(0X1E084,	"XDTP_TRANS_RATIO_KE_SS_PERF_RATIO_FC4_LOW");
	MakeRptCmt	(0X1E086,	"High ratio limit for fail case 5 in Shift Solenoid Performnace Diagnostic\nRatio");
	MakeWord	(0X1E086);
	MakeName	(0X1E086,	"XDTP_TRANS_RATIO_KE_SS_PERF_RATIO_FC5_HIGH");
	MakeRptCmt	(0X1E088,	"Lower ratio limit for fail case 5 in Shift Solenoid Performance\nRatio");
	MakeWord	(0X1E088);
	MakeName	(0X1E088,	"XDTP_TRANS_RATIO_KE_SS_PERF_RATIO_FC5_LOW");
	MakeRptCmt	(0X1E08A,	"High ratio limit for fail case 6 in Shift Solenoid Performance Diagnostic\nRatio");
	MakeWord	(0X1E08A);
	MakeName	(0X1E08A,	"XDTP_TRANS_RATIO_KE_SS_PERF_RATIO_FC6_HIGH");
	MakeRptCmt	(0X1E08C,	"Lower ratio limit for fail case 6 in Shift Solenoid Performance Diagnostic\nRatio");
	MakeWord	(0X1E08C);
	MakeName	(0X1E08C,	"XDTP_TRANS_RATIO_KE_SS_PERF_RATIO_FC6_LOW");
	MakeRptCmt	(0X1E08E,	"High ratio limit for fail case 7 in Shift Solenoid Performance Diagnostic\nRatio");
	MakeWord	(0X1E08E);
	MakeName	(0X1E08E,	"XDTP_TRANS_RATIO_KE_SS_PERF_RATIO_FC7_HIGH");
	MakeRptCmt	(0X1E090,	"Lower ratio limit for fail case 7 in Shift Solenoid Performance Diagnostic\nRatio");
	MakeWord	(0X1E090);
	MakeName	(0X1E090,	"XDTP_TRANS_RATIO_KE_SS_PERF_RATIO_FC7_LOW");
	MakeRptCmt	(0X1E092,	"High ratio limit for fail case 8 in Shift Solenoid Performance\nRatio");
	MakeWord	(0X1E092);
	MakeName	(0X1E092,	"XDTP_TRANS_RATIO_KE_SS_PERF_RATIO_FC8_HIGH");
	MakeRptCmt	(0X1E094,	"Lower ratio limit for fail case 8 in Shift Solenoid Performance Diagnostic\nRatio");
	MakeWord	(0X1E094);
	MakeName	(0X1E094,	"XDTP_TRANS_RATIO_KE_SS_PERF_RATIO_FC8_LOW");
	MakeRptCmt	(0X1E096,	"High ratio limit for fail case 1 in Shift Solenoid Performance Diagnostic\nRatio");
	MakeWord	(0X1E096);
	MakeName	(0X1E096,	"XDTP_TRANS_RATIO_KE_SS_PERF_RATIO_PC1_HIGH");
	MakeRptCmt	(0X1E098,	"Low ratio calibration limit for pass case 1 in Shift Solenoid Performance Diagnostic\nRatio");
	MakeWord	(0X1E098);
	MakeName	(0X1E098,	"XDTP_TRANS_RATIO_KE_SS_PERF_RATIO_PC1_LOW");
	MakeRptCmt	(0X1E09A,	"High ratio calibration limit for pass case 2 in Shift Solenoid Performance Diagnostic\nRatio");
	MakeWord	(0X1E09A);
	MakeName	(0X1E09A,	"XDTP_TRANS_RATIO_KE_SS_PERF_RATIO_PC2_HIGH");
	MakeRptCmt	(0X1E09C,	"Low ratio calibration limit for pass case 2 in Shift Solenoid Performance Diagnostic\nRatio");
	MakeWord	(0X1E09C);
	MakeName	(0X1E09C,	"XDTP_TRANS_RATIO_KE_SS_PERF_RATIO_PC2_LOW");
	MakeRptCmt	(0X1E09E,	"High ratio calibration for pass case 3 in Shift Solenoid Performance Diagnostic\nRatio");
	MakeWord	(0X1E09E);
	MakeName	(0X1E09E,	"XDTP_TRANS_RATIO_KE_SS_PERF_RATIO_PC3_HIGH");
	MakeRptCmt	(0X1E0A0,	"Low ratio calibration limit for pass case 3 in Shift Soleoid Performance Diagnostic\nRatio");
	MakeWord	(0X1E0A0);
	MakeName	(0X1E0A0,	"XDTP_TRANS_RATIO_KE_SS_PERF_RATIO_PC3_LOW");
	MakeRptCmt	(0X1E0A2,	"High ratio calibration limit for fail case 4 in Shift Solenoid Performance Diagnostic\nRatio");
	MakeWord	(0X1E0A2);
	MakeName	(0X1E0A2,	"XDTP_TRANS_RATIO_KE_SS_PERF_RATIO_PC4_HIGH");
	MakeRptCmt	(0X1E0A4,	"Low ratio calibration limit for pass case 4 in Shift Solenoid Performance Diagnostic\nRatio");
	MakeWord	(0X1E0A4);
	MakeName	(0X1E0A4,	"XDTP_TRANS_RATIO_KE_SS_PERF_RATIO_PC4_LOW");
	MakeRptCmt	(0X1E0A6,	"High slip limit for fail case 5 in Shift Solenoid Performance Diagnostic test\nRPM");
	MakeWord	(0X1E0A6);
	MakeName	(0X1E0A6,	"XDTP_TRANS_RATIO_KE_SS_PERF_SLIP_FC5_HIGH");
	MakeRptCmt	(0X1E0A8,	"Low slip limit for fail case 5 in Shift Solenoid Performance Diagnostic test\nRPM");
	MakeWord	(0X1E0A8);
	MakeName	(0X1E0A8,	"XDTP_TRANS_RATIO_KE_SS_PERF_SLIP_FC5_LOW");
	MakeRptCmt	(0X1E0AA,	"Fail case 1 Throttle position threshold for Shift Solenoid Performance Diagnostic\nPercent");
	MakeWord	(0X1E0AA);
	MakeName	(0X1E0AA,	"XDTP_TRANS_RATIO_KE_SS_PERF_THROT_FC1");
	MakeRptCmt	(0X1E0AC,	"Fail case 2 Throttle position threshold for Shift Solenoid Performance Diagnostic\nPercent");
	MakeWord	(0X1E0AC);
	MakeName	(0X1E0AC,	"XDTP_TRANS_RATIO_KE_SS_PERF_THROT_FC2");
	MakeRptCmt	(0X1E0AE,	"Fail case 3 Throttle position threshold for Shift Solenoid Performance Diagnostic\nPercent");
	MakeWord	(0X1E0AE);
	MakeName	(0X1E0AE,	"XDTP_TRANS_RATIO_KE_SS_PERF_THROT_FC3");
	MakeRptCmt	(0X1E0B0,	"Fail case 4 Throttle position threshold for Shift Solenoid Performance Diagnostic\nPercent");
	MakeWord	(0X1E0B0);
	MakeName	(0X1E0B0,	"XDTP_TRANS_RATIO_KE_SS_PERF_THROT_FC4");
	MakeRptCmt	(0X1E0B2,	"Fail case 5 Throttle position threshold for Shift Solenoid Performance Diagnostic\nPercent");
	MakeWord	(0X1E0B2);
	MakeName	(0X1E0B2,	"XDTP_TRANS_RATIO_KE_SS_PERF_THROT_FC5");
	MakeRptCmt	(0X1E0B4,	"Fail case 6 Throttle position threshold for Shift Solenoid Performance Diagnostic\nPercent");
	MakeWord	(0X1E0B4);
	MakeName	(0X1E0B4,	"XDTP_TRANS_RATIO_KE_SS_PERF_THROT_FC6");
	MakeRptCmt	(0X1E0B6,	"Fail case 7 throttle position threshold for Shift Solenoid Performance Diagnostic\nPercent");
	MakeWord	(0X1E0B6);
	MakeName	(0X1E0B6,	"XDTP_TRANS_RATIO_KE_SS_PERF_THROT_FC7");
	MakeRptCmt	(0X1E0B8,	"Fail Case 8 throttle position threshold for Shift Solenoid Performance Diagnostic\nPercent");
	MakeWord	(0X1E0B8);
	MakeName	(0X1E0B8,	"XDTP_TRANS_RATIO_KE_SS_PERF_THROT_FC8");
	MakeRptCmt	(0X1E0BA,	"Pass case 1 throttle position threshold for Shift Solenoid Performance Diagnostic\nPercent");
	MakeWord	(0X1E0BA);
	MakeName	(0X1E0BA,	"XDTP_TRANS_RATIO_KE_SS_PERF_THROT_PC1");
	MakeRptCmt	(0X1E0BC,	"Pass case 2 throttle position threshold for Shift Solenoid Performance Diagnostic\nPercent");
	MakeWord	(0X1E0BC);
	MakeName	(0X1E0BC,	"XDTP_TRANS_RATIO_KE_SS_PERF_THROT_PC2");
	MakeRptCmt	(0X1E0BE,	"Pass case 3 throttle position threshold for Shift Solenoid Performance Diagnostic\nPercent");
	MakeWord	(0X1E0BE);
	MakeName	(0X1E0BE,	"XDTP_TRANS_RATIO_KE_SS_PERF_THROT_PC3");
	MakeRptCmt	(0X1E0C0,	"Pass case 4 throttle position threshold for Shift Solenoid Performance Diagnostic\nPercent");
	MakeWord	(0X1E0C0);
	MakeName	(0X1E0C0,	"XDTP_TRANS_RATIO_KE_SS_PERF_THROT_PC4");
	MakeWord	(0X1E0C2);
	MakeName	(0X1E0C2,	"XDTS_BRAKE_KE_BRAKE_STUCK_ON_RECOVER_TIME");
	MakeWord	(0X1E0C4);
	MakeName	(0X1E0C4,	"XDTS_BRAKE_KE_BRAKE_STUCK_OFF_RECOVER_TIME");
	MakeRptCmt	(0X1E0C6,	"Starting speed for detecting an acceleration cycle for brakeswitch stuck on diagnostic.\nMPH");
	MakeWord	(0X1E0C6);
	MakeName	(0X1E0C6,	"XDTS_BRAKE_KE_BRAKE_ON_OUT_SPD_LOW_THRESH");
	MakeRptCmt	(0X1E0C8,	"Starting speed for detecting an acceleration cycle for brake switch stuck off diagnostic.\nMPH");
	MakeWord	(0X1E0C8);
	MakeName	(0X1E0C8,	"XDTS_BRAKE_KE_BRAKE_OFF_OUT_SPD_LOW_THRESH");
	MakeRptCmt	(0X1E0CA,	"Ending speed for detecting an acceleration cycle for brake switch stuck on diagnostic.\nMPH");
	MakeWord	(0X1E0CA);
	MakeName	(0X1E0CA,	"XDTS_BRAKE_KE_BRAKE_ON_OUT_SPD_HIGH_THRESH");
	MakeRptCmt	(0X1E0CC,	"Ending speed for detecting an acceleration cycle for brake switch stuck off diagnostic.\nMPH");
	MakeWord	(0X1E0CC);
	MakeName	(0X1E0CC,	"XDTS_BRAKE_KE_BRAKE_OFF_OUT_SPD_HIGH_THRESH");
	MakeRptCmt	(0X1E0CE,	"Amount of time vehicle speed must be above the high thresholdduring the accel cycle in thebrake stuck on test.\nSeconds");
	MakeWord	(0X1E0CE);
	MakeName	(0X1E0CE,	"XDTS_BRAKE_KE_ON_HIGH_TIME_LIMIT");
	MakeRptCmt	(0X1E0D0,	"Amount of time vehicle speed must be in-between the high and low threshold during the brakestuck on test accelerationcycle.\nSeconds");
	MakeWord	(0X1E0D0);
	MakeName	(0X1E0D0,	"XDTS_BRAKE_KE_ON_MED_TIME_LIMIT");
	MakeWord	(0X1E0D2);
	MakeName	(0X1E0D2,	"XDTS_BRAKE_KE_OFF_HIGH_TIME_LIMIT");
	MakeRptCmt	(0X1E0D4,	"Amount of time vehicle speed must be in-between the low andhigh threshold during a decel cycle in the brake stuck off test.\nSeconds");
	MakeWord	(0X1E0D4);
	MakeName	(0X1E0D4,	"XDTS_BRAKE_KE_OFF_MED_TIME_LIMIT");
	MakeRptCmt	(0X1E0D6,	"Number of acceleration events with the brake depressed above which the brake switch stuck on malfunction will be set.\nCounts");
	MakeByte	(0X1E0D6);
	MakeName	(0X1E0D6,	"XDTS_BRAKE_KE_BRAKE_ON_WITH_ACCEL_LIMIT");
	MakeRptCmt	(0X1E0D7,	"Number of deceleration events with the brake not depressed above which the brake switch stuck off malfunction will be set.\nCounts");
	MakeByte	(0X1E0D7);
	MakeName	(0X1E0D7,	"XDTS_BRAKE_KE_BRAKE_OFF_WITH_DECEL_LIMIT");
	MakeRptCmt	(0X1E0D8,	"Number of valid pass cycles before a pass condition is accepted for the brake switch stuck off test.\nCounts");
	MakeByte	(0X1E0D8);
	MakeName	(0X1E0D8,	"XDTS_BRAKE_KE_BRAKE_OFF_PASS_COUNT");
	MakeRptCmt	(0X1E0D9,	"Number of valid pass cycles before a pass condition is accepted for the brake switch stuck on test.\nCounts");
	MakeByte	(0X1E0D9);
	MakeName	(0X1E0D9,	"XDTS_BRAKE_KE_BRAKE_ON_PASS_COUNT");
	MakeRptCmt	(0X1E0DA,	"Amount of time that the brake switch stuck on test must fail before the accelerationcycle counter is reset.\nSeconds");
	MakeDword	(x=0X1E0DA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X1E0DA,	"XDTS_BRAKE_KE_BRAKE_ON_FAIL_TIME_LIMIT");
	MakeRptCmt	(0X1E0DE,	"Vehicle speed threshold above which input speed diagnostic is enabled.\nMPH");
	MakeWord	(0X1E0DE);
	MakeName	(0X1E0DE,	"XDTS_INPT_SPD_SENSOR_KE_IN_SPD_DIAG_OUT_SPD_THRESH");
	MakeRptCmt	(0X1E0E0,	"Input speed threshold below which a diagnostic fault is enabled.\nRPM");
	MakeWord	(0X1E0E0);
	MakeName	(0X1E0E0,	"XDTS_INPT_SPD_SENSOR_KE_INPUT_SPEED_LOW_THRESH");
	MakeRptCmt	(0X1E0E2,	"Amount of time input speed must be below the threshold in order to set malfunction.\nSeconds.");
	MakeWord	(0X1E0E2);
	MakeName	(0X1E0E2,	"XDTS_INPT_SPD_SENSOR_KE_INPUT_SPEED_LOW_TIME");
	MakeRptCmt	(0X1E0E4,	"Input speed threshold above which a diagnostic fault is cleared.\nRPM");
	MakeWord	(0X1E0E4);
	MakeName	(0X1E0E4,	"XDTS_INPT_SPD_SENSOR_KE_INPUT_SPEED_HIGH_THRESH");
	MakeRptCmt	(0X1E0E6,	"Amount of time input speed must be above the threshold in order to clear malfunction.\nSeconds.");
	MakeWord	(0X1E0E6);
	MakeName	(0X1E0E6,	"XDTS_INPT_SPD_SENSOR_KE_INPUT_SPEED_HIGH_TIME");
	MakeRptCmt	(0X1E0E8,	"Amount of time there must be a drop in the input speed for a failure to be reported.\nSeconds.");
	MakeWord	(0X1E0E8);
	MakeName	(0X1E0E8,	"XDTS_INPT_SPD_SENSOR_KE_INPUT_SPEED_DELTA_TIME_FAIL");
	MakeRptCmt	(0X1E0EA,	"Amount of time pass condition  for input speed sensor         performance must be valid      before a PASS is reported.\nSeconds.");
	MakeWord	(0X1E0EA);
	MakeName	(0X1E0EA,	"XDTS_INPT_SPD_SENSOR_KE_INPUT_SPEED_PERF_TIME_PASS");
	MakeRptCmt	(0X1E0EC,	"Input speed must be above this threshold for a period of time for the PASS test to be valid.\nRPM");
	MakeWord	(0X1E0EC);
	MakeName	(0X1E0EC,	"XDTS_INPT_SPD_SENSOR_KE_INPUT_SPEED_PERF_PASS_THRESH");
	MakeRptCmt	(0X1E0EE,	"The drop in input speed must be above this for a period of time for a failure to be reported.\nRPM");
	MakeWord	(0X1E0EE);
	MakeName	(0X1E0EE,	"XDTS_INPT_SPD_SENSOR_KE_INPUT_SPEED_PERF_DELTA_FAIL");
	MakeRptCmt	(0X1E0F0,	"The drop in input speed must be below this for a period of time for a pass to be reported.\nRPM");
	MakeWord	(0X1E0F0);
	MakeName	(0X1E0F0,	"XDTS_INPT_SPD_SENSOR_KE_INPUT_SPEED_PERF_DELTA_PASS");
	MakeRptCmt	(0X1E0F2,	"Vehicle speed must be above this threshold for the input speed sensor performance fail test to be enabled.\nMPH");
	MakeWord	(0X1E0F2);
	MakeName	(0X1E0F2,	"XDTS_INPT_SPD_SENSOR_KE_INPUT_SPEED_PERF_MPH_THRESH");
}


static Bytes_10(void) {
        auto x;
#define id x

	MakeRptCmt	(0X1E0F4,	"Throttle position must be above this threshold for the input speed sensor performance fail test to be enabled.\nPercent");
	MakeWord	(0X1E0F4);
	MakeName	(0X1E0F4,	"XDTS_INPT_SPD_SENSOR_KE_INPUT_SPEED_PERF_THR_THRESH");
	MakeRptCmt	(0X1E0F6,	"Change in transmission output shaft speed above which will trigger output speed loss diagnostic in park or neutral\nRPM");
	MakeWord	(0X1E0F6);
	MakeName	(0X1E0F6,	"XDTS_OUTPT_SPD_SENSOR_KE_OUT_SPD_LOSS_IN_PN_FAIL");
	MakeRptCmt	(0X1E0F8,	"Change in transmission output shaft speed above which will trigger output speed loss diagnostic when not in park or neutral\nRPM");
	MakeWord	(0X1E0F8);
	MakeName	(0X1E0F8,	"XDTS_OUTPT_SPD_SENSOR_KE_OUT_SPD_LOSS_NOT_PN_FAIL");
	MakeWord	(0X1E0FA);
	MakeName	(0X1E0FA,	"XDTS_OUTPT_SPD_SENSOR_KE_OUT_SPD_LOSS_TIME_FL_PN");
	MakeWord	(0X1E0FC);
	MakeName	(0X1E0FC,	"XDTS_OUTPT_SPD_SENSOR_KE_OUT_SPD_LOSS_TIME_FL_NOTPN");
	MakeRptCmt	(0X1E0FE,	"Amount of time since the last change in transmission range status before the output speed loss diagnostic is enabled\nSeconds");
	MakeWord	(0X1E0FE);
	MakeName	(0X1E0FE,	"XDTS_OUTPT_SPD_SENSOR_KE_OUT_SPD_LOSS_RANGE_CHG_TIME");
	MakeRptCmt	(0X1E100,	"Amount of time the change in output speed must meet the pass conditions before the output speed loss diagnostic is passed\nSeconds");
	MakeWord	(0X1E100);
	MakeName	(0X1E100,	"XDTS_OUTPT_SPD_SENSOR_KE_OUT_SPD_LOSS_TIME_PASS");
	MakeRptCmt	(0X1E102,	"Change in transmission output shaft speed below which the output speed loss diagnostic will be passed\nRPM");
	MakeWord	(0X1E102);
	MakeName	(0X1E102,	"XDTS_OUTPT_SPD_SENSOR_KE_OUT_SPD_LOSS_MPH_PASS");
	MakeRptCmt	(0X1E104,	"Unfiltered output shaft speed above which the output speed loss diagnostic will be passed\nRPM");
	MakeWord	(0X1E104);
	MakeName	(0X1E104,	"XDTS_OUTPT_SPD_SENSOR_KE_OUT_SPD_LOSS_MPH_UNFIL");
	MakeRptCmt	(0X1E106,	"Maximum positive change in output speed over one loop that will still allow the  output speed loss test to run\nRPM");
	MakeWord	(0X1E106);
	MakeName	(0X1E106,	"XDTS_OUTPT_SPD_SENSOR_KE_MAX_ALLOWED_POS_OUT_SPD_CHG");
	MakeRptCmt	(0X1E108,	"Amount of time to delay the Output Speed loss test after a Positive output speed  spike has occured\nSeconds");
	MakeWord	(0X1E108);
	MakeName	(0X1E108,	"XDTS_OUTPT_SPD_SENSOR_KE_OUT_SPD_TEST_DELAY_TIME");
	MakeRptCmt	(0X1E10A,	"Enables the diagnostic if the time since the four wheel drive low state change is  greater than this calibration.\nSeconds");
	MakeWord	(0X1E10A);
	MakeName	(0X1E10A,	"XDTS_OUTPT_SPD_SENSOR_KE_TIME_SINCE_4WDL_STATE_CHANGE");
	MakeRptCmt	(0X1E10C,	"Amount of engine or input speed (depending on the application) below which the output speed low diagnostic is disabled\nRPM");
	MakeWord	(0X1E10C);
	MakeName	(0X1E10C,	"XDTS_OUTPT_SPD_SENSOR_KE_OUT_SPD_LOW_IN_SPD_THRESH");
	MakeRptCmt	(0X1E10E,	"Amount of engine vacuum above which the output speed low diagnostic is disabled\nKPA");
	MakeByte	(0X1E10E);
	MakeName	(0X1E10E,	"XDTS_OUTPT_SPD_SENSOR_KE_OUT_SPD_LOW_VAC_HIGH_THRESH");
	MakeRptCmt	(0X1E10F,	"Amount of engine vacuum below which the output speed low diagnostic is disabled\nKPA");
	MakeByte	(0X1E10F);
	MakeName	(0X1E10F,	"XDTS_OUTPT_SPD_SENSOR_KE_OUT_SPD_LOW_VAC_LOW_THRESH");
	MakeRptCmt	(0X1E110,	"Amount of throttle position below which output speed low diagnostic is disabled\nPercent");
	MakeWord	(0X1E110);
	MakeName	(0X1E110,	"XDTS_OUTPT_SPD_SENSOR_KE_OUT_SPD_LOW_THROTTLE_THRESH");
	MakeRptCmt	(0X1E112,	"Amount of transmission output shaft speed below which output speed low diagnostic will fail\nRPM");
	MakeWord	(0X1E112);
	MakeName	(0X1E112,	"XDTS_OUTPT_SPD_SENSOR_KE_OUT_SPD_LOW_THRESHOLD_FAIL");
	MakeRptCmt	(0X1E114,	"Amount of transmission output shaft speed above which output speed low diagnostic will pass\nRPM");
	MakeWord	(0X1E114);
	MakeName	(0X1E114,	"XDTS_OUTPT_SPD_SENSOR_KE_OUT_SPD_LOW_THRESHOLD_PASS");
	MakeRptCmt	(0X1E116,	"Amount of time output speed is below the low threshold before the output speed low diagnostic is enabled\nSeconds");
	MakeWord	(0X1E116);
	MakeName	(0X1E116,	"XDTS_OUTPT_SPD_SENSOR_KE_OUT_SPD_LOW_TIME_FAIL");
	MakeRptCmt	(0X1E118,	"Amount of time output speed is above the low threshold before the output speed low diagnostic is passed\nSeconds");
	MakeWord	(0X1E118);
	MakeName	(0X1E118,	"XDTS_OUTPT_SPD_SENSOR_KE_OUT_SPD_LOW_TIME_PASS");
	MakeRptCmt	(0X1E11A,	"Amount of engine torque below which the output speed low diagnostic is disabled\nFt_lb");
	MakeWord	(0X1E11A);
	MakeName	(0X1E11A,	"XDTS_OUTPT_SPD_SENSOR_KE_OUT_SPD_LOW_ETORQUE_LOW");
	MakeRptCmt	(0X1E11C,	"Amount of engine torque above which the output speed low diagnostic is disabled\nFt_lb");
	MakeWord	(0X1E11C);
	MakeName	(0X1E11C,	"XDTS_OUTPT_SPD_SENSOR_KE_OUT_SPD_LOW_ETORQUE_HIGH");
	MakeRptCmt	(0X1E11E,	"Amount of time an illegal range status must be seenbefore the diagnostic fault is set\nSeconds");
	MakeWord	(0X1E11E);
	MakeName	(0X1E11E,	"XDTS_RANGE_KE_ILLEGAL_RANGE_STATUS_TIME");
	MakeRptCmt	(0X1E120,	"Amount of time an illegal PSA state must be seen before the diagnostic fault is set\nSeconds");
	MakeWord	(0X1E120);
	MakeName	(0X1E120,	"XDTS_RANGE_KE_ILLEGAL_P_N_FAIL_TIME");
	MakeRptCmt	(0X1E122,	"Amount of time an legal PSA state must be seen before the diagnostic pass is set\nSeconds");
	MakeWord	(0X1E122);
	MakeName	(0X1E122,	"XDTS_RANGE_KE_ILLEGAL_P_N_PASS_TIME");
	MakeRptCmt	(0X1E124,	"Ratio below which illegal park/neutral test is enabled.\nRatio");
	MakeWord	(0X1E124);
	MakeName	(0X1E124,	"XDTS_RANGE_KE_DIAG_SPEED_RATIO_RANGE_HIGH");
	MakeRptCmt	(0X1E126,	"Ratio above which illegal park/neutral test is enabled.\nRatio");
	MakeWord	(0X1E126);
	MakeName	(0X1E126,	"XDTS_RANGE_KE_DIAG_SPEED_RATIO_RANGE_LOW");
	MakeRptCmt	(0X1E128,	"Engine speed low threshold above which illegal drive_2 test is enabled.\nRPM");
	MakeWord	(0X1E128);
	MakeName	(0X1E128,	"XDTS_RANGE_KE_PSM_FAULT_ENG_SPD_LOW_THRESH");
	MakeRptCmt	(0X1E12A,	"Engine speed high threshold below which illegal drive_2 test is enabled.\nRPM");
	MakeWord	(0X1E12A);
	MakeName	(0X1E12A,	"XDTS_RANGE_KE_PSM_FAULT_ENG_SPD_HIGH_THRESH");
	MakeRptCmt	(0X1E12C,	"Vehicle speed threshold below which illegal drive_2 test is enabled.\nMPH");
	MakeWord	(0X1E12C);
	MakeName	(0X1E12C,	"XDTS_RANGE_KE_PSM_FAULT_MPH_THRESH");
	MakeRptCmt	(0X1E12E,	"Input speed threshold above which illegal drive_2 test is enabled.\nRPM");
	MakeWord	(0X1E12E);
	MakeName	(0X1E12E,	"XDTS_RANGE_KE_PSM_FAULT_INPUT_SPD_THRESH");
	MakeRptCmt	(0X1E130,	"Low threshold throttle position for pressureswitch assembly diagnostic test.\nPercent");
	MakeWord	(0X1E130);
	MakeName	(0X1E130,	"XDTS_RANGE_KE_PSM_FAULT_TPS_LOW_THRESH");
	MakeRptCmt	(0X1E132,	"High threshold throttle position for pressureswitch assembly diagnostic test.\nPercent");
	MakeWord	(0X1E132);
	MakeName	(0X1E132,	"XDTS_RANGE_KE_PSM_FAULT_TPS_HIGH_THRESH");
	MakeRptCmt	(0X1E134,	"Amount of time an illegal PSM state must be seen before diagnostic Fail shall be set\nSeconds");
	MakeWord	(0X1E134);
	MakeName	(0X1E134,	"XDTS_RANGE_KE_PSM_ENG_SPD_FAIL_TIMER_LIMIT");
	MakeRptCmt	(0X1E136,	"Amount of time an illegal PSM state must be seen before diagnostic Pass shall be set\nSeconds");
	MakeWord	(0X1E136);
	MakeName	(0X1E136,	"XDTS_RANGE_KE_PSM_ENG_SPD_PASS_TIMER_LIMIT");
	MakeRptCmt	(0X1E138,	"A timer limit for Engine_Speed to be below a threshold. Is used by the PSM diagnostic for the illegal drive2 determination.\nSeconds");
	MakeWord	(0X1E138);
	MakeName	(0X1E138,	"XDTS_RANGE_KE_PSM_FAULT_ENG_SPD_LOW_TIME");
	MakeRptCmt	(0X1E13A,	"A timer limit for Engine_Speed to be between two thresholds Is used by the PSM diagnostic for the illegal drive2 determination.\nSeconds");
	MakeWord	(0X1E13A);
	MakeName	(0X1E13A,	"XDTS_RANGE_KE_PSM_FAULT_ENG_SPD_MED_TIME");
	MakeRptCmt	(0X1E13C,	"Vehicle speed in MPH greater than this valueto enable case three of the pressure switchassembly test\nMPH");
	MakeWord	(0X1E13C);
	MakeName	(0X1E13C,	"XDTS_RANGE_KE_PSA_MPH_OUTPUT_SPEED");
	MakeRptCmt	(0X1E13E,	"Throttle greater than this valueto enable case three of the pressure switchassembly test\nPercent");
	MakeWord	(0X1E13E);
	MakeName	(0X1E13E,	"XDTS_RANGE_KE_PSA_OUT_SPD_THROTTLE_THRESH");
	MakeRptCmt	(0X1E140,	"Low threshold engine torque for pressureswitch assembly diagnostic test.\nFt_lb");
	MakeWord	(0X1E140);
	MakeName	(0X1E140,	"XDTS_RANGE_KE_PSM_FAULT_ENG_TRQ_LOW_THRESH");
	MakeRptCmt	(0X1E142,	"High threshold engine torque for pressureswitch assembly diagnostic test.\nFt_lb");
	MakeWord	(0X1E142);
	MakeName	(0X1E142,	"XDTS_RANGE_KE_PSM_FAULT_ENG_TRQ_HIGH_THRESH");
	MakeRptCmt	(0X1E144,	"Low threshold manifold pressure for pressureswitch assembly diagnostic test.\nKPA");
	MakeByte	(0X1E144);
	MakeName	(0X1E144,	"XDTS_RANGE_KE_PSM_FAULT_ENG_VAC_LOW_THRESH");
	MakeRptCmt	(0X1E145,	"High threshold manifold pressure for pressureswitch assembly diagnostic test.\nKPA");
	MakeByte	(0X1E145);
	MakeName	(0X1E145,	"XDTS_RANGE_KE_PSM_FAULT_ENG_VAC_HIGH_THRESH");
	MakeRptCmt	(0X1E146,	"Ratio value used to check low or high ratioin park or neutral range.\nNONE");
	MakeWord	(0X1E146);
	MakeName	(0X1E146,	"XDTS_RANGE_KE_PSA_RATIO_IN_PARK_NEUTRAL");
	MakeRptCmt	(0X1E148,	"Amount of Time used to check transmission range inpark or neutral with low gear ratio.\nSeconds");
	MakeWord	(0X1E148);
	MakeName	(0X1E148,	"XDTS_RANGE_KE_PSA_LW_RAT_PARK_NEUTRAL_TIME");
	MakeRptCmt	(0X1E14A,	"Amount of Time used to check transmission range inpark or neutral with hhgh gear ratio.\nSeconds");
	MakeWord	(0X1E14A);
	MakeName	(0X1E14A,	"XDTS_RANGE_KE_PSA_HGH_RAT_PARK_NEUTRAL_TIME");
	MakeRptCmt	(0X1E14C,	"Low limit gear ratio used in transmissiondrivable range check.\nNONE");
	MakeWord	(0X1E14C);
	MakeName	(0X1E14C,	"XDTS_RANGE_KE_PSA_REVERSE_RATIO_LOW");
	MakeRptCmt	(0X1E14E,	"High limit gear ratio used in transmissiondrivable range check.\nNONE");
	MakeWord	(0X1E14E);
	MakeName	(0X1E14E,	"XDTS_RANGE_KE_PSA_REVERSE_RATIO_HIGH");
	MakeRptCmt	(0X1E150,	"Amount of Time used to check transmission range inreverse with gear ratio either low or high\nSeconds");
	MakeWord	(0X1E150);
	MakeName	(0X1E150,	"XDTS_RANGE_KE_PSA_REV_RATIO_FAIL_TIME");
	MakeRptCmt	(0X1E152,	"Amount of Time used to check transmission range inreverse with gear ratio between low and high\nSeconds");
	MakeWord	(0X1E152);
	MakeName	(0X1E152,	"XDTS_RANGE_KE_PSA_REV_RATIO_PASS_TIME");
	MakeRptCmt	(0X1E154,	"Low limit gear ratio used in transmissiondrivable range check.\nNONE");
	MakeWord	(0X1E154);
	MakeName	(0X1E154,	"XDTS_RANGE_KE_PSA_DRIVE_RANGE_LOW_FAIL");
	MakeRptCmt	(0X1E156,	"High limit gear ratio used in transmissiondrivable range check.\nNONE");
	MakeWord	(0X1E156);
	MakeName	(0X1E156,	"XDTS_RANGE_KE_PSA_DRIVE_RANGE_HIGH_FAIL");
	MakeRptCmt	(0X1E158,	"Low limit gear ratio used in transmissiondrivable range check.\nNONE");
	MakeWord	(0X1E158);
	MakeName	(0X1E158,	"XDTS_RANGE_KE_PSA_DRIVE_RANGE_LOW_PASS");
	MakeRptCmt	(0X1E15A,	"Low limit gear ratio used in transmissiondrivable range check.\nNONE");
	MakeWord	(0X1E15A);
	MakeName	(0X1E15A,	"XDTS_RANGE_KE_PSA_DRIVE_RANGE_HIGH_PASS");
	MakeRptCmt	(0X1E15C,	"Amount of Time used to check transmission range inDrive with gear ratio between low and high\nSeconds");
	MakeWord	(0X1E15C);
	MakeName	(0X1E15C,	"XDTS_RANGE_KE_PSA_PASS_DRIVE_RANGE_TIME");
	MakeRptCmt	(0X1E15E,	"Amount of Time used to check transmission range inDrive with gear ratio at low or high\nSeconds");
	MakeWord	(0X1E15E);
	MakeName	(0X1E15E,	"XDTS_RANGE_KE_PSA_FAIL_DRIVE_RANGE_TIME");
	MakeRptCmt	(0X1E160,	"Lowlimit for 1st gear ratio used in transmissiondrivable range check while in reverse\nNONE");
	MakeWord	(0X1E160);
	MakeName	(0X1E160,	"XDTS_RANGE_KE_PSA_REV_RATIO_1ST_GEAR_LOW");
	MakeRptCmt	(0X1E162,	"Highlimit for 1st gear ratio used in transmissiondrivable range check while in reverse\nNONE");
	MakeWord	(0X1E162);
	MakeName	(0X1E162,	"XDTS_RANGE_KE_PSA_REV_RATIO_1ST_GEAR_HIGH");
	MakeRptCmt	(0X1E164,	"Lowlimit for 2nd gear ratio used in transmissiondrivable range check while in reverse\nNONE");
	MakeWord	(0X1E164);
	MakeName	(0X1E164,	"XDTS_RANGE_KE_PSA_REV_RATIO_2ND_GEAR_LOW");
	MakeRptCmt	(0X1E166,	"Highlimit for 2nd gear ratio used in transmissiondrivable range check while in reverse\nNONE");
	MakeWord	(0X1E166);
	MakeName	(0X1E166,	"XDTS_RANGE_KE_PSA_REV_RATIO_2ND_GEAR_HIGH");
	MakeRptCmt	(0X1E168,	"Lowlimit for 3rd gear ratio used in transmissiondrivable range check while in reverse\nNONE");
	MakeWord	(0X1E168);
	MakeName	(0X1E168,	"XDTS_RANGE_KE_PSA_REV_RATIO_3RD_GEAR_LOW");
	MakeRptCmt	(0X1E16A,	"Highlimit for 3rd gear ratio used in transmissiondrivable range check while in reverse\nNONE");
	MakeWord	(0X1E16A);
	MakeName	(0X1E16A,	"XDTS_RANGE_KE_PSA_REV_RATIO_3RD_GEAR_HIGH");
	MakeRptCmt	(0X1E16C,	"Lowlimit for 4th gear ratio used in transmissiondrivable range check while in reverse\nNONE");
	MakeWord	(0X1E16C);
	MakeName	(0X1E16C,	"XDTS_RANGE_KE_PSA_REV_RATIO_4TH_GEAR_LOW");
	MakeRptCmt	(0X1E16E,	"Highlimit for 4th gear ratio used in transmissiondrivable range check while in reverse\nNONE");
	MakeWord	(0X1E16E);
	MakeName	(0X1E16E,	"XDTS_RANGE_KE_PSA_REV_RATIO_4TH_GEAR_HIGH");
	MakeWord	(0X1E170);
	MakeName	(0X1E170,	"XDTS_RANGE_KE_PSM_NOISS_VOLT_FAULT_TIME");
	MakeRptCmt	(0X1E172,	"Pressure switch assembly with input speed sensor will not be tested if ignition voltage is out of range for longer than this.\nSeconds");
	MakeWord	(0X1E172);
	MakeName	(0X1E172,	"XDTS_RANGE_KE_PSA_WISS_VOLT_FAULT_TIME");
	MakeRptCmt	(0X1E174,	"Comparison for diagnostic P1527 pass or fail.\nIMS Number");
	MakeByte	(0X1E174);
	MakeName	(0X1E174,	"XDTS_RANGE_KE_PSA_IMS_NUMBER");
	MakeRptCmt	(0X1E176,	"Multiplying factor based on engine miles.\nScaler");
	MakeWord	(0X1E176);
	MakeName	(0X1E176,	"XDTS_RANGE_KV_PSA_IMS_AGE_FACTOR");
	MakeByte	(0X1E178);
	MakeArray	(0X1E178,	0X8);
	MakeRptCmt	(0X1E180,	"Multiplier for the Top Range Counter used in PSA/IMS comparison diagnostic.\nIMS Number");
	MakeByte	(0X1E180);
	MakeName	(0X1E180,	"XDTS_RANGE_KE_TOP_RANGE_MULTIPLIER");
	MakeRptCmt	(0X1E181,	"Lower limit for the system voltage for the PSA/IMS comparison diagnostic.\nVolts");
	MakeByte	(0X1E181);
	MakeName	(0X1E181,	"XDTS_RANGE_KE_DG_IGN_VOLTAGE_LOW_THRSH");
	MakeRptCmt	(0X1E182,	"Upper limit for the system voltage for the PSA/IMS comparison diagnostic.\nVolts");
	MakeByte	(0X1E182);
	MakeName	(0X1E182,	"XDTS_RANGE_KE_DG_IGN_VOLTAGE_HIGH_THRSH");
	MakeRptCmt	(0X1E184,	"Upper limit for the PSA/IMS mismatch time.\nSeconds");
	MakeWord	(0X1E184);
	MakeName	(0X1E184,	"XDTS_RANGE_KE_PSA_IMS_GENERAL_TIME");
	MakeRptCmt	(0X1E186,	"Upper limit for the PSA/IMS mismatch time when one of them indicates Drive 4.\nSeconds");
	MakeWord	(0X1E186);
	MakeName	(0X1E186,	"XDTS_RANGE_KE_PSA_IMS_TOP_RANGE_TIME");
	MakeRptCmt	(0X1E188,	"Upper limit for the PSA/IMS mismatch time during a garage shift window.\nSeconds");
	MakeWord	(0X1E188);
	MakeName	(0X1E188,	"XDTS_RANGE_KE_PSA_F_IMS_ODD_TIME");
	MakeRptCmt	(0X1E18A,	"Time before and after a new garage shift that constitutes a garage shift window.\nSeconds");
	MakeWord	(0X1E18A);
	MakeName	(0X1E18A,	"XDTS_RANGE_KE_PSA_IMS_GS_WINDOW_TIME");
	MakeRptCmt	(0X1E18C,	"If ignition voltage is out of range for a time greater than this, do not test Pressure Switch Assembly Engine Speed Transition.\nSeconds");
	MakeWord	(0X1E18C);
	MakeName	(0X1E18C,	"XDTS_RANGE_KE_DIAG_PSA_SYS_VOLT_TIME");
	MakeRptCmt	(0X1E18E,	"Pass time for TCC stuck off while TCC  is being commanded ON.\nSeconds");
	MakeWord	(0X1E18E);
	MakeName	(0X1E18E,	"XDTS_TCC_REL_SWCH_KE_TCC_REL_SW_DIAG_TIME_PASS");
	MakeRptCmt	(0X1E190,	"Fail time for TCC stuck off while TCC  is being commanded ON.\nSeconds");
	MakeWord	(0X1E190);
	MakeName	(0X1E190,	"XDTS_TCC_REL_SWCH_KE_TCC_REL_SW_DIAG_TIME_FAIL");
	MakeRptCmt	(0X1E192,	"TCC slip low threshold value to enable TCC stuck off  while TCC is being commanded ON.- TCC Release switch circuit malfunction\nRPM_S");
	MakeWord	(0X1E192);
	MakeName	(0X1E192,	"XDTS_TCC_REL_SWCH_KE_TCC_REL_SW_SLIP_LOW");
	MakeRptCmt	(0X1E194,	"TCC slip high threshold value to enable TCC stuck off  while TCC is being commanded ON.\nRPM_S");
	MakeWord	(0X1E194);
	MakeName	(0X1E194,	"XDTS_TCC_REL_SWCH_KE_TCC_REL_SW_SLIP_HIGH");
	MakeRptCmt	(0X1E196,	"High enable threshold to run rel sw diag for TCC stuck off when commanded on.\nFt_Lb");
	MakeWord	(0X1E196);
	MakeName	(0X1E196,	"XDTS_TCC_REL_SWCH_KE_TCC_REL_SW_ENGINE_TORQUE_HIGH");
	MakeRptCmt	(0X1E198,	"Low enable threshold to run rel sw diag for TCC stuck off when commanded on.\nFt_Lb");
	MakeWord	(0X1E198);
	MakeName	(0X1E198,	"XDTS_TCC_REL_SWCH_KE_TCC_REL_SW_ENGINE_TORQUE_LOW");
	MakeRptCmt	(0X1E19A,	"TCC Stuck off while being commanded on fail counter - TCC release switch diag.\nCounts");
	MakeByte	(0X1E19A);
	MakeName	(0X1E19A,	"XDTS_TCC_REL_SWCH_KE_TCC_REL_FAIL_COUNTER");
	MakeRptCmt	(0X1E19C,	"Low threshold to run TCC stuck off when being commanded on - TCC release switch diag.\nPSI");
	MakeWord	(0X1E19C);
	MakeName	(0X1E19C,	"XDTS_TCC_REL_SWCH_KE_TCC_REL_SW_TCC_PRESSURE_HIGH");
	MakeRptCmt	(0X1E19E,	"High threshold to run TCC stuck off when being commanded on - TCC release switch diag.\nPSI");
	MakeWord	(0X1E19E);
	MakeName	(0X1E19E,	"XDTS_TCC_REL_SWCH_KE_TCC_REL_SW_TCC_PRESSURE_LOW");
	MakeRptCmt	(0X1E1A0,	"High limit for transmission temperature sensor voltage above which the diagnostic fault is set\nA/D Counts");
	MakeByte	(0X1E1A0);
	MakeName	(0X1E1A0,	"XDTS_TEMP_KE_TRANS_TEMP_SENSOR_VOLT_HIGH");
	MakeRptCmt	(0X1E1A1,	"Low limit for transmission temperature sensor voltage below which the diagnostic fault is set\nA/D Counts");
	MakeByte	(0X1E1A1);
	MakeName	(0X1E1A1,	"XDTS_TEMP_KE_TRANS_TEMP_SENSOR_VOLTAGE_LOW");
	MakeRptCmt	(0X1E1A2,	"Amount of time transmission sensor voltage must be above high limit before the diagnostic fault is set\nSeconds");
	MakeWord	(0X1E1A2);
	MakeName	(0X1E1A2,	"XDTS_TEMP_KE_TRANS_TEMP_SENSOR_HIGH_TIME");
	MakeRptCmt	(0X1E1A4,	"Amount of time transmission sensor voltage must be below low limit before the diagnostic fault is set\nSeconds");
	MakeWord	(0X1E1A4);
	MakeName	(0X1E1A4,	"XDTS_TEMP_KE_TRANS_TEMP_SENSOR_LOW_TIME");
	MakeRptCmt	(0X1E1A6,	"Transmission fluid temperature sensor circuit high will not be tested if ignition voltage is out of range for longer than this.\nSeconds");
	MakeWord	(0X1E1A6);
	MakeName	(0X1E1A6,	"XDTS_TEMP_KE_TTS_HIGH_VOLT_FAULT_TIME");
	MakeRptCmt	(0X1E1A8,	"Transmission fluid temperature sensor circuit low will not be tested if ignition voltage is out of range for longer than this.\nSeconds");
	MakeWord	(0X1E1A8);
	MakeName	(0X1E1A8,	"XDTS_TEMP_KE_TTS_LOW_VOLT_FAULT_TIME");
	MakeRptCmt	(0X1E1B0,	"Use this cal to identify the Fuel Systems calibration\nCal_ID_Record");
	MakeName	(0X1E1B0,	"FUELCALIBRATIONS_HEADER");
	MakeName	(0X1E1B4,	"Constant32_Fuel_System_Calibration_ID");
	MakeName	(0X1E1B8,	"CurveTable_2_Columns_Fuel_System_Calibration_Level");
	MakeStr		(0X1E1BC,	0X1E1C5);
	MakeName	(0X1E1BC,	"CurveTable_8_Columns_Fuel_System_Calibration_ID_ASCII");
	MakeRptCmt	(0X1E1CC,	"The y-intercept for the tank vacuum AD counts to inches water equation.\nInches H2O");
	MakeWord	(0X1E1CC);
	MakeName	(0X1E1CC,	"F_TANK_KE_FUEL_TANK_VACUUM_OFFSET");
	MakeRptCmt	(0X1E1CE,	"Bit selectable cal to force the PWM Fuel Level output to zero when a secondary fuel pump fault is present.\nBOOLEAN");
	MakeByte	(0X1E1CE);
	MakeName	(0X1E1CE,	"F_TANK_KE_GAGE_TO_ZERO_ON_PUMP_FAULT");
	MakeRptCmt	(0X1E1D0,	"Maximum Fuel Tank volume as rated by GMUTS and/or the platform.\nLiters");
	MakeWord	(0X1E1D0);
	MakeName	(0X1E1D0,	"F_TANK_KE_FUEL_TANK_RATED_CAPACITY");
	MakeRptCmt	(0X1E1D2,	"Determines whether to acitvate or de-activate the transistor to which allows the pullup resistor to be on or off.\nTRUE/FALSE");
	MakeByte	(0X1E1D2);
	MakeName	(0X1E1D2,	"F_TANK_KE_FUEL_SYSTEM_USES_PULLUP_RESIS");
	MakeRptCmt	(0X1E1D4,	"Maximum Fuel Tank volume as rated by GMUTS and/or the platform.\nLiters");
	MakeWord	(0X1E1D4);
	MakeName	(0X1E1D4,	"F_TANK_KE_FUEL_TANK_RATED_CAPACITY_GAGE");
	MakeRptCmt	(0X1E1D6,	"Maximum value of vehicle speed that the secondary transfer pump will be diagnosed.\nMPH");
	MakeWord	(0X1E1D6);
	MakeName	(0X1E1D6,	"F_TANK_KE_VSS_XFER_PUMP");
	MakeRptCmt	(0X1E1D8,	"Minimum value allowed for fuel gage PWM signal.\nPercent");
	MakeWord	(0X1E1D8);
	MakeName	(0X1E1D8,	"F_TANK_KE_FUEL_GAGE_PWM_MIN");
	MakeRptCmt	(0X1E1DA,	"Maximum value allowed for fuel gage PWM signal.\nPercent");
	MakeWord	(0X1E1DA);
	MakeName	(0X1E1DA,	"F_TANK_KE_FUEL_GAGE_PWM_MAX");
	MakeRptCmt	(0X1E1DC,	"Volume to which the primary tank is considered Full.\nLiters");
	MakeWord	(0X1E1DC);
	MakeName	(0X1E1DC,	"F_TANK_KE_PRIMARY_TANK_RATED_CAPACITY");
	MakeRptCmt	(0X1E1DE,	"Volume to which the primary tank is considered Full for purposes of the fuel gage.\nLiters");
	MakeWord	(0X1E1DE);
	MakeName	(0X1E1DE,	"F_TANK_KE_PRI_TANK_RATED_CAPACITY_GAGE");
	MakeRptCmt	(0X1E1E0,	"Threshold in the secondary tank which determine the spill over level into the primary tank.\nLiters");
	MakeWord	(0X1E1E0);
	MakeName	(0X1E1E0,	"F_TANK_KE_GRAVITY_FUEL_FILL");
	MakeRptCmt	(0X1E1E2,	"Volume in primary tank at which point the secondary transfer pump will be requested off after a calibratable time.\nLiters");
	MakeWord	(0X1E1E2);
	MakeName	(0X1E1E2,	"F_TANK_KE_PRIMARY_TANK_HIGH_XFER_LEVEL");
	MakeWord	(0X1E1E4);
	MakeName	(0X1E1E4,	"F_TANK_KE_SECONDARY_TANK_ZONE1_5_THRESH");
	MakeRptCmt	(0X1E1E6,	"Table to convert fuel level to PWM duty cycleto drive a fuel gage in the cluster.\nPercent");
	MakeName	(0X1E1E6,	"F_TANK_KV_FUEL_LEVEL_TO_PWM_FOR_GAGE");
	MakeRptCmt	(0X1E1FC,	"This calibration defines if the 5V or the 12V fuel tank level sensor is wired to the PCM.\nSenderType");
	MakeByte	(0X1E1FC);
	MakeName	(0X1E1FC,	"F_TANK_KE_FUEL_SENDER_UNIT_TYPE");
	MakeRptCmt	(0X1E1FE,	"The minimum amount of time to delay a valid fuel level reading.\nSeconds");
	MakeWord	(0X1E1FE);
	MakeName	(0X1E1FE,	"F_TANK_KE_FUEL_LEVEL_INPUT_DELAY");
	MakeRptCmt	(0X1E200,	"Time which the primary fuel level must remain above the threshold to turn off the xfer pump.\nSeconds");
	MakeWord	(0X1E200);
	MakeName	(0X1E200,	"F_TANK_KE_PRIMARY_TANK_TOO_FULL_TIME");
	MakeByte	(0X1E202);
	MakeName	(0X1E202,	"F_TANK_KE_FUEL_LEVEL_UPPER_FAULTS");
	MakeByte	(0X1E203);
	MakeName	(0X1E203,	"F_TANK_KE_FUEL_LEVEL_LOWER_FAULTS");
	MakeByte	(0X1E204);
	MakeName	(0X1E204,	"F_TANK_KE_FUEL_LEVEL_PULSE_OFF_CTS_ETH");
	MakeByte	(0X1E205);
	MakeName	(0X1E205,	"F_TANK_KE_FUEL_LEVEL_PULSE_OFF_CTS_EVP");
	MakeWord	(0X1E206);
	MakeName	(0X1E206,	"F_TANK_KE_FUEL_LEVEL_PULSE_ETHANOL_HI");
	MakeWord	(0X1E208);
	MakeName	(0X1E208,	"F_TANK_KE_FUEL_LEVEL_PULSE_ETHANOL_LO");
	MakeRptCmt	(0X1E20A,	"If the fuel level reading is equal to or above this value then it is considered a fault.\nA/D Counts");
	MakeByte	(0X1E20A);
	MakeName	(0X1E20A,	"F_TANK_KE_FUEL_LEVEL_AD_HIGH_LIMIT");
	MakeRptCmt	(0X1E20B,	"If the fuel level reading is equal to or below this value then it is considered a fault.\nA/D Counts");
	MakeByte	(0X1E20B);
	MakeName	(0X1E20B,	"F_TANK_KE_FUEL_LEVEL_AD_LOW_LIMIT");
	MakeRptCmt	(0X1E20C,	"Converts fuel level sender AD counts to liters.\nLiters");
	MakeName	(0X1E20C,	"F_TANK_KV_CONVERT_PRIMARY_FUEL_LEVEL_TO");
	MakeRptCmt	(0X1E30E,	"Converts fuel level sender AD counts to liters.\nLiters");
	MakeName	(0X1E30E,	"F_TANK_KV_CONVERT_SECONDARY_FUEL_LEVEL_");
	MakeRptCmt	(0X1E410,	"Converts fuel level sender AD counts to liters for display on the fuel gage.\nLiters");
	MakeName	(0X1E410,	"F_TANK_KV_PRI_FUEL_LEVEL_TO_VOL_GAGE");
	MakeRptCmt	(0X1E512,	"Converts fuel level sender AD counts to liters for the secondary tank for display on the fuel gage.\nLiters");
	MakeName	(0X1E512,	"F_TANK_KV_SEC_FUEL_LEVEL_TO_VOL_GAGE");
	MakeRptCmt	(0X1E614,	"Maximum amount of time the transfer pump can be on continuously without burning up.\nSeconds_L");
	MakeName	(0X1E614,	"F_TANK_KV_TRANSFER_PUMP_TIME_LIMIT");
	MakeRptCmt	(0X1E67C,	"Used to linearize and scale the raw A/D fuel tank vapor temperature sensor.\nDegrees_C");
	MakeName	(0X1E67C,	"F_TANK_KV_FUEL_VAPOR_TEMPERATURE");
	MakeRptCmt	(0X1E69E,	"Threshold of _measurable_, usable fuel in the primary tank above which the primary tank is considered full.\nLiters");
	MakeWord	(0X1E69E);
	MakeName	(0X1E69E,	"F_TANK_KE_PRIMARY_TANK_FULL_THRESHOLD");
	MakeWord	(0X1E6A0);
	MakeName	(0X1E6A0,	"F_TANK_KE_PRIMARY_TANK_PUMP_ON_LEVEL");
	MakeRptCmt	(0X1E6A2,	"Threshold of measurable, usable fuel in the secondary tank above which the secondary tank is considered full.\nLiters");
	MakeWord	(0X1E6A2);
	MakeName	(0X1E6A2,	"F_TANK_KE_SECONDARY_TANK_EMPTY_THRESHOL");
	MakeRptCmt	(0X1E6A4,	"Volume necessary in secondary tank to allow the transferpump to be turned on.\nLiters");
	MakeWord	(0X1E6A4);
	MakeName	(0X1E6A4,	"F_TANK_KE_SECONDARY_TANK_TRANSFER_THRES");
	MakeRptCmt	(0X1E6A6,	"Time which the transfer pump has pumped the fuel in the secondary tank below the secondary empty threshold.\nSeconds");
	MakeWord	(0X1E6A6);
	MakeName	(0X1E6A6,	"F_TANK_KE_SECONDARY_TANK_EMPTY_TIME");
	MakeRptCmt	(0X1E6A8,	"Timer to prevent the fuel pump from turning off and  turning right back on.\nSeconds");
	MakeWord	(0X1E6A8);
	MakeName	(0X1E6A8,	"F_TANK_KE_TRANSFER_PUMP_MIN_OFF_TIME");
	MakeRptCmt	(0X1E6AA,	"Minimum level of change necessary to determine the senders are moving and the pump is working.\nLiters");
	MakeWord	(0X1E6AA);
	MakeName	(0X1E6AA,	"F_TANK_KE_TRANSFER_PUMP_FUEL_LEVEL_DELT");
	MakeWord	(0X1E6AC);
	MakeName	(0X1E6AC,	"F_TANK_KE_TRANSFER_PUMP_FAIL_TIME");
	MakeRptCmt	(0X1E6AE,	"Amount of delay time to allow fuel slosh to relax before the transfer pump is diagnosed.\nSeconds");
	MakeWord	(0X1E6AE);
	MakeName	(0X1E6AE,	"F_TANK_KE_SLOSH_DELAY_XFER_PUMP_TIME");
	MakeRptCmt	(0X1E6B0,	"Time sender readings must be in a new state before that new state's calculation method will be used.\nSeconds");
	MakeWord	(0X1E6B0);
	MakeName	(0X1E6B0,	"F_TANK_KE_FUEL_LEVEL_CHANGE_STATE_TIME");
	MakeRptCmt	(0X1E6B2,	"Lag filter time constant used to over-damp fuel gage movement.\nSeconds");
	MakeWord	(0X1E6B2);
	MakeName	(0X1E6B2,	"F_TANK_KE_FUEL_GAGE_NORMAL_FILTER");
	MakeRptCmt	(0X1E6B4,	"Lag filter time constant used to allow fast fuel gage movement during Fast Fill mode of gage operation.\nSeconds");
	MakeWord	(0X1E6B4);
	MakeName	(0X1E6B4,	"F_TANK_KE_FUEL_GAGE_FAST_FILL_FILTER");
	MakeRptCmt	(0X1E6B6,	"The main filter coefficient for fuel tank level.\nSeconds");
	MakeWord	(0X1E6B6);
	MakeName	(0X1E6B6,	"F_TANK_KE_FUEL_MAIN_TIME_CONSTANT");
	MakeRptCmt	(0X1E6B8,	"Filter coefficient for both primary and secondary fuel levels used in slosh calculations.\nSeconds");
	MakeWord	(0X1E6B8);
	MakeName	(0X1E6B8,	"F_TANK_KE_FUEL_SLOSH_TIME_CONSTANT");
	MakeRptCmt	(0X1E6BA,	"Filter coefficient for primary fuel tank levelused in slosh threshold lookup.\nSeconds");
	MakeWord	(0X1E6BA);
	MakeName	(0X1E6BA,	"F_TANK_KE_FUEL_PRM_SLSH_THRSH_TIME_CNST");
	MakeRptCmt	(0X1E6BC,	"Filter coefficient for secondary fuel tank levelused in slosh threshold lookup.\nSeconds");
	MakeWord	(0X1E6BC);
	MakeName	(0X1E6BC,	"F_TANK_KE_FUEL_SEC_SLSH_THRSH_TIME_CNST");
	MakeRptCmt	(0X1E6BE,	"If the fuel level reading has not moved this amount for a given amount of accumulated miles then it is considered a fault.\nLiters");
	MakeWord	(0X1E6BE);
	MakeName	(0X1E6BE,	"F_TANK_KE_FUEL_LEVEL_DELTA");
	MakeDword	(x=0X1E6C0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X1E6C0,	"F_TANK_KE_PRIMARY_SENDER_MIN_MILES");
	MakeDword	(x=0X1E6C4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X1E6C4,	"F_TANK_KE_SECONDARY_SENDER_MIN_MILES");
	MakeRptCmt	(0X1E6C8,	"If the fuel tank level remains in deadband this amount of miles, the fuel sender is considered to be malfunctioning.\nMiles");
	MakeDword	(x=0X1E6C8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X1E6C8,	"F_TANK_KE_FUEL_SENDER_MIN_MILES_IN_DEAD");
	MakeRptCmt	(0X1E6CC,	"Time allowed for the fuel level readings to be inconsistant with reality.\nSeconds");
	MakeDword	(x=0X1E6CC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X1E6CC,	"F_TANK_KE_FUEL_LEVEL_RATIONALITY_TIME_L");
	MakeRptCmt	(0X1E6D0,	"Vacuum Sensor raw reading must be above this TO adjust the tank vacuum bias.\nAD_Counts 10bit");
	MakeWord	(0X1E6D0);
	MakeName	(0X1E6D0,	"F_TANK_KE_REZERO_MIN_AD_COUNTS");
	MakeRptCmt	(0X1E6D2,	"Vacuum Sensor raw reading must be below this TO adjust the tank vacuum bias.\nAD_Counts_10bit");
	MakeWord	(0X1E6D2);
	MakeName	(0X1E6D2,	"F_TANK_KE_REZERO_MAX_AD_COUNTS");
	MakeRptCmt	(0X1E6D4,	"The minimum amount of time the vacuum sensor needs power applied before an accurate reading can be obtained.\nSeconds");
	MakeWord	(0X1E6D4);
	MakeName	(0X1E6D4,	"F_TANK_KE_SENSOR_WARMUP_TIME_MINIMUM");
	MakeRptCmt	(0X1E6D6,	"The slope coefficient for the tank vacuum AD counts to inches water equation.\nScalar");
	MakeWord	(0X1E6D6);
	MakeName	(0X1E6D6,	"F_TANK_KE_FUEL_TANK_VACUUM_SCALE");
	MakeRptCmt	(0X1E6D8,	"The filter coefficient for tank vacuum for fuel tank slosh determination.\nmillisecs.");
	MakeWord	(0X1E6D8);
	MakeName	(0X1E6D8,	"F_TANK_KE_VACUUM_SLOSH_TIME_CONSTANT");
	MakeRptCmt	(0X1E6DA,	"The filter coefficient for tank vacuum.\nSeconds");
	MakeWord	(0X1E6DA);
	MakeName	(0X1E6DA,	"F_TANK_KE_VACUUM_MAIN_TIME_CONSTANT");
	MakeRptCmt	(0X1E6DC,	"Enable the Tank Protection Mode when the tank vacuum is more negative than this value.\nInches H2O");
	MakeWord	(0X1E6DC);
	MakeName	(0X1E6DC,	"F_TANK_KE_HIGH_VACUUM_THRESHOLD");
	MakeRptCmt	(0X1E6DE,	"Disable the Tank Protection Mode when the tank vacuum is less negative than this value.\nInches H2O");
	MakeWord	(0X1E6DE);
	MakeName	(0X1E6DE,	"F_TANK_KE_LOW_VACUUM_THRESHOLD");
	MakeRptCmt	(0X1E6E0,	"Enable the Tank Protection Mode when the number OF excessive tank vacuum samples exceeds this value.\ncount");
	MakeByte	(0X1E6E0);
	MakeName	(0X1E6E0,	"F_TANK_KE_EXCESSIVE_VACUUM_COUNT_LIMIT");
	MakeRptCmt	(0X1E6E1,	"Disable the Tank Protection Mode when the total number OF tank vacuum samples exceeds this value.\ncount");
	MakeByte	(0X1E6E1);
	MakeName	(0X1E6E1,	"F_TANK_KE_NORMAL_VACUUM_COUNT_LIMIT");
	MakeRptCmt	(0X1E6E2,	"Maximum tank vacuum reading indicating a valid tank vacuum sensor read.\nAD Counts 10bit");
	MakeWord	(0X1E6E2);
	MakeName	(0X1E6E2,	"F_TANK_KE_TANK_VACUUM_RAW_MAX");
	MakeRptCmt	(0X1E6E4,	"Minimum tank vacuum reading indicating a valid tank vacuum sensor read.\nAD Counts 10bit");
	MakeWord	(0X1E6E4);
	MakeName	(0X1E6E4,	"F_TANK_KE_TANK_VACUUM_RAW_MIN");
	MakeRptCmt	(0X1E6E6,	"Indicates how long to use fast filter after the engine has begun running.\nSeconds");
	MakeWord	(0X1E6E6);
	MakeName	(0X1E6E6,	"F_TANK_KE_FAST_FILL_RUN_TIME");
	MakeRptCmt	(0X1E6E8,	"Adjustable frequency TO drive the fuel gage\nHertz");
	MakeWord	(0X1E6E8);
	MakeName	(0X1E6E8,	"F_TANK_KE_FUEL_GAGE_PWM_FREQUENCY");
	MakeRptCmt	(0X1E6EA,	"Bit selectable cal to force the PWM output for certainapplications.\nBOOLEAN");
	MakeByte	(0X1E6EA);
	MakeName	(0X1E6EA,	"F_TANK_KE_FUEL_GAGE_USES_PWM_OUTPUT");
	MakeRptCmt	(0X1E6EB,	"When set FALSE, the sender diagnostics will only run when the Manufacturers Enable Counter is Zero.\nBOOLEAN");
	MakeByte	(0X1E6EB);
	MakeName	(0X1E6EB,	"F_TANK_KE_F_TANK_IGNORE_MEC");
	MakeRptCmt	(0X1E6EC,	"Determines which evap test states allow the transferpump to be turned on.\nBOOLEAN");
	MakeByte	(0X1E6EC);
	MakeName	(0X1E6EC,	"F_TANK_KV_EVAP_STATE_ALLOWS_SEC_XFER_PU");
	MakeRptCmt	(0X1E6F4,	"Filter coefficient for both primary and secondary fuel levels used in fuel tank diagnostics.\nSeconds");
	MakeWord	(0X1E6F4);
	MakeName	(0X1E6F4,	"F_TANK_KE_FUEL_LEVEL_FILTER_COEF");
	MakeWord	(0X1E6F6);
	MakeName	(0X1E6F6,	"F_TANK_KE_VENT_RSTR_MIN_AD_COUNTS");
	MakeWord	(0X1E6F8);
	MakeName	(0X1E6F8,	"F_TANK_KE_VENT_RSTR_MAX_AD_COUNTS");
	MakeRptCmt	(0X1E6FA,	"Used to determine if vent restriction failed.\nSeconds");
	MakeWord	(0X1E6FA);
	MakeName	(0X1E6FA,	"F_TANK_KE_VENT_RESTRICT_PREP_TMR");
	MakeRptCmt	(0X1E6FC,	"Decrease in pressure after a peak needed to identify it as a pressure peak.\nInchOfWat");
	MakeWord	(0X1E6FC);
	MakeName	(0X1E6FC,	"DG_EONV_KE_EONV_DELTA_FROM_PRESSURE_PEAK");
	MakeWord	(0X1E6FE);
	MakeName	(0X1E6FE,	"DG_EONV_KE_EONV_DELTA_FROM_VACUUM_PEAK");
	MakeRptCmt	(0X1E700,	"This filter coefficient is used for the 0.020 inch EWMA calculation when the 0.020 inch EWMA is currently in the failing state.\nUnitless");
	MakeWord	(0X1E700);
	MakeName	(0X1E700,	"DG_EONV_KE_EONV_EWMA_FAIL_COEF");
	MakeRptCmt	(0X1E702,	"The fail threshold value that will set the MIL for P0442 once it is exceeded by EWMA.\nUnitless");
	MakeWord	(0X1E702);
	MakeName	(0X1E702,	"DG_EONV_KE_EONV_EWMA_FAIL_THRESHOLD");
	MakeRptCmt	(0X1E704,	"This filter coefficient is used for the 0.020 inch EWMA calculation when the 0.020 inch EWMA is currently in the passing state.\nUnitless");
	MakeWord	(0X1E704);
	MakeName	(0X1E704,	"DG_EONV_KE_EONV_EWMA_NONFAIL_COEF");
	MakeRptCmt	(0X1E706,	"The EWMA threshold value that will be used when the system is passing.\nUnitless");
	MakeWord	(0X1E706);
	MakeName	(0X1E706,	"DG_EONV_KE_EONV_EWMA_NONFAIL_THRESHOLD");
	MakeRptCmt	(0X1E708,	"The number of EWMA test samples required before the diagnostic is allowed to report a pass.\nUnitless");
	MakeByte	(0X1E708);
	MakeName	(0X1E708,	"DG_EONV_KE_EONV_EWMATESTSAMPLESTOPASS");
	MakeRptCmt	(0X1E709,	"Correction factor based on moderate fuel volatility.\nUnitless");
	MakeByte	(0X1E709);
	MakeName	(0X1E709,	"DG_EONV_KE_EONV_MOD_VOLATILITY_MULT");
	MakeRptCmt	(0X1E70A,	"Number of counts needed to indicate the Phase 1 pressure build has stabilized at zero.\nUnitless");
	MakeWord	(0X1E70A);
	MakeName	(0X1E70A,	"DG_EONV_KE_EONV_PH1_COUNTS_AT_ZERO_MAX");
	MakeRptCmt	(0X1E70C,	"Number of counts needed to indicate the Phase 2 vacuum build has stabilized at zero.\nUnitless");
	MakeWord	(0X1E70C);
	MakeName	(0X1E70C,	"DG_EONV_KE_EONV_PH2_COUNTS_AT_ZERO_MAX");
	MakeRptCmt	(0X1E70E,	"Minimum temperature change required to report a failed test.\nDegrees_C");
	MakeWord	(0X1E70E);
	MakeName	(0X1E70E,	"DG_EONV_KE_EONV_PHASE1_TEMP_DELTA_MIN");
	MakeRptCmt	(0X1E710,	"The maximum amount of time allowed to execute the pressure monitoring portions of the EONV Diagnostic.\nSeconds");
	MakeWord	(0X1E710);
	MakeName	(0X1E710,	"DG_EONV_KE_EONV_PHASE1_TIME_LIMIT");
	MakeRptCmt	(0X1E712,	"Number of counts needed to indicate the Phase 1 vacuum build.\nUnitless");
	MakeWord	(0X1E712);
	MakeName	(0X1E712,	"DG_EONV_KE_EONV_PHASE1_VAC_COUNTS_MAX");
	MakeRptCmt	(0X1E714,	"Lower boundary at which vacuum is considered to be building.\nInchOfWat");
	MakeWord	(0X1E714);
	MakeName	(0X1E714,	"DG_EONV_KE_EONV_PHASE1VACUUMALLOWED");
	MakeRptCmt	(0X1E716,	"Boundary at which pressure is considered zero in Phase 1.\nInchOfWat");
	MakeWord	(0X1E716);
	MakeName	(0X1E716,	"DG_EONV_KE_EONV_PHASE1ZEROPRESSURE");
	MakeRptCmt	(0X1E718,	"Boundary at which vacuum is considered zero in Phase 1.\nInchOfWat");
	MakeWord	(0X1E718);
	MakeName	(0X1E718,	"DG_EONV_KE_EONV_PHASE1ZEROVACUUM");
	MakeRptCmt	(0X1E71A,	"Minimum temperature change required to report a failed test.\nDegrees_C");
	MakeWord	(0X1E71A);
	MakeName	(0X1E71A,	"DG_EONV_KE_EONV_PHASE2_TEMP_DELTA_MIN");
	MakeRptCmt	(0X1E71C,	"Lower boundary at which pressure is considered essentially zero.\nInchOfWat");
	MakeWord	(0X1E71C);
	MakeName	(0X1E71C,	"DG_EONV_KE_EONV_PHASE2PRESSUREALLOWED");
	MakeRptCmt	(0X1E71E,	"Boundary at which pressure is considered zero in Phase 2.\nInchOfWat");
	MakeWord	(0X1E71E);
	MakeName	(0X1E71E,	"DG_EONV_KE_EONV_PHASE2ZEROPRESSURE");
	MakeRptCmt	(0X1E720,	"Boundary at which vacuum is considered zero in Phase 2.\nInchOfWat");
	MakeWord	(0X1E720);
	MakeName	(0X1E720,	"DG_EONV_KE_EONV_PHASE2ZEROVACUUM");
	MakeRptCmt	(0X1E722,	"Defines the integration limit for high volatility fuels.\nInH2O/Sec");
	MakeDword	(0X1E722);
	MakeName	(0X1E722,	"DG_EONV_KE_EONV_PRESS_HIGH_VOLATILITY");
	MakeRptCmt	(0X1E726,	"Defines the integration limit for moderate volatility fuels.\nInH2O/Sec");
	MakeDword	(0X1E726);
	MakeName	(0X1E726,	"DG_EONV_KE_EONV_PRESS_MOD_VOLATILITY");
	MakeRptCmt	(0X1E72A,	"Maximum number of times this process can be activated without exiting Phase 2.\nUnitless");
	MakeByte	(0X1E72A);
	MakeName	(0X1E72A,	"DG_EONV_KE_EONV_PRESSWAIT_ATTEMPTS_MAX");
	MakeWord	(0X1E72C);
	MakeName	(0X1E72C,	"DG_EONV_KE_EONV_RATIONALITYTIME");
	MakeRptCmt	(0X1E72E,	"The amount of time that the rationality check will wait for the KE_EONV_RationalityTime to be met.\nSeconds");
	MakeWord	(0X1E72E);
	MakeName	(0X1E72E,	"DG_EONV_KE_EONV_RATIONALITYWAITTIME");
	MakeRptCmt	(0X1E730,	"The minimum time to wait between Phase 1 and Phase 2.\nSeconds");
	MakeWord	(0X1E730);
	MakeName	(0X1E730,	"DG_EONV_KE_EONV_TIME_BETWEEN_PHASE");
	MakeRptCmt	(0X1E732,	"The elapsed time allowed to execute the EONV Diagnostic. If this time is exceeded, the test enters the analysis phase.\nSeconds");
	MakeWord	(0X1E732);
	MakeName	(0X1E732,	"DG_EONV_KE_EONV_TOTAL_TIME");
	MakeRptCmt	(0X1E734,	"The minimum desired Phase 2 vacuum threshold.\nInchOfWat");
	MakeWord	(0X1E734);
	MakeName	(0X1E734,	"DG_EONV_KE_EONV_VACUUM_THRESHOLD_MIN");
	MakeRptCmt	(0X1E736,	"Indicates whether or not the vehicle has a temperature sensor.\nBOOLEAN");
	MakeByte	(0X1E736);
	MakeName	(0X1E736,	"DG_EONV_KE_EONV_VEHICLE_HAS_TEMP_SENSOR");
	MakeWord	(0X1E738);
	MakeName	(0X1E738,	"DG_EONV_KE_EONV_WAITAFTERPRESSBUILDTIME");
	MakeRptCmt	(0X1E73A,	"Correction factor based on average vapor temperature in Phase 1.\nUnitless");
	MakeByte	(0X1E73A);
	MakeName	(0X1E73A,	"DG_EONV_KV_EONV_AVG_PH1_VAP_TEMP_MULT");
	MakeName	(0X1E748,	"Constant8_Charging_System_Min_PWM_Limit_?");
	MakeName	(0X1E749,	"Constant8_Charging_System_Max_PWM_Limit_?");
	MakeRptCmt	(0X1E74C,	"Correction factor based on delta vapor temperature in Phase 1.\nUnitless");
	MakeByte	(0X1E74C);
	MakeName	(0X1E74C,	"DG_EONV_KV_EONV_DELTA_VAP_TEMP_MULT");
	MakeRptCmt	(0X1E75E,	"Calibrated amount of time allocated for the volatility check.\nSeconds");
	MakeWord	(0X1E75E);
	MakeName	(0X1E75E,	"DG_EONV_KV_EONV_VOLATILITY_TIME_MAX");
	MakeRptCmt	(0X1E780,	"Pressure threshold attainable only by a system with a total leak less than 0.020 inch.\nInchOfWat");
	MakeName	(0X1E780,	"DI_EONV_KA_EONV_PRESSURE_THRESHOLD");
	MakeName	(0X1E9A2,	"Constant16_PWM_VATS_Maximum_Frequency_?");
	MakeName	(0X1E9A4,	"Constant16_PWM_VATS_Minimum_Frequency_?");
	MakeRptCmt	(0X1E9C2,	"The minimum change in fuel level that must occur to indicate a refueling event.\nPercent");
	MakeWord	(0X1E9C2);
	MakeName	(0X1E9C2,	"DI_EONV_KE_EONV_REFUELINGDELTALVLMAX");
	MakeRptCmt	(0X1E9C4,	"Upper fuel vapor temperature boundary for enabling EONV diagnostic.\nDegrees_C");
	MakeWord	(0X1E9C4);
	MakeName	(0X1E9C4,	"DI_EONV_KE_EONV_FUEL_VAP_TEMP_MAX");
	MakeRptCmt	(0X1E9C6,	"Minimum allowed system voltage below which system voltage will be considered  too low.\nVolts");
	MakeByte	(0X1E9C6);
	MakeName	(0X1E9C6,	"DI_EONV_KE_EONV_SYSTEM_VOLTAGE_MIN");
	MakeRptCmt	(0X1E9C7,	"Used to bypass the small leak test.\nBOOLEAN");
	MakeByte	(0X1E9C7);
	MakeName	(0X1E9C7,	"DI_EONV_KE_EONV_DO_NOT_USE_FAST_PASS");
	MakeRptCmt	(0X1E9C8,	"Maximum number of attempts that the diagnostic is allowed to enable in a given time frame.\nCounts");
	MakeByte	(0X1E9C8);
	MakeName	(0X1E9C8,	"DI_EONV_KE_EONV_ATTEMPTS_MAX");
	MakeRptCmt	(0X1E9CA,	"Delays the update of calculated estimated ambient air temperature.\nSeconds");
	MakeDword	(x=0X1E9CA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X1E9CA,	"DI_EONV_KE_EONV_AMBAIRTIME");
	MakeRptCmt	(0X1E9CE,	"Maximum count for the EONV_AmbAir_Idle_Counter.\nCounts");
	MakeWord	(0X1E9CE);
	MakeName	(0X1E9CE,	"DI_EONV_KE_EONV_AMBAIR_IDLE_COUNTER_MAX");
	MakeRptCmt	(0X1E9D0,	"Decrement the estimated ambient air idle counter based on air flow at idle.\nCounter");
	MakeDword	(x=0X1E9D0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X1E9D0,	"DI_EONV_KV_EONV_AMBAIR_IDLE_DECREMENTER");
	MakeDword	(x=0X1E9D4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1E9D8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1E9DC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1E9E0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1E9E4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1E9E8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1E9EC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeRptCmt	(0X1E9F2,	"Change the estimated ambient air temperature based on air flow.\nDegrees_C");
	MakeDword	(x=0X1E9F2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X1E9F2,	"DI_EONV_KV_EONV_AMBAIRTEMP_FILT_STEP");
	MakeDword	(x=0X1E9F6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1E9FA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1E9FE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1EA02);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1EA06);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1EA0A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X1EA0E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeRptCmt	(0X1EA14,	"Change in vacuum over time above this level will indicate that a refuelevent has occurred.\nInches H2O");
	MakeName	(0X1EA14,	"DI_EONV_KV_EONV_DELTA_VACUUM_RISE_MAX");
	MakeRptCmt	(0X1EA36,	"Calibrated amount of airflow needed to prevent the idle counter from increasing.\nGrams_Per_Second");
	MakeWord	(0X1EA36);
	MakeName	(0X1EA36,	"DI_EONV_KE_EONV_AMBAIR_AIRFLOW");
	MakeRptCmt	(0X1EA38,	"Calibrated amount of vehicle speed needed to update minimum intake air temperature and the ambient air temperature estimate.\nMPH");
	MakeWord	(0X1EA38);
	MakeName	(0X1EA38,	"DI_EONV_KE_EONV_AMBAIR_VEHSPD");
	MakeRptCmt	(0X1EA3A,	"Lower boundary of the ambient air temperature window to enable EONV.\nDegrees_C");
	MakeWord	(0X1EA3A);
	MakeName	(0X1EA3A,	"DI_EONV_KE_EONV_AMBIENTAIRTEMP_LOWER_LIM");
	MakeRptCmt	(0X1EA3C,	"Upper boundary of the ambient air temperature window to enable EONV.\nDegrees_C");
	MakeWord	(0X1EA3C);
	MakeName	(0X1EA3C,	"DI_EONV_KE_EONV_AMBIENTAIRTEMP_UPPER_LIM");
	MakeWord	(0X1EA3E);
	MakeName	(0X1EA3E,	"DI_EONV_KE_EONV_DEFAULT_FUEL_LEVEL");
	MakeRptCmt	(0X1EA40,	"Upper boundary on delta vacuum used to detect refueling to prevent intermittence from looking like a refueling event.\nInches H2O");
	MakeWord	(0X1EA40);
	MakeName	(0X1EA40,	"DI_EONV_KE_EONV_DELTA_VAC_REFUELING_MAX");
	MakeRptCmt	(0X1EA42,	"To execute EONV, the engine run time must exceed this value.\nSeconds");
	MakeDword	(x=0X1EA42);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X1EA42,	"DI_EONV_KE_EONV_ENGINE_RUN_TIME_MIN");
	MakeRptCmt	(0X1EA46,	"The fuel tank vacuum offset for EONV.\nInches H2O");
	MakeWord	(0X1EA46);
	MakeName	(0X1EA46,	"DI_EONV_KE_EONV_FUEL_TANK_VACUUM_OFFSET");
	MakeRptCmt	(0X1EA48,	"To determine the sample period for fuel level slosh.\nCounts");
	MakeWord	(0X1EA48);
	MakeName	(0X1EA48,	"DI_EONV_KE_EONV_FL_SLOSH_PERIOD");
	MakeRptCmt	(0X1EA4A,	"To determine unacceptable liquid slosh period in the secondary fuel tank.\nCounts");
	MakeWord	(0X1EA4A);
	MakeName	(0X1EA4A,	"DI_EONV_KE_EONV_FL_SLOSH_PERIOD_PRIM");
	MakeRptCmt	(0X1EA4C,	"\nCounts");
	MakeWord	(0X1EA4C);
	MakeName	(0X1EA4C,	"DI_EONV_KE_EONV_FL_SLOSH_PERIOD_SEC");
	MakeRptCmt	(0X1EA4E,	"Upper fuel level boundary for enabling EONV diagnostic.\nPercent");
	MakeWord	(0X1EA4E);
	MakeName	(0X1EA4E,	"DI_EONV_KE_EONV_FUEL_LEVEL_MAX");
	MakeRptCmt	(0X1EA50,	"Lower fuel level boundary for enabling EONV diagnostic.\nPercent");
	MakeWord	(0X1EA50);
	MakeName	(0X1EA50,	"DI_EONV_KE_EONV_FUEL_LEVEL_MIN");
	MakeRptCmt	(0X1EA52,	"Filter coefficient for the fuel vapor temperature variable.\n0-1");
	MakeWord	(0X1EA52);
	MakeName	(0X1EA52,	"DI_EONV_KE_EONV_FUEL_VAPORTEMP_FILT_COEF");
	MakeRptCmt	(0X1EA54,	"Lower fuel vapor temperature boundary for enabling EONV diagnostic.\nDegrees_C");
	MakeWord	(0X1EA54);
	MakeName	(0X1EA54,	"DI_EONV_KE_EONV_FUEL_VAP_TEMP_MIN");
	MakeRptCmt	(0X1EA56,	"Minimum distance traveled to enable the EONV diagnostic.\nMiles");
	MakeWord	(0X1EA56);
	MakeName	(0X1EA56,	"DI_EONV_KE_EONV_MIN_TRIP_DISTANCE");
	MakeRptCmt	(0X1EA58,	"Minimum vehicle speed to start calculation of distance.\nMPH");
	MakeWord	(0X1EA58);
	MakeName	(0X1EA58,	"DI_EONV_KE_EONV_MIN_VEHICLE_SPEED");
	MakeRptCmt	(0X1EA5A,	"Filtered coefficient for vacuum slosh.\n0-1");
	MakeWord	(0X1EA5A);
	MakeName	(0X1EA5A,	"DI_EONV_KE_EONV_SLOSH_TANKVAC_FILT_COEF");
	MakeRptCmt	(0X1EA5C,	"The time delta at which the current vacuum is compared to a previous vacuum in order to detect a refueling event.\nSeconds");
	MakeWord	(0X1EA5C);
	MakeName	(0X1EA5C,	"DI_EONV_KE_EONV_SNAPSHOT_DELAY_MAX");
	MakeRptCmt	(0X1EA5E,	"Maximum allowable pressure in the fuel tank. If exceeded, the diagnostic will consider a refueling event to have occurred.\nInches H2O");
	MakeWord	(0X1EA5E);
	MakeName	(0X1EA5E,	"DI_EONV_KE_EONV_TANK_PRESSURE_MAX");
	MakeRptCmt	(0X1EA60,	"Filter coefficient for the tank vacuum variable.\n0-1");
	MakeWord	(0X1EA60);
	MakeName	(0X1EA60,	"DI_EONV_KE_EONV_TANK_VACUUM_FILT_COEF");
	MakeRptCmt	(0X1EA62,	"Filter coefficient for the refueling tank vacuum variable.\n0-1");
	MakeWord	(0X1EA62);
	MakeName	(0X1EA62,	"DI_EONV_KE_EONV_TANK_VAC_FILTCOEF_REFUEL");
	MakeRptCmt	(0X1EA64,	"Tank vacuum sensor voltage above which the tank vacuum variable will not be rezeroed.\nVolts");
	MakeWord	(0X1EA64);
	MakeName	(0X1EA64,	"DI_EONV_KE_EONV_TANK_VACUUM_REZERO_MAX");
	MakeRptCmt	(0X1EA66,	"Tank vacuum sensor voltage below which the tank vacuum variable will not be rezeroed.\nVolts");
	MakeWord	(0X1EA66);
	MakeName	(0X1EA66,	"DI_EONV_KE_EONV_TANK_VACUUM_REZERO_MIN");
	MakeRptCmt	(0X1EA68,	"Maximum time to wait between completed EONV tests.\nHours");
	MakeWord	(0X1EA68);
	MakeName	(0X1EA68,	"DI_EONV_KE_EONV_TIME_BETWEEN_TESTS_MAX");
	MakeRptCmt	(0X1EA6A,	"Minimum time to wait between completed EONV tests.\nHours");
	MakeWord	(0X1EA6A);
	MakeName	(0X1EA6A,	"DI_EONV_KE_EONV_TIME_BETWEEN_TESTS_MIN");
	MakeRptCmt	(0X1EA6C,	"Mileage at which the EONV diagnostic can begin running. To prevent a dead battery at the assembly plant.\nMiles");
	MakeDword	(x=0X1EA6C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X1EA6C,	"DI_EONV_KE_EONV_TOTALVEHICLEMILEAGEMIN");
	MakeRptCmt	(0X1EA70,	"Coolant temperature must exceed this value in order to execute EONV diagnostic.\nDegrees_C");
	MakeWord	(0X1EA70);
	MakeName	(0X1EA70,	"DI_EONV_KE_EONV_TSTAT_TARGET_TEMP");
	MakeRptCmt	(0X1EA72,	"Slope used to rescale tank vacuum sensor voltage to inches of water.\nInches_H2O/Volts");
	MakeWord	(0X1EA72);
	MakeName	(0X1EA72,	"DI_EONV_KE_EONV_VAC_SENSOR_SCALE_SLOPE");
	MakeRptCmt	(0X1EA74,	"Determines the number of vent valve strike cycles used by the cleaning process.\nCounts");
	MakeByte	(0X1EA74);
	MakeName	(0X1EA74,	"DI_EONV_KE_EONV_VENT_VLV_STRIKE_LIM");
	MakeRptCmt	(0X1EA76,	"The limit of time that the vent valve will be commanded closed during the cleaning cycle period.\nSeconds");
	MakeWord	(0X1EA76);
	MakeName	(0X1EA76,	"DI_EONV_KE_EONV_VENT_VLV_STRIKE_ON_TMR");
	MakeRptCmt	(0X1EA78,	"Determines the limit of the vent valve cleaning cycle period.\nSeconds");
	MakeWord	(0X1EA78);
	MakeName	(0X1EA78,	"DI_EONV_KE_EONV_VENT_VLV_STRIKE_PERIOD");
	MakeRptCmt	(0X1EA7A,	"Filter coefficient for fuel level variable used by slosh detection.\n0-1");
	MakeWord	(0X1EA7A);
	MakeName	(0X1EA7A,	"DI_EONV_KE_FUEL_LVL_FILT_COEF_SLOSH_PRI");
	MakeRptCmt	(0X1EA7C,	"Filter coefficient for fuel level variable used by slosh detection.\n0-1");
	MakeWord	(0X1EA7C);
	MakeName	(0X1EA7C,	"DI_EONV_KE_FUEL_LVL_FILT_COEF_SLOSH_SEC");
	MakeRptCmt	(0X1EA7E,	"Filter coefficient for fuel level variable used by slosh detection.\n0-1");
	MakeWord	(0X1EA7E);
	MakeName	(0X1EA7E,	"DI_EONV_KE_FUEL_LVL_VOLUME_FILT_COEF");
	MakeRptCmt	(0X1EA80,	"Threshold for the determination of detected slosh if the fuel level delta is too high.\nLiters");
	MakeName	(0X1EA80,	"DI_EONV_KV_EONV_FUEL_LEVEL_SLOSH_PRIM");
	MakeRptCmt	(0X1EABE,	"Threshold for the determination of detected slosh if the fuel level delta is too high.\nLiters");
	MakeName	(0X1EABE,	"DI_EONV_KV_EONV_FUEL_LEVEL_SLOSH_SEC");
	MakeRptCmt	(0X1EAFC,	"Offset the estimated ambient air temperature from the intake air temperature using vehicle speed and engine airflow.\nDegrees_C");
	MakeName	(0X1EAFC,	"DI_EONV_KA_EONV_ESTAMBAIR_OFFSET");
	MakeRptCmt	(0X1EC72,	"Maximum allowed voltage for the tank vacuum signal.\nVolts");
	MakeByte	(0X1EC72);
	MakeName	(0X1EC72,	"DG_EVAP_KE_TANK_VACUUM_RAW_MAX");
	MakeRptCmt	(0X1EC73,	"Minimum allowed voltage for the tank vacuum signal.\nVolts");
	MakeByte	(0X1EC73);
	MakeName	(0X1EC73,	"DG_EVAP_KE_TANK_VACUUM_RAW_MIN");
	MakeRptCmt	(0X1EC74,	"The maximum amount of time allowed to execute the cold fuel tank portions of the Evap Diagnostic.\nSeconds");
	MakeWord	(0X1EC74);
	MakeName	(0X1EC74,	"DG_EVAP_KE_EVAP_COLD_TEST_TIMER_LIMIT");
	MakeRptCmt	(0X1EC76,	"Maximum vehicle speed value to run the service bay test.\nMPH");
	MakeWord	(0X1EC76);
	MakeName	(0X1EC76,	"DG_EVAP_KE_EVAP_SERVICE_TEST_VSS_MAX");
	MakeWord	(0X1EC78);
	MakeName	(0X1EC78,	"DG_EVAP_KE_EVAP_SERVICE_TPS_MAX");
	MakeWord	(0X1EC7A);
	MakeName	(0X1EC7A,	"DG_EVAP_KE_EVAP_SERVICE_TPS_MIN");
	MakeRptCmt	(0X1EC7C,	"Minimum amount of time that the slosh rationality test must be passing for a slosh rationality test to be considered passed.\nSeconds");
	MakeWord	(0X1EC7C);
	MakeName	(0X1EC7C,	"DG_EVAP_KE_EVAP_SLOSH_RAT_PASS_TIME_MIN");
	MakeRptCmt	(0X1EC7E,	"Minimum amount of time that the vehicle at rest conditions must be met before the vehicle will be considered at rest.\nSeconds");
	MakeWord	(0X1EC7E);
	MakeName	(0X1EC7E,	"DG_EVAP_KE_EVAP_VEHICLE_REST_TIME_MIN");
	MakeRptCmt	(0X1EC80,	"Maximum throttle position at which vehicle will be considered at rest.\nPercent");
	MakeWord	(0X1EC80);
	MakeName	(0X1EC80,	"DG_EVAP_KE_EVAP_VEHICLE_REST_TPS_MAX");
	MakeRptCmt	(0X1EC82,	"Maximum vehicle speed at which vehicle will be considered at rest.\nMPH");
	MakeWord	(0X1EC82);
	MakeName	(0X1EC82,	"DG_EVAP_KE_EVAP_VEHICLE_REST_VSS_MAX");
	MakeRptCmt	(0X1EC84,	"Fuel tank pressure above which the Evap Diagnostic_will be aborted.\nIn. of H2O");
	MakeWord	(0X1EC84);
	MakeName	(0X1EC84,	"DG_EVAP_KE_EVAP_OVERPRESSURE_THRESH");
	MakeRptCmt	(0X1EC86,	"This calibration determines how long to delay before starting to monitor Tank_Vacuum_Filtered and Evap_System_Vacuum_Index.\nSeconds");
	MakeWord	(0X1EC86);
	MakeName	(0X1EC86,	"DG_EVAP_KE_EXCESS_VAC_STAGE2_DELAY_LIMIT");
	MakeRptCmt	(0X1EC88,	"If Excess_Vac_Stage2_Fail_Timer is >= this calibration, Stage2 of the Excess Vacuum test is failed and completed.\nSeconds");
	MakeWord	(0X1EC88);
	MakeName	(0X1EC88,	"DG_EVAP_KE_EXCESS_VAC_STAGE2_FAIL_TIME");
	MakeDword	(x=0X1EC8A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X1EC8A,	"DG_EVAP_KE_EXCESS_VAC_STAGE2_INTEGRAL");
	MakeRptCmt	(0X1EC8E,	"This calibration limits how long Stage2 of the Excess Vacuum test can run.\nSeconds");
	MakeWord	(0X1EC8E);
	MakeName	(0X1EC8E,	"DG_EVAP_KE_EXCESS_VAC_STAGE2_TEST_LIMIT");
	MakeRptCmt	(0X1EC90,	"If Tank_Vacuum_Filtered is >= this calibration, Excess_Vac_Stage2_Fail_Timer will be incremented.\nIn. of H2O");
	MakeWord	(0X1EC90);
	MakeName	(0X1EC90,	"DG_EVAP_KE_EXCESS_VAC_STAGE2_VAC_LEVEL");
	MakeRptCmt	(0X1EC92,	"If the tank vacuum is above this calibration, Excess Vacuum Test Stage1 is failed.\nIn. of H2O");
	MakeWord	(0X1EC92);
	MakeName	(0X1EC92,	"DG_EVAP_KE_EXCESS_VACUUM_LEVEL_STAGE1");
	MakeRptCmt	(0X1EC94,	"Maximum time allowed for tank vacuum to stay above an excess vacuum threshold before failing Excess Vacuum Test Stage1.\nSeconds");
	MakeWord	(0X1EC94);
	MakeName	(0X1EC94,	"DG_EVAP_KE_EXCESS_VACUUM_TIME_STAGE1");
	MakeRptCmt	(0X1EC96,	"This calibration limits how long each segment will run until its slope is tested for passing or failing.\nSeconds");
	MakeWord	(0X1EC96);
	MakeName	(0X1EC96,	"DG_EVAP_KE_FINAL_ITERATION_SEGMENT_TIME");
	MakeRptCmt	(0X1EC98,	"Adjusts the slope threshold used for the total slope of the final iteration.\nUnitless");
	MakeWord	(0X1EC98);
	MakeName	(0X1EC98,	"DG_EVAP_KE_FINAL_SLOPE_MULTIPLIER");
	MakeRptCmt	(0X1EC9A,	"The TPS must be <= this cal. to uncover the port on a ported purge system (manifold purge could use 100.\nPercent");
	MakeWord	(0X1EC9A);
	MakeName	(0X1EC9A,	"DG_EVAP_KE_PURGE_LEAK_TEST_TPS_MAX");
	MakeRptCmt	(0X1EC9C,	"The TPS must be >= this cal. to uncover the port on a ported purge system (manifold purge could use 0.\nPercent");
	MakeWord	(0X1EC9C);
	MakeName	(0X1EC9C,	"DG_EVAP_KE_PURGE_LEAK_TEST_TPS_MIN");
	MakeRptCmt	(0X1EC9E,	"Maximum time allowed for tank vacuum to stay above a high vacuum threshold before failing the Purge Valve Leak Test.\nSeconds");
	MakeWord	(0X1EC9E);
	MakeName	(0X1EC9E,	"DG_EVAP_KE_PURGE_VALVE_HIGH_VAC_TIME");
	MakeRptCmt	(0X1ECA0,	"This calibration determines how long to delay the Purge Valve Leak Test pass/fail determination.\nSeconds");
	MakeWord	(0X1ECA0);
	MakeName	(0X1ECA0,	"DG_EVAP_KE_PURGE_VALVE_LEAK_TEST_DELAY");
	MakeRptCmt	(0X1ECA2,	"The maximum amount of time the Purge Valve Leak Test will be allowed to run.\nSeconds");
	MakeWord	(0X1ECA2);
	MakeName	(0X1ECA2,	"DG_EVAP_KE_PURGE_VALVE_LEAK_TEST_TIME");
	MakeRptCmt	(0X1ECA4,	"If the Purge_Valve_Leak_Vac_Timer is >= this cal., proper conditions for the test have been achieved.\nSeconds");
	MakeWord	(0X1ECA4);
	MakeName	(0X1ECA4,	"DG_EVAP_KE_PURGE_VALVE_LEAK_VAC_TIME_MIN");
	MakeRptCmt	(0X1ECA6,	"If tank vacuum is greater than this value, the Purge Valve Leak Test fails and ends.\nIn. of H2O");
	MakeWord	(0X1ECA6);
	MakeName	(0X1ECA6,	"DG_EVAP_KE_PURGE_VALVE_LEAK_VACUUM_LEVEL");
	MakeRptCmt	(0X1ECA8,	"If purge vapors are present for this amount of time or longer, the Purge Valve Leak Test fails and ends.\nSeconds");
	MakeWord	(0X1ECA8);
	MakeName	(0X1ECA8,	"DG_EVAP_KE_PURGE_VALVE_LEAK_VAPOR_TIME");
	MakeRptCmt	(0X1ECAA,	"The intake manifold vacuum must be > this value to ensure that there is enough vacuum source being applied to the evap system.\nkPa");
	MakeWord	(0X1ECAA);
	MakeName	(0X1ECAA,	"DG_EVAP_KE_PURGE_VALVE_TEST_VAC_MIN");
	MakeRptCmt	(0X1ECAC,	"The minimum amount of time delay before the tank vacuum is checked to start the vent pulse.\nSeconds");
	MakeWord	(0X1ECAC);
	MakeName	(0X1ECAC,	"DG_EVAP_KE_SYSTEM_VENTING_TIME_DELAY");
	MakeRptCmt	(0X1ECAE,	"This calibration limits how long each vacuum decay iteration will run until its slope is tested for passing or failing.\nSeconds");
	MakeWord	(0X1ECAE);
	MakeName	(0X1ECAE,	"DG_EVAP_KE_VAC_DECAY_ITERATION_TIME");
	MakeRptCmt	(0X1ECB0,	"This calibration limits how long a vacuum decay may run.\nSeconds");
	MakeWord	(0X1ECB0);
	MakeName	(0X1ECB0,	"DG_EVAP_KE_VAC_DECAY_SLOPE_TIME");
	MakeRptCmt	(0X1ECB2,	"The Vacuum Decay test will restart if throttle position is > this calibration.\nPercent");
	MakeWord	(0X1ECB2);
	MakeName	(0X1ECB2,	"DG_EVAP_KE_VAC_DECAY_TPS_HIGH_LMT");
	MakeRptCmt	(0X1ECB4,	"If the tank vacuum goes below this cal., the vacuum decay slope will be calculated.\nIn. of H2O");
	MakeWord	(0X1ECB4);
	MakeName	(0X1ECB4,	"DG_EVAP_KE_VAC_DECAY_VACUUM_MIN");
	MakeRptCmt	(0X1ECB6,	"The Vacuum Decay test will restart if vehicle speed is > this calibration.\nMPH");
	MakeWord	(0X1ECB6);
	MakeName	(0X1ECB6,	"DG_EVAP_KE_VAC_DECAY_VEH_SPEED_HIGH_LMT");
	MakeWord	(0X1ECB8);
	MakeName	(0X1ECB8,	"DG_EVAP_KE_VAC_PULLDOWN_PURGEDC_MIN");
	MakeRptCmt	(0X1ECBA,	"Maximum amount of time the sensor is allowed to be out of range high.\nSeconds");
	MakeWord	(0X1ECBA);
	MakeName	(0X1ECBA,	"DG_EVAP_KE_VAC_SENSOR_HIGH_FAIL_TIME");
	MakeRptCmt	(0X1ECBC,	"Maximum amount of time the sensor is allowed to be out of range low.\nSeconds");
	MakeWord	(0X1ECBC);
	MakeName	(0X1ECBC,	"DG_EVAP_KE_VAC_SENSOR_LOW_FAIL_TIME");
	MakeRptCmt	(0X1ECBE,	"This is the level of tank vacuum needed to end stage1 of the Weak Vacuum Test and start the Small Leak Test.\nIn. of H2O");
	MakeWord	(0X1ECBE);
	MakeName	(0X1ECBE,	"DG_EVAP_KE_VACUUM_DECAY_ENABLE_VACUUM");
	MakeRptCmt	(0X1ECC0,	"If tank vacuum level is > this calibration, then immediately proceed to the vacuum decay test.\nIn. of H2O");
	MakeWord	(0X1ECC0);
	MakeName	(0X1ECC0,	"DG_EVAP_KE_VACUUM_DECAY_START_VAC_LEVEL");
	MakeRptCmt	(0X1ECC2,	"This calibration limits high the Vacuum_Pulldown_Integral can get before the vacuum pulldown expires.\nSeconds");
	MakeDword	(0X1ECC2);
	MakeName	(0X1ECC2,	"DG_EVAP_KE_VACUUM_PULLDOWN_INTEGRAL_LIM");
	MakeRptCmt	(0X1ECC6,	"If tank vacuum is >= this calibration, the tank vacuum Pulldown is complete.\nIn. of H2O");
	MakeWord	(0X1ECC6);
	MakeName	(0X1ECC6,	"DG_EVAP_KE_VACUUM_PULLDOWN_VACUUM_LEVEL");
	MakeRptCmt	(0X1ECC8,	"This calibration limits how long to wait before calculating the Vapor_Pressure_Slope.\nSeconds");
	MakeWord	(0X1ECC8);
	MakeName	(0X1ECC8,	"DG_EVAP_KE_VAPOR_PRESSURE_SLOPE_TIMER");
	MakeRptCmt	(0X1ECCA,	"This is the minimum pressure required to start the vapor pressure build monitoring.\nIn. of H2O");
	MakeWord	(0X1ECCA);
	MakeName	(0X1ECCA,	"DG_EVAP_KE_VAPOR_PRESSURE_TEST_MIN_PRESS");
	MakeWord	(0X1ECCC);
	MakeName	(0X1ECCC,	"DG_EVAP_KE_VAPOR_PRESSURE_TEST_TIMER");
	MakeRptCmt	(0X1ECCE,	"The tank vacuum must be <= this value in order to start the vapor pressure test.\nIn. of H2O");
	MakeWord	(0X1ECCE);
	MakeName	(0X1ECCE,	"DG_EVAP_KE_VAPOR_PRESSURE_VACUUM_LEVEL");
	MakeRptCmt	(0X1ECD0,	"Determines how long the evap system should vent after it has reached its vented vacuum level.\nSeconds");
	MakeByte	(0X1ECD0);
	MakeName	(0X1ECD0,	"DG_EVAP_KE_VAPOR_PRESSURE_VENT_DELAY");
	MakeRptCmt	(0X1ECD2,	"Limits how long to wait before bypassing the vapor pressure build test.\nSeconds");
	MakeWord	(0X1ECD2);
	MakeName	(0X1ECD2,	"DG_EVAP_KE_VAPOR_PRESSURE_WAIT_TIMER_LMT");
	MakeRptCmt	(0X1ECD4,	"At the tank vacuum level KE_Vent_On_Vacuum_Level_1, the canister will be on for this amount of time.\nSeconds");
	MakeWord	(0X1ECD4);
	MakeName	(0X1ECD4,	"DG_EVAP_KE_VENT_ON_TIME_1");
	MakeRptCmt	(0X1ECD6,	"At the tank vacuum level KE_Vent_On_Vacuum_Level_2, the canister will be on for this amount of time.\nSeconds");
	MakeWord	(0X1ECD6);
	MakeName	(0X1ECD6,	"DG_EVAP_KE_VENT_ON_TIME_2");
	MakeRptCmt	(0X1ECD8,	"At the tank vacuum level KE_Vent_On_Vacuum_Level_3, the canister will be on for this amount of time.\nSeconds");
	MakeWord	(0X1ECD8);
	MakeName	(0X1ECD8,	"DG_EVAP_KE_VENT_ON_TIME_3");
	MakeRptCmt	(0X1ECDA,	"If the tank vacuum level is above this calibration, the canister vent will be on for the amount of time KE_Vent_On_Timer_1.\nIn. of H2O");
	MakeWord	(0X1ECDA);
	MakeName	(0X1ECDA,	"DG_EVAP_KE_VENT_ON_VACUUM_LEVEL_1");
	MakeRptCmt	(0X1ECDC,	"If the tank vacuum level is above this calibration, the canister vent will be on for the amount of time KE_Vent_On_Timer_2.\nIn. of H2O");
	MakeWord	(0X1ECDC);
	MakeName	(0X1ECDC,	"DG_EVAP_KE_VENT_ON_VACUUM_LEVEL_2");
	MakeRptCmt	(0X1ECDE,	"If the tank vacuum level is above this calibration, the canister vent will be on for the amount of time KE_Vent_On_Timer_3.\nIn. of H2O");
	MakeWord	(0X1ECDE);
	MakeName	(0X1ECDE,	"DG_EVAP_KE_VENT_ON_VACUUM_LEVEL_3");
	MakeRptCmt	(0X1ECE0,	"This calibration determines how high tank vacuum must be before it is considered to be passing stage2 of the Weak Vacuum Test.\nIn. of H2O");
	MakeWord	(0X1ECE0);
	MakeName	(0X1ECE0,	"DG_EVAP_KE_WEAK_VAC_STAGE2_VAC_LEVEL");
	MakeRptCmt	(0X1ECE2,	"This calibration limits how long the vacuum monitor portion of stage2 of the Weak Vacuum Test may run.\nSeconds");
	MakeWord	(0X1ECE2);
	MakeName	(0X1ECE2,	"DG_EVAP_KE_WEAK_VAC_STAGE2_VAC_TEST");
	MakeRptCmt	(0X1ECE4,	"This calibration determines how long the vacuum must be passing before stage2 of the Weak Vacuum Test passes.\nSeconds");
	MakeWord	(0X1ECE4);
	MakeName	(0X1ECE4,	"DG_EVAP_KE_WEAK_VAC_STAGE2_VAC_TIME");
	MakeRptCmt	(0X1ECE6,	"This calibration limits how long the purge vapor monitor portion of stage2 of the Weak Vacuum Test may run.\nSeconds");
	MakeWord	(0X1ECE6);
	MakeName	(0X1ECE6,	"DG_EVAP_KE_WEAK_VAC_STAGE2_VAPOR_TEST");
	MakeRptCmt	(0X1ECE8,	"This calibration determines how long purge vapors must be detected before stage2 of the Weak Vacuum Test passes.\nSeconds");
	MakeWord	(0X1ECE8);
	MakeName	(0X1ECE8,	"DG_EVAP_KE_WEAK_VAC_STAGE2_VAPOR_TIME");
	MakeDword	(0X1ECEA);
	MakeName	(0X1ECEA,	"DG_EVAP_KE_WEAK_VACUUM_INTEGRAL_MIN");
	MakeRptCmt	(0X1ECEE,	"Setting this option to 'TRUE' causes the timer to start updating on 'purge enabled.' instead of 'engine run'.\nFlag");
	MakeByte	(0X1ECEE);
	MakeName	(0X1ECEE,	"DG_EVAP_KE_EVAP_PURGE_ENABLE_COLD_TIME");
	MakeByte	(0X1ECEF);
	MakeName	(0X1ECEF,	"DG_EVAP_KE_EVAP_SLOSH_RAT_PASS_TESTS_MIN");
	MakeRptCmt	(0X1ECF0,	"Limits the number of final iteration vacuum decays per trip.\nCounts");
	MakeByte	(0X1ECF0);
	MakeName	(0X1ECF0,	"DG_EVAP_KE_FINAL_ITERATION_TRIP_MAX");
	MakeRptCmt	(0X1ECF1,	"If the number of vacuum decay iterations is >= this cal., each segment of the vacuum decay will be monitored.\nCount");
	MakeByte	(0X1ECF1);
	MakeName	(0X1ECF1,	"DG_EVAP_KE_VAC_DECAY_ITERATION_LIMIT");
	MakeRptCmt	(0X1ECF2,	"Multiplier correction for the Vapor_Pressure_Slope.\nMultiplier");
	MakeByte	(0X1ECF2);
	MakeName	(0X1ECF2,	"DG_EVAP_KE_VAPOR_PRESSURE_MULTIPLIER");
	MakeRptCmt	(0X1ECF4,	"The maximum amount of time that is required for the stabilization period when Evap_040_Level_Slosh_Detected is FALSE.\nSeconds");
	MakeWord	(0X1ECF4);
	MakeName	(0X1ECF4,	"DG_EVAP_KV_STABILIZ_PERIOD_LIM_NO_SLOSH");
	MakeRptCmt	(0X1ED0A,	"The maximum amount of time that is required for the stabilization period when Evap_040_Level_Slosh_Detected is TRUE.\nSeconds");
	MakeWord	(0X1ED0A);
	MakeName	(0X1ED0A,	"DG_EVAP_KV_STABILIZ_PERIOD_LIM_SLOSH");
	MakeByte	(0X1ED1F);
	MakeRptCmt	(0X1ED20,	"This factor is used to adjust the slope threshold for each iteration of the vacuum decay slope.\nMultiplier");
	MakeName	(0X1ED20,	"DG_EVAP_KV_VAC_DECAY_SLOPE_FACTOR");
	MakeByte	(0X1ED29);
	MakeRptCmt	(0X1ED2A,	"This factor is used to adjust each segment's slope threshold for the final iteration.\nMultiplier");
	MakeName	(0X1ED2A,	"DG_EVAP_KV_SEGMENT_SLOPE_FACTOR");
	MakeRptCmt	(0X1ED30,	"\n");
	MakeWord	(0X1ED30);
	MakeName	(0X1ED30,	"DI_EVAP_KV_EVAP_DIAG_PURGE_DUTY_CYCLE_LI");
	MakeRptCmt	(0X1ED5A,	"Fuel level must be <= this TO enable Evap diagnostic system.\nPercent");
	MakeWord	(0X1ED5A);
	MakeName	(0X1ED5A,	"DI_EVAP_KE_FUEL_LEVEL_ENABLE_MAX");
	MakeWord	(0X1ED5C);
	MakeName	(0X1ED5C,	"DI_EVAP_KE_CCP_MAX_DUTY_CYCLE_CLOSED");
	MakeRptCmt	(0X1ED5E,	"The minimum necessary at the onset of purge being enabled to allow the Evap test to start.\nMPH");
	MakeWord	(0X1ED5E);
	MakeName	(0X1ED5E,	"DI_EVAP_KE_EVAP_PURGE_ENABLED_MIN_SPEED");
	MakeRptCmt	(0X1ED60,	"Amount of tank vacuum used to determine if irrational slosh has been present during the slosh rationality test.\nInches Of Water");
	MakeWord	(0X1ED60);
	MakeName	(0X1ED60,	"DI_EVAP_KE_DELTA_VAC_SLOSH_FORSRT");
	MakeWord	(0X1ED62);
	MakeName	(0X1ED62,	"DI_EVAP_KE_PRI_DELTA_FUEL_SLOSH_FORSRT");
	MakeWord	(0X1ED64);
	MakeName	(0X1ED64,	"DI_EVAP_KE_SEC_DELTA_FUEL_SLOSH_FORSRT");
	MakeRptCmt	(0X1ED66,	"This is the minimum amount of time after a solenoid event whichwill mask out the slosh detection algorithm.\nSeconds");
	MakeName	(0X1ED66,	"DI_EVAP_KV_SOLENOID_EVENT_SLOSH_DELAY");
	MakeRptCmt	(0X1ED7C,	"Engine Vacuum contribution to Evap_System_Vacuum_Index.\nNONE 0-1");
	MakeWord	(0X1ED7C);
	MakeName	(0X1ED7C,	"DI_EVAP_KV_ENGINE_VACUUM_MODIFIER");
	MakeDword	(x=0X1ED7E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeRptCmt	(0X1ED98,	"Purge contribution to Evap_System_Vacuum_Index.\nNONE 0-1");
	MakeWord	(0X1ED98);
	MakeName	(0X1ED98,	"DI_EVAP_KV_PURGE_MODIFIER");
	MakeRptCmt	(0X1EDC2,	"Vapor generation and porosity contribution TO Evap_System_Vacuum_Index.\nNONE 0-1");
	MakeWord	(0X1EDC2);
	MakeName	(0X1EDC2,	"DI_EVAP_KV_VACUUM_LOSS_OFFSET");
	MakeRptCmt	(0X1EDD4,	"Indicates what a 'normal' CCP ducty cycle ramp up time is.\nSeconds");
	MakeWord	(0X1EDD4);
	MakeName	(0X1EDD4,	"DI_EVAP_KV_CCP_COLD_TEST_RAMP_TIMER_LMT");
	MakeRptCmt	(0X1EDFA,	"Purge ramp timer >= this indicates HC vapor present in canister.\nSeconds");
	MakeWord	(0X1EDFA);
	MakeName	(0X1EDFA,	"DI_EVAP_KE_PURGE_RAMP_TIMER_LIMIT");
	MakeRptCmt	(0X1EDFC,	"Closed loop fuel control Purge_Learn_Multiplier < KE_CCP_Purge_Vapor_PLM indicates closed loop HC vapor present.\nNONE 0-2");
	MakeWord	(0X1EDFC);
	MakeName	(0X1EDFC,	"DI_EVAP_KE_CCP_PURGE_VAPOR_PLM");
	MakeRptCmt	(0X1EDFE,	"Pass/Fail threshold for vacuum decay slope for applications with fuel level input.\nIn H2O/Sec");
	MakeName	(0X1EDFE,	"DI_EVAP_KA_VACUUM_DECAY_SLOPE");
	MakeRptCmt	(0X1F19A,	"Pass/Fail threshold for vacuum decay slope for applications with fuel level input (for segments of final iteration).\nIn H2O/Sec");
	MakeName	(0X1F19A,	"DI_EVAP_KA_VACUUM_DECAY_SLOPE_SEG");
	MakeWord	(0X1F536);
	MakeName	(0X1F536,	"DI_EVAP_KE_FUEL_LEVEL_PERCENT_DEFAULT");
	MakeRptCmt	(0X1F538,	"This calibration value defines the purge oxygen adjust multiplier at which the Purge_Ramp_Timer will stop.\nUnitless");
	MakeWord	(0X1F538);
	MakeName	(0X1F538,	"DI_EVAP_KE_CCP_PURGE_RAMP_O2_ADJUST");
	MakeRptCmt	(0X1F53A,	"The existing 040 calibration threshold tables are multiplied this calibration to find the effective, 0.020 slope threshold.\nUnitless");
	MakeWord	(0X1F53A);
	MakeName	(0X1F53A,	"DI_EVAP_KE_EVPD_020_SLOPE_MULTIPLIER");
	MakeRptCmt	(0X1F53C,	"Rated capacity of the fuel tank as determined by GMUTS.\nLiters");
	MakeWord	(0X1F53C);
	MakeName	(0X1F53C,	"DI_EVAP_KE_FUEL_TANK_RATED_CAPACITY");
	MakeRptCmt	(0X1F53E,	"Amount of fuel in tank crevices which cannot be reached by the fuel pump.\nLiters");
	MakeWord	(0X1F53E);
	MakeName	(0X1F53E,	"DI_EVAP_KE_FUEL_TANK_UNUSABLE_VOLUME");
	MakeRptCmt	(0X1F540,	"Total volume of fuel tank and lines.  Determined BY platform.\nLiters");
	MakeWord	(0X1F540);
	MakeName	(0X1F540,	"DI_EVAP_KE_FUEL_TANK_TOTAL_VAPOR_SPACE");
	MakeRptCmt	(0X1F542,	"Delta fuel level >= this indicates sloshing in fuel tank.\nLiters");
	MakeName	(0X1F542,	"DI_EVAP_KV_DELTA_FUEL_LEVEL_SLOSH_PRIMAR");
	MakeRptCmt	(0X1F580,	"Delta fuel level >= this indicates sloshing in fuel tank.\nLiters");
	MakeName	(0X1F580,	"DI_EVAP_KV_DELTA_FUEL_LEVEL_SLOSH_SECOND");
	MakeRptCmt	(0X1F5BE,	"Delta fuel level >= this indicates sloshing in fuel tank.\nLiters");
	MakeName	(0X1F5BE,	"DI_EVAP_KV_EVPD_DELTA_FUEL_040_SLOSH_PRI");
	MakeRptCmt	(0X1F5FC,	"Delta fuel level >= this indicates sloshing in fuel tank.\nLiters");
	MakeName	(0X1F5FC,	"DI_EVAP_KV_EVPD_DELTA_FUEL_040_SLOSH_SEC");
	MakeRptCmt	(0X1F63A,	"Delta fuel tank vacuum >= this indicates sloshing in fuel tank.\nInches H2O");
	MakeName	(0X1F63A,	"DI_EVAP_KV_DELTA_VACUUM_SLOSH");
	MakeRptCmt	(0X1F650,	"Delta fuel tank vacuum >= this indicates sloshing in fuel tank.\nInches H2O");
	MakeName	(0X1F650,	"DI_EVAP_KV_EVPD_DELTA_VAC_040_SLOSH");
	MakeRptCmt	(0X1F666,	"Upper limit on difference between powerup coolant temperature and powerup induction air temperature for cold start conditions.\nDegrees C");
	MakeWord	(0X1F666);
	MakeName	(0X1F666,	"DI_EVAP_KV_COLD_DELTA_TEMP_LIMIT");
	MakeWord	(0X1F668);
	MakeRptCmt	(0X1F66A,	"Lower limit on powerup coolant temperature for cold start conditions.\nDegrees C");
	MakeWord	(0X1F66A);
	MakeName	(0X1F66A,	"DI_EVAP_KE_COLD_COOLANT_TEMP_LOW_LIMIT");
	MakeRptCmt	(0X1F66C,	"Upper limit on powerup coolant temperature for cold start conditions.\nDegrees C");
	MakeWord	(0X1F66C);
	MakeName	(0X1F66C,	"DI_EVAP_KE_COLD_COOLANT_TEMP_HIGH_LIMIT");
	MakeRptCmt	(0X1F66E,	"Lower limit on powerup induction air temperature for cold start conditions.\nDegrees C");
	MakeWord	(0X1F66E);
	MakeName	(0X1F66E,	"DI_EVAP_KE_COLD_MAN_AIR_TEMP_LOW_LIMIT");
	MakeRptCmt	(0X1F670,	"Upper limit on powerup induction air temperature for cold start conditions.\nDegrees C");
	MakeWord	(0X1F670);
	MakeName	(0X1F670,	"DI_EVAP_KE_COLD_MAN_AIR_TEMP_HIGH_LIMIT");
	MakeRptCmt	(0X1F672,	"Lower limit on fuel level for cold start conditions.\nPercent");
	MakeName	(0X1F672,	"DI_EVAP_KE_COLD_FUEL_LEVEL_LOW_LIMIT");
	MakeRptCmt	(0X1F674,	"Upper limit on fuel level for cold start conditions.\nPercent");
	MakeName	(0X1F674,	"DI_EVAP_KE_COLD_FUEL_LEVEL_HIGH_LIMIT");
	MakeRptCmt	(0X1F676,	"Lower limit on barometric pressure for cold start conditions.\nkPa");
	MakeWord	(0X1F676);
	MakeName	(0X1F676,	"DI_EVAP_KE_COLD_BAROMETRIC_PRESSURE_LIMI");
	MakeRptCmt	(0X1F678,	"Fuel level values > this indicate fuel tank is over-filled.\nPercent");
	MakeWord	(0X1F678);
	MakeName	(0X1F678,	"DI_EVAP_KE_FAIL_REPORT_HIGH_FUEL_LEVEL");
	MakeRptCmt	(0X1F67A,	"When fuel tank is over-filled, this many miles must be accumulated in this trip to enable general failure reporting.\nMiles");
	MakeDword	(0X1F67A);
	MakeName	(0X1F67A,	"DI_EVAP_KE_FAIL_REPORT_MIN_MILES");
	MakeDword	(0X1F67E);
	MakeName	(0X1F67E,	"DI_EVAP_KE_VAC_PROBLEM_FAIL_MIN_MILES");
	MakeRptCmt	(0X1F682,	"Disable Evap diagnostic tests if any faults in the groups marked TRUE are active.\nBOOLEAN");
	MakeDword	(0X1F682);
	MakeName	(0X1F682,	"DI_EVAP_KE_EVAP_DIAG_INHIBITING_FAULTS");
	MakeRptCmt	(0X1F686,	"Fuel level must be < this TO enable Evap diagnostic system.\nPercent");
	MakeWord	(0X1F686);
	MakeName	(0X1F686,	"DI_EVAP_KE_FUEL_LEVEL_ENABLE_MIN");
	MakeRptCmt	(0X1F688,	"Minimum ignition voltage which permits execution of the EVAP diagnostic.\nVolts");
	MakeWord	(0X1F688);
	MakeName	(0X1F688,	"DI_EVAP_KE_IGNITION_VOLTAGE_MIN");
	MakeRptCmt	(0X1F68A,	"Maximum ignition voltage which permits execution of the EVAP diagnostic.\nVolts");
	MakeWord	(0X1F68A);
	MakeName	(0X1F68A,	"DI_EVAP_KE_IGNITION_VOLTAGE_MAX");
	MakeRptCmt	(0X1F68C,	"Minimum fuel tank vacuum at powerup for fuel tank vacuum to be in range at powerup.\nIn H2O");
	MakeName	(0X1F68C,	"DI_EVAP_KE_VENT_PRESSURE");
	MakeRptCmt	(0X1F68E,	"Maximum fuel tank vacuum at powerup for fuel tank vacuum to be in range at powerup.\nIn H2O");
	MakeName	(0X1F68E,	"DI_EVAP_KE_VENT_VACUUM");
	MakeRptCmt	(0X1F690,	"Maximum coolant temperature value to run the service bay test.\nDegrees Celsius");
	MakeWord	(0X1F690);
	MakeName	(0X1F690,	"DI_EVAP_KE_EVAP_SERVICE_TEST_COOLANT_MAX");
	MakeRptCmt	(0X1F692,	"Used to calibrate out the service bay test.\nFlag");
	MakeByte	(0X1F692);
	MakeName	(0X1F692,	"DI_EVAP_KE_EVAP_SERVICE_TEST_ENABLED");
	MakeRptCmt	(0X1F694,	"Determine how long the fuel level must be outside of it's enable window in order to disable the evap diagnostic.\nSeconds");
	MakeWord	(0X1F694);
	MakeName	(0X1F694,	"DI_EVAP_KE_FUEL_LEVEL_OUT_OF_RANGE_TIME");
	MakeRptCmt	(0X1F696,	"Engine run delay before the slosh detection algorithm to operable.\nSeconds");
	MakeWord	(0X1F696);
	MakeName	(0X1F696,	"DI_EVAP_KE_EVPD_FUEL_LEVEL_READ_DELAY");
	MakeRptCmt	(0X1F698,	"Determine how long the ignition voltage must be outside of it's enable window in order to disable the evap diagnostic.\nSeconds");
	MakeWord	(0X1F698);
	MakeName	(0X1F698,	"DI_EVAP_KE_IGNITION_VOLTAGE_EXCURSION_TI");
	MakeRptCmt	(0X1F6C0,	"Use this cal to identify the Vehicle System calibration\nCal_ID_Record");
	MakeName	(0X1F6C0,	"SYS_CALIBRATIONS_HEADER");
	MakeName	(0X1F6C4,	"Constant32_Vehicle_System_Calibration_ID");
	MakeName	(0X1F6C8,	"CurveTable_2_Columns_Vehicle_System_Calibration_Level");
	MakeStr		(0X1F6CC,	0X1F6D5);
	MakeName	(0X1F6CC,	"CurveTable_8_Columns_Vehicle_System_Calibration_ID_ASCII");
	MakeRptCmt	(0X1F6DC,	"Allows selection of options for a given platform.\nPlatform_Option_Table_Type");
	MakeByte	(0X1F6DC);
	MakeName	(0X1F6DC,	"VEH_SYS_KA_OPTION_MATRIX");
	MakeByte	(0X1F6DD);
	MakeByte	(0X1F6DE);
	MakeByte	(0X1F6DF);
	MakeByte	(0X1F6E0);
	MakeByte	(0X1F6E1);
	MakeByte	(0X1F6E2);
	MakeByte	(0X1F6E3);
	MakeByte	(0X1F6E4);
	MakeByte	(0X1F6E5);
	MakeByte	(0X1F6E6);
	MakeRptCmt	(0X1F778,	"Contains a serial data keying information for SDM used to verify that its calibration is correct for the vehicle it is in.\nCARDINAL");
	MakeWord	(0X1F778);
	MakeName	(0X1F778,	"VEH_SYS_KE_RESTRAINTS_IDENTIFIER");
	MakeRptCmt	(0X1F77A,	"Describes if the vehicle is equipped with PRNDL input, Park/Neutral switch or neither.\nSelection_List");
	MakeByte	(0X1F77A);
	MakeName	(0X1F77A,	"VEH_SYS_KE_TYPE_OF_DISCRETE_GEAR_SELECT");
	MakeByte	(0X1F77B);
	MakeName	(0X1F77B,	"VEH_SYS_KE_TYPE_OF_INSTRUMENT_CLUSTER");
	MakeRptCmt	(0X1F77C,	"Describes the type of drivetrain used on the vehicle\nDrivetrain_Type");
	MakeByte	(0X1F77C);
	MakeName	(0X1F77C,	"VEH_SYS_KE_DRIVETRAIN_TYPE");
	MakeRptCmt	(0X1F77D,	"Identifies platform type -- F, Y, V, GMT530, GMT540, GMT560,GMT610, GMT800, ML, ST, P, GMT370, H2.\nPlatform_Type");
	MakeByte	(0X1F77D);
	MakeName	(0X1F77D,	"VEH_SYS_KE_PLATFORM");
	MakeRptCmt	(0X1F77E,	"Type of engine cooling system supported on vehicle\nUnitless");
	MakeByte	(0X1F77E);
	MakeName	(0X1F77E,	"VEH_SYS_KE_TYPE_OF_FANS_ON_VEHICLE");
	MakeRptCmt	(0X1F780,	"Number of medium res periods to hold the tachometer output signal high.\nUnitless");
	MakeWord	(0X1F780);
	MakeName	(0X1F780,	"VEH_SYS_KE_NUMBER_MED_RES_TACH_HIGH");
	MakeRptCmt	(0X1F782,	"Number of medium res periods to hold the tachometer output signal low.\nUnitless");
	MakeWord	(0X1F782);
	MakeName	(0X1F782,	"VEH_SYS_KE_NUMBER_MED_RES_TACH_LOW");
	MakeRptCmt	(0X1F784,	"This is used to activate the different VTD functionalities within the PCM.\nUnitless");
	MakeDword	(x=0X1F784);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X1F784,	"VEH_SYS_KE_VTD_CONFIGURATION");
	MakeRptCmt	(0X1F78A,	"Ramp factor is not computed if vehicle deceleration is less than this.\nMPH/Sec");
	MakeWord	(0X1F78A);
	MakeName	(0X1F78A,	"VEH_SYS_KE_LOW_COOL_NEG_ACCEL_DEADBAND");
	MakeRptCmt	(0X1F78C,	"If low coolant detection fails this many times, stop running the algorithm.\nCounts");
	MakeByte	(0X1F78C);
	MakeName	(0X1F78C,	"VEH_SYS_KE_LOW_COOL_OCCURRENCES_TO_LATCH");
	MakeRptCmt	(0X1F78E,	"Ramp factor is not computed if vehicle acceleration is more than this.\nMPH/Sec");
	MakeWord	(0X1F78E);
	MakeName	(0X1F78E,	"VEH_SYS_KE_LOW_COOL_POS_ACCEL_DEADBAND");
	MakeRptCmt	(0X1F790,	"Run low coolant detection if coolant is above this.\nDegrees C");
	MakeWord	(0X1F790);
	MakeName	(0X1F790,	"VEH_SYS_KE_LOW_COOLANT_MIN_TEMP");
	MakeRptCmt	(0X1F792,	"Time that low coolant input has to off to reset the low coolant flag.\nSeconds");
	MakeWord	(0X1F792);
	MakeName	(0X1F792,	"VEH_SYS_KE_LOW_COOLANT_NOT_PRESENT_TIME");
	MakeRptCmt	(0X1F794,	"Delay between ramp delay actions.\nSeconds");
	MakeWord	(0X1F794);
	MakeName	(0X1F794,	"VEH_SYS_KE_LOW_COOLANT_RAMP_DECAY_DELAY");
	MakeRptCmt	(0X1F796,	"Ramp decay value.\nSeconds");
	MakeWord	(0X1F796);
	MakeName	(0X1F796,	"VEH_SYS_KE_LOW_COOLANT_RAMP_DECAY_STEP");
	MakeRptCmt	(0X1F798,	"Max value for low coolant level timer.\nSeconds");
	MakeWord	(0X1F798);
	MakeName	(0X1F798,	"VEH_SYS_KE_LOW_COOLANT_TIMER_MAX_VALUE");
	MakeRptCmt	(0X1F79A,	"Converts acceleration into time for low coolant time threshold.\nFactor");
	MakeName	(0X1F79A,	"VEH_SYS_KV_LOW_COOL_VEH_SPEED_RAMP_MULT");
	MakeRptCmt	(0X1F7AC,	"Converts acceleration into time for low coolant time threshold.\nSeconds");
	MakeName	(0X1F7AC,	"VEH_SYS_KV_LOW_COOLANT_ACCEL_FACTOR");
	MakeRptCmt	(0X1F7CE,	"Converts acceleration into time for low coolant time threshold.\nSeconds");
	MakeName	(0X1F7CE,	"VEH_SYS_KV_LOW_COOLANT_ACCEL_RAMP_MULT");
	MakeRptCmt	(0X1F7F0,	"Converts vehicle speed into time for low coolant time threshold.\nSeconds");
	MakeName	(0X1F7F0,	"VEH_SYS_KV_LOW_COOLANT_VEH_SPEED_FACTOR");
	MakeRptCmt	(0X1F812,	"Time to illuminate engine overspeed lamp on startup for bulb test Set to zero to disable bulb check.\nSeconds");
	MakeWord	(0X1F812);
	MakeName	(0X1F812,	"VEH_SYS_KE_ENGINE_OVERSPEED_BULB_CHECK");
	MakeRptCmt	(0X1F814,	"If set TRUE, enables control of the overspeed lamp via hardware.\nBOOLEAN");
	MakeByte	(0X1F814);
	MakeName	(0X1F814,	"VEH_SYS_KE_CONTROL_ENGINE_OVERSPEED_LAMP");
	MakeRptCmt	(0X1F815,	"If set TRUE, then execute engine alarm or shut down functionality.\nBOOLEAN");
	MakeByte	(0X1F815);
	MakeName	(0X1F815,	"VEH_SYS_KE_ENGINE_ALARM_ENABLE");
	MakeRptCmt	(0X1F816,	"If TRUE algorithm will execute even if there is a VehicleSpeed Group Fault.\nBOOLEAN");
	MakeByte	(0X1F816);
	MakeName	(0X1F816,	"VEH_SYS_KE_IGNORE_VEHICLE_SPEED_FAULT");
	MakeRptCmt	(0X1F817,	"Indicates if the Vunlock ignition switch wiring scheme is on the vehicle.\nBOOLEAN");
	MakeByte	(0X1F817);
	MakeName	(0X1F817,	"VEH_SYS_KE_VUNLOCK_USED");
	MakeRptCmt	(0X1F818,	"Method of displaying the alternator diagnostic results.\nDisplay_Type");
	MakeByte	(0X1F818);
	MakeName	(0X1F818,	"VEH_SYS_KE_ALT_DG_RESULTS_DISPLAY_METHOD");
}


static Bytes_11(void) {
        auto x;
#define id x

	MakeRptCmt	(0X1F819,	"This enables/disables the different alternator diagnostics.\nAlternator_Diag_Type");
	MakeByte	(0X1F819);
	MakeName	(0X1F819,	"VEH_SYS_KE_ALTERNATOR_DIAGNOSTIC_TO_RUN");
	MakeRptCmt	(0X1F81A,	"Denotes that the vehicle platform has the possibility of an aftermarket power take off device being connected.\nBOOLEAN");
	MakeByte	(0X1F81A);
	MakeName	(0X1F81A,	"VEH_SYS_KE_AFTER_MARKET_PTO_POSSIBLE");
	MakeRptCmt	(0X1F81B,	"Bypass Data Link Security to PCM. 0FFH indicates PCM is unlocked.\nSHORTCARD");
	MakeByte	(0X1F81B);
	MakeName	(0X1F81B,	"C2_J2190_MSGS_KE_VULNERABILITY_FLAG");
	MakeRptCmt	(0X1F81C,	"Auto recirculation mode is present on vehicle.\nboolean");
	MakeDword	(x=0X1F81C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X1F81C,	"AIR_CONDITIONING_KE_AUTO_RECIRCULATION_OPTION");
	MakeRptCmt	(0X1F842,	"Type of Air Conditioning System supported\nUnitless");
	MakeByte	(0X1F842);
	MakeName	(0X1F842,	"AIR_CONDITIONING_KE_TYPE_OF_AC_ON_VEHICLE");
	MakeRptCmt	(0X1F844,	"When AC activated, it is turned off after this much time.\nSeconds");
	MakeWord	(0X1F844);
	MakeName	(0X1F844,	"AIR_CONDITIONING_KE_AC_SLUGGING_MAX_ALLOWABLE_TIM");
	MakeRptCmt	(0X1F846,	"Set to TRUE if AC clutch relay feedback is hard wired to a PCM on a vehicle.\nBOOLEAN");
	MakeByte	(0X1F846);
	MakeName	(0X1F846,	"AIR_CONDITIONING_KE_AC_STATUS_INPUT_EQUIPPED");
	MakeRptCmt	(0X1F848,	"AC slugging will not be enabled during crank when ignition voltage is below this value .\nVolts");
	MakeWord	(0X1F848);
	MakeName	(0X1F848,	"AIR_CONDITIONING_KE_IGN_VOLT_LOW_DISABLE_SLUGGING");
	MakeRptCmt	(0X1F84A,	"Keep A/C enabled for at least this many reference pulses.\nCounts");
	MakeWord	(0X1F84A);
	MakeName	(0X1F84A,	"AIR_CONDITIONING_KE_REFERENCE_PULSES_AC_SLUGGING");
	MakeRptCmt	(0X1F84C,	"Determines how long the AC Request must stay in a statebefore a state change is allowed.\nSeconds");
	MakeWord	(0X1F84C);
	MakeName	(0X1F84C,	"AIR_CONDITIONING_KE_AC_REQUEST_DEBOUNCE_TIME");
	MakeWord	(0X1F84E);
	MakeName	(0X1F84E,	"AIR_CONDITIONING_KE_AC_STARTUP_FAST_DEBOUNCE_TIME");
	MakeWord	(0X1F850);
	MakeName	(0X1F850,	"AIR_CONDITIONING_KE_AC_INITIAL_STARTUP_WINDOW");
	MakeRptCmt	(0X1F852,	"Amount of continuous time in which the engine speed has been maintained to disable air conditioner.\nSeconds");
	MakeWord	(0X1F852);
	MakeName	(0X1F852,	"AIR_CONDITIONING_KE_AC_ENGINE_SPEED_TIME");
	MakeRptCmt	(0X1F854,	"A/C turn off delay to prevent engine flare.\nSeconds");
	MakeName	(0X1F854,	"AIR_CONDITIONING_KE_AC_TURN_OFF_DELAY");
	MakeRptCmt	(0X1F856,	"Time in which wide open throttle launch disable is to last\nSeconds");
	MakeWord	(0X1F856);
	MakeName	(0X1F856,	"AIR_CONDITIONING_KE_AC_HIGH_TPS_RE_ENABLE_TIME");
	MakeRptCmt	(0X1F858,	"Time in which power enrichment launch disable is to last\nSeconds");
	MakeWord	(0X1F858);
	MakeName	(0X1F858,	"AIR_CONDITIONING_KE_AC_LOW_TPS_RE_ENABLE_TIME");
	MakeRptCmt	(0X1F85A,	"Time in which high TPS AC disables are not allowed after the first disable.\nSeconds");
	MakeWord	(0X1F85A);
	MakeName	(0X1F85A,	"AIR_CONDITIONING_KE_AC_HIGH_TPS_REPEAT_TIME");
	MakeRptCmt	(0X1F85C,	"Enable A/C if engine speed is below this threshold.\nRPM");
	MakeWord	(0X1F85C);
	MakeName	(0X1F85C,	"AIR_CONDITIONING_KE_AC_ENGINE_SPEED_LOWER_LIMIT");
	MakeRptCmt	(0X1F85E,	"Disable A/C if engine speed is above this threshold.\nRPM");
	MakeWord	(0X1F85E);
	MakeName	(0X1F85E,	"AIR_CONDITIONING_KE_AC_ENGINE_SPEED_UPPER_LIMIT");
	MakeRptCmt	(0X1F860,	"Activate AC slugging if engine RPM is greater than this value\nRPM");
	MakeWord	(0X1F860);
	MakeName	(0X1F860,	"AIR_CONDITIONING_KE_AC_SLUGGING_ENG_SPEED_ENABLE");
	MakeRptCmt	(0X1F862,	"When AC slugging is activated it is turned off wheneng speed reaches this level\nRPM");
	MakeWord	(0X1F862);
	MakeName	(0X1F862,	"AIR_CONDITIONING_KE_AC_SLUGGING_ENG_SPEED_TURN_OF");
	MakeRptCmt	(0X1F864,	"Enable A/C if coolant temperature is below this threshold.\nDegrees_C");
	MakeWord	(0X1F864);
	MakeName	(0X1F864,	"AIR_CONDITIONING_KE_AC_HOT_COOLANT_LOWER_LIMIT");
	MakeRptCmt	(0X1F866,	"Disable A/C if coolant temperature is above this threshold.\nDegrees_C");
	MakeWord	(0X1F866);
	MakeName	(0X1F866,	"AIR_CONDITIONING_KE_AC_HOT_COOLANT_UPPER_LIMIT");
	MakeRptCmt	(0X1F868,	"Activate AC Slugging if coolant temp. is below this value\nDegrees_C");
	MakeWord	(0X1F868);
	MakeName	(0X1F868,	"AIR_CONDITIONING_KE_AC_COOLANT_TEMP_SLUGGING_HIGH");
	MakeRptCmt	(0X1F86A,	"Activate AC slugging if Induction Air Temp is above this value\nDegrees_C");
	MakeWord	(0X1F86A);
	MakeName	(0X1F86A,	"AIR_CONDITIONING_KE_AC_SLUGGING_IAT");
	MakeRptCmt	(0X1F86C,	"Activate AC slugging if Induction Air Temp at last keyoff isabove this value\nDegrees_C");
	MakeWord	(0X1F86C);
	MakeName	(0X1F86C,	"AIR_CONDITIONING_KE_AC_SLUGGING_IAT_LAST_KEY_OFF");
	MakeRptCmt	(0X1F86E,	"Throttle position in which AC needs to be disabled\nPercent");
	MakeWord	(0X1F86E);
	MakeName	(0X1F86E,	"AIR_CONDITIONING_KE_AC_HIGH_TPS_DISABLE_THRESHOLD");
	MakeRptCmt	(0X1F870,	"Throttle Position in which launch disable can be seperated fromWOT disable\nPercent");
	MakeWord	(0X1F870);
	MakeName	(0X1F870,	"AIR_CONDITIONING_KE_AC_HIGH_TPS_RE_ENABLE_THRESH");
	MakeWord	(0X1F872);
	MakeName	(0X1F872,	"AIR_CONDITIONING_KE_AC_VEH_SPEED_LAUNCH_DISABLE");
	MakeWord	(0X1F874);
	MakeName	(0X1F874,	"AIR_CONDITIONING_KE_AC_VEHICLE_SPEED_RE_ENABLE");
	MakeRptCmt	(0X1F876,	"Disable A/C if pressure is above this threshold.\nPSI");
	MakeWord	(0X1F876);
	MakeName	(0X1F876,	"AIR_CONDITIONING_KE_AC_HIGH_PRESSURE_UPPER_LIMIT");
	MakeRptCmt	(0X1F878,	"Enable A/C if pressure is below this threshold.\nPSI");
	MakeWord	(0X1F878);
	MakeName	(0X1F878,	"AIR_CONDITIONING_KE_AC_HIGH_PRESSURE_LOWER_LIMIT");
	MakeRptCmt	(0X1F87A,	"Disable A/C if pressure is below this threshold.\nPSI");
	MakeWord	(0X1F87A);
	MakeName	(0X1F87A,	"AIR_CONDITIONING_KE_AC_LOW_PRESSURE_LOWER_LIMIT");
	MakeRptCmt	(0X1F87C,	"Enable A/C if pressure is above this threshold.\nPSI");
	MakeWord	(0X1F87C);
	MakeName	(0X1F87C,	"AIR_CONDITIONING_KE_AC_LOW_PRESSURE_UPPER_LIMIT");
	MakeRptCmt	(0X1F87E,	"Enable A/C if air conditioner pressure is above this threshold.\nPSI");
	MakeWord	(0X1F87E);
	MakeName	(0X1F87E,	"AIR_CONDITIONING_KE_AC_PRESSURE_SLUGGING");
	MakeRptCmt	(0X1F880,	"AC compressor not allowed to engaged at voltage belowthis value. If compressor already engaged it willstay on.\nvolts");
	MakeWord	(0X1F880);
	MakeName	(0X1F880,	"AIR_CONDITIONING_KE_AC_LOW_VOLTAGE_UPPER_LIMIT");
	MakeRptCmt	(0X1F882,	"AC compressor is disengaged when voltage drops below this value.\nvolts");
	MakeWord	(0X1F882);
	MakeName	(0X1F882,	"AIR_CONDITIONING_KE_AC_LOW_VOLTAGE_LOWER_LIMIT");
	MakeRptCmt	(0X1F884,	"Recirc mode enable delay after conditions are met.\nseconds");
	MakeWord	(0X1F884);
	MakeName	(0X1F884,	"AIR_CONDITIONING_KE_AUTO_RECIRC_ENABLE_DELAY_TIME");
	MakeRptCmt	(0X1F886,	"Minimum time that Auto Recirc mode must be enabled.\nseconds");
	MakeWord	(0X1F886);
	MakeName	(0X1F886,	"AIR_CONDITIONING_KE_AUTO_RECIRC_MIN_ON_TIME");
	MakeRptCmt	(0X1F888,	"Vehicle speed below which Auto Recirc mode is enabled for high pressure.\nMPH");
	MakeWord	(0X1F888);
	MakeName	(0X1F888,	"AIR_CONDITIONING_KE_AUTO_RECIRC_ON_MPH");
	MakeRptCmt	(0X1F88A,	"Vehicle speed above which Auto Recirc mode is disabled.\nMPH");
	MakeWord	(0X1F88A);
	MakeName	(0X1F88A,	"AIR_CONDITIONING_KE_AUTO_RECIRC_OFF_MPH");
	MakeWord	(0X1F88C);
	MakeName	(0X1F88C,	"AIR_CONDITIONING_KE_AC_PRESSURE_INITIAL_DELAY_TIM");
	MakeRptCmt	(0X1F88E,	"Set to TRUE on Police vehicles. This forces AC off for the entire ignition cycle to give them more power for chases.\nBOOLEAN");
	MakeByte	(0X1F88E);
	MakeName	(0X1F88E,	"AIR_CONDITIONING_KE_AC_TPS_DISABLE_FOR_POLICE");
	MakeRptCmt	(0X1F88F,	"Actual transmission gear that is less than or equal to this that allows AC to be disabled by TPS.\nGear");
	MakeByte	(0X1F88F);
	MakeName	(0X1F88F,	"AIR_CONDITIONING_KE_AC_GEARS_FOR_LAUNCH_DISABLE");
	MakeRptCmt	(0X1F890,	"Minimum duration of clutch disable.\nSeconds");
	MakeWord	(0X1F890);
	MakeName	(0X1F890,	"AIR_CONDITIONING_KV_AC_MINIMUM_OFF_TIME");
	MakeRptCmt	(0X1F8A6,	"A/C turn on delay to prevent engine stall.\nSeconds");
	MakeName	(0X1F8A6,	"AIR_CONDITIONING_KV_AC_IAT_ON_DELAY_TIME");
	MakeRptCmt	(0X1F8CC,	"The number of sample of failed conditions to set P1637.\nNONE 0-255");
	MakeByte	(0X1F8CC);
	MakeName	(0X1F8CC,	"ALTERNATOR_KE_P1637_FAIL_LIMIT");
	MakeRptCmt	(0X1F8CD,	"The number of sample periods over which the  Alternator L-Terminal Diagnostic is to run.\nNONE 0-255");
	MakeByte	(0X1F8CD);
	MakeName	(0X1F8CD,	"ALTERNATOR_KE_P1637_SAMPLE_PERIOD");
	MakeRptCmt	(0X1F8CE,	"Number of sample periods that F-Terminal failure has been detected to report P1638 failure.\nNONE 0-255");
	MakeByte	(0X1F8CE);
	MakeName	(0X1F8CE,	"ALTERNATOR_KE_VALT_P1638_FAIL_LIMIT");
	MakeRptCmt	(0X1F8CF,	"The number of sample periods over which the  Alternator F-Terminal Diagnostic is to run.\nNONE 0-255");
	MakeByte	(0X1F8CF);
	MakeName	(0X1F8CF,	"ALTERNATOR_KE_VALT_P1638_SAMPLE_PERIOD");
	MakeRptCmt	(0X1F8D0,	"With L Term HI and Engine running: when Field Duty Cycle is less than this, set P1638 code.\nPercent");
	MakeWord	(0X1F8D0);
	MakeName	(0X1F8D0,	"ALTERNATOR_KE_VALT_MIN_NORMAL_RUNNING_DC");
	MakeRptCmt	(0X1F8D2,	"With L Term HI and Engine not running: when Field Duty Cycle is less than this set P1637 & P1637.\nPercent");
	MakeWord	(0X1F8D2);
	MakeName	(0X1F8D2,	"ALTERNATOR_KE_VALT_L_SHORTED_HOT_F_OPEN_DC");
	MakeRptCmt	(0X1F8D4,	"With L Term HI and Engine nor running: when Field Duty Cycle is is equal to this with hystersis set P1637.\nPercent");
	MakeWord	(0X1F8D4);
	MakeName	(0X1F8D4,	"ALTERNATOR_KE_VALT_L_SHORTED_HOT_DC");
	MakeRptCmt	(0X1F8D6,	"With L Term HI and Engine not running: when Field Duty Cycle is greater than this, set P1637 & P1638.\nPercent");
	MakeWord	(0X1F8D6);
	MakeName	(0X1F8D6,	"ALTERNATOR_KE_VALT_F_AND_L_SHORTED_HOT_DC");
	MakeRptCmt	(0X1F8D8,	"With L Term  LO and Engine running: when Field Duty Cycle is  less than this set P1637 & P1638 else set P1637.\nPercent");
	MakeWord	(0X1F8D8);
	MakeName	(0X1F8D8,	"ALTERNATOR_KE_VALT_L_SHORT_TO_GND_DC");
	MakeRptCmt	(0X1F8DA,	"With L Term LO and Engine Not running: When Field Duty Cycle less than this set P1638.\nPercent");
	MakeWord	(0X1F8DA);
	MakeName	(0X1F8DA,	"ALTERNATOR_KE_VALT_FIELD_OR_WIRING_FAULT_DC");
	MakeRptCmt	(0X1F8DC,	"With L Term LO  and Engine nor running: when Field Duty Cycle is  equal to this with hysteresis clear codes.\nPercent");
	MakeWord	(0X1F8DC);
	MakeName	(0X1F8DC,	"ALTERNATOR_KE_VALT_POWERUP_DC");
	MakeRptCmt	(0X1F8DE,	"With L Term LO and engine not running: when Field Duty Cycle is Greater than this set P1638.\nPercent");
	MakeWord	(0X1F8DE);
	MakeName	(0X1F8DE,	"ALTERNATOR_KE_VALT_F_SHORTED_HOT_DC");
	MakeRptCmt	(0X1F8E0,	"Used as hysteresis on the normal powerup mode and L Term shorted to 12v  mode calibrations.\nPercent");
	MakeWord	(0X1F8E0);
	MakeName	(0X1F8E0,	"ALTERNATOR_KE_VALT_DC_HYSTERESIS");
	MakeRptCmt	(0X1F8E2,	"The maximum engine rpm allowed for gear device control.\nRPM");
	MakeWord	(0X1F8E2);
	MakeName	(0X1F8E2,	"C2_DC_DEFINITION_KE_DEV_CNTL_GEAR_RPM_LIMIT");
	MakeRptCmt	(0X1F8E4,	"The maximum vehicle speed allowed for 32 gear down shiftdevice control.\nMPH");
	MakeWord	(0X1F8E4);
	MakeName	(0X1F8E4,	"C2_DC_DEFINITION_KE_DEV_CNTL_32_VEHICLE_SPEED_LIM");
	MakeRptCmt	(0X1F8E6,	"The maximum engine rpm allowed for 21 gear down shiftdevice control.\nMPH");
	MakeWord	(0X1F8E6);
	MakeName	(0X1F8E6,	"C2_DC_DEFINITION_KE_DEV_CNTL_21_VEHICLE_SPEED_LIM");
	MakeRptCmt	(0X1F8E8,	"Ignition voltage threshold below which U-codes aredisabled.\nVolts");
	MakeWord	(0X1F8E8);
	MakeName	(0X1F8E8,	"C2_EXECUTIVE_KE_C2_IGN_VOLT_THRESH");
	MakeRptCmt	(0X1F8EA,	"Minimum time ignition voltage must be high tore-enable U-codes\nSeconds");
	MakeWord	(0X1F8EA);
	MakeName	(0X1F8EA,	"C2_EXECUTIVE_KE_C2_PASS_IGN_VOLT_TIME");
	MakeWord	(0X1F8EC);
	MakeName	(0X1F8EC,	"C2_EXECUTIVE_KE_C2_SHORT_TO_GROUND_DIAG_TIME");
	MakeWord	(0X1F8EE);
	MakeName	(0X1F8EE,	"C2_EXECUTIVE_KE_C2_SHORT_TO_HIGH_DIAG_TIME");
	MakeRptCmt	(0X1F8F0,	"Wait this amount of time after phase 1 has started before starting phase 2.\nSeconds");
	MakeWord	(0X1F8F0);
	MakeName	(0X1F8F0,	"C2_EXECUTIVE_KE_MS_C2_INIT_PHASE2_DELAY");
	MakeRptCmt	(0X1F8F2,	"Wait this amount of time after phase 2 has started before starting phase 3.\nSeconds");
	MakeWord	(0X1F8F2);
	MakeName	(0X1F8F2,	"C2_EXECUTIVE_KE_MS_C2_INIT_PHASE3_DELAY");
	MakeRptCmt	(0X1F8F4,	"Wait this amount of time after phase 3 has started before starting phase 4.\nSeconds");
	MakeWord	(0X1F8F4);
	MakeName	(0X1F8F4,	"C2_EXECUTIVE_KE_MS_C2_INIT_PHASE4_DELAY");
	MakeRptCmt	(0X1F8F6,	"Re-queue Class2 serial data message if expected response  is not received after this many 100 millisecond intervals.\nCounts");
	MakeByte	(0X1F8F6);
	MakeName	(0X1F8F6,	"C2_EXECUTIVE_KE_MS_C2_FIRST_RETRY_INTERVAL");
	MakeByte	(0X1F8F7);
	MakeName	(0X1F8F7,	"C2_EXECUTIVE_KE_MS_C2_SUBSQNT_RETRY_INTERVAL");
	MakeRptCmt	(0X1F8F8,	"Stop re-queuing Class2 serial data message afterthis many retries. The Class2 node is now failed.\nCounts");
	MakeByte	(0X1F8F8);
	MakeName	(0X1F8F8,	"C2_EXECUTIVE_KE_MS_C2_MAX_RETRY_LIMIT");
	MakeRptCmt	(0X1F8FA,	"The vehicle speed must be less than this to allow 12.5 msec check for queuing msg 1211\nMPH");
	MakeWord	(0X1F8FA);
	MakeName	(0X1F8FA,	"C2_NORMAL_MSGS_KE_C2_1211_HIGH_SPEED");
	MakeRptCmt	(0X1F8FC,	"If set TRUE, activates the Allison 12-11 RPT message slow rate logic when Manufacturers Enable Counter is not zero\nBoolean");
	MakeByte	(0X1F8FC);
	MakeName	(0X1F8FC,	"C2_NORMAL_MSGS_KE_1211_SLOWDOWN_FOR_MEC");
	MakeRptCmt	(0X1F8FD,	"If set TRUE, activates the Allison 12-11 RPT message slow rate logic when a diagnostic tool is present\nBoolean");
	MakeByte	(0X1F8FD);
	MakeName	(0X1F8FD,	"C2_NORMAL_MSGS_KE_1211_SLOWDOWN_FOR_DIAG_TOOL");
	MakeRptCmt	(0X1F8FE,	"This time must be exceeded before the the Allison 12-11 RPT message fast rate logic will be allowed\nSeconds");
	MakeWord	(0X1F8FE);
	MakeName	(0X1F8FE,	"C2_NORMAL_MSGS_KE_1211_SLOWDOWN_FOR_PRMD_DELTA");
	MakeWord	(0X1F900);
	MakeName	(0X1F900,	"C2_NORMAL_MSGS_KE_C2_AC_CLUTCH_ENGAGED_MIN_INTE");
	MakeWord	(0X1F902);
	MakeName	(0X1F902,	"C2_NORMAL_MSGS_KE_C2_AC_PRESSURE_MIN_INTERVAL");
	MakeRptCmt	(0X1F904,	"This is default value used for failsoft report.\nPSI");
	MakeWord	(0X1F904);
	MakeName	(0X1F904,	"C2_NORMAL_MSGS_KE_C2_AC_PRESSURE_DEFAULT_VALUE");
	MakeWord	(0X1F906);
	MakeName	(0X1F906,	"C2_NORMAL_MSGS_KE_C2_AC_PRESSURE_SEND_ON_CHANGE");
	MakeWord	(0X1F908);
	MakeName	(0X1F908,	"C2_NORMAL_MSGS_KE_C2_ACCUMULATED_FUEL_MIN_INTER");
	MakeWord	(0X1F90A);
	MakeName	(0X1F90A,	"C2_NORMAL_MSGS_KE_C2_ACCUMULATED_FUEL_SEND_ON_C");
	MakeRptCmt	(0X1F90C,	"The minimum required elapsed time before a F211 RPT message is queued due to a baro change.\nSeconds");
	MakeWord	(0X1F90C);
	MakeName	(0X1F90C,	"C2_NORMAL_MSGS_KE_C2_BAROMETRIC_PRESSURE_MIN_IN");
	MakeWord	(0X1F90E);
	MakeName	(0X1F90E,	"C2_NORMAL_MSGS_KE_C2_BAROMETRIC_PRESSURE_SEND_O");
	MakeWord	(0X1F910);
	MakeName	(0X1F910,	"C2_NORMAL_MSGS_KE_C2_CLUTCH_PEDAL_DEP_MIN_INT");
	MakeWord	(0X1F912);
	MakeName	(0X1F912,	"C2_NORMAL_MSGS_KE_C2_COOLANT_TEMPERATURE_MIN_IN");
	MakeByte	(0X1F914);
	MakeName	(0X1F914,	"C2_NORMAL_MSGS_KE_C2_COOLANT_TEMP_MAX");
	MakeRptCmt	(0X1F916,	"Class 2 coolant temperature will be limited to KE_C2_Coolant_Temp  for this amount of time.\nSeconds");
	MakeDword	(0X1F916);
	MakeName	(0X1F916,	"C2_NORMAL_MSGS_KE_C2_COOL_TEMP_LIMIT_RUNTIME");
	MakeWord	(0X1F91A);
	MakeName	(0X1F91A,	"C2_NORMAL_MSGS_KE_C2_COOLANT_TEMPERATURE_SEND_O");
	MakeWord	(0X1F91C);
	MakeName	(0X1F91C,	"C2_NORMAL_MSGS_KE_C2_CRUISE_MEMORY_SPEED_MIN_IN");
	MakeWord	(0X1F91E);
	MakeName	(0X1F91E,	"C2_NORMAL_MSGS_KE_C2_CRUISE_MEMORY_SPEED_SEND_O");
	MakeWord	(0X1F920);
	MakeName	(0X1F920,	"C2_NORMAL_MSGS_KE_C2_CURRENT_GEAR_MIN_INTERVAL");
	MakeRptCmt	(0X1F922,	"Minimum required elapsed time since C2_4801_RPT_Eng_Fan_Speed was last queued for transmission on Class 2 bus.\nSeconds");
	MakeWord	(0X1F922);
	MakeName	(0X1F922,	"C2_NORMAL_MSGS_KE_C2_ENG_FAN_SPEED_MIN_INTERVAL");
	MakeWord	(0X1F924);
	MakeName	(0X1F924,	"C2_NORMAL_MSGS_KE_C2_ENG_FAN_SPD_SEND_ON_CHANGE");
	MakeWord	(0X1F926);
	MakeName	(0X1F926,	"C2_NORMAL_MSGS_KE_C2_ENG_TORQ_MIN_INTERVAL");
	MakeWord	(0X1F928);
	MakeName	(0X1F928,	"C2_NORMAL_MSGS_KE_C2_ENG_TORQ_SEND_ON_CHANGE");
	MakeRptCmt	(0X1F92A,	"This is default value used for failsoft report.\nkPa_L_S");
	MakeDword	(0X1F92A);
	MakeName	(0X1F92A,	"C2_NORMAL_MSGS_KE_C2_ENGINE_OIL_PRESSURE_DEFAUL");
	MakeWord	(0X1F92E);
	MakeName	(0X1F92E,	"C2_NORMAL_MSGS_KE_C2_ENGINE_OIL_PRESSURE_MIN_IN");
	MakeDword	(x=0X1F930);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X1F930,	"C2_NORMAL_MSGS_KE_C2_ENGINE_OIL_PRESSURE_SEND_O");
	MakeRptCmt	(0X1F934,	"This is default value used for failsoft report.\nRPM");
	MakeWord	(0X1F934);
	MakeName	(0X1F934,	"C2_NORMAL_MSGS_KE_C2_ENGINE_SPEED_DEFAULT_VALUE");
	MakeWord	(0X1F936);
	MakeName	(0X1F936,	"C2_NORMAL_MSGS_KE_C2_ENGINE_SPEED_MIN_INTERVAL");
	MakeWord	(0X1F938);
	MakeName	(0X1F938,	"C2_NORMAL_MSGS_KE_C2_ENGINE_SPEED_SEND_ON_CHANG");
	MakeRptCmt	(0X1F93A,	"The minimum required elapsed time before a FE06 REQ message is queued due to a local PCM power  mode change.\nSeconds");
	MakeWord	(0X1F93A);
	MakeName	(0X1F93A,	"C2_NORMAL_MSGS_KE_C2_FE06_REQ_DELAY_TIME1");
	MakeRptCmt	(0X1F93C,	"The minimum required elapsed time before a FE06 REQ message is queued due to the PCM being capable of communicating on class2.\nSeconds");
	MakeWord	(0X1F93C);
	MakeName	(0X1F93C,	"C2_NORMAL_MSGS_KE_C2_FE06_REQ_DELAY_TIME2");
	MakeRptCmt	(0X1F93E,	"Set TRUE if PCM is local power mode master meaning application does not use FE06 system power mode control.\nBoolean");
	MakeByte	(0X1F93E);
	MakeName	(0X1F93E,	"C2_NORMAL_MSGS_KE_C2_LOCAL_POWERMODE_CONTROL");
	MakeRptCmt	(0X1F940,	"This is default value used for failsoft report.\nPercent");
	MakeWord	(0X1F940);
	MakeName	(0X1F940,	"C2_NORMAL_MSGS_KE_C2_FUEL_PERCENT_DEFAULT_VALUE");
	MakeWord	(0X1F942);
	MakeName	(0X1F942,	"C2_NORMAL_MSGS_KE_C2_FUEL_PERCENT_MIN_INTERVAL");
	MakeWord	(0X1F944);
	MakeName	(0X1F944,	"C2_NORMAL_MSGS_KE_C2_FUEL_PERCENT_SEND_ON_CHANG");
	MakeRptCmt	(0X1F946,	"This is default value used for failsoft report.\nLiters");
	MakeWord	(0X1F946);
	MakeName	(0X1F946,	"C2_NORMAL_MSGS_KE_C2_FUEL_VOLUME_DEFAULT_VALUE");
	MakeWord	(0X1F948);
	MakeName	(0X1F948,	"C2_NORMAL_MSGS_KE_C2_FUEL_VOLUME_MIN_INTERVAL");
	MakeWord	(0X1F94A);
	MakeName	(0X1F94A,	"C2_NORMAL_MSGS_KE_C2_FUEL_VOLUME_SEND_ON_CHANGE");
	MakeRptCmt	(0X1F94C,	"The minimum required elapsed time before a B230 RPTmessage is queued.\nSeconds");
	MakeWord	(0X1F94C);
	MakeName	(0X1F94C,	"C2_NORMAL_MSGS_KE_C2_HVAC_AUTO_RECIRC_MIN_INTER");
	MakeWord	(0X1F94E);
	MakeName	(0X1F94E,	"C2_NORMAL_MSGS_KE_C2_INDUCTION_AIR_TEMP_MIN_INT");
	MakeWord	(0X1F950);
	MakeName	(0X1F950,	"C2_NORMAL_MSGS_KE_C2_INDUCTION_AIR_TEMP_SEND_ON");
	MakeWord	(0X1F952);
	MakeName	(0X1F952,	"C2_NORMAL_MSGS_KE_C2_INSTANTANEOUS_FUEL_MIN_INT");
	MakeWord	(0X1F954);
	MakeName	(0X1F954,	"C2_NORMAL_MSGS_KE_C2_INSTANTANEOUS_FUEL_SEND_ON");
	MakeWord	(0X1F956);
	MakeName	(0X1F956,	"C2_NORMAL_MSGS_KE_C2_OIL_LIFE_REMAINING_MIN_INT");
	MakeWord	(0X1F958);
	MakeName	(0X1F958,	"C2_NORMAL_MSGS_KE_C2_OIL_LIFE_REMAINING_SEND_ON");
	MakeWord	(0X1F95A);
	MakeName	(0X1F95A,	"C2_NORMAL_MSGS_KE_C2_PARK_NEUTRAL_SW_ACTIVE_MIN");
	MakeWord	(0X1F95C);
	MakeName	(0X1F95C,	"C2_NORMAL_MSGS_KE_C2_PEDAL_LOAD_MIN_INTERVAL");
	MakeWord	(0X1F95E);
	MakeName	(0X1F95E,	"C2_NORMAL_MSGS_KE_C2_PEDAL_LOAD_SEND_ON_CHANGE");
	MakeWord	(0X1F960);
	MakeName	(0X1F960,	"C2_NORMAL_MSGS_KE_C2_POWERTRAIN_NODE_ALIVE_PERI");
	MakeWord	(0X1F962);
	MakeName	(0X1F962,	"C2_NORMAL_MSGS_KE_C2_PRNDL_DISPLAY_INTERVAL");
	MakeWord	(0X1F964);
	MakeName	(0X1F964,	"C2_NORMAL_MSGS_KE_C2_PRNDL_POSITION_MIN_INTERVA");
	MakeWord	(0X1F966);
	MakeName	(0X1F966,	"C2_NORMAL_MSGS_KE_C2_PT_TCS_FAILURE_STATUS_MIN_");
	MakeWord	(0X1F968);
	MakeName	(0X1F968,	"C2_NORMAL_MSGS_KE_C2_ROLLING_ODO_MIN_INTERVAL");
	MakeDword	(0X1F96A);
	MakeName	(0X1F96A,	"C2_NORMAL_MSGS_KE_C2_ROLLING_ODO_SEND_ON_CHANGE");
	MakeWord	(0X1F96E);
	MakeName	(0X1F96E,	"C2_NORMAL_MSGS_KE_C2_TCC_BRAKE_DEPRESSED_MIN_IN");
	MakeWord	(0X1F970);
	MakeName	(0X1F970,	"C2_NORMAL_MSGS_KE_C2_TRANSMISSION_OIL_TEMP_MIN_");
	MakeWord	(0X1F972);
	MakeName	(0X1F972,	"C2_NORMAL_MSGS_KE_C2_TRANSMISSION_OIL_TEMP_SEND");
	MakeWord	(0X1F974);
	MakeName	(0X1F974,	"C2_NORMAL_MSGS_KE_C2_VEHICLE_SPEED_MIN_INTERVAL");
	MakeWord	(0X1F976);
	MakeName	(0X1F976,	"C2_NORMAL_MSGS_KE_C2_VEHICLE_SPEED_SEND_ON_CHAN");
	MakeWord	(0X1F978);
	MakeName	(0X1F978,	"C2_NORMAL_MSGS_KE_C2_HI_RES_VEH_SPD_MIN_INTERVL");
	MakeWord	(0X1F97A);
	MakeName	(0X1F97A,	"C2_NORMAL_MSGS_KE_C2_HI_RES_VEH_SPD_SEND_ON_CHG");
	MakeWord	(0X1F97C);
	MakeName	(0X1F97C,	"C2_NORMAL_MSGS_KE_C2_IGNITION_VOLT_MIN_INTERVAL");
	MakeWord	(0X1F97E);
	MakeName	(0X1F97E,	"C2_NORMAL_MSGS_KE_C2_IGNITION_VOLT_SEND_ON_CHG");
	MakeWord	(0X1F980);
	MakeName	(0X1F980,	"C2_NORMAL_MSGS_KE_ENGINECOOLANTHOTHI");
	MakeWord	(0X1F982);
	MakeName	(0X1F982,	"C2_NORMAL_MSGS_KE_ENGINECOOLANTHOTLO");
	MakeWord	(0X1F984);
	MakeName	(0X1F984,	"C2_NORMAL_MSGS_KE_ENGHOT_STOPENG_TEMPHI");
	MakeWord	(0X1F986);
	MakeName	(0X1F986,	"C2_NORMAL_MSGS_KE_ENGHOT_STOPENG_TEMPLO");
	MakeRptCmt	(0X1F988,	"This calibration indicates support or non-support ofa particular powertrain traction control failure status.\nTCS_Failure_Status_Record_Type");
	MakeByte	(0X1F988);
	MakeName	(0X1F988,	"C2_NORMAL_MSGS_KE_TCS_FAILURE_STATUS_BITS_SUPPO");
	MakeByte	(0X1F989);
	MakeRptCmt	(0X1F98A,	"Class2 msgs allowed during run phase 1\nTx_Msg_ID_Record_Type");
	MakeName	(0X1F98A,	"C2_TX_MSGS_KV_C2_MSGS_ALLOWED_AT_MODE7_P1");
	MakeRptCmt	(0X1F99C,	"Class2 msgs queued during run phase 1\nTx_Msg_ID_Record_Type");
	MakeName	(0X1F99C,	"C2_TX_MSGS_KV_C2_MSGS_QUEUED_AT_MODE7_P1");
	MakeRptCmt	(0X1F9AE,	"Class2 msgs allowed during run phase 2\nTx_Msg_ID_Record_Type");
	MakeName	(0X1F9AE,	"C2_TX_MSGS_KV_C2_MSGS_ALLOWED_AT_MODE7_P2");
	MakeRptCmt	(0X1F9C0,	"Class2 msgs allowed during run phase 3\nTx_Msg_ID_Record_Type");
	MakeName	(0X1F9C0,	"C2_TX_MSGS_KV_C2_MSGS_ALLOWED_AT_MODE7_P3");
	MakeRptCmt	(0X1F9D2,	"Class2 msgs allowed during run phase 4\nTx_Msg_ID_Record_Type");
	MakeName	(0X1F9D2,	"C2_TX_MSGS_KV_C2_MSGS_ALLOWED_AT_MODE7_P4");
	MakeRptCmt	(0X1F9E4,	"Class2 msgs allowed during crank phase 1\nTx_Msg_ID_Record_Type");
	MakeName	(0X1F9E4,	"C2_TX_MSGS_KV_C2_MSGS_ALLOWED_AT_MODE8_P1");
	MakeRptCmt	(0X1F9F6,	"Class2 msgs queued during crank phase 1\nTx_Msg_ID_Record_Type");
	MakeName	(0X1F9F6,	"C2_TX_MSGS_KV_C2_MSGS_QUEUED_AT_MODE8_P1");
	MakeRptCmt	(0X1FA08,	"Class2 msgs allowed during crank phase 2\nTx_Msg_ID_Record_Type");
	MakeName	(0X1FA08,	"C2_TX_MSGS_KV_C2_MSGS_ALLOWED_AT_MODE8_P2");
	MakeRptCmt	(0X1FA1A,	"Class2 msgs allowed during powerup phase 1\nTx_Msg_ID_Record_Type");
	MakeName	(0X1FA1A,	"C2_TX_MSGS_KV_C2_MSGS_ALLOWED_AT_MODE10_P1");
	MakeRptCmt	(0X1FA2C,	"Class2 msgs queued during powerup phase 1\nTx_Msg_ID_Record_Type");
	MakeName	(0X1FA2C,	"C2_TX_MSGS_KV_C2_MSGS_QUEUED_AT_MODE10_P1");
	MakeRptCmt	(0X1FA3E,	"Class2 msgs allowed during mode28 active\nTx_Msg_ID_Record_Type");
	MakeName	(0X1FA3E,	"C2_TX_MSGS_KV_C2_MSGS_ALLOWED_AT_MODE28");
	MakeRptCmt	(0X1FA50,	"This calibration enables/disables the Column Lockfunctionality. Currently ONLY Y car should be TRUE.\nBoolean");
	MakeByte	(0X1FA50);
	MakeName	(0X1FA50,	"COLUMN_LOCK_KE_COLUMN_LOCK_PRESENT");
	MakeRptCmt	(0X1FA52,	"Vehicle speed at which the fuel must be discontinuedwhen the steering column can not be unlocked.\nMPH");
	MakeWord	(0X1FA52);
	MakeName	(0X1FA52,	"COLUMN_LOCK_KE_COLUMN_LOCK_VSS_FUEL_DISABLE");
	MakeRptCmt	(0X1FA54,	"Enable the Fan 1 output if AC Pressure is above this threshold\nPSI");
	MakeWord	(0X1FA54);
	MakeName	(0X1FA54,	"FAN_CONTROL_KE_AC_PRESSURE_FAN1_HIGH_THRESHO");
	MakeRptCmt	(0X1FA56,	"The Fan1 output can be disabled if AC Pressure is below this threshold.\nPSI");
	MakeWord	(0X1FA56);
	MakeName	(0X1FA56,	"FAN_CONTROL_KE_AC_PRESSURE_FAN1_LOW_THRESHOL");
	MakeRptCmt	(0X1FA58,	"Enable the Fan 1 output if coolant temperature is above this threshold.\nDegrees C");
	MakeWord	(0X1FA58);
	MakeName	(0X1FA58,	"FAN_CONTROL_KE_ECT_FAN1_HIGH_THRESHOLD");
	MakeRptCmt	(0X1FA5A,	"The Fan 1 output can be disabled if Coolant Temperature is belowthis threshold.\nDegrees C");
	MakeWord	(0X1FA5A);
	MakeName	(0X1FA5A,	"FAN_CONTROL_KE_ECT_FAN1_LOW_THRESHOLD");
	MakeWord	(0X1FA5C);
	MakeName	(0X1FA5C,	"FAN_CONTROL_KE_ECT_FAN1_AC_ON_THRESHOLD");
	MakeRptCmt	(0X1FA5E,	"Perform FAN RUNON on the fan1 output after keyoff, if coolanttemp is above this threshold at keyoff.\nDegrees_C");
	MakeWord	(0X1FA5E);
	MakeName	(0X1FA5E,	"FAN_CONTROL_KE_ECT_FAN1_KEYOFF");
	MakeRptCmt	(0X1FA60,	"The minimum engine run time required to expire before the Fan1output can be enabled.\nSeconds");
	MakeWord	(0X1FA60);
	MakeName	(0X1FA60,	"FAN_CONTROL_KE_ENGINE_RUNNING_FAN1_TIME");
	MakeRptCmt	(0X1FA62,	"Percent Fan Command to be forced when coolant sensor is shorted high or low.\nPercent");
	MakeWord	(0X1FA62);
	MakeName	(0X1FA62,	"FAN_CONTROL_KE_FANCOMMAND_FOR_CTS_FAULT");
	MakeWord	(0X1FA64);
	MakeName	(0X1FA64,	"FAN_CONTROL_KE_HI_VEH_SPD_FANS_OFF_AC_THRESH");
	MakeRptCmt	(0X1FA66,	"Vehicle Speed threshold with AC compressor engaged above whichFan1 output can be turned off.\nMPH");
	MakeWord	(0X1FA66);
	MakeName	(0X1FA66,	"FAN_CONTROL_KE_VEHICLE_SPEED_HIGH_AC_FAN1_TH");
	MakeRptCmt	(0X1FA68,	"Vehicle Speed threshold with AC compressor engaged below which Fan1 output is forced ON.\nMPH");
	MakeWord	(0X1FA68);
	MakeName	(0X1FA68,	"FAN_CONTROL_KE_VEHICLE_SPEED_LOW_AC_FAN1_THR");
	MakeRptCmt	(0X1FA6A,	"Minimum engine speed required to detect fan lockup.\nRPM");
	MakeWord	(0X1FA6A);
	MakeName	(0X1FA6A,	"FAN_CONTROL_KE_MIN_RPM_TO_DETECT_FANLOCKUP");
	MakeRptCmt	(0X1FA6C,	"Minimum amount of time that Fan1 is disabled after the output is turned off.\nSeconds");
	MakeWord	(0X1FA6C);
	MakeName	(0X1FA6C,	"FAN_CONTROL_KE_MINIMUM_FAN1_ON_TIME");
	MakeRptCmt	(0X1FA6E,	"\nSeconds");
	MakeWord	(0X1FA6E);
	MakeName	(0X1FA6E,	"FAN_CONTROL_KE_MINIMUM_FAN1_OFF_TIME");
	MakeRptCmt	(0X1FA70,	"Time to delay turning off Fan1 after Fan2 has been turned off.\nSeconds");
	MakeWord	(0X1FA70);
	MakeName	(0X1FA70,	"FAN_CONTROL_KE_FAN1_DELAY_OFF_AFTER_FAN2_TUR");
	MakeRptCmt	(0X1FA72,	"Amount of time after fan1 output has been enabled, before fan2 output can be enabled.\nSeconds");
	MakeWord	(0X1FA72);
	MakeName	(0X1FA72,	"FAN_CONTROL_KE_FAN2_ON_DELAY_TIME");
	MakeRptCmt	(0X1FA74,	"Fan2 output can be disabled if AC Pressure is above this threshold.\nPSI");
	MakeWord	(0X1FA74);
	MakeName	(0X1FA74,	"FAN_CONTROL_KE_AC_PRESSURE_FAN2_HIGH_THRESHO");
	MakeRptCmt	(0X1FA76,	"Fan2 output can be disabled if AC Pressure is below this threshold.\nPSI");
	MakeWord	(0X1FA76);
	MakeName	(0X1FA76,	"FAN_CONTROL_KE_AC_PRESSURE_FAN2_LOW_THRESHOL");
	MakeRptCmt	(0X1FA78,	"Enable the fan2 output if Coolant Temperature is above thisthreshold.\nDegrees C");
	MakeWord	(0X1FA78);
	MakeName	(0X1FA78,	"FAN_CONTROL_KE_ECT_FAN2_HIGH_THRESHOLD");
	MakeRptCmt	(0X1FA7A,	"Fan2 output can be disabled if Coolant Temperature is belowthis threshold.\nDegrees_C");
	MakeWord	(0X1FA7A);
	MakeName	(0X1FA7A,	"FAN_CONTROL_KE_ECT_FAN2_LOW_THRESHOLD");
	MakeRptCmt	(0X1FA7C,	"Minimum amount of time that Fan2 is enabled once it is turned on.\nSeconds");
	MakeWord	(0X1FA7C);
	MakeName	(0X1FA7C,	"FAN_CONTROL_KE_MINIMUM_FAN2_ON_TIME");
	MakeRptCmt	(0X1FA7E,	"Delay the off to on transition of the Fan1 output, for this amount of time.\nSeconds");
	MakeWord	(0X1FA7E);
	MakeName	(0X1FA7E,	"FAN_CONTROL_KE_FAN1_TURN_ON_DELAY");
	MakeRptCmt	(0X1FA80,	"Delay the on to off transition of the Fan1 output, for this amount of time.\nSeconds");
	MakeWord	(0X1FA80);
	MakeName	(0X1FA80,	"FAN_CONTROL_KE_FAN1_TURN_OFF_DELAY");
	MakeRptCmt	(0X1FA82,	"Delay the off to on transition of the Fan2 output, for this amount of time.\nSeconds");
	MakeWord	(0X1FA82);
	MakeName	(0X1FA82,	"FAN_CONTROL_KE_FAN2_TURN_ON_DELAY");
	MakeRptCmt	(0X1FA84,	"Delay the on to off transition of the Fan2 output, for this amount of time.\nSeconds");
	MakeWord	(0X1FA84);
	MakeName	(0X1FA84,	"FAN_CONTROL_KE_FAN2_TURN_OFF_DELAY");
	MakeRptCmt	(0X1FA86,	"Amount of time to keep the fan on after the ignition key is turned off for fan runon.\nSeconds");
	MakeWord	(0X1FA86);
	MakeName	(0X1FA86,	"FAN_CONTROL_KE_FAN1_ON_KEYOFF_TIME");
	MakeRptCmt	(0X1FA88,	"A thershold of the AC High-side pressure below which a reduction in PCT_Fan_Command is Allowed due to WOT conditions.\nPSI");
	MakeWord	(0X1FA88);
	MakeName	(0X1FA88,	"FAN_CONTROL_KE_AC_PRESSUREHIGH");
	MakeWord	(0X1FA8A);
	MakeName	(0X1FA8A,	"FAN_CONTROL_KE_COOLANTTEMPOVERRIDE");
	MakeRptCmt	(0X1FA8C,	"Defines the engine speed at which the rotational forces may lead to structural failure for engine driven cooling fans.\nRPM");
	MakeWord	(0X1FA8C);
	MakeName	(0X1FA8C,	"FAN_CONTROL_KE_FANFAILSPEEDRPM");
	MakeRptCmt	(0X1FA8E,	"If fan speed is above KE_FanFailSpeedRPM for this amount of time, fan is locked up.\nSeconds");
	MakeWord	(0X1FA8E);
	MakeName	(0X1FA8E,	"FAN_CONTROL_KE_FANLOCKUPTIME");
	MakeRptCmt	(0X1FA90,	"The maximum rate of increase of Fan Speed Desired.\nRPM");
	MakeWord	(0X1FA90);
	MakeName	(0X1FA90,	"FAN_CONTROL_KE_FANSPEED_INCR_RATE_LIMIT");
	MakeRptCmt	(0X1FA92,	"The maximum rate of decrease of Fan Speed Desired.\nRPM");
	MakeWord	(0X1FA92);
	MakeName	(0X1FA92,	"FAN_CONTROL_KE_FANSPEED_DECR_RATE_LIMIT");
	MakeRptCmt	(0X1FA94,	"Defines the min fan speed threshold to prevent fan speed from dropping too low.\nRPM");
	MakeWord	(0X1FA94);
	MakeName	(0X1FA94,	"FAN_CONTROL_KE_FANSPEEDLOW");
	MakeRptCmt	(0X1FA96,	"This value is commanded for fan speed when the fan speed drops too low.\nPercent");
	MakeWord	(0X1FA96);
	MakeName	(0X1FA96,	"FAN_CONTROL_KE_LOWSPEEDPWM");
	MakeRptCmt	(0X1FA98,	"Amount of time to delay operating the fans on engine power up for engine idle stabilization.\nSeconds");
	MakeWord	(0X1FA98);
	MakeName	(0X1FA98,	"FAN_CONTROL_KE_FANPWRUPDELAY");
	MakeRptCmt	(0X1FA9A,	"Max possible speed of the fan blades which corresponding to max available fan power.\nRPM");
	MakeWord	(0X1FA9A);
	MakeName	(0X1FA9A,	"FAN_CONTROL_KE_FANRPM_MAX");
	MakeRptCmt	(0X1FA9C,	"Min possible speed of the fan blades which corresponding to 0% fan power.\nRPM");
	MakeWord	(0X1FA9C);
	MakeName	(0X1FA9C,	"FAN_CONTROL_KE_FANRPM_OFFSET");
	MakeRptCmt	(0X1FA9E,	"Maximum speed the vehicle is capable of.\nkPH");
	MakeWord	(0X1FA9E);
	MakeName	(0X1FA9E,	"FAN_CONTROL_KE_MAXVEHICLESPEED");
	MakeRptCmt	(0X1FAA0,	"Maximum allowed rate of change in the decreasing direction.\nPercent/Second");
	MakeWord	(0X1FAA0);
	MakeName	(0X1FAA0,	"FAN_CONTROL_KE_MAXFANPWMGRADIENTNEG");
	MakeRptCmt	(0X1FAA2,	"Maximum allowed rate of change in the increasing direction.\nPercent/Second");
	MakeWord	(0X1FAA2);
	MakeName	(0X1FAA2,	"FAN_CONTROL_KE_MAXFANPWMGRADIENTPOS");
	MakeRptCmt	(0X1FAA4,	"Maximum allowed rate of change in the decreasing direction when fan is operating in the slip power mode.\nPercent/Second");
	MakeWord	(0X1FAA4);
	MakeName	(0X1FAA4,	"FAN_CONTROL_KE_MAXFANSPWMGRADIENTNEG");
	MakeRptCmt	(0X1FAA6,	"Maximum allowed rate of change in the increasing direction when fan is operating in the slip power mode.\nPercent/Second");
	MakeWord	(0X1FAA6);
	MakeName	(0X1FAA6,	"FAN_CONTROL_KE_MAXFANSPWMGRADIENTPOS");
	MakeRptCmt	(0X1FAA8,	"Threshold in percentage of fan power below which a Service tool is allowed control fans.\nPercent");
	MakeWord	(0X1FAA8);
	MakeName	(0X1FAA8,	"FAN_CONTROL_KE_SERVICEOVERRIDEALLOWED");
	MakeRptCmt	(0X1FAAA,	"Threshold for engine coolant temperature above which slippower management is not allowed.\nDegrees C");
	MakeWord	(0X1FAAA);
	MakeName	(0X1FAAA,	"FAN_CONTROL_KE_SLIP_ECT_MAXHI");
	MakeRptCmt	(0X1FAAC,	"Threshold for engine coolant temperature below which slippower management is allowed.\nDegrees C");
	MakeWord	(0X1FAAC);
	MakeName	(0X1FAAC,	"FAN_CONTROL_KE_SLIP_ECT_MAXLO");
	MakeRptCmt	(0X1FAAE,	"Percentage of fan power that PCt_Fan_Cmd_Modifier_Due_FanSlip is set to when fan drive speed is <= KE_SlipFanDriveHi.\nPercent");
	MakeWord	(0X1FAAE);
	MakeName	(0X1FAAE,	"FAN_CONTROL_KE_SLIP_PCT_FANHI");
	MakeRptCmt	(0X1FAB0,	"Defines Fan Drive Speed above which the Pct_Fan_Command is set to KE_SlipPct_FanLo and below which set to KE_SlipPct_FanHi.\nRPM");
	MakeWord	(0X1FAB0);
	MakeName	(0X1FAB0,	"FAN_CONTROL_KE_SLIPFANDRIVEHI");
	MakeRptCmt	(0X1FAB2,	"Defines Fan Drive Speed below which modifications to Pct_Fan_Command for slip power management is required.\nRPM");
	MakeWord	(0X1FAB2);
	MakeName	(0X1FAB2,	"FAN_CONTROL_KE_SLIPFANDRIVELO");
	MakeWord	(0X1FAB4);
	MakeName	(0X1FAB4,	"FAN_CONTROL_KE_TEMPTRANSOILHI");
	MakeRptCmt	(0X1FAB6,	"High threshold above which 100% required fan speed based on Engine Oil Temperature.\nDegrees C");
	MakeWord	(0X1FAB6);
	MakeName	(0X1FAB6,	"FAN_CONTROL_KE_TEMPENGINEOILHI");
	MakeRptCmt	(0X1FAB8,	"Threshold for vehicle speed below which, no fan speed adjustment due to vehicle speed is allowed.\nkPH");
	MakeWord	(0X1FAB8);
	MakeName	(0X1FAB8,	"FAN_CONTROL_KE_VEHICLESPDFANADJUSTLO");
	MakeRptCmt	(0X1FABA,	"Threshold for vehicle speed above which, no fan speed adjustment due to vehicle speed is allowed.\nkPH");
	MakeWord	(0X1FABA);
	MakeName	(0X1FABA,	"FAN_CONTROL_KE_VEHICLESPDFANADJUSTHI");
	MakeRptCmt	(0X1FABC,	"Pulley ratio of the accessory drive that is driving the fan.\nMultiplier_0_to_16");
	MakeWord	(0X1FABC);
	MakeName	(0X1FABC,	"FAN_CONTROL_KE_WATER_PUMP_PULLEY_RATIO");
	MakeRptCmt	(0X1FABE,	"Threshold of the engine coolant temperature below which a reduction in Pct_Fan_Command is allowed due to Wide Open Throttle.\nDegrees C");
	MakeWord	(0X1FABE);
	MakeName	(0X1FABE,	"FAN_CONTROL_KE_WOT_COOLANTTEMP");
	MakeRptCmt	(0X1FAC0,	"Threshold of the throttle position sensor above which the reduction in Pct_Fan_Command is required due to Wide Open Throttle.\nPercent");
	MakeWord	(0X1FAC0);
	MakeName	(0X1FAC0,	"FAN_CONTROL_KE_WOT_FANSPEEDLIMIT");
	MakeRptCmt	(0X1FAC2,	"The maximum amount of time that Pct_Fan_Command is set to KE_WOT_Pct_Fan due to Wide Open Throttle condition.\nSeconds");
	MakeWord	(0X1FAC2);
	MakeName	(0X1FAC2,	"FAN_CONTROL_KE_WOT_MAXDISABLE");
	MakeRptCmt	(0X1FAC4,	"Percentage of fan power that is assigned to Pct_Fan_Command when Wide Open Throttle condition exists.\nPercent");
	MakeWord	(0X1FAC4);
	MakeName	(0X1FAC4,	"FAN_CONTROL_KE_WOT_PCT_FAN");
	MakeRptCmt	(0X1FAC6,	"Percentage of fan power required for corresponding AC High-side pressure.\nPercent");
	MakeName	(0X1FAC6,	"FAN_CONTROL_KV_AC_PCT_FANREQ");
	MakeRptCmt	(0X1FAE8,	"The percentage of fan power required for corresponding engine coolant temperature.\nPercent");
	MakeName	(0X1FAE8,	"FAN_CONTROL_KV_ECT_PCT_FANREQ");
	MakeRptCmt	(0X1FB0A,	"Percentage of fan power required for cooresponding engine speed.\nPercent");
	MakeWord	(0X1FB0A);
	MakeName	(0X1FB0A,	"FAN_CONTROL_KV_MAXFAN_PCT_CMD");
	MakeRptCmt	(0X1FB2C,	"The percentage of fan power required for corresponding transmission oil temperature.\nPercent");
	MakeName	(0X1FB2C,	"FAN_CONTROL_KV_TRANS_TEMP_PCT_FANREQ");
	MakeRptCmt	(0X1FB3E,	"The percentage of fan power required for corresponding engine oil temperature.\nPercent");
	MakeName	(0X1FB3E,	"FAN_CONTROL_KV_ENG_OIL_TEMP_PCT_FANREQ");
	MakeRptCmt	(0X1FB50,	"Amount of adjustment to the PWM duty cycle required on the output driver due to fan speed feedback.\nPercent_S");
	MakeName	(0X1FB50,	"FAN_CONTROL_KA_DELTA");
	MakeRptCmt	(0X1FC82,	"PWM duty cycle required on the output driver, prior to adjustment due to fan speed feedback.\nPercent");
	MakeName	(0X1FC82,	"FAN_CONTROL_KA_PCT_PWM");
	MakeWord	(0X1FDB4);
	MakeName	(0X1FDB4,	"FUEL_PUMP_KE_FUEL_PUMP_PRIME_TIMER");
	MakeRptCmt	(0X1FDB6,	"Denomenator coefficient for the RTD VSS filter.\nRTD_Input_Type");
	MakeWord	(0X1FDB6);
	MakeName	(0X1FDB6,	"RTD_KE_RTD_VEH_ACCEL_FILT_COEF_A1");
	MakeRptCmt	(0X1FDB8,	"Denomenator coefficient for the RTD VSS filter.\nRTD_Input_Type");
	MakeWord	(0X1FDB8);
	MakeName	(0X1FDB8,	"RTD_KE_RTD_VEH_ACCEL_FILT_COEF_A2");
	MakeRptCmt	(0X1FDBA,	"Numerator coefficient for the RTD VSS filter.\nRTD_Input_Type");
	MakeWord	(0X1FDBA);
	MakeName	(0X1FDBA,	"RTD_KE_RTD_VEH_ACCEL_FILT_COEF_B0");
	MakeRptCmt	(0X1FDBC,	"Numerator coefficient for the RTD VSS filter.\nRTD_Input_Type");
	MakeWord	(0X1FDBC);
	MakeName	(0X1FDBC,	"RTD_KE_RTD_VEH_ACCEL_FILT_COEF_B1");
	MakeRptCmt	(0X1FDBE,	"Numerator coefficient for the RTD VSS filter.\nRTD_Input_Type");
	MakeWord	(0X1FDBE);
	MakeName	(0X1FDBE,	"RTD_KE_RTD_VEH_ACCEL_FILT_COEF_B2");
	MakeRptCmt	(0X1FDC0,	"Vehicle acceleration lag filter denomenator coefficient\nRTD_Input_Type");
	MakeWord	(0X1FDC0);
	MakeName	(0X1FDC0,	"RTD_KE_RTD_VEH_ACCEL_LAGFILT_COEF_A1");
	MakeRptCmt	(0X1FDC2,	"Vehicle acceleration lag filter denomenator coefficient\nRTD_Input_Type");
	MakeWord	(0X1FDC2);
	MakeName	(0X1FDC2,	"RTD_KE_RTD_VEH_ACCEL_LAGFILT_COEF_A2");
	MakeRptCmt	(0X1FDC4,	"Vehicle acceleration lag filter numerator coefficient\nRTD_Input_Type");
	MakeWord	(0X1FDC4);
	MakeName	(0X1FDC4,	"RTD_KE_RTD_VEH_ACCEL_LAGFILT_COEF_B0");
	MakeRptCmt	(0X1FDC6,	"Vehicle acceleration lag filter numerator coefficient\nRTD_Input_Type");
	MakeWord	(0X1FDC6);
	MakeName	(0X1FDC6,	"RTD_KE_RTD_VEH_ACCEL_LAGFILT_COEF_B1");
	MakeRptCmt	(0X1FDC8,	"Vehicle acceleration lag filter numerator coefficient\nRTD_Input_Type");
	MakeWord	(0X1FDC8);
	MakeName	(0X1FDC8,	"RTD_KE_RTD_VEH_ACCEL_LAGFILT_COEF_B2");
	MakeRptCmt	(0X1FDCA,	"Divisor for the RTD Veh Accel Differiator filter\nRTD_Input_Type");
	MakeWord	(0X1FDCA);
	MakeName	(0X1FDCA,	"RTD_KE_RTD_VEH_ACCEL_FILT_DIVISOR");
	MakeRptCmt	(0X1FDCC,	"Divisor for the RTD Veh Accel Lag filter\nRTD_Input_Type");
	MakeWord	(0X1FDCC);
	MakeName	(0X1FDCC,	"RTD_KE_RTD_VEH_ACCEL_LAG_FILT_DIVISO");
	MakeRptCmt	(0X1FDCE,	"Lift/Dive Braking Decel Threshold\nRTD_Filter_Type");
	MakeWord	(0X1FDCE);
	MakeName	(0X1FDCE,	"RTD_KE_RTD_VEH_ACCEL_BRAKING_DECEL");
	MakeRptCmt	(0X1FDD0,	"Lift/Dive Braking Accel Threshold\nRTD_Filter_Type");
	MakeWord	(0X1FDD0);
	MakeName	(0X1FDD0,	"RTD_KE_RTD_VEH_ACCEL_BRAKING_ACCEL");
	MakeRptCmt	(0X1FDD2,	"Throttle threshold below which braking release function is enabled.\nPercent");
	MakeWord	(0X1FDD2);
	MakeName	(0X1FDD2,	"RTD_KE_RTD_THROT_BRAKING_ACCEL");
	MakeRptCmt	(0X1FDD4,	"RTD_Braking_Lift_Dive is updated only during this period of time after brakepedal was last applied.\nSeconds");
	MakeWord	(0X1FDD4);
	MakeName	(0X1FDD4,	"RTD_KE_RTD_BRAKING_INPUT_HOLD_TIME");
	MakeRptCmt	(0X1FDD6,	"Speed below which RTD Brake Transition Function is disabled\nMPH");
	MakeWord	(0X1FDD6);
	MakeName	(0X1FDD6,	"RTD_KE_RTD_VSS_BRAKING_ENABLE");
	MakeRptCmt	(0X1FDD8,	"Throttle Rate filter denomenator coefficient\nGs");
	MakeByte	(0X1FDD8);
	MakeName	(0X1FDD8,	"RTD_KE_RTD_ROUGH_RD_VSS_FILT_DISABLE");
	MakeRptCmt	(0X1FDDA,	"Speed below which clutch dump Lift/Dive Function is enabled\nMPH");
	MakeWord	(0X1FDDA);
	MakeName	(0X1FDDA,	"RTD_KE_RTD_VEH_SPEED_CLUTCH_DUMP");
	MakeRptCmt	(0X1FDDC,	"Throttle above which clutch dump Lift/Dive Function is enabled\nPercent");
	MakeWord	(0X1FDDC);
	MakeName	(0X1FDDC,	"RTD_KE_RTD_DESIRED_THROT_CLUTCH_DUMP");
	MakeRptCmt	(0X1FDDE,	"Engine Speed above which clutch dump Lift/Dive Function is enabled\nRPM");
	MakeWord	(0X1FDDE);
	MakeName	(0X1FDDE,	"RTD_KE_RTD_ENGINE_SPEED_CLUTCH_DUMP");
	MakeRptCmt	(0X1FDE0,	"The amount of time that the Lift Dive signal is to be active when a suspension load change has been detected.\nSeconds");
	MakeByte	(0X1FDE0);
	MakeName	(0X1FDE0,	"RTD_KE_RTD_LIFT_DIVE_ACTIVE_TIME");
	MakeByte	(0X1FDE1);
	MakeName	(0X1FDE1,	"RTD_KE_RTD_LIFT_DIVE_TEST_TIME");
	MakeRptCmt	(0X1FDE2,	"Positive Delta Torque Threshold as a function of Engine_Speed to trip Lift/Dive Command Calibration.\nEngine_Spd_Int_Gain_Type");
	MakeWord	(0X1FDE2);
	MakeName	(0X1FDE2,	"RTD_KV_RTD_POS_DELTA_TORQUE_LIM");
	MakeRptCmt	(0X1FDF4,	"Negitive Delta Torque Threshold as a function of Engine_Speed to trip Lift/Dive Command Calibration.\nEngine_Spd_Int_Gain_Type");
	MakeWord	(0X1FDF4);
	MakeName	(0X1FDF4,	"RTD_KV_RTD_NEG_DELTA_TORQUE_LIM");
	MakeRptCmt	(0X1FE06,	"Factor to multiply Delta Torque to reduce the engine power output expected at the rear axle for higher transmission gears.\nEngine_Spd_Int_Gain_Type");
	MakeWord	(0X1FE06);
	MakeName	(0X1FE06,	"RTD_KV_RTD_DELTA_TORQUE_GEAR_MULT");
	MakeByte	(0X1FE1A);
	MakeName	(0X1FE1A,	"RTD_KE_RTD_MTRAN_GEAR_UPDATE_DELAY");
	MakeRptCmt	(0X1FE1C,	"Commanded engine power output table for a 2 to 1 downshift.\nEngine_Spd_Int_Gain_Type");
	MakeWord	(0X1FE1C);
	MakeName	(0X1FE1C,	"RTD_KV_RTD_2TO1_DOWNSHIFT_THROT_LIM");
	MakeRptCmt	(0X1FE2E,	"Commanded engine power output table for a 3 to 2 downshift.\nEngine_Spd_Int_Gain_Type");
	MakeWord	(0X1FE2E);
	MakeName	(0X1FE2E,	"RTD_KV_RTD_3TO2_DOWNSHIFT_THROT_LIM");
	MakeRptCmt	(0X1FE40,	"Commanded engine power output table for a 3 to 1 downshift.\nEngine_Spd_Int_Gain_Type");
	MakeWord	(0X1FE40);
	MakeName	(0X1FE40,	"RTD_KV_RTD_3TO1_DOWNSHIFT_THROT_LIM");
	MakeRptCmt	(0X1FE52,	"Commanded engine power output table for a 4 to 2 downshift.\nEngine_Spd_Int_Gain_Type");
	MakeWord	(0X1FE52);
	MakeName	(0X1FE52,	"RTD_KV_RTD_4TO2_DOWNSHIFT_THROT_LIM");
	MakeRptCmt	(0X1FE64,	"Commanded engine power output table for a 4 to 1 downshift.\nEngine_Spd_Int_Gain_Type");
	MakeWord	(0X1FE64);
	MakeName	(0X1FE64,	"RTD_KV_RTD_4TO1_DOWNSHIFT_THROT_LIM");
	MakeRptCmt	(0X1FE76,	"Numerator coefficient for the RTD Delta Torque Calculation\nRTD_Input_Type");
	MakeWord	(0X1FE76);
	MakeName	(0X1FE76,	"RTD_KE_RTD_DELTA_TORQUE_COEF_B0");
	MakeRptCmt	(0X1FE78,	"Numerator coefficient for the RTD Delta Torque Calculation\nRTD_Input_Type");
	MakeWord	(0X1FE78);
	MakeName	(0X1FE78,	"RTD_KE_RTD_DELTA_TORQUE_COEF_B2");
	MakeRptCmt	(0X1FE7A,	"Denomenator coefficient for the RTD Delta Torque Calculation\nRTD_Input_Type");
	MakeWord	(0X1FE7A);
	MakeName	(0X1FE7A,	"RTD_KE_RTD_DELTA_TORQUE_COEF_A1");
	MakeRptCmt	(0X1FE7C,	"Denomenator coefficient for the RTD Delta Torque Calculation\nRTD_Input_Type");
	MakeWord	(0X1FE7C);
	MakeName	(0X1FE7C,	"RTD_KE_RTD_DELTA_TORQUE_COEF_A2");
	MakeRptCmt	(0X1FE7E,	"Divisor for the RTD Delta Torque Calculation\nRTD_Input_Type");
	MakeWord	(0X1FE7E);
	MakeName	(0X1FE7E,	"RTD_KE_RTD_DELTA_TORQUE_DIVISOR");
	MakeRptCmt	(0X1FE80,	"TRUE indicates the diagnostic is enabled and VTD failure is reported via Class 2.\nBOOLEAN");
	MakeByte	(0X1FE80);
	MakeName	(0X1FE80,	"VTD_KE_VTD_DIAG_ENABLED");
	MakeByte	(0X1FE81);
	MakeByte	(0X1FE82);
	MakeRptCmt	(0X1FE83,	"Threshold to compare against the Bad Password Counter during certain decision states.\nSHORTCARD");
	MakeByte	(0X1FE83);
	MakeName	(0X1FE83,	"VTD_KE_VTD_BAD_PASSWORD");
	MakeRptCmt	(0X1FE84,	"Threshold to compare against the Auto Learn Counter during Auto-Learn state.\nSHORTCARD");
	MakeByte	(0X1FE84);
	MakeName	(0X1FE84,	"VTD_KE_VTD_LEARNED_ENOUGH");
	MakeRptCmt	(0X1FE85,	"Threshold to compare against the Identical Password Counter during Learn Password state.\nSHORTCARD");
	MakeByte	(0X1FE85);
	MakeName	(0X1FE85,	"VTD_KE_VTD_LEARNED_PASSWORD");
	MakeRptCmt	(0X1FE86,	"Expiration time for the Fuel Disable Timer duringFuel Disable Lockout state.\nSeconds");
	MakeWord	(0X1FE86);
	MakeName	(0X1FE86,	"VTD_KE_VTD_DISABLE_TIME");
	MakeRptCmt	(0X1FE88,	"Expiration time for the Auto Learn Timer duringAuto-Learn Pending state.\nSeconds_L");
	MakeDword	(x=0X1FE88);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X1FE88,	"VTD_KE_VTD_AUTO_LEARN");
	MakeRptCmt	(0X1FE8C,	"Expiration time for the PCM C2 Init Timer duringIgnition 1 Off and Powerup Transitions.\nSeconds");
	MakeWord	(0X1FE8C);
	MakeName	(0X1FE8C,	"VTD_KE_VTD_C2_INIT");
	MakeRptCmt	(0X1FE8E,	"Expiration time for the C2 Auto Learn Timer duringAuto-Learn and Auto-Learn Pending states.\nSeconds_L");
	MakeDword	(x=0X1FE8E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X1FE8E,	"VTD_KE_VTD_C2_AUTO_LEARN");
	MakeRptCmt	(0X1FE92,	"The amount of time the ignition is off before the VTD logic performs powerdown state transitions.\nSeconds");
	MakeWord	(0X1FE92);
	MakeName	(0X1FE92,	"VTD_KE_VTD_TIME_TO_IGNITION_OFF");
	MakeRptCmt	(0X1FE94,	"Used to turn On/Off the VTD_Class2 auto learning function.\nBOOLEAN");
	MakeByte	(0X1FE94);
	MakeName	(0X1FE94,	"VTD_KE_VTDC2_NOT_AN_EXPORT_VEHICLE");
	MakeRptCmt	(0X1FEB0,	"Use this cal to identify the Vehicle Speed calibration\nCal_ID_Record");
	MakeName	(0X1FEB0,	"SPD_CALIBRATIONS_HEADER");
	MakeName	(0X1FEB4,	"Constant32_Speedometer_Calibration_ID");
	MakeName	(0X1FEB8,	"CurveTable_2_Columns_Speedometer_Calibration_Level");
	MakeStr		(0X1FEBC,	0X1FEC5);
	MakeName	(0X1FEBC,	"CurveTable_8_Columns_Speedometer_Calibration_ID_ASCII");
	MakeRptCmt	(0X1FECC,	"Vehicle speed sensor scaling factor.\nPulses/Mile");
	MakeWord	(0X1FECC);
	MakeName	(0X1FECC,	"VEH_SPEED_KE_PULSES_PER_MILE");
	MakeRptCmt	(0X1FECE,	"Determines whether to use the EEPROM based VSS cals or the Cal ROM VSS cals.\nBOOLEAN");
	MakeByte	(0X1FECE);
	MakeName	(0X1FECE,	"VEH_SPEED_KE_USE_EEPROM_VSS_CALS");
	MakeRptCmt	(0X1FED0,	"Determines the PPM for the vehicle speed primary output.\nPulses/Mile");
	MakeWord	(0X1FED0);
	MakeName	(0X1FED0,	"VEH_SPEED_KE_PRIMARY_OUTPUT_PPM");
	MakeRptCmt	(0X1FED2,	"Determines the PPM for the vehicle speed secondary output.\nPulses/Mile");
	MakeWord	(0X1FED2);
	MakeName	(0X1FED2,	"VEH_SPEED_KE_SECONDARY_OUTPUT_PPM");
	MakeRptCmt	(0X1FED4,	"If no vehicle speed pulses for this period of time, the vehicle is considered to be stationary.\nSeconds");
	MakeWord	(0X1FED4);
	MakeName	(0X1FED4,	"VEH_SPEED_KE_VEH_SPEED_TIME");
	MakeRptCmt	(0X1FED6,	"limit below which the ETC governor attempts to keep the vehicle speed\nMPH");
	MakeWord	(0X1FED6);
	MakeName	(0X1FED6,	"VEH_SPEED_KE_VEHICLE_SPEED_LIMIT");
	MakeByte	(0X1FED8);
	MakeName	(0X1FED8,	"VEH_SPEED_KE_VSS_APPLICATION_TYPE");
	MakeWord	(0X1FEDA);
	MakeName	(0X1FEDA,	"VEH_SPEED_KE_RTD_FAULT_ETC_GOV_MAX_SPEED");
	MakeRptCmt	(0X1FEDC,	"Axle gear ratio for calibration application\nMultiplier_0_to_16");
	MakeWord	(0X1FEDC);
	MakeName	(0X1FEDC,	"VEH_SPEED_KE_FINAL_DRIVE_RATIO");
	MakeRptCmt	(0X1FEDE,	"The vehicle speed will not increase at a rate greater than this.\nMPH / Sec");
	MakeWord	(0X1FEDE);
	MakeName	(0X1FEDE,	"VEH_SPEED_KE_MAX_POSITIVE_MPH_CHANGE");
	MakeRptCmt	(0X1FEE0,	"Maximum vehicle speed when an RTD fault is sent to the PCM by the RTD system.\nMPH");
	MakeWord	(0X1FEE0);
	MakeName	(0X1FEE0,	"VEH_SPEED_KE_RTD_FAULT_MAX_SPEED");
	MakeRptCmt	(0X1FEE2,	"For a non ETC vehicle, time that vehicle speed must be over the max. limit before cutting off fuel.\nSeconds");
	MakeWord	(0X1FEE2);
	MakeName	(0X1FEE2,	"VEH_SPEED_KE_VEHICLE_OVERSPEED_TIME");
	MakeWord	(0X1FEE4);
	MakeName	(0X1FEE4,	"VEH_SPEED_KE_VEHICLE_OVERSPEED");
	MakeRptCmt	(0X1FEE6,	"For an ETC vehicle, time that vehicle speed must be over the max. limit before cutting off fuel.\nSeconds");
	MakeWord	(0X1FEE6);
	MakeName	(0X1FEE6,	"VEH_SPEED_KE_VEHICLE_OVERSPEED_TIME_ETC");
	MakeWord	(0X1FEE8);
	MakeName	(0X1FEE8,	"VEH_SPEED_KE_VEHICLE_OVERSPEED_ETC");
	MakeRptCmt	(0X1FEEA,	"Hysteresis applied to vehicle speed at which fuel cutoff occurs.\nMPH");
	MakeWord	(0X1FEEA);
	MakeName	(0X1FEEA,	"VEH_SPEED_KE_VEHICLE_OVERSPEED_HYSTERESIS");
	MakeRptCmt	(0X1FEEC,	"Enable setting vehicle speed to a valid class 2 wheel speedwhen a fault in the vehicle speed group is active\nBOOLEAN");
	MakeByte	(0X1FEEC);
	MakeName	(0X1FEEC,	"VEH_SPEED_KE_C2_VEH_SPEED_DEFAULT_ENABLED");
	MakeRptCmt	(0X1FEEE,	"Vehicle speed filter coefficient used in the first order lag filter applied to the raw vehicle speed value.\nSeconds");
	MakeWord	(0X1FEEE);
	MakeName	(0X1FEEE,	"VEH_SPEED_KE_VEH_SPEED_FILTER");
	MakeRptCmt	(0X1FEF0,	"Vehicle speed multiplier when Dual_Axle is Low. Note: Range from (0.1228 .. < 2.0)!\nMultiplier_0_to_2");
	MakeWord	(0X1FEF0);
	MakeName	(0X1FEF0,	"VEH_SPEED_KE_LOW_AXLE_SPEED_ADJUST");
	MakeCode	(x=0X20000);
	OpSign		(x,	1);
	MakeCode	(x=0X20008);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2000E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X20022);
	OpStkvar	(x,	1);
	MakeCode	(x=0X20028);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2004E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X2008A);
	MakeCode	(x=0X200C4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X200DE);
	OpSign		(x,	1);
	MakeCode	(x=0X200EC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X20104);
	MakeCode	(x=0X2011A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X20124);
	OpStkvar	(x,	1);
	MakeCode	(x=0X20134);
	OpStkvar	(x,	0);
	MakeCode	(0X2014E);
	MakeCode	(x=0X20164);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X2018C);
	MakeCode	(0X2019A);
	MakeCode	(x=0X2019E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X201B4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X201EC);
	OpStkvar	(x,	0);
	MakeCode	(0X20206);
	MakeCode	(x=0X2020E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X20238);
	OpStkvar	(x,	0);
	MakeCode	(0X20252);
	MakeCode	(x=0X2025A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X20288);
	MakeCode	(0X2029A);
	MakeCode	(0X202A6);
	MakeCode	(0X2030A);
	MakeCode	(0X20342);
	MakeCode	(x=0X20346);
	OpStkvar	(x,	0);
	MakeCode	(0X2035A);
	MakeCode	(x=0X20362);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X2038A);
	OpStkvar	(x,	0);
	MakeCode	(0X203A4);
	MakeCode	(x=0X203AC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X203DA);
	MakeCode	(0X203EC);
	MakeCode	(0X203FA);
	MakeCode	(0X20458);
	MakeCode	(0X2047A);
	MakeCode	(0X2049A);
	MakeCode	(0X204A6);
	MakeCode	(0X204F2);
	MakeCode	(0X20514);
	MakeCode	(0X20534);
	MakeCode	(0X20540);
	MakeCode	(0X20568);
	MakeCode	(0X20596);
	MakeCode	(0X205C4);
	MakeCode	(0X2062A);
	MakeCode	(0X20638);
	MakeCode	(0X20644);
	MakeCode	(0X206AE);
	MakeCode	(0X206C0);
	MakeCode	(0X206D4);
	MakeCode	(0X2070A);
	MakeCode	(0X20718);
	MakeCode	(0X2078C);
	MakeCode	(0X207A6);
	MakeCode	(x=0X207AA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X207CA);
	MakeCode	(x=0X207CE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X207E8);
	MakeCode	(0X207F4);
	MakeCode	(x=0X207F8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X20816);
	MakeCode	(x=0X2081A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X20832);
	MakeCode	(0X2083C);
	MakeCode	(x=0X20840);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X2086C);
	MakeCode	(0X20874);
	MakeCode	(0X20888);
	MakeCode	(0X208C2);
	MakeCode	(0X208D8);
	MakeCode	(0X20926);
	MakeCode	(0X20960);
	MakeCode	(0X20986);
	MakeCode	(0X209B4);
	MakeCode	(0X209E4);
	MakeCode	(0X20A2C);
	MakeCode	(0X20A3A);
	MakeCode	(0X20AA4);
	MakeCode	(0X20ACA);
	MakeName	(0X20ACA,	"DBW_Breadcrumb");
	MakeCode	(0X20AE4);
	MakeCode	(0X20B06);
	MakeCode	(0X20B2C);
	MakeCode	(0X20B50);
	MakeCode	(x=0X20B5C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X20BC4);
	MakeCode	(0X20BEC);
	MakeCode	(0X20C0C);
	MakeCode	(0X20CB2);
	MakeCode	(0X20D12);
	MakeCode	(0X20D18);
	MakeCode	(0X20D22);
	MakeCode	(x=0X20D2E);
	OpStkvar	(x,	1);
	MakeCode	(0X20D54);
	MakeCode	(0X20D8A);
	MakeCode	(0X20D92);
	MakeCode	(0X20DC6);
	MakeCode	(0X20DCC);
	MakeCode	(0X20DE4);
	MakeCode	(0X20DF0);
	MakeCode	(0X20E48);
	MakeCode	(0X20E66);
	MakeCode	(0X20E86);
	MakeCode	(0X20E9A);
	MakeCode	(0X20EAA);
	MakeCode	(0X20EC6);
	MakeCode	(0X20EEC);
	MakeCode	(0X20EF2);
	MakeCode	(0X20F0C);
	MakeCode	(0X20F2E);
	MakeCode	(0X20F58);
	MakeCode	(0X20F66);
	MakeCode	(0X20F6C);
	MakeCode	(0X20F7E);
	MakeCode	(0X20F8E);
	MakeCode	(0X20FB4);
	MakeCode	(0X20FC4);
	MakeCode	(0X20FCA);
	MakeCode	(0X20FE8);
	MakeCode	(0X20FF6);
	MakeCode	(0X20FFC);
	MakeCode	(0X2105A);
	MakeCode	(0X2106C);
	MakeCode	(0X21088);
	MakeCode	(0X21094);
	MakeCode	(0X210F2);
	MakeCode	(0X210FE);
	MakeCode	(0X2111E);
	MakeCode	(0X21124);
	MakeCode	(0X21150);
	MakeCode	(0X21158);
	MakeCode	(0X2116C);
	MakeCode	(0X21192);
	MakeCode	(0X211A0);
	MakeCode	(0X211A6);
	MakeCode	(0X211C0);
	MakeCode	(0X211EA);
	MakeCode	(0X2120C);
	MakeCode	(0X2121A);
	MakeCode	(0X21220);
	MakeCode	(0X2124C);
	MakeCode	(0X21252);
	MakeCode	(0X212DC);
	MakeCode	(0X21312);
	MakeCode	(0X21324);
	MakeCode	(0X2132C);
	MakeCode	(0X21348);
	MakeCode	(0X21358);
	MakeCode	(0X21370);
	MakeCode	(0X21376);
	MakeCode	(0X213B2);
	MakeCode	(0X213C2);
	MakeCode	(0X213C8);
	MakeCode	(0X213CE);
	MakeCode	(0X213FC);
	MakeCode	(0X21416);
	MakeCode	(0X21424);
	MakeCode	(0X2142A);
	MakeCode	(0X2143A);
	MakeCode	(0X21462);
	MakeCode	(0X2146A);
	MakeCode	(0X21474);
	MakeCode	(0X21480);
	MakeCode	(0X214D6);
	MakeCode	(0X21508);
	MakeCode	(0X21546);
	MakeCode	(0X21580);
	MakeCode	(0X21604);
	MakeCode	(0X2161C);
	MakeCode	(0X21662);
	MakeCode	(x=0X216C6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X216D0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X216E2);
	MakeCode	(0X216EE);
	MakeCode	(0X2172E);
	MakeCode	(0X21770);
	MakeCode	(0X217B2);
	MakeCode	(0X217F4);
	MakeCode	(x=0X2180E);
	OpSign		(x,	1);
	MakeCode	(x=0X21816);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2181A);
	OpStkvar	(x,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X21820);
	OpStkvar	(x,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X21826);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2182C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X21832);
	OpStkvar	(x,	1);
	MakeCode	(x=0X21838);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2183E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X21842);
	OpStkvar	(x,	1);
	MakeCode	(x=0X21846);
	OpStkvar	(x,	1);
	MakeCode	(x=0X21850);
	OpStkvar	(x,	0);
	MakeCode	(0X21896);
	MakeCode	(0X218AE);
	MakeCode	(0X218D8);
	MakeCode	(0X2192A);
	MakeCode	(x=0X21930);
	OpSign		(x,	1);
	MakeCode	(0X219BC);
	MakeCode	(0X219D2);
	MakeCode	(0X219E8);
	MakeCode	(0X21A06);
	MakeCode	(0X21A9C);
	MakeCode	(0X21AB8);
	MakeCode	(0X21AF2);
	MakeCode	(0X21B14);
	MakeCode	(x=0X21B2E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X21B38);
	OpStkvar	(x,	0);
	MakeCode	(0X21B90);
	MakeCode	(0X21BC2);
	MakeCode	(0X21BD8);
	MakeCode	(0X21BEA);
	MakeCode	(0X21C16);
	MakeCode	(0X21C30);
	MakeCode	(0X21C8A);
	MakeCode	(x=0X21CA8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X21CBA);
	MakeCode	(0X21CCA);
	MakeCode	(x=0X21CCE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X21CD4);
	OpOff		(x,	1,	0XFFA004);
	OpOff		(x,	129,	0XFFA004);
	MakeCode	(0X21CE2);
	MakeCode	(0X21D1C);
	MakeCode	(0X21D5A);
	MakeCode	(0X21D6C);
	MakeCode	(0X21D74);
	MakeCode	(x=0X21D76);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X21DA0);
	MakeCode	(0X21DDC);
	MakeCode	(0X21DFC);
	MakeCode	(0X21E20);
	MakeCode	(0X21E26);
	MakeCode	(x=0X21E56);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X21E72);
	MakeCode	(0X21E88);
	MakeCode	(x=0X21E92);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X21E9A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X21ECE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X21ED6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X21F20);
	MakeCode	(0X21F2C);
	MakeCode	(x=0X21F32);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X220B4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X220CA);
	MakeCode	(0X220F0);
	MakeCode	(x=0X220F4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X22110);
	MakeCode	(0X22132);
	MakeCode	(x=0X2213E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X2217C);
	MakeCode	(0X22196);
	MakeCode	(0X221B4);
	MakeCode	(0X221C4);
	MakeCode	(0X221CC);
	MakeCode	(0X221D4);
	MakeCode	(0X221E2);
	MakeCode	(0X221E8);
	MakeCode	(0X221F0);
	MakeCode	(0X221F8);
	MakeCode	(x=0X221FE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X22214);
	MakeCode	(x=0X2221E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X2222C);
	MakeCode	(x=0X22230);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X22260);
	MakeCode	(0X222A2);
	MakeCode	(0X222C8);
	MakeCode	(0X222F6);
	MakeCode	(x=0X22322);
	OpSign		(x,	1);
	MakeCode	(x=0X2232C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X22332);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2233A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X22340);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2234C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X22356);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2235C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X22362);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2236C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X22372);
	OpStkvar	(x,	1);
	MakeCode	(x=0X22376);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2237C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X22382);
	OpStkvar	(x,	0);
	MakeCode	(x=0X223A2);
	OpStkvar	(x,	0);
	MakeCode	(x=0X223A6);
	OpStkvar	(x,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X223AC);
	OpStkvar	(x,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X223B2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X223B8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X223BE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X223C4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X223CA);
	OpStkvar	(x,	0);
	MakeCode	(x=0X223CE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X223D2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X223DC);
	OpStkvar	(x,	0);
	MakeCode	(x=0X223EA);
	OpSign		(x,	1);
	MakeCode	(x=0X223F2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X223FA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X22400);
	OpStkvar	(x,	1);
	MakeCode	(x=0X22406);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2240A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X22410);
	OpStkvar	(x,	0);
	MakeCode	(x=0X22418);
	OpStkvar	(x,	1);
	MakeCode	(x=0X22422);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2242C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X22432);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2243A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X22442);
	OpStkvar	(x,	0);
	MakeCode	(x=0X22446);
	OpStkvar	(x,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2244C);
	OpStkvar	(x,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X22452);
	OpStkvar	(x,	1);
	MakeCode	(x=0X22458);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2245E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X22464);
	OpStkvar	(x,	0);
	MakeCode	(x=0X22468);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2246C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X22476);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2247E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X22482);
	OpStkvar	(x,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X22488);
	OpStkvar	(x,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2248E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X22494);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2249A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X224A0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X224A6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X224AA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X224AE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X224B8);
	OpStkvar	(x,	0);
	MakeCode	(x=0X224C4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X224CE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X224D8);
	OpStkvar	(x,	0);
	MakeCode	(x=0X22590);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X22642);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X22686);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2268A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X226B0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X226B6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X226BA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X226C6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X226CC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X226D8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X22726);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2272C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X22732);
	OpStkvar	(x,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2273E);
	OpStkvar	(x,	0);
	OpStkvar	(x,	1);
	MakeCode	(0X22748);
	MakeCode	(x=0X2274E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X227DA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X2295E);
	MakeCode	(0X22970);
	MakeCode	(0X22982);
	MakeCode	(0X22994);
	MakeCode	(0X229A6);
	MakeCode	(0X229C4);
	MakeCode	(x=0X229DE);
	OpSign		(x,	1);
	MakeCode	(0X229FE);
	MakeCode	(x=0X22A06);
	OpStkvar	(x,	1);
	MakeCode	(x=0X22A10);
	OpStkvar	(x,	0);
	MakeCode	(x=0X22A22);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X22A6A);
	MakeCode	(0X22ABE);
	MakeCode	(x=0X22B02);
	OpStkvar	(x,	1);
	MakeCode	(x=0X22B0E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X22B14);
	OpStkvar	(x,	1);
	MakeCode	(x=0X22B18);
	OpStkvar	(x,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X22B24);
	OpStkvar	(x,	0);
	OpStkvar	(x,	1);
	MakeCode	(0X22B30);
	MakeCode	(0X22B7E);
	MakeCode	(0X22BB8);
	MakeCode	(0X22BCE);
	MakeCode	(0X22BEE);
	MakeCode	(x=0X22C04);
	OpStkvar	(x,	1);
	MakeCode	(0X22C0C);
	MakeCode	(x=0X22C2E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X22C34);
	OpStkvar	(x,	1);
	MakeCode	(x=0X22C38);
	OpStkvar	(x,	0);
	MakeCode	(x=0X22C44);
	OpStkvar	(x,	1);
	MakeCode	(x=0X22C4A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X22C58);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X22C70);
	MakeCode	(x=0X22C76);
	OpStkvar	(x,	0);
	MakeCode	(x=0X22C8C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X22CF2);
	MakeCode	(x=0X22D3A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X22D44);
	OpStkvar	(x,	0);
	MakeCode	(x=0X22D5E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X22D68);
	OpStkvar	(x,	0);
	MakeCode	(0X22D9A);
	MakeCode	(0X22DD0);
	MakeCode	(0X22DF8);
	MakeCode	(0X22E12);
	MakeCode	(x=0X22E30);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X22E54);
	MakeCode	(0X22E80);
	MakeCode	(x=0X22E82);
	OpStkvar	(x,	1);
	MakeCode	(x=0X22EB8);
	OpSign		(x,	1);
	MakeCode	(x=0X22EBC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X22EC2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X22EC8);
	OpStkvar	(x,	0);
	MakeCode	(x=0X22ED4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X22EDA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X22EE0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X22EE6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X22EEC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X22EF2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X22EF8);
	OpStkvar	(x,	0);
	MakeCode	(0X22F02);
	MakeCode	(0X22F40);
	MakeCode	(0X22F62);
	MakeCode	(x=0X22F92);
	OpSign		(x,	1);
	MakeCode	(0X22FCC);
	MakeCode	(x=0X23024);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2302A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2303A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X23040);
	OpStkvar	(x,	0);
	MakeCode	(0X2306E);
	MakeCode	(0X230A0);
	MakeCode	(0X230D4);
	MakeCode	(x=0X230EC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X23104);
	MakeCode	(0X2314E);
	MakeCode	(0X23186);
	MakeCode	(0X23198);
	MakeCode	(0X231B0);
	MakeCode	(0X231BC);
	MakeCode	(0X23210);
	MakeCode	(x=0X2321E);
	OpSign		(x,	1);
	MakeCode	(x=0X2322C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X23232);
	OpStkvar	(x,	1);
	MakeCode	(x=0X23238);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2325A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X23266);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2326C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X23272);
	OpStkvar	(x,	0);
	MakeCode	(0X23282);
	MakeCode	(x=0X23314);
	OpSign		(x,	1);
	MakeCode	(x=0X233D6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X233E0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2340C);
	OpSign		(x,	1);
	MakeCode	(x=0X23424);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X2343C);
	MakeCode	(x=0X23456);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X2346E);
	MakeCode	(x=0X23488);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X234A0);
	MakeCode	(x=0X234B4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X234BE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X234D0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X234E8);
	MakeCode	(x=0X23500);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2350A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2351C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X23534);
	MakeCode	(x=0X2355A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X23572);
	MakeCode	(x=0X235A0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X235B8);
	MakeCode	(x=0X235C0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X235E4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X235FC);
	MakeCode	(x=0X23620);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2362E);
	OpStkvar	(x,	1);
	MakeCode	(0X236B8);
	MakeCode	(0X2370A);
	MakeCode	(0X23730);
	MakeCode	(0X23768);
	MakeCode	(0X2378E);
	MakeCode	(0X237AC);
	MakeCode	(0X237CA);
	MakeCode	(0X237E8);
	MakeCode	(x=0X23866);
	OpStkvar	(x,	0);
	MakeCode	(x=0X23870);
	OpStkvar	(x,	0);
	MakeCode	(0X23898);
	MakeCode	(0X238AE);
	MakeCode	(0X238C4);
	MakeCode	(0X238DA);
	MakeCode	(0X238F0);
	MakeCode	(0X23906);
	MakeCode	(0X2391C);
	MakeCode	(0X23932);
	MakeCode	(0X23948);
	MakeCode	(0X2395E);
	MakeCode	(0X23974);
	MakeCode	(0X2398A);
	MakeCode	(0X239A0);
	MakeCode	(0X239B6);
	MakeCode	(0X239CC);
	MakeCode	(0X239E2);
	MakeCode	(0X239F8);
	MakeCode	(0X23A0E);
	MakeCode	(0X23A24);
	MakeCode	(0X23A3A);
	MakeCode	(0X23A50);
	MakeCode	(0X23A66);
	MakeName	(0X23A74,	"Perform_Throttle_Arbitration");
	MakeCode	(x=0X23A76);
	OpStkvar	(x,	1);
	MakeCode	(0X23A94);
	MakeCode	(x=0X23A9E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X23AB0);
	OpStkvar	(x,	1);
	MakeCode	(0X23ADC);
	MakeCode	(0X23B22);
	MakeCode	(x=0X23B2E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X23B3A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X23B48);
	OpStkvar	(x,	0);
	MakeCode	(0X23B74);
	MakeCode	(0X23BD2);
	MakeCode	(x=0X23BDE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X23BE2);
	OpStkvar	(x,	0);
	MakeCode	(x=0X23BEE);
	OpStkvar	(x,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X23BFE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X23C32);
	OpStkvar	(x,	0);
	MakeCode	(x=0X23C36);
	OpStkvar	(x,	0);
	MakeCode	(x=0X23C42);
	OpStkvar	(x,	0);
	MakeCode	(x=0X23C4A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X23C50);
	OpStkvar	(x,	1);
	MakeCode	(x=0X23C5E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X23C6E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X23C7C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X23C9A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X23CA4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X23CB4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X23CC4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X23CCA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X23CD8);
	OpStkvar	(x,	0);
	MakeCode	(x=0X23CEE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X23D08);
	OpStkvar	(x,	0);
	MakeCode	(x=0X23D0E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X23D1C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X23D2C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X23D32);
	OpStkvar	(x,	1);
	MakeCode	(x=0X23D40);
	OpStkvar	(x,	0);
	MakeCode	(x=0X23D4C);
	OpStkvar	(x,	0);
	MakeCode	(0X23D74);
	MakeCode	(0X23D8E);
	MakeCode	(x=0X23D92);
	OpStkvar	(x,	0);
	MakeCode	(x=0X23D98);
	OpStkvar	(x,	1);
	MakeRptCmt	(0X23D9C,	"d6 = 1, d2 = Dbw_Source");
	MakeCode	(x=0X23D9E);
	OpStkvar	(x,	0);
	MakeCode	(0X23DB6);
	MakeCode	(0X23DF4);
	MakeCode	(x=0X23DF8);
	OpStkvar	(x,	0);
	MakeCode	(0X23E12);
	MakeCode	(0X23E70);
	MakeCode	(0X23ED0);
	MakeCode	(0X23EDE);
	MakeCode	(0X23F02);
	MakeCode	(0X23F12);
	MakeCode	(0X23F2C);
	MakeCode	(0X23F38);
	MakeCode	(0X23F44);
	MakeCode	(0X23F6C);
	MakeCode	(0X23FD2);
	MakeCode	(0X23FEC);
	MakeCode	(0X23FF0);
	MakeCode	(0X2400A);
	MakeCode	(x=0X2407E);
	OpStkvar	(x,	0);
	MakeName	(0X2407E,	"Lookup_Throttle_Load");
	MakeCode	(x=0X24094);
	OpSign		(x,	1);
	MakeCode	(x=0X240B8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X240BE);
	OpStkvar	(x,	0);
	MakeCode	(0X240CE);
	MakeCode	(x=0X240D4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X240DA);
	OpStkvar	(x,	0);
	MakeCode	(0X240F0);
	MakeCode	(x=0X240F6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X240FC);
	OpStkvar	(x,	0);
	MakeCode	(0X24110);
	MakeCode	(x=0X24116);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X2411C);
	OpStkvar	(x,	0);
	MakeCode	(0X24130);
	MakeCode	(x=0X24136);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X2413C);
	OpStkvar	(x,	0);
	MakeCode	(0X24150);
	MakeCode	(x=0X24156);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X2415C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X24170);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X24176);
	OpStkvar	(x,	0);
	MakeCode	(0X241A0);
	MakeCode	(0X241B2);
	MakeCode	(x=0X241B6);
	OpStkvar	(x,	0);
	MakeCode	(0X241C4);
	MakeCode	(0X24240);
	MakeName	(0X24240,	"InitializeThrottleAreaStuff");
	MakeCode	(0X24254);
	MakeCode	(0X24280);
	MakeCode	(0X242AA);
	MakeCode	(0X242EE);
	MakeCode	(0X2432E);
	MakeCode	(x=0X24338);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X2436E);
	OpStkvar	(x,	1);
	MakeCode	(0X2437E);
	MakeCode	(0X243A0);
	MakeCode	(x=0X243A8);
	OpSign		(x,	1);
	MakeCode	(0X2441A);
	MakeCode	(0X24420);
	MakeCode	(0X2442A);
	MakeCode	(x=0X24436);
	OpStkvar	(x,	1);
	MakeCode	(0X24470);
	MakeCode	(0X2448E);
	MakeCode	(x=0X244F2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X244FC);
	OpStkvar	(x,	0);
	MakeCode	(0X2452C);
	MakeCode	(x=0X24540);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X245CE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X246AC);
	MakeCode	(0X246BA);
	MakeCode	(0X246CE);
	MakeCode	(x=0X246E0);
	OpSign		(x,	1);
	MakeCode	(x=0X246EE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X246FC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X24700);
	OpStkvar	(x,	0);
	MakeCode	(x=0X24716);
	OpSign		(x,	1);
	MakeCode	(x=0X24738);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2473E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2474E);
	OpStkvar	(x,	0);
	MakeCode	(0X24754);
	MakeCode	(x=0X2475A);
	OpStkvar	(x,	0);
	MakeCode	(0X247A6);
	MakeCode	(0X247B2);
	MakeCode	(x=0X247C6);
	OpStkvar	(x,	1);
	MakeCode	(0X247D6);
	MakeCode	(x=0X247E6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X247EA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X247FE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X24806);
	OpStkvar	(x,	1);
	MakeCode	(x=0X24814);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2481A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2481E);
	OpStkvar	(x,	1);
	MakeCode	(0X2484A);
	MakeCode	(x=0X24866);
	OpStkvar	(x,	1);
	MakeCode	(x=0X24872);
	OpStkvar	(x,	1);
	MakeCode	(0X2487E);
	MakeCode	(x=0X24892);
	OpStkvar	(x,	1);
	MakeCode	(0X2489C);
	MakeCode	(x=0X248A2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpStkvar	(x,	1);
	MakeCode	(0X248BA);
	MakeCode	(0X248F2);
	MakeCode	(x=0X248F6);
	OpStkvar	(x,	0);
	MakeCode	(0X24946);
	MakeCode	(x=0X2494C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X24978);
	OpStkvar	(x,	1);
	MakeCode	(0X2497E);
	MakeCode	(x=0X2498E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X24994);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2499C);
	OpStkvar	(x,	0);
	MakeCode	(0X249D2);
	MakeCode	(x=0X249F6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X24A00);
	OpStkvar	(x,	1);
	MakeCode	(x=0X24A1A);
	OpStkvar	(x,	0);
	MakeCode	(0X24A36);
	MakeCode	(x=0X24A5A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X24A5E);
	OpStkvar	(x,	1);
	MakeCode	(0X24AC4);
	MakeCode	(0X24AFA);
	MakeCode	(0X24B1E);
	MakeCode	(x=0X24B2C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X24B40);
	OpStkvar	(x,	1);
	MakeCode	(x=0X24B46);
	OpStkvar	(x,	1);
	MakeCode	(x=0X24B4E);
	OpStkvar	(x,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X24B5C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X24B7A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X24B80);
	OpStkvar	(x,	0);
	MakeCode	(x=0X24BA0);
	OpStkvar	(x,	1);
	MakeCode	(0X24BA6);
	MakeCode	(x=0X24BC4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X24BE2);
	OpStkvar	(x,	1);
	MakeCode	(0X24BE8);
	MakeCode	(x=0X24C00);
	OpStkvar	(x,	1);
	MakeCode	(x=0X24C04);
	OpStkvar	(x,	0);
	MakeCode	(x=0X24C24);
	OpStkvar	(x,	1);
	MakeCode	(x=0X24C2A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X24C46);
	OpStkvar	(x,	1);
	MakeCode	(x=0X24C58);
	OpStkvar	(x,	1);
	MakeCode	(x=0X24C62);
	OpStkvar	(x,	0);
	MakeCode	(x=0X24C7E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X24C82);
	OpStkvar	(x,	0);
	MakeCode	(x=0X24C8E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X24C94);
	OpStkvar	(x,	0);
	MakeCode	(x=0X24C9A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X24CA0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X24CAE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X24CB4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X24CB8);
	OpStkvar	(x,	0);
	MakeCode	(x=0X24CBE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X24CC2);
	OpStkvar	(x,	0);
	MakeCode	(x=0X24CC8);
	OpStkvar	(x,	0);
	MakeCode	(x=0X24CCC);
	OpStkvar	(x,	0);
	MakeCode	(x=0X24CD2);
	OpStkvar	(x,	0);
	MakeCode	(x=0X24CEE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X24D00);
	OpStkvar	(x,	0);
	MakeCode	(0X24D18);
	MakeCode	(x=0X24D26);
	OpStkvar	(x,	1);
	MakeCode	(x=0X24D44);
	OpStkvar	(x,	0);
	MakeCode	(0X24D4A);
	MakeCode	(0X24D56);
	MakeCode	(0X24D5C);
	MakeCode	(x=0X24D68);
	OpStkvar	(x,	0);
	MakeCode	(x=0X24D76);
	OpStkvar	(x,	1);
	MakeCode	(0X24D7C);
	MakeCode	(x=0X24D80);
	OpStkvar	(x,	1);
	MakeCode	(x=0X24D84);
	OpStkvar	(x,	0);
	MakeCode	(x=0X24D8A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X24D94);
	OpStkvar	(x,	1);
	MakeCode	(0X24D9A);
	MakeCode	(x=0X24D9E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X24DA2);
	OpStkvar	(x,	0);
	MakeCode	(x=0X24DA6);
	OpStkvar	(x,	1);
	MakeCode	(0X24DAC);
	MakeCode	(x=0X24DB2);
	OpStkvar	(x,	0);
	MakeCode	(x=0X24DB8);
	OpStkvar	(x,	0);
	MakeCode	(x=0X24DBE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X24DC2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X24E66);
	MakeCode	(0X24EAA);
	MakeCode	(0X24EE6);
	MakeCode	(0X24F12);
	MakeCode	(0X24F3C);
	MakeCode	(0X24F4E);
	MakeCode	(0X24F70);
	MakeCode	(0X24FCE);
	MakeCode	(0X24FE8);
	MakeCode	(0X25010);
	MakeCode	(0X25024);
	MakeCode	(0X2502E);
	MakeCode	(0X250A2);
	MakeCode	(0X250B2);
	MakeCode	(0X250C0);
	MakeCode	(0X250D8);
	MakeCode	(x=0X250DC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X250F0);
	MakeCode	(0X25106);
	MakeCode	(0X25138);
	MakeCode	(0X251B8);
	MakeCode	(0X251DC);
	MakeCode	(0X2520C);
	MakeCode	(x=0X25210);
	OpStkvar	(x,	1);
	MakeCode	(0X2521C);
	MakeCode	(x=0X25222);
	OpStkvar	(x,	1);
	MakeCode	(0X25232);
	MakeCode	(x=0X25246);
	OpStkvar	(x,	1);
	MakeCode	(0X25252);
	MakeCode	(x=0X2525E);
	OpStkvar	(x,	1);
	MakeCode	(0X2526A);
	MakeCode	(x=0X2526C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2528E);
	OpStkvar	(x,	0);
	MakeCode	(0X2529C);
	MakeCode	(0X252CE);
	MakeCode	(0X25302);
	MakeCode	(0X25334);
	MakeCode	(0X25346);
	MakeCode	(x=0X2535C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X25368);
	OpStkvar	(x,	0);
	MakeCode	(0X2538C);
	MakeCode	(0X253AA);
	MakeCode	(0X253CA);
	MakeCode	(0X253D0);
	MakeCode	(0X253DE);
	MakeCode	(0X253EC);
	MakeCode	(0X253F2);
	MakeCode	(0X25404);
	MakeCode	(0X2542E);
	MakeCode	(0X25440);
	MakeCode	(0X2545A);
	MakeCode	(x=0X25496);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X254AC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X254D2);
	MakeCode	(x=0X25508);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X2551A);
	MakeCode	(0X25528);
	MakeCode	(0X25534);
	MakeCode	(x=0X25550);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X25562);
	MakeCode	(0X2556C);
	MakeCode	(x=0X2558A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X255A8);
	MakeCode	(0X255BC);
	MakeCode	(0X255D2);
	MakeCode	(x=0X255DA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X2561E);
	MakeCode	(x=0X2562C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X25642);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X25668);
	MakeCode	(0X2568C);
	MakeCode	(0X256A6);
	MakeCode	(0X256C0);
	MakeCode	(x=0X25700);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X25710);
	MakeCode	(0X25760);
	MakeCode	(0X257BC);
	MakeCode	(0X257C6);
	MakeCode	(0X257EC);
	MakeCode	(0X257F2);
	MakeCode	(0X25800);
	MakeCode	(0X2586C);
	MakeCode	(x=0X25886);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X25890);
	OpStkvar	(x,	1);
	MakeCode	(0X258A0);
	MakeCode	(x=0X258C6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X258F2);
	MakeCode	(x=0X258F6);
	OpStkvar	(x,	0);
	MakeCode	(0X25906);
	MakeCode	(0X2590A);
	MakeCode	(0X25910);
	MakeCode	(0X25926);
	MakeCode	(0X2596C);
	MakeCode	(0X25976);
	MakeCode	(0X2598A);
	MakeCode	(0X2599C);
	MakeCode	(0X259BE);
	MakeCode	(0X259D0);
	MakeCode	(0X259F8);
	MakeCode	(x=0X25A08);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X25A72);
	MakeCode	(0X25AB6);
	MakeCode	(0X25AD6);
	MakeCode	(0X25AE2);
	MakeCode	(0X25B2C);
	MakeCode	(0X25B3E);
	MakeCode	(0X25B64);
	MakeCode	(0X25BC4);
	MakeCode	(x=0X25BFA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X25C22);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X25C50);
	MakeCode	(0X25C6A);
	MakeCode	(0X25C7C);
	MakeCode	(x=0X25C80);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X25C9E);
	MakeCode	(0X25CB2);
	MakeCode	(0X25CC4);
	MakeCode	(x=0X25CC8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X25CD0);
	MakeCode	(x=0X25CF6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X25D00);
	OpStkvar	(x,	0);
	MakeCode	(0X25D1A);
	MakeCode	(0X25D2E);
	MakeCode	(0X25D40);
	MakeCode	(x=0X25D44);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X25D66);
	MakeCode	(0X25DA4);
	MakeCode	(0X25DC4);
	MakeCode	(0X25DE8);
	MakeCode	(0X25E8E);
	MakeCode	(0X25EE2);
	MakeCode	(0X25F3E);
	MakeCode	(0X25FA0);
	MakeCode	(0X25FB6);
	MakeCode	(0X25FD0);
	MakeCode	(0X25FE0);
	MakeCode	(0X26042);
	MakeCode	(0X2608C);
	MakeCode	(0X26094);
	MakeCode	(0X260BE);
	MakeCode	(0X260E8);
	MakeCode	(0X260EC);
	MakeCode	(0X260F2);
	MakeCode	(0X2612E);
	MakeCode	(0X26164);
	MakeCode	(0X261A0);
	MakeCode	(0X261BE);
	MakeCode	(0X261CA);
	MakeCode	(0X261E0);
	MakeCode	(0X26226);
	MakeCode	(x=0X2622C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X26250);
	MakeCode	(0X26274);
	MakeCode	(0X26290);
	MakeCode	(0X262BA);
	MakeCode	(0X262EC);
	MakeCode	(0X262F0);
	MakeCode	(0X26306);
	MakeCode	(0X26318);
	MakeCode	(0X26328);
	MakeCode	(x=0X26366);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X2637C);
	MakeCode	(0X2639A);
	MakeCode	(x=0X2639E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X263A8);
	MakeCode	(0X263D8);
	MakeCode	(0X264D2);
	MakeCode	(0X2650C);
	MakeCode	(0X2650E);
	MakeCode	(0X2653C);
	MakeCode	(0X26544);
	MakeCode	(0X2654C);
	MakeCode	(0X2655C);
	MakeCode	(0X26562);
	MakeCode	(0X26578);
	MakeCode	(0X2658A);
	MakeCode	(0X2659E);
	MakeCode	(0X265A6);
	MakeCode	(0X265AE);
	MakeCode	(0X265B4);
	MakeCode	(0X265BA);
	MakeCode	(0X265D6);
	MakeCode	(0X265F2);
	MakeCode	(0X26608);
	MakeCode	(0X26610);
	MakeCode	(0X26618);
	MakeCode	(0X2662E);
	MakeCode	(0X2663C);
	MakeCode	(0X2664A);
	MakeCode	(0X26664);
	MakeCode	(0X2666A);
	MakeCode	(x=0X26672);
	OpSign		(x,	1);
	MakeCode	(x=0X2668A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X2669E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X266A2);
	OpStkvar	(x,	0);
	MakeCode	(x=0X266B2);
	OpStkvar	(x,	0);
	MakeCode	(x=0X266BA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X266D2);
	OpSign		(x,	1);
	MakeCode	(x=0X266DA);
	OpStkvar	(x,	0);
	MakeCode	(x=0X266EC);
	OpStkvar	(x,	0);
	MakeCode	(x=0X266F2);
	OpStkvar	(x,	0);
	MakeCode	(x=0X266F8);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2670C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X26712);
	OpStkvar	(x,	0);
	MakeCode	(x=0X26718);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2672C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X26732);
	OpStkvar	(x,	0);
	MakeCode	(x=0X26738);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2674C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X26752);
	OpStkvar	(x,	0);
	MakeCode	(x=0X26758);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2676C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X26772);
	OpStkvar	(x,	0);
	MakeCode	(x=0X26778);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2678C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X26792);
	OpStkvar	(x,	0);
	MakeCode	(x=0X26798);
	OpStkvar	(x,	0);
	MakeCode	(x=0X267AC);
	OpStkvar	(x,	0);
	MakeCode	(x=0X267B2);
	OpStkvar	(x,	0);
	MakeCode	(x=0X267C6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X267CC);
	OpStkvar	(x,	0);
	MakeCode	(x=0X267D2);
	OpStkvar	(x,	0);
	MakeCode	(x=0X267E6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X267EC);
	OpStkvar	(x,	0);
	MakeCode	(x=0X267F2);
	OpStkvar	(x,	0);
	MakeCode	(x=0X26806);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2680C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X26812);
	OpStkvar	(x,	0);
	MakeCode	(x=0X26826);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2682C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X26832);
	OpStkvar	(x,	0);
	MakeCode	(x=0X26846);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2684C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X26852);
	OpStkvar	(x,	0);
	MakeCode	(x=0X26866);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2686C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X26872);
	OpStkvar	(x,	0);
	MakeCode	(x=0X26886);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2688C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X26892);
	OpStkvar	(x,	0);
	MakeCode	(x=0X268A6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X268AC);
	OpStkvar	(x,	0);
	MakeCode	(x=0X268B2);
	OpStkvar	(x,	0);
	MakeCode	(x=0X268C6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X268CC);
	OpStkvar	(x,	0);
	MakeCode	(x=0X268D2);
	OpStkvar	(x,	0);
	MakeCode	(x=0X268E6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X268EC);
	OpStkvar	(x,	0);
	MakeCode	(x=0X268F2);
	OpStkvar	(x,	0);
	MakeCode	(0X26900);
	MakeCode	(0X26946);
	MakeCode	(0X2696E);
	MakeCode	(0X26994);
	MakeName	(0X26994,	"SurfaceTableLookup");
	MakeCode	(0X269BA);
	MakeCode	(0X269C2);
	MakeCode	(0X269D0);
	MakeCode	(0X269DE);
	MakeCode	(x=0X269FE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X26A08);
	MakeCode	(0X26A20);
	MakeCode	(x=0X26A32);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X26A3A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X26A42);
	MakeCode	(x=0X26A4A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X26A52);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X26A5A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X26A62);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X26A6A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X26A72);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X26A7A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X26A88);
	MakeCode	(0X26A8C);
	MakeCode	(x=0X26AA0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X26AAA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X26AB2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X26ABA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X26AC2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X26ACE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X26AD6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X26ADE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X26AE6);
	MakeCode	(x=0X26AEE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X26AF6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X26AFE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X26B06);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X26B0E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X26B16);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X26B22);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X26B2E);
	MakeCode	(x=0X26B32);
	OpSign		(x,	1);
	MakeCode	(x=0X26B3E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X26B42);
	OpStkvar	(x,	0);
	MakeCode	(x=0X26B50);
	OpStkvar	(x,	0);
	MakeCode	(x=0X26B54);
	OpStkvar	(x,	0);
	MakeCode	(x=0X26B58);
	OpStkvar	(x,	0);
	MakeCode	(0X26B64);
	MakeCode	(0X26B7C);
	MakeCode	(0X26BB0);
	MakeCode	(0X26BBC);
	MakeCode	(0X26BE6);
	MakeCode	(0X26C08);
	MakeCode	(0X26C18);
	MakeCode	(x=0X26C1C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X26C2E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X26C34);
	OpStkvar	(x,	0);
	MakeCode	(0X26C4A);
	MakeCode	(0X26C6A);
	MakeCode	(0X26C7A);
	MakeCode	(x=0X26C84);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X26C94);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X26CA4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X26CB6);
	MakeCode	(0X26CD4);
	MakeCode	(0X26CDE);
	MakeCode	(0X26D36);
	MakeCode	(x=0X26D40);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X26D48);
	MakeCode	(x=0X26D52);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X26D5A);
	MakeCode	(x=0X26D64);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X26D6C);
	MakeCode	(x=0X26D86);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X26D8E);
	MakeCode	(x=0X26D98);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X26DA0);
	MakeCode	(x=0X26DAA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X26DB2);
	MakeCode	(x=0X26DB8);
	OpSign		(x,	1);
	MakeCode	(x=0X26DC4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X26DD2);
	OpStkvar	(x,	0);
	MakeCode	(0X26DDE);
	MakeCode	(0X26DF0);
	MakeCode	(x=0X26DFA);
	OpSign		(x,	1);
	MakeCode	(x=0X26E10);
	OpStkvar	(x,	1);
	MakeCode	(x=0X26E1C);
	OpStkvar	(x,	1);
	MakeCode	(0X26E58);
	MakeCode	(x=0X26E5A);
	OpStkvar	(x,	0);
	MakeCode	(0X26E6C);
	MakeCode	(x=0X26E80);
	OpStkvar	(x,	1);
	MakeCode	(x=0X26E86);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X26EAA);
	MakeCode	(0X26ECC);
	MakeCode	(x=0X26ED2);
	OpStkvar	(x,	0);
	MakeCode	(x=0X26EE2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X26EE8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X26EEC);
	OpStkvar	(x,	0);
	MakeCode	(x=0X26EF4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X26EFA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X26F1E);
	MakeCode	(x=0X26F24);
	OpStkvar	(x,	0);
	MakeCode	(0X26F38);
	MakeCode	(x=0X26F40);
	OpStkvar	(x,	0);
	MakeCode	(x=0X26F4C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X26F52);
	OpStkvar	(x,	1);
	MakeCode	(x=0X26F56);
	OpStkvar	(x,	1);
	MakeCode	(x=0X26F5C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X26F62);
	OpStkvar	(x,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X26F68);
	OpStkvar	(x,	1);
	MakeCode	(x=0X26F70);
	OpStkvar	(x,	1);
	MakeCode	(x=0X26F78);
	OpStkvar	(x,	1);
	MakeCode	(x=0X26F82);
	OpStkvar	(x,	0);
	MakeCode	(x=0X26F88);
	OpStkvar	(x,	1);
	MakeCode	(x=0X26F8E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X26FA2);
	OpStkvar	(x,	1);
	MakeCode	(0X26FA8);
	MakeCode	(x=0X26FB8);
	OpStkvar	(x,	0);
	MakeCode	(x=0X26FC8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X26FCE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X26FEC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X26FF0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X27006);
	OpStkvar	(x,	0);
	MakeCode	(x=0X27012);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2702A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X27030);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2704E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X27052);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2705C);
	OpStkvar	(x,	0);
	MakeCode	(0X27070);
	MakeCode	(x=0X2707C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X27080);
	OpStkvar	(x,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X27086);
	OpStkvar	(x,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2708C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X2709A);
	MakeCode	(0X270B0);
	MakeCode	(0X270C4);
	MakeCode	(0X270D8);
	MakeCode	(x=0X270DE);
	OpStkvar	(x,	0);
	MakeCode	(0X27112);
	MakeCode	(x=0X27118);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2711C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X27128);
	OpSign		(x,	1);
	MakeCode	(x=0X27140);
	OpStkvar	(x,	0);
	MakeCode	(0X2716E);
	MakeCode	(x=0X27174);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X2718E);
	MakeCode	(0X271CC);
	MakeCode	(x=0X271FA);
	OpStkvar	(x,	1);
	MakeCode	(0X27200);
	MakeCode	(x=0X2720E);
	OpStkvar	(x,	0);
	MakeCode	(0X27236);
	MakeCode	(0X27258);
	MakeCode	(x=0X27296);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X272A2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X272E4);
	MakeCode	(0X27318);
	MakeCode	(0X27338);
	MakeCode	(x=0X2734A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X27356);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X27370);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X27436);
	MakeCode	(0X2743C);
	MakeCode	(x=0X27442);
	OpSign		(x,	1);
	MakeCode	(x=0X27446);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2744A);
	OpStkvar	(x,	0);
	MakeCode	(0X2745A);
	MakeCode	(0X2745E);
	MakeCode	(x=0X2746A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X27470);
	OpStkvar	(x,	1);
	MakeCode	(x=0X27474);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2747A);
	OpStkvar	(x,	0);
	MakeCode	(0X27482);
	MakeCode	(0X27494);
	MakeCode	(0X2749A);
	MakeCode	(0X274A0);
	MakeCode	(0X274AE);
	MakeCode	(0X274B4);
	MakeCode	(0X274BA);
	MakeCode	(0X274C0);
	MakeCode	(0X274C6);
	MakeCode	(0X274E4);
	MakeCode	(0X27572);
	MakeCode	(0X27590);
	MakeCode	(0X275A4);
	MakeCode	(0X275B8);
	MakeCode	(x=0X275D2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X275DA);
	MakeCode	(x=0X275EA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X27608);
	MakeCode	(0X27622);
	MakeCode	(0X27642);
	MakeCode	(0X27674);
	MakeCode	(0X2767E);
	MakeCode	(0X276AA);
	MakeCode	(0X276B4);
	MakeCode	(0X276D4);
	MakeCode	(0X276F4);
	MakeCode	(0X27712);
	MakeCode	(0X2772E);
	MakeCode	(0X27738);
	MakeCode	(0X27754);
	MakeCode	(0X2775E);
	MakeCode	(0X2777E);
	MakeCode	(0X27788);
	MakeCode	(0X277C4);
	MakeCode	(0X277CE);
	MakeCode	(0X277FC);
	MakeCode	(x=0X27806);
	OpSign		(x,	1);
	MakeCode	(x=0X27824);
	OpStkvar	(x,	1);
	MakeCode	(0X2783E);
	MakeCode	(x=0X27846);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2786C);
	OpStkvar	(x,	0);
	MakeCode	(0X27890);
	MakeCode	(0X2789A);
	MakeCode	(0X278DC);
	MakeCode	(0X2790E);
	MakeCode	(0X27924);
	MakeCode	(x=0X27934);
	OpStkvar	(x,	1);
	MakeCode	(0X27940);
	MakeCode	(0X2795C);
	MakeCode	(x=0X27966);
	OpSign		(x,	1);
	MakeCode	(x=0X2796E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X27980);
	OpStkvar	(x,	0);
	MakeCode	(x=0X27984);
	OpStkvar	(x,	0);
	MakeCode	(x=0X27988);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2799A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X279A4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X279AE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X279B8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X279C2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpStkvar	(x,	1);
	MakeCode	(0X279CC);
	MakeCode	(x=0X279CE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X279D8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X279E2);
	OpStkvar	(x,	1);
	MakeCode	(0X279EC);
	MakeCode	(x=0X279F2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X279FC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X27A06);
	OpStkvar	(x,	0);
	MakeCode	(x=0X27A18);
	OpStkvar	(x,	0);
	MakeCode	(x=0X27A1C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X27A26);
	OpStkvar	(x,	0);
	MakeCode	(x=0X27A30);
	OpStkvar	(x,	1);
	MakeCode	(x=0X27A34);
	OpStkvar	(x,	0);
	MakeCode	(x=0X27A3A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X27A40);
	OpStkvar	(x,	0);
	MakeCode	(0X27A50);
	MakeCode	(0X27A62);
	MakeCode	(0X27A80);
	MakeCode	(0X27A9C);
	MakeCode	(0X27AA6);
	MakeCode	(0X27ABE);
	MakeCode	(0X27AD2);
	MakeCode	(0X27AF6);
	MakeCode	(0X27AFA);
	MakeCode	(0X27B0C);
	MakeCode	(0X27B1C);
	MakeCode	(x=0X27B26);
	OpSign		(x,	1);
	MakeCode	(x=0X27B70);
	OpStkvar	(x,	1);
	MakeCode	(x=0X27B98);
	OpStkvar	(x,	1);
	MakeCode	(x=0X27BAC);
	OpStkvar	(x,	0);
	MakeCode	(x=0X27BB8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X27BE0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X27BF4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X27C00);
	OpStkvar	(x,	1);
	MakeCode	(x=0X27C2A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X27C3E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X27C4A);
	OpStkvar	(x,	1);
	MakeCode	(0X27C78);
	MakeCode	(0X27C90);
	MakeCode	(0X27CA4);
	MakeCode	(0X27CB8);
	MakeCode	(0X27CDC);
	MakeCode	(0X27CF0);
	MakeCode	(0X27D04);
	MakeCode	(0X27D28);
	MakeCode	(0X27D3C);
	MakeCode	(0X27D50);
	MakeCode	(0X27D74);
	MakeCode	(0X27D88);
	MakeCode	(0X27D9C);
	MakeCode	(0X27DC0);
	MakeCode	(0X27DD4);
	MakeCode	(0X27DE8);
	MakeCode	(0X27E0C);
	MakeCode	(0X27E20);
	MakeCode	(0X27E34);
	MakeCode	(0X27E60);
	MakeCode	(0X27E64);
	MakeCode	(0X27E86);
	MakeCode	(0X27E96);
	MakeCode	(0X27EC0);
	MakeCode	(0X27ED0);
	MakeCode	(0X27EF6);
	MakeCode	(0X27F0A);
	MakeCode	(0X27F1E);
	MakeCode	(0X27F42);
	MakeCode	(0X27F5C);
	MakeCode	(0X27F62);
	MakeCode	(0X27F98);
	MakeCode	(0X27FB2);
	MakeCode	(0X27FB8);
	MakeCode	(0X27FEE);
	MakeCode	(0X28008);
	MakeCode	(0X2800E);
	MakeCode	(0X28044);
	MakeCode	(0X2805E);
	MakeCode	(0X28064);
	MakeCode	(0X2809E);
	MakeCode	(0X280AC);
	MakeCode	(0X280D8);
	MakeCode	(0X280E8);
	MakeCode	(0X280F8);
	MakeCode	(0X2813E);
	MakeCode	(0X2814C);
	MakeCode	(0X2815A);
	MakeCode	(0X2816C);
	MakeCode	(0X2819E);
	MakeCode	(0X281AA);
	MakeCode	(0X281B6);
	MakeCode	(0X281E4);
	MakeCode	(0X281F0);
	MakeCode	(0X281FC);
	MakeCode	(0X2822A);
	MakeName	(0X2822A,	"nullsub_1");
	MakeCode	(0X2822C);
	MakeCode	(0X28240);
	MakeCode	(0X28248);
	MakeCode	(0X28250);
	MakeCode	(0X28264);
	MakeCode	(0X2826C);
	MakeCode	(0X28274);
	MakeCode	(0X28288);
	MakeCode	(0X2828E);
	MakeCode	(0X282A8);
	MakeCode	(0X282B2);
	MakeCode	(x=0X282C4);
	OpSign		(x,	1);
	MakeCode	(0X2832E);
	MakeCode	(x=0X28332);
	OpStkvar	(x,	1);
	MakeCode	(x=0X28342);
	OpStkvar	(x,	0);
	MakeCode	(0X28384);
	MakeCode	(0X283BA);
	MakeCode	(0X283D2);
	MakeCode	(0X28400);
	MakeCode	(0X28470);
	MakeCode	(0X28484);
	MakeCode	(x=0X28488);
	OpStkvar	(x,	1);
	MakeCode	(x=0X28498);
	OpStkvar	(x,	0);
	MakeCode	(0X284C2);
	MakeCode	(0X284DC);
	MakeCode	(x=0X284E0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X284F0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X284F8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X28502);
	OpStkvar	(x,	0);
	MakeCode	(0X28530);
	MakeCode	(x=0X2853A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X28544);
	OpStkvar	(x,	0);
	MakeCode	(0X2857A);
	MakeCode	(0X285A8);
	MakeCode	(0X285DE);
	MakeCode	(x=0X285E6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X285F0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X285FC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X28606);
	OpStkvar	(x,	0);
	MakeCode	(0X28630);
	MakeCode	(x=0X2863C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X28646);
	OpStkvar	(x,	0);
	MakeCode	(x=0X28656);
	OpStkvar	(x,	1);
	MakeCode	(x=0X28660);
	OpStkvar	(x,	0);
	MakeCode	(x=0X286A4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X286AA);
	OpStkvar	(x,	1);
	MakeCode	(0X286B2);
	MakeCode	(0X286C4);
	MakeCode	(0X286D2);
	MakeCode	(0X286FA);
	MakeCode	(0X2872A);
	MakeCode	(x=0X28730);
	OpSign		(x,	1);
	MakeCode	(x=0X28746);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X28750);
	MakeCode	(0X28786);
	MakeCode	(0X287B8);
	MakeCode	(0X287BA);
	MakeCode	(0X287D2);
	MakeCode	(0X28804);
	MakeCode	(0X2880C);
	MakeCode	(x=0X28888);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X28892);
	MakeCode	(0X28894);
	MakeCode	(0X288AC);
	MakeCode	(x=0X28912);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X2891C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X28922);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X2898A);
	MakeCode	(x=0X28A12);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X28A1C);
	MakeCode	(0X28A1E);
	MakeCode	(0X28A46);
	MakeCode	(0X28A4E);
	MakeCode	(0X28ABE);
	MakeCode	(x=0X28B14);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X28B1E);
	MakeCode	(0X28B22);
	MakeCode	(0X28BB6);
	MakeCode	(0X28BF0);
	MakeCode	(0X28C02);
	MakeCode	(0X28C10);
	MakeCode	(0X28C1C);
	MakeCode	(x=0X28C3A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X28C44);
	MakeCode	(x=0X28D12);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X28D1C);
	MakeCode	(0X28D2A);
	MakeCode	(x=0X28D4A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X28D54);
	MakeRptCmt	(0X28D7E,	"Def?");
	MakeCode	(x=0X28D84);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X28D8A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X28E92);
	MakeCode	(0X28E94);
	MakeCode	(0X28E96);
	MakeCode	(0X28E98);
	MakeCode	(x=0X28EB4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X28F08);
	MakeCode	(0X28F94);
	MakeCode	(x=0X28FA2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X28FAC);
	MakeCode	(0X28FB2);
	MakeCode	(0X28FFE);
	MakeCode	(0X29104);
	MakeCode	(0X291C0);
	MakeCode	(0X291DC);
	MakeCode	(x=0X29274);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X292CE);
	MakeCode	(0X29320);
	MakeCode	(0X29352);
	MakeCode	(0X2937E);
	MakeCode	(x=0X29390);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X2939A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X293A4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X293AE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X293B8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X293C2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X293CC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X293D6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X293E0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X293EA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X293F4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X29442);
	OpSign		(x,	1);
	MakeName	(0X29442,	"DoManyThings1");
	MakeCode	(x=0X2948A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X29492);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2949C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X294A4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X294B8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X294BE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X294C2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X294D0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X294D6);
	OpStkvar	(x,	0);
}


static Bytes_12(void) {
        auto x;
#define id x

	MakeCode	(0X2952A);
	MakeCode	(x=0X29620);
	OpStkvar	(x,	1);
	MakeCode	(x=0X29626);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2962C);
	OpStkvar	(x,	0);
	MakeCode	(0X29634);
	MakeCode	(x=0X2963E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X29644);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2964A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X29696);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X2969C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X296A8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X296AE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X296BA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X296C0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X296CC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X296D2);
	OpStkvar	(x,	0);
	MakeCode	(x=0X296DE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X296E4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X296F0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X296F6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X29702);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X29708);
	OpStkvar	(x,	0);
	MakeCode	(0X2971C);
	MakeName	(0X2971C,	"BetweenMainLoops1");
	MakeCode	(x=0X29728);
	OpStkvar	(x,	0);
	MakeCode	(0X29744);
	MakeName	(0X29744,	"nullsub_2");
	MakeCode	(0X29746);
	MakeCode	(0X29778);
	MakeCode	(0X29780);
	MakeCode	(0X29782);
	MakeName	(0X29782,	"BetweenMainLoops2");
	MakeCode	(0X297D0);
	MakeCode	(0X29808);
	MakeName	(0X29808,	"SharedByMainLoops");
	MakeCode	(0X2984E);
	MakeCode	(0X29880);
	MakeCode	(0X298B8);
	MakeCode	(0X298BE);
	MakeCode	(0X298CA);
	MakeCode	(x=0X298CE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X298E6);
	MakeCode	(0X298F8);
	MakeCode	(0X29910);
	MakeCode	(0X29916);
	MakeCode	(0X29942);
	MakeCode	(x=0X29964);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X29980);
	MakeCode	(0X299A2);
	MakeCode	(0X299A6);
	MakeCode	(x=0X299AC);
	OpSign		(x,	1);
	MakeCode	(x=0X299BE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X299C4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X299CA);
	OpStkvar	(x,	0);
	MakeCode	(0X299D4);
	MakeCode	(0X299FC);
	MakeCode	(x=0X29A74);
	OpSign		(x,	1);
	MakeName	(0X29A74,	"DoLoopA");
	MakeCode	(0X29A8C);
	MakeCode	(0X29AB0);
	MakeCode	(x=0X29AC8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X29ACE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X29AD6);
	OpStkvar	(x,	1);
	MakeCode	(0X29AE2);
	MakeCode	(0X29B00);
	MakeCode	(0X29B74);
	MakeCode	(0X29BA6);
	MakeCode	(0X29C94);
	MakeCode	(x=0X29CD0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X29CD6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X29CDC);
	OpStkvar	(x,	0);
	MakeCode	(0X29D0A);
	MakeCode	(x=0X29D16);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X29D20);
	MakeCode	(x=0X29D42);
	OpStkvar	(x,	1);
	MakeCode	(x=0X29D48);
	OpStkvar	(x,	1);
	MakeCode	(x=0X29D4E);
	OpStkvar	(x,	0);
	MakeCode	(0X29D56);
	MakeCode	(0X29D58);
	MakeCode	(0X29D60);
	MakeCode	(0X29D68);
	MakeCode	(0X29D6A);
	MakeCode	(0X29D72);
	MakeCode	(0X29E68);
	MakeCode	(x=0X29EC6);
	OpSign		(x,	1);
	MakeName	(0X29EC6,	"DoLoopB");
	MakeCode	(0X29EF0);
	MakeCode	(0X29F18);
	MakeCode	(0X29F26);
	MakeCode	(0X29FAA);
	MakeCode	(0X29FDA);
	MakeCode	(0X29FFE);
	MakeCode	(x=0X2A002);
	OpStkvar	(x,	1);
	MakeCode	(0X2A030);
	MakeCode	(0X2A058);
	MakeCode	(0X2A076);
	MakeCode	(0X2A082);
	MakeCode	(0X2A092);
	MakeCode	(x=0X2A098);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X2A0AE);
	MakeCode	(0X2A0F8);
	MakeCode	(0X2A1D2);
	MakeCode	(x=0X2A1D6);
	OpStkvar	(x,	1);
	MakeCode	(0X2A204);
	MakeCode	(0X2A218);
	MakeCode	(x=0X2A21C);
	OpStkvar	(x,	1);
	MakeCode	(0X2A252);
	MakeName	(0X2A252,	"DoLoopC");
	MakeCode	(0X2A2C6);
	MakeCode	(0X2A5DE);
	MakeCode	(0X2A606);
	MakeCode	(0X2A656);
	MakeName	(0X2A656,	"DoLoopD");
	MakeCode	(0X2A6A4);
	MakeCode	(x=0X2A6B8);
	OpStkvar	(x,	1);
	MakeCode	(0X2A7DC);
	MakeCode	(0X2A832);
	MakeCode	(0X2A84A);
	MakeCode	(0X2A86C);
	MakeName	(0X2A86C,	"DoLoopE");
	MakeCode	(0X2A8F8);
	MakeCode	(0X2AA46);
	MakeCode	(0X2AA72);
	MakeCode	(x=0X2AA84);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X2AA8E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X2AA98);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X2AAA2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X2AAAC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X2AAB6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X2AAC0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X2AACA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X2AAD4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X2AADE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X2AAE8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X2AAFE);
	MakeCode	(0X2AB22);
	MakeCode	(x=0X2AB38);
	OpSign		(x,	1);
	MakeName	(0X2AB38,	"DoLoopF");
	MakeCode	(0X2ABC4);
	MakeCode	(x=0X2AC9A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X2ACE8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2AD36);
	OpStkvar	(x,	1);
	MakeCode	(0X2AD40);
	MakeCode	(x=0X2AD74);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X2AD9A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2ADA4);
	OpStkvar	(x,	0);
	MakeCode	(0X2AEDC);
	MakeCode	(0X2AF4C);
	MakeCode	(0X2AF5A);
	MakeCode	(0X2AFD0);
	MakeCode	(0X2AFDA);
	MakeCode	(x=0X2AFEA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X2B038);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2B086);
	OpStkvar	(x,	1);
	MakeCode	(0X2B090);
	MakeCode	(x=0X2B0C4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X2B0EA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2B0F4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2B13A);
	OpSign		(x,	1);
	MakeName	(0X2B13A,	"DoLoopG");
	MakeCode	(0X2B1A8);
	MakeCode	(0X2B2B2);
	MakeCode	(x=0X2B3AE);
	OpStkvar	(x,	1);
	MakeCode	(0X2B3BC);
	MakeCode	(0X2B3C8);
	MakeCode	(x=0X2B3EC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X2B410);
	MakeCode	(x=0X2B414);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X2B46E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X2B4D2);
	MakeCode	(0X2B4DC);
	MakeCode	(0X2B536);
	MakeCode	(x=0X2B53C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X2B564);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2B56A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2B572);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2B578);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2B57C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2B586);
	OpStkvar	(x,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2B58C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2B590);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2B594);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2B59A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2B5A6);
	OpStkvar	(x,	0);
	MakeCode	(0X2B5C4);
	MakeCode	(x=0X2B5CC);
	OpStkvar	(x,	1);
	MakeCode	(0X2B5F0);
	MakeCode	(0X2B61E);
	MakeCode	(0X2B636);
	MakeCode	(x=0X2B656);
	OpSign		(x,	1);
	MakeCode	(0X2B69C);
	MakeCode	(0X2B6C0);
	MakeCode	(0X2B6DA);
	MakeCode	(x=0X2B6E0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X2B6F8);
	MakeCode	(0X2B718);
	MakeCode	(0X2B742);
	MakeCode	(0X2B75C);
	MakeCode	(0X2B776);
	MakeCode	(0X2B790);
	MakeCode	(0X2B79E);
	MakeCode	(0X2B7B8);
	MakeCode	(0X2B7D2);
	MakeCode	(0X2B7EC);
	MakeName	(0X2B7EC,	"StartLoopA");
	MakeCode	(x=0X2B7F4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X2B7F4,	"LoopA");
	MakeCode	(0X2B808);
	MakeName	(0X2B808,	"StartLoopB");
	MakeCode	(x=0X2B810);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X2B810,	"LoopB");
	MakeCode	(0X2B824);
	MakeName	(0X2B824,	"StartLoopC");
	MakeCode	(x=0X2B82C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X2B82C,	"LoopC");
	MakeCode	(0X2B840);
	MakeName	(0X2B840,	"StartLoopD");
	MakeCode	(x=0X2B848);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X2B848,	"LoopD");
	MakeCode	(0X2B85C);
	MakeName	(0X2B85C,	"StartLoopE");
	MakeCode	(x=0X2B864);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X2B864,	"LoopE");
	MakeCode	(0X2B878);
	MakeName	(0X2B878,	"StartLoopF");
	MakeCode	(x=0X2B880);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X2B880,	"LoopF");
	MakeCode	(0X2B894);
	MakeName	(0X2B894,	"StartLoopG");
	MakeCode	(x=0X2B89C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X2B89C,	"LoopG");
	MakeCode	(0X2B8B0);
	MakeName	(0X2B8B0,	"ExecuteMainLoops");
	MakeCode	(x=0X2B8B4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X2B8BC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X2B8C8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X2B8D8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X2B8E6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X2B8EE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X2B8FA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X2B90A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X2B918);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X2B920);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X2B92C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X2B93C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X2B94A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X2B952);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X2B95E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X2B96E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X2B97C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X2B984);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X2B990);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X2B9A0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X2B9AE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X2B9B6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X2B9C2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X2B9D2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X2B9E8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X2B9F0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X2B9FC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X2BA18);
	MakeCode	(0X2BA3C);
	MakeCode	(x=0X2BA40);
	OpSign		(x,	1);
	MakeCode	(0X2BA72);
	MakeCode	(x=0X2BA7A);
	OpStkvar	(x,	1);
	MakeCode	(0X2BA88);
	MakeCode	(0X2BAD6);
	MakeCode	(0X2BB04);
	MakeCode	(0X2BB3A);
	MakeCode	(0X2BB5A);
	MakeCode	(0X2BB7C);
	MakeCode	(0X2BB92);
	MakeCode	(0X2BBB8);
	MakeCode	(0X2BBCC);
	MakeCode	(0X2BBE0);
	MakeCode	(0X2BBEE);
	MakeCode	(0X2BC08);
	MakeCode	(x=0X2BC20);
	OpStkvar	(x,	1);
	MakeCode	(0X2BC2E);
	MakeCode	(0X2BC3E);
	MakeCode	(0X2BC54);
	MakeCode	(x=0X2BC60);
	OpStkvar	(x,	1);
	MakeCode	(0X2BC6E);
	MakeCode	(0X2BC7E);
	MakeCode	(0X2BC86);
	MakeCode	(0X2BCDE);
	MakeCode	(0X2BD28);
	MakeCode	(0X2BD7A);
	MakeCode	(0X2BD96);
	MakeCode	(0X2BDC2);
	MakeCode	(0X2BDE6);
	MakeCode	(0X2BE6A);
	MakeCode	(0X2BEA2);
	MakeCode	(0X2BF04);
	MakeCode	(0X2BF36);
	MakeCode	(0X2BF78);
	MakeCode	(0X2BF86);
	MakeCode	(0X2BF96);
	MakeCode	(0X2BFCC);
	MakeCode	(0X2BFFA);
	MakeCode	(0X2C028);
	MakeCode	(0X2C092);
	MakeCode	(0X2C0B2);
	MakeCode	(0X2C0F8);
	MakeCode	(0X2C10C);
	MakeCode	(0X2C134);
	MakeCode	(0X2C168);
	MakeCode	(0X2C1E0);
	MakeCode	(0X2C1E6);
	MakeCode	(0X2C206);
	MakeCode	(0X2C27A);
	MakeCode	(0X2C284);
	MakeCode	(0X2C2BA);
	MakeCode	(0X2C314);
	MakeCode	(0X2C32A);
	MakeCode	(x=0X2C35A);
	OpSign		(x,	1);
	MakeCode	(0X2C37E);
	MakeCode	(x=0X2C392);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2C39C);
	OpStkvar	(x,	0);
	MakeCode	(0X2C3B0);
	MakeCode	(x=0X2C3C0);
	OpSign		(x,	1);
	MakeCode	(x=0X2C3D0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X2C3DA);
	MakeCode	(0X2C3F4);
	MakeCode	(0X2C40A);
	MakeCode	(0X2C41A);
	MakeCode	(0X2C422);
	MakeCode	(0X2C484);
	MakeCode	(0X2C492);
	MakeCode	(0X2C49C);
	MakeCode	(0X2C4A4);
	MakeCode	(x=0X2C4E2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X2C4F4);
	MakeCode	(0X2C506);
	MakeCode	(0X2C536);
	MakeCode	(0X2C582);
	MakeCode	(0X2C598);
	MakeCode	(0X2C5DC);
	MakeCode	(0X2C60E);
	MakeCode	(0X2C62A);
	MakeCode	(0X2C64A);
	MakeCode	(0X2C664);
	MakeCode	(0X2C682);
	MakeCode	(0X2C688);
	MakeCode	(0X2C6A0);
	MakeCode	(0X2C6C6);
	MakeCode	(0X2C6DE);
	MakeCode	(0X2C70E);
	MakeCode	(x=0X2C714);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X2C71E);
	MakeCode	(0X2C754);
	MakeCode	(0X2C778);
	MakeCode	(0X2C782);
	MakeCode	(0X2C790);
	MakeCode	(x=0X2C7AC);
	OpSign		(x,	1);
	MakeCode	(x=0X2C7C4);
	OpStkvar	(x,	1);
	MakeCode	(0X2C7D2);
	MakeCode	(0X2C7E2);
	MakeCode	(x=0X2C7EC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X2C7FE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X2C824);
	MakeCode	(0X2C82A);
	MakeCode	(x=0X2C830);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X2C834);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X2C840);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2C846);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2C852);
	OpStkvar	(x,	0);
	MakeCode	(0X2C8A8);
	MakeCode	(0X2C8C2);
	MakeCode	(0X2C8EC);
	MakeCode	(0X2C8FE);
	MakeCode	(0X2C926);
	MakeCode	(0X2C938);
	MakeCode	(0X2C956);
	MakeCode	(0X2C97E);
	MakeCode	(0X2C9AA);
	MakeCode	(0X2C9FC);
	MakeCode	(0X2CA38);
	MakeCode	(0X2CA4E);
	MakeCode	(0X2CACC);
	MakeCode	(0X2CAE6);
	MakeCode	(0X2CAFA);
	MakeCode	(0X2CB0E);
	MakeCode	(0X2CB22);
	MakeCode	(x=0X2CB28);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X2CB32);
	MakeCode	(0X2CB34);
	MakeCode	(0X2CB4A);
	MakeCode	(0X2CB78);
	MakeCode	(0X2CBA4);
	MakeCode	(0X2CBC0);
	MakeCode	(0X2CBD2);
	MakeCode	(0X2CBEE);
	MakeCode	(0X2CC14);
	MakeCode	(0X2CC1A);
	MakeCode	(x=0X2CC22);
	OpSign		(x,	1);
	MakeCode	(x=0X2CC3C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2CC46);
	OpStkvar	(x,	0);
	MakeCode	(0X2CC56);
	MakeCode	(x=0X2CC76);
	OpStkvar	(x,	1);
	MakeCode	(0X2CCE4);
	MakeCode	(0X2CD02);
	MakeCode	(0X2CDBC);
	MakeCode	(0X2CDCC);
	MakeCode	(0X2CDD8);
	MakeCode	(0X2CE1E);
	MakeCode	(x=0X2CE2E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2CE38);
	OpStkvar	(x,	0);
	MakeCode	(0X2CE44);
	MakeCode	(0X2CE7A);
	MakeCode	(0X2CEA8);
	MakeCode	(0X2CEF6);
	MakeCode	(x=0X2CF0C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2CF16);
	OpStkvar	(x,	0);
	MakeCode	(0X2CF50);
	MakeCode	(0X2CF62);
	MakeCode	(0X2CF6A);
	MakeCode	(0X2CFA0);
	MakeCode	(x=0X2CFB6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2CFC0);
	OpStkvar	(x,	0);
	MakeCode	(0X2CFFA);
	MakeCode	(0X2D012);
	MakeCode	(0X2D01A);
	MakeCode	(0X2D042);
	MakeCode	(0X2D050);
	MakeCode	(0X2D05C);
	MakeCode	(x=0X2D078);
	OpStkvar	(x,	0);
	MakeCode	(0X2D090);
	MakeCode	(0X2D0D2);
	MakeCode	(0X2D0F8);
	MakeCode	(0X2D168);
	MakeCode	(0X2D186);
	MakeCode	(0X2D1C4);
	MakeCode	(0X2D208);
	MakeCode	(0X2D276);
	MakeCode	(x=0X2D2A8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X2D2BA);
	MakeCode	(0X2D2CE);
	MakeCode	(0X2D2E8);
	MakeCode	(0X2D326);
	MakeCode	(0X2D336);
	MakeCode	(x=0X2D37E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X2D390);
	MakeCode	(0X2D3BC);
	MakeCode	(0X2D402);
	MakeCode	(0X2D426);
	MakeCode	(0X2D43A);
	MakeCode	(0X2D484);
	MakeCode	(x=0X2D48A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X2D4A0);
	MakeCode	(0X2D4AE);
	MakeCode	(0X2D4D4);
	MakeCode	(x=0X2D4F2);
	OpSign		(x,	1);
	MakeCode	(0X2D54E);
	MakeCode	(0X2D562);
	MakeCode	(0X2D580);
	MakeCode	(0X2D58E);
	MakeCode	(0X2D5AC);
	MakeCode	(0X2D5BA);
	MakeCode	(0X2D5D8);
	MakeCode	(x=0X2D5E8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2D5EE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2D5F6);
	OpStkvar	(x,	0);
	MakeCode	(0X2D620);
	MakeCode	(0X2D64A);
	MakeCode	(0X2D690);
	MakeCode	(0X2D6B8);
	MakeCode	(0X2D6D2);
	MakeCode	(0X2D6E0);
	MakeCode	(0X2D6F4);
	MakeCode	(0X2D6FA);
	MakeCode	(0X2D708);
	MakeCode	(0X2D71C);
	MakeCode	(0X2D722);
	MakeCode	(x=0X2D764);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X2D76E);
	MakeCode	(0X2D784);
	MakeCode	(0X2D7A0);
	MakeCode	(0X2D7AC);
	MakeCode	(0X2D7F0);
	MakeCode	(0X2D80A);
	MakeCode	(0X2D822);
	MakeCode	(0X2D82E);
	MakeCode	(0X2D83E);
	MakeCode	(0X2D846);
	MakeCode	(0X2D8D6);
	MakeCode	(0X2D8FE);
	MakeCode	(0X2D90E);
	MakeCode	(0X2D936);
	MakeCode	(0X2D956);
	MakeCode	(0X2D96A);
	MakeCode	(0X2D978);
	MakeCode	(x=0X2D97C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X2D986);
	MakeCode	(0X2D9B0);
	MakeCode	(0X2D9BE);
	MakeCode	(0X2D9D6);
	MakeCode	(0X2D9E4);
	MakeCode	(0X2DA2A);
	MakeCode	(0X2DA7C);
	MakeCode	(0X2DA9C);
	MakeCode	(0X2DAA6);
	MakeCode	(x=0X2DACE);
	OpSign		(x,	1);
	MakeCode	(x=0X2DB16);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2DB20);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2DB2C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2DB36);
	OpStkvar	(x,	0);
	MakeCode	(0X2DB66);
	MakeCode	(x=0X2DB6C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2DB76);
	OpStkvar	(x,	0);
	MakeCode	(0X2DC82);
	MakeCode	(0X2DCC8);
	MakeCode	(0X2DCF6);
	MakeCode	(0X2DD04);
	MakeCode	(0X2DD46);
	MakeCode	(0X2DD6A);
	MakeCode	(0X2DD76);
	MakeCode	(0X2DD88);
	MakeCode	(0X2DDB0);
	MakeCode	(0X2DDD2);
	MakeCode	(0X2DDE4);
	MakeCode	(0X2DE02);
	MakeCode	(0X2DE06);
	MakeCode	(0X2DE3A);
	MakeCode	(0X2DE64);
	MakeCode	(0X2DE72);
	MakeCode	(0X2DE80);
	MakeCode	(0X2DE8E);
	MakeCode	(0X2DE9C);
	MakeCode	(0X2DED8);
	MakeCode	(0X2DEF6);
	MakeCode	(0X2DF0A);
	MakeCode	(0X2DF28);
	MakeCode	(0X2DF46);
	MakeCode	(0X2DF5C);
	MakeCode	(0X2DF70);
	MakeCode	(0X2DF94);
	MakeCode	(0X2DFAC);
	MakeCode	(0X2DFB0);
	MakeCode	(0X2DFD0);
	MakeCode	(x=0X2E010);
	OpSign		(x,	1);
	MakeCode	(0X2E02E);
	MakeCode	(0X2E04E);
	MakeCode	(0X2E07A);
	MakeCode	(x=0X2E086);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2E090);
	OpStkvar	(x,	0);
	MakeCode	(0X2E09E);
	MakeCode	(0X2E0BC);
	MakeCode	(0X2E0D8);
	MakeCode	(0X2E0F8);
	MakeCode	(0X2E10C);
	MakeCode	(0X2E120);
	MakeCode	(0X2E13A);
	MakeCode	(0X2E1AE);
	MakeCode	(x=0X2E1E0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2E1EA);
	OpStkvar	(x,	0);
	MakeCode	(0X2E20C);
	MakeCode	(0X2E272);
	MakeCode	(0X2E27C);
	MakeCode	(0X2E29E);
	MakeCode	(0X2E2B4);
	MakeCode	(0X2E2C0);
	MakeCode	(0X2E2E2);
	MakeCode	(0X2E2F0);
	MakeCode	(0X2E31A);
	MakeCode	(0X2E362);
	MakeCode	(0X2E394);
	MakeCode	(0X2E3A6);
	MakeCode	(0X2E3D2);
	MakeCode	(0X2E408);
	MakeCode	(0X2E41A);
	MakeCode	(0X2E438);
	MakeCode	(0X2E4BC);
	MakeCode	(0X2E586);
	MakeCode	(0X2E5AE);
	MakeCode	(0X2E5D6);
	MakeCode	(0X2E5EA);
	MakeCode	(0X2E620);
	MakeCode	(0X2E67E);
	MakeCode	(x=0X2E682);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X2E68C);
	MakeCode	(0X2E690);
	MakeCode	(0X2E692);
	MakeCode	(0X2E6AA);
	MakeCode	(0X2E6B6);
	MakeCode	(0X2E6B8);
	MakeCode	(0X2E6E0);
	MakeCode	(0X2E6E2);
	MakeCode	(0X2E6F4);
	MakeCode	(0X2E70C);
	MakeCode	(0X2E716);
	MakeCode	(0X2E71E);
	MakeCode	(x=0X2E726);
	OpSign		(x,	1);
	MakeCode	(0X2E778);
	MakeCode	(0X2E7AC);
	MakeCode	(x=0X2E7CE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2E7D8);
	OpStkvar	(x,	0);
	MakeCode	(0X2E7E6);
	MakeCode	(x=0X2E806);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2E810);
	OpStkvar	(x,	0);
	MakeCode	(0X2E816);
	MakeCode	(x=0X2E81C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2E826);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2E832);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2E83C);
	OpStkvar	(x,	0);
	MakeCode	(0X2E86C);
	MakeCode	(x=0X2E876);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2E880);
	OpStkvar	(x,	0);
	MakeCode	(0X2E8A0);
	MakeCode	(0X2E8CC);
	MakeCode	(0X2E8E4);
	MakeCode	(x=0X2E8EA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2E8F4);
	OpStkvar	(x,	0);
	MakeCode	(0X2E928);
	MakeCode	(0X2E93C);
	MakeCode	(0X2E95A);
	MakeCode	(0X2E97C);
	MakeCode	(0X2E99A);
	MakeCode	(0X2E9EE);
	MakeCode	(0X2EA20);
	MakeCode	(0X2EA38);
	MakeCode	(0X2EA52);
	MakeCode	(0X2EA6C);
	MakeCode	(x=0X2EA9A);
	OpSign		(x,	1);
	MakeCode	(x=0X2EAAE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X2EAB2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X2EACA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X2EADC);
	OpStkvar	(x,	0);
	MakeCode	(0X2EB08);
	MakeCode	(x=0X2EB0A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X2EB18);
	MakeCode	(x=0X2EB20);
	OpStkvar	(x,	0);
	MakeCode	(0X2EB26);
	MakeCode	(0X2EB44);
	MakeCode	(0X2EB4A);
	MakeCode	(0X2EB60);
	MakeCode	(0X2EB72);
	MakeCode	(x=0X2EBD6);
	OpSign		(x,	1);
	MakeCode	(0X2EC0A);
	MakeCode	(x=0X2EC22);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2EC2C);
	OpStkvar	(x,	0);
	MakeCode	(0X2EC40);
	MakeCode	(0X2EC7C);
	MakeCode	(0X2EC8A);
	MakeCode	(x=0X2EC8E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X2ECB2);
	MakeCode	(0X2ECC4);
	MakeCode	(0X2ECD0);
	MakeCode	(x=0X2ECD2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X2ED0E);
	MakeCode	(0X2ED26);
	MakeCode	(x=0X2ED2A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X2ED3A);
	MakeCode	(0X2ED52);
	MakeCode	(0X2ED66);
	MakeCode	(x=0X2ED6A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X2ED96);
	MakeCode	(0X2EDC2);
	MakeCode	(0X2EE18);
	MakeCode	(0X2EE50);
	MakeCode	(0X2EE56);
	MakeCode	(0X2EE7C);
	MakeCode	(0X2EE8E);
	MakeCode	(0X2EEC0);
	MakeCode	(0X2EEE4);
	MakeCode	(0X2EF2A);
	MakeCode	(0X2EF30);
	MakeCode	(0X2EF4C);
	MakeCode	(0X2EF7E);
	MakeCode	(0X2EFA0);
	MakeCode	(0X2EFFC);
	MakeCode	(x=0X2F000);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2F00A);
	OpStkvar	(x,	0);
	MakeCode	(0X2F054);
	MakeCode	(0X2F08C);
	MakeCode	(0X2F0C8);
	MakeCode	(0X2F0DA);
	MakeCode	(x=0X2F0E0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X2F102);
	MakeCode	(0X2F124);
	MakeCode	(0X2F132);
	MakeCode	(0X2F150);
	MakeCode	(x=0X2F156);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X2F17A);
	MakeCode	(0X2F19C);
	MakeCode	(x=0X2F1A2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X2F1AC);
	MakeCode	(0X2F1CE);
	MakeCode	(0X2F1EC);
	MakeCode	(0X2F284);
	MakeCode	(0X2F2FE);
	MakeCode	(0X2F316);
	MakeCode	(0X2F32E);
	MakeCode	(0X2F34A);
	MakeCode	(0X2F354);
	MakeCode	(0X2F370);
	MakeCode	(0X2F37E);
	MakeCode	(0X2F386);
	MakeCode	(0X2F39C);
	MakeCode	(0X2F3AE);
	MakeCode	(0X2F3CE);
	MakeCode	(0X2F3F4);
	MakeCode	(0X2F3FE);
	MakeCode	(0X2F426);
	MakeCode	(0X2F44A);
	MakeCode	(0X2F478);
	MakeCode	(0X2F492);
	MakeCode	(0X2F4AC);
	MakeCode	(0X2F4CC);
	MakeCode	(0X2F4EC);
	MakeCode	(0X2F508);
	MakeCode	(0X2F512);
	MakeCode	(0X2F532);
	MakeCode	(0X2F538);
	MakeCode	(0X2F546);
	MakeCode	(0X2F552);
	MakeCode	(0X2F560);
	MakeCode	(0X2F580);
	MakeCode	(0X2F59A);
	MakeCode	(0X2F5B2);
	MakeCode	(0X2F5BC);
	MakeCode	(0X2F5F2);
	MakeCode	(0X2F604);
	MakeCode	(0X2F610);
	MakeCode	(0X2F622);
	MakeCode	(0X2F62C);
	MakeCode	(0X2F652);
	MakeCode	(0X2F660);
	MakeCode	(0X2F670);
	MakeCode	(0X2F67E);
	MakeCode	(0X2F69E);
	MakeCode	(0X2F6AE);
	MakeCode	(0X2F6BC);
	MakeCode	(0X2F6C8);
	MakeCode	(0X2F6EC);
	MakeCode	(0X2F712);
	MakeCode	(x=0X2F780);
	OpSign		(x,	1);
	MakeCode	(x=0X2F792);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X2F796);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X2F7AE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X2F7CC);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2F7DC);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2F7E0);
	OpStkvar	(x,	0);
	MakeCode	(0X2F7F2);
	MakeCode	(x=0X2F7FA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X2F824);
	MakeCode	(0X2F82A);
	MakeCode	(0X2F842);
	MakeCode	(0X2F86E);
	MakeCode	(0X2F874);
	MakeCode	(0X2F88C);
	MakeCode	(0X2F8D8);
	MakeCode	(0X2F8FA);
	MakeCode	(0X2F91A);
	MakeCode	(0X2F94C);
	MakeCode	(0X2F968);
	MakeCode	(0X2F996);
	MakeCode	(0X2F9AA);
	MakeCode	(0X2F9E4);
	MakeCode	(0X2FA3E);
	MakeCode	(0X2FA8C);
	MakeCode	(0X2FACC);
	MakeCode	(0X2FADE);
	MakeCode	(0X2FAFC);
	MakeCode	(0X2FB30);
	MakeCode	(0X2FB44);
	MakeCode	(0X2FC1E);
	MakeCode	(0X2FC30);
	MakeCode	(x=0X2FC34);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X2FC3E);
	MakeCode	(0X2FC4C);
	MakeCode	(0X2FC4E);
	MakeCode	(0X2FC50);
	MakeCode	(x=0X2FC54);
	OpSign		(x,	1);
	MakeCode	(x=0X2FC58);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2FC5E);
	OpStkvar	(x,	1);
	MakeCode	(0X2FC92);
	MakeCode	(0X2FD28);
	MakeCode	(0X2FD3A);
	MakeCode	(0X2FD5A);
	MakeCode	(x=0X2FD9C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X2FDAE);
	MakeCode	(0X2FDC6);
	MakeCode	(0X2FDDE);
	MakeCode	(x=0X2FE3E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X2FE50);
	MakeCode	(0X2FE68);
	MakeCode	(0X2FE7C);
	MakeCode	(0X2FF08);
	MakeCode	(0X2FF16);
	MakeCode	(0X2FF52);
	MakeCode	(0X2FF9E);
	MakeCode	(x=0X2FFA6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeStr		(0X2FFB0,	0X2FFD5);
	MakeName	(0X2FFB0,	"aBxVbxHbxXbxTb8");
	MakeCode	(0X2FFD6);
	MakeCode	(0X2FFE8);
	MakeCode	(0X2FFF0);
	MakeCode	(0X3004C);
	MakeCode	(0X30088);
	MakeCode	(x=0X300DC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X300EE);
	MakeCode	(0X30106);
	MakeCode	(0X3011A);
	MakeCode	(0X30158);
	MakeCode	(0X30186);
	MakeCode	(0X301D2);
	MakeCode	(0X301F8);
	MakeCode	(x=0X30244);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X30256);
	MakeCode	(0X3026E);
	MakeCode	(0X30282);
	MakeCode	(0X302B8);
	MakeCode	(0X302E4);
	MakeCode	(0X3032C);
	MakeCode	(0X30352);
	MakeCode	(0X30358);
	MakeCode	(0X3035A);
	MakeCode	(x=0X30368);
	OpSign		(x,	1);
	MakeCode	(0X30384);
	MakeCode	(0X303A6);
	MakeCode	(0X303F0);
	MakeCode	(0X30400);
	MakeCode	(0X3045E);
	MakeCode	(0X3046E);
	MakeCode	(0X30490);
	MakeCode	(0X304DA);
	MakeCode	(0X304EA);
	MakeCode	(x=0X3053E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X30548);
	OpStkvar	(x,	0);
	MakeCode	(0X3055C);
	MakeCode	(0X30566);
	MakeCode	(0X30584);
	MakeCode	(0X305A0);
	MakeCode	(0X305E4);
	MakeCode	(0X30630);
	MakeCode	(0X3066C);
	MakeCode	(x=0X3068C);
	OpSign		(x,	1);
	MakeCode	(0X306BA);
	MakeCode	(0X306E8);
	MakeCode	(0X30710);
	MakeCode	(0X3072A);
	MakeCode	(0X3076C);
	MakeCode	(x=0X3077C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X30786);
	OpStkvar	(x,	0);
	MakeCode	(0X30796);
	MakeCode	(0X307A4);
	MakeName	(0X307A4,	"nullsub_6");
	MakeCode	(0X307A6);
	MakeCode	(0X307D8);
	MakeCode	(0X307F2);
	MakeCode	(0X30800);
	MakeCode	(0X30810);
	MakeCode	(0X3083E);
	MakeCode	(0X308A8);
	MakeCode	(x=0X308C2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X308CC);
	MakeCode	(0X308EA);
	MakeCode	(0X308F0);
	MakeCode	(0X308FE);
	MakeCode	(x=0X3090C);
	OpSign		(x,	1);
	MakeCode	(0X30928);
	MakeCode	(0X3093C);
	MakeCode	(x=0X30948);
	OpStkvar	(x,	1);
	MakeCode	(x=0X30952);
	OpStkvar	(x,	0);
	MakeCode	(0X30986);
	MakeCode	(0X309F6);
	MakeCode	(0X30A12);
	MakeCode	(0X30A54);
	MakeCode	(0X30A6A);
	MakeCode	(0X30A7A);
	MakeCode	(0X30A88);
	MakeCode	(0X30AAC);
	MakeCode	(0X30ADA);
	MakeCode	(0X30B1C);
	MakeCode	(0X30B32);
	MakeCode	(0X30B40);
	MakeCode	(0X30B4C);
	MakeCode	(0X30B5C);
	MakeCode	(0X30B6A);
	MakeCode	(0X30B7A);
	MakeCode	(0X30B88);
	MakeCode	(0X30B98);
	MakeCode	(0X30BA6);
	MakeCode	(0X30BE2);
	MakeCode	(0X30C1C);
	MakeCode	(0X30C32);
	MakeCode	(0X30C4C);
	MakeCode	(0X30C7E);
	MakeCode	(0X30C88);
	MakeCode	(0X30CA4);
	MakeCode	(0X30CF0);
	MakeCode	(0X30D06);
	MakeCode	(0X30D16);
	MakeCode	(0X30D1C);
	MakeCode	(0X30D32);
	MakeCode	(0X30D56);
	MakeCode	(0X30D9E);
	MakeCode	(x=0X30DA8);
	OpSign		(x,	1);
	MakeCode	(x=0X30DB4);
	OpStkvar	(x,	1);
	MakeCode	(0X30DC4);
	MakeCode	(0X30E20);
	MakeCode	(0X30E52);
	MakeCode	(0X30E84);
	MakeCode	(x=0X30E88);
	OpStkvar	(x,	1);
	MakeCode	(0X30E94);
	MakeCode	(0X30ED2);
	MakeCode	(0X30EEC);
	MakeCode	(0X30EFC);
	MakeCode	(0X30F2E);
	MakeCode	(0X30F3E);
	MakeCode	(0X30F68);
	MakeCode	(0X30F98);
	MakeCode	(0X30FB0);
	MakeCode	(0X30FC0);
	MakeCode	(0X30FE8);
	MakeCode	(0X31018);
	MakeCode	(0X31030);
	MakeCode	(0X31040);
	MakeCode	(0X3104A);
	MakeCode	(0X31060);
	MakeCode	(x=0X31062);
	OpStkvar	(x,	0);
	MakeCode	(0X3108C);
	MakeCode	(0X310A6);
	MakeCode	(0X310BA);
	MakeCode	(x=0X310C0);
	OpStkvar	(x,	0);
	MakeCode	(0X310F2);
	MakeCode	(0X310F6);
	MakeCode	(0X310FC);
	MakeCode	(0X31116);
	MakeCode	(x=0X3111E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X31122);
	OpStkvar	(x,	1);
	MakeCode	(0X3118A);
	MakeCode	(x=0X311B2);
	OpStkvar	(x,	0);
	MakeCode	(0X311D8);
	MakeCode	(x=0X311DA);
	OpStkvar	(x,	1);
	MakeCode	(0X31206);
	MakeCode	(0X31220);
	MakeCode	(0X31232);
	MakeCode	(0X31266);
	MakeCode	(0X31278);
	MakeCode	(x=0X3129E);
	OpStkvar	(x,	0);
	MakeCode	(0X312D2);
	MakeCode	(x=0X31304);
	OpStkvar	(x,	0);
	MakeCode	(x=0X31308);
	OpStkvar	(x,	1);
	MakeCode	(0X31318);
	MakeCode	(0X31360);
	MakeCode	(0X31376);
	MakeCode	(0X31390);
	MakeCode	(0X313A0);
	MakeCode	(0X313CE);
	MakeCode	(0X313D8);
	MakeCode	(0X3140A);
	MakeCode	(x=0X31412);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X3141C);
	MakeCode	(0X31420);
	MakeCode	(0X31428);
	MakeCode	(0X3143C);
	MakeCode	(0X3144E);
	MakeCode	(0X31482);
	MakeCode	(0X31494);
	MakeCode	(0X314B4);
	MakeCode	(0X314B6);
	MakeCode	(0X314E2);
	MakeCode	(x=0X314EA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X3150A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X3151C);
	MakeCode	(0X31534);
	MakeCode	(0X3154C);
	MakeCode	(0X3158C);
	MakeCode	(0X315A4);
	MakeCode	(0X315B6);
	MakeCode	(0X3162A);
	MakeCode	(0X3164A);
	MakeCode	(0X3166E);
	MakeCode	(0X316B0);
	MakeCode	(0X316BE);
	MakeCode	(0X316E2);
	MakeCode	(x=0X316EA);
	OpSign		(x,	1);
	MakeCode	(0X31722);
	MakeCode	(0X3176A);
	MakeCode	(0X31770);
	MakeCode	(0X317A2);
	MakeCode	(0X317C2);
	MakeCode	(0X317C8);
	MakeCode	(0X317F6);
	MakeCode	(0X31804);
	MakeCode	(0X31810);
	MakeCode	(0X31830);
	MakeCode	(0X3184C);
	MakeCode	(0X31878);
	MakeCode	(0X3188E);
	MakeCode	(0X3189C);
	MakeCode	(0X31942);
	MakeCode	(0X31958);
	MakeCode	(0X319A0);
	MakeCode	(0X319A8);
	MakeCode	(0X319AE);
	MakeCode	(0X319B8);
	MakeCode	(0X319C0);
	MakeCode	(0X319C6);
	MakeCode	(0X319CE);
	MakeCode	(x=0X319EA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X319F4);
	OpStkvar	(x,	0);
	MakeCode	(0X31A2A);
	MakeCode	(x=0X31A3E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X31A48);
	OpStkvar	(x,	0);
	MakeCode	(0X31A82);
	MakeCode	(x=0X31A92);
	OpStkvar	(x,	1);
	MakeCode	(x=0X31A9C);
	OpStkvar	(x,	0);
	MakeCode	(0X31ACE);
	MakeCode	(0X31AE0);
	MakeName	(0X31AE0,	"nullsub_3");
	MakeCode	(0X31AE2);
	MakeCode	(0X31B26);
	MakeCode	(0X31B38);
	MakeCode	(0X31B4E);
	MakeCode	(0X31BB8);
	MakeCode	(0X31BD8);
	MakeCode	(x=0X31BEA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X31BFA);
	MakeCode	(x=0X31C04);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X31C16);
	MakeCode	(0X31C2A);
	MakeCode	(0X31C46);
	MakeCode	(0X31C5E);
	MakeCode	(0X31C84);
	MakeCode	(0X31C92);
	MakeCode	(0X31CEC);
	MakeCode	(0X31CFC);
	MakeCode	(0X31D0A);
	MakeCode	(0X31D78);
	MakeCode	(0X31D94);
	MakeCode	(0X31D9A);
	MakeCode	(0X31DB6);
	MakeCode	(0X31DEA);
	MakeCode	(0X31E26);
	MakeCode	(0X31E36);
	MakeCode	(x=0X31E44);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X31E58);
	MakeCode	(0X31E80);
	MakeCode	(0X31E86);
	MakeCode	(x=0X31E96);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X31ECE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X31F12);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X31F28);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X31F5C);
	OpSign		(x,	1);
	MakeCode	(x=0X31F66);
	OpStkvar	(x,	1);
	MakeCode	(x=0X31F70);
	OpStkvar	(x,	0);
	MakeCode	(0X31F8A);
	MakeCode	(0X31FB6);
	MakeCode	(0X31FBC);
	MakeCode	(0X31FCA);
	MakeCode	(x=0X31FDE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X31FFC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X3200E);
	MakeCode	(0X32028);
	MakeCode	(0X32042);
	MakeCode	(0X32062);
	MakeCode	(0X3206A);
	MakeCode	(0X32070);
	MakeCode	(x=0X320A6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X320B8);
	MakeCode	(0X320D0);
	MakeCode	(0X320E4);
	MakeCode	(0X320FE);
	MakeCode	(0X32106);
	MakeCode	(0X3210C);
	MakeCode	(0X32154);
	MakeCode	(0X3215E);
	MakeCode	(0X32164);
	MakeCode	(0X321C8);
	MakeCode	(0X321D0);
	MakeCode	(0X321D6);
	MakeCode	(0X321E2);
	MakeCode	(0X32212);
	MakeCode	(0X32252);
	MakeCode	(0X3225C);
	MakeCode	(x=0X32262);
	OpSign		(x,	1);
	MakeCode	(0X322BA);
	MakeCode	(0X322CC);
	MakeCode	(0X322DE);
	MakeCode	(x=0X322EA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X322F4);
	OpStkvar	(x,	0);
	MakeCode	(0X3231A);
	MakeCode	(0X32324);
	MakeCode	(0X3233C);
	MakeCode	(x=0X32368);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X323E4);
	MakeCode	(0X32402);
	MakeCode	(0X32406);
	MakeCode	(0X32414);
	MakeCode	(0X32478);
	MakeCode	(0X324A0);
	MakeCode	(0X324BE);
	MakeCode	(0X324C2);
	MakeCode	(0X324D0);
	MakeCode	(0X324FE);
	MakeCode	(0X32510);
	MakeCode	(x=0X32546);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X32550);
	MakeCode	(0X32568);
	MakeCode	(0X3256C);
	MakeCode	(0X3258A);
	MakeCode	(0X32602);
	MakeCode	(0X32604);
	MakeCode	(0X3263A);
	MakeCode	(0X3264C);
	MakeCode	(0X32668);
	MakeCode	(0X32678);
	MakeCode	(0X326AE);
	MakeCode	(0X326D8);
	MakeCode	(0X326DE);
	MakeCode	(0X32720);
	MakeCode	(0X32738);
	MakeCode	(0X3274A);
	MakeCode	(0X32768);
	MakeCode	(0X32782);
	MakeCode	(0X327A6);
	MakeCode	(x=0X327CA);
	OpSign		(x,	1);
	MakeCode	(x=0X32812);
	OpStkvar	(x,	0);
	MakeCode	(x=0X32816);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3281A);
	OpStkvar	(x,	0);
	MakeCode	(0X32828);
	MakeCode	(0X32838);
	MakeCode	(x=0X32840);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3284E);
	OpSign		(x,	1);
	MakeCode	(0X328A0);
	MakeCode	(x=0X328AC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X328B2);
	OpStkvar	(x,	0);
	MakeCode	(0X328B8);
	MakeCode	(0X328D4);
	MakeCode	(x=0X328DA);
	OpStkvar	(x,	1);
	MakeCode	(0X328E2);
	MakeCode	(x=0X328E8);
	OpStkvar	(x,	1);
	MakeCode	(0X328F0);
	MakeCode	(0X3290C);
	MakeCode	(x=0X3292C);
	OpSign		(x,	1);
	MakeCode	(x=0X32934);
	OpStkvar	(x,	1);
	MakeCode	(0X32944);
	MakeCode	(0X32952);
	MakeCode	(0X3295A);
	MakeCode	(0X32968);
	MakeCode	(0X32976);
	MakeCode	(0X32984);
	MakeCode	(0X3298C);
	MakeCode	(0X329A2);
	MakeCode	(x=0X329A6);
	OpStkvar	(x,	1);
	MakeCode	(0X329B4);
	MakeCode	(0X329CC);
	MakeCode	(x=0X329D0);
	OpStkvar	(x,	1);
	MakeCode	(0X329F0);
	MakeCode	(x=0X32A0C);
	OpSign		(x,	1);
	MakeCode	(0X32A64);
	MakeCode	(0X32A68);
	MakeCode	(0X32A92);
	MakeCode	(0X32AA6);
	MakeCode	(0X32AB6);
	MakeCode	(0X32AD0);
	MakeCode	(x=0X32B0E);
	OpStkvar	(x,	1);
	MakeCode	(0X32B16);
	MakeCode	(x=0X32B30);
	OpStkvar	(x,	1);
	MakeCode	(x=0X32B56);
	OpStkvar	(x,	1);
	MakeCode	(x=0X32B5C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X32B8E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X32B92);
	OpStkvar	(x,	1);
	MakeCode	(0X32B9C);
	MakeCode	(0X32C02);
	MakeCode	(0X32C1A);
	MakeCode	(0X32C1E);
	MakeCode	(x=0X32C68);
	OpStkvar	(x,	1);
	MakeCode	(x=0X32C6E);
	OpStkvar	(x,	1);
	MakeCode	(0X32C80);
	MakeCode	(0X32CDC);
	MakeCode	(0X32CE0);
	MakeCode	(0X32D0A);
	MakeCode	(0X32D1E);
	MakeCode	(0X32D2E);
	MakeCode	(0X32D48);
	MakeCode	(x=0X32D86);
	OpStkvar	(x,	1);
	MakeCode	(0X32D8E);
	MakeCode	(x=0X32DA8);
	OpStkvar	(x,	1);
	MakeCode	(0X32DC6);
	MakeCode	(0X32DEE);
	MakeCode	(0X32E10);
	MakeCode	(x=0X32E1E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X32E24);
	OpStkvar	(x,	1);
	MakeCode	(0X32E40);
	MakeCode	(0X32E52);
	MakeCode	(0X32E6A);
	MakeCode	(0X32E80);
	MakeCode	(0X32EAA);
	MakeCode	(0X32EEE);
	MakeCode	(x=0X32EF4);
	OpStkvar	(x,	1);
	MakeCode	(0X32F08);
	MakeCode	(0X32F46);
	MakeCode	(x=0X32F54);
	OpSign		(x,	1);
	MakeCode	(0X32F7A);
	MakeCode	(0X32F84);
	MakeCode	(0X32FF0);
	MakeCode	(0X32FFC);
	MakeCode	(0X3300A);
	MakeCode	(0X33018);
	MakeCode	(0X33026);
	MakeCode	(0X3303E);
	MakeCode	(x=0X33064);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3306A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X33070);
	OpStkvar	(x,	1);
	MakeCode	(x=0X33076);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3308E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X33094);
	OpStkvar	(x,	1);
	MakeCode	(0X330AC);
	MakeCode	(x=0X330C2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X330D0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3312C);
	OpStkvar	(x,	1);
	MakeCode	(0X33148);
	MakeCode	(0X33156);
	MakeCode	(0X3315A);
	MakeCode	(x=0X3318E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X33196);
	OpStkvar	(x,	1);
	MakeCode	(x=0X331A0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X331A8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X331B4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X331C0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X331F4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X33218);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3321C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3326C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X33274);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3327A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X33294);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3329E);
	OpStkvar	(x,	1);
	MakeCode	(0X332A8);
	MakeCode	(0X332B4);
	MakeCode	(x=0X33304);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3330C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X33340);
	OpStkvar	(x,	1);
	MakeCode	(0X33366);
	MakeCode	(x=0X33370);
	OpStkvar	(x,	1);
	MakeCode	(x=0X33382);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3338E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3339A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X333C2);
	OpStkvar	(x,	0);
	MakeCode	(x=0X333CE);
	OpStkvar	(x,	1);
	MakeCode	(0X333E6);
	MakeCode	(x=0X3342E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X33448);
	OpStkvar	(x,	1);
	MakeCode	(x=0X334A6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X334C0);
	OpStkvar	(x,	1);
	MakeCode	(0X334DE);
	MakeCode	(0X334E6);
	MakeCode	(0X334F8);
	MakeCode	(0X33530);
	MakeCode	(0X33540);
	MakeCode	(0X33566);
	MakeCode	(0X335AA);
	MakeCode	(0X335BA);
	MakeCode	(0X335E4);
	MakeCode	(0X3362A);
	MakeCode	(0X3364C);
	MakeCode	(0X33662);
	MakeCode	(0X33666);
	MakeCode	(0X3366E);
	MakeCode	(0X33672);
	MakeCode	(0X3367E);
	MakeCode	(0X33692);
	MakeCode	(0X3369C);
	MakeCode	(0X3370E);
	MakeCode	(0X3372C);
	MakeCode	(0X3373C);
	MakeCode	(0X33756);
	MakeCode	(0X33794);
	MakeCode	(0X337A8);
	MakeCode	(0X337C6);
	MakeCode	(0X337D6);
	MakeCode	(0X337EE);
	MakeCode	(0X3382C);
	MakeCode	(0X33850);
	MakeCode	(0X33880);
	MakeCode	(0X338A8);
	MakeCode	(0X338CE);
	MakeCode	(0X338FC);
	MakeCode	(0X33924);
	MakeCode	(0X33930);
	MakeCode	(x=0X33938);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X33942);
	MakeCode	(0X33946);
	MakeCode	(0X339EA);
	MakeCode	(0X33A3A);
	MakeCode	(0X33A3E);
	MakeCode	(0X33A74);
	MakeCode	(0X33A96);
	MakeCode	(0X33AC6);
	MakeCode	(0X33AE2);
	MakeCode	(0X33B48);
	MakeCode	(0X33B4A);
	MakeCode	(0X33B84);
	MakeCode	(x=0X33B88);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X33B92);
	MakeCode	(0X33B96);
	MakeCode	(0X33BDC);
	MakeCode	(0X33BDE);
	MakeCode	(0X33BE2);
	MakeCode	(0X33C4C);
	MakeCode	(0X33CBE);
	MakeCode	(x=0X33CF8);
	OpStkvar	(x,	1);
	MakeCode	(0X33D02);
	MakeCode	(0X33D2A);
	MakeCode	(0X33D56);
	MakeCode	(0X33DF4);
	MakeCode	(0X33E7E);
	MakeCode	(0X33E90);
	MakeCode	(0X33EA0);
	MakeCode	(0X33EB0);
	MakeCode	(0X33EC0);
	MakeCode	(0X33EC8);
	MakeCode	(x=0X33EEC);
	OpStkvar	(x,	1);
	MakeCode	(0X33EF4);
	MakeCode	(0X33F0E);
	MakeCode	(0X33F14);
	MakeCode	(x=0X33F24);
	OpStkvar	(x,	1);
	MakeCode	(0X33F48);
	MakeCode	(0X33F6E);
	MakeCode	(x=0X33F80);
	OpStkvar	(x,	1);
	MakeCode	(0X33F8A);
	MakeCode	(0X33FA0);
	MakeCode	(x=0X33FB2);
	OpStkvar	(x,	1);
	MakeCode	(0X33FBC);
	MakeCode	(0X33FC6);
	MakeCode	(x=0X33FD8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X34022);
	OpStkvar	(x,	1);
	MakeCode	(0X3406A);
	MakeCode	(0X340A8);
	MakeCode	(x=0X340AC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X340C6);
	OpStkvar	(x,	1);
	MakeCode	(0X340D0);
	MakeCode	(0X340DE);
	MakeCode	(0X3411E);
	MakeCode	(x=0X34122);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3413C);
	OpStkvar	(x,	1);
	MakeCode	(0X34146);
	MakeCode	(0X34150);
	MakeCode	(0X34180);
	MakeCode	(0X341B4);
	MakeCode	(0X341D2);
	MakeCode	(0X341EC);
	MakeCode	(0X34220);
	MakeCode	(0X3423E);
	MakeCode	(0X3424A);
	MakeCode	(0X3429E);
	MakeCode	(0X342A4);
	MakeCode	(0X342BC);
	MakeCode	(0X342D0);
	MakeCode	(0X342E4);
	MakeCode	(0X342EE);
	MakeCode	(0X3434A);
	MakeCode	(0X34350);
	MakeCode	(0X34368);
	MakeCode	(0X34384);
	MakeCode	(0X34388);
	MakeCode	(0X343AC);
	MakeCode	(0X343C0);
	MakeCode	(0X343DC);
	MakeCode	(0X343F8);
	MakeCode	(0X343FC);
	MakeCode	(0X34420);
	MakeCode	(0X3442A);
	MakeCode	(0X34440);
	MakeCode	(x=0X3444E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X34456);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X34460);
	MakeCode	(0X344B0);
	MakeCode	(x=0X344B6);
	OpSign		(x,	1);
	MakeCode	(0X344C8);
	MakeCode	(x=0X344E2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X344E6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X34502);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3451C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X34530);
	OpStkvar	(x,	0);
	OpStkvar	(x,	1);
	MakeCode	(0X34550);
	MakeCode	(0X3457E);
	MakeCode	(0X345A6);
	MakeCode	(x=0X345CA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X345DC);
	OpStkvar	(x,	1);
	MakeCode	(0X345E6);
	MakeCode	(0X345FA);
	MakeCode	(0X34628);
	MakeCode	(x=0X3462C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X34636);
	MakeCode	(0X34638);
	MakeCode	(0X3463A);
	MakeCode	(0X34650);
	MakeCode	(0X34656);
	MakeCode	(0X34658);
	MakeCode	(0X34678);
	MakeCode	(0X3467E);
	MakeCode	(0X34694);
	MakeCode	(0X346B4);
	MakeCode	(0X346CA);
	MakeCode	(0X34722);
	MakeCode	(0X34726);
	MakeCode	(0X3472E);
	MakeCode	(0X3474E);
	MakeCode	(0X34768);
	MakeCode	(0X3477C);
	MakeCode	(0X3478E);
	MakeCode	(0X347AA);
	MakeCode	(0X347BE);
	MakeCode	(0X347C6);
	MakeCode	(0X347DC);
	MakeCode	(0X347FE);
	MakeCode	(0X3480A);
	MakeCode	(x=0X3482A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3483E);
	OpStkvar	(x,	1);
	MakeCode	(0X34852);
	MakeCode	(x=0X3485A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X34864);
	MakeCode	(0X34890);
	MakeCode	(0X348B0);
	MakeCode	(0X348BE);
	MakeCode	(x=0X348C6);
	OpSign		(x,	1);
	MakeCode	(x=0X348CE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X348F4);
	MakeCode	(0X3491C);
	MakeCode	(x=0X34920);
	OpStkvar	(x,	1);
	MakeCode	(x=0X34928);
	OpStkvar	(x,	0);
	MakeCode	(x=0X34936);
	OpStkvar	(x,	1);
	MakeCode	(x=0X34940);
	OpStkvar	(x,	0);
	MakeCode	(0X349AC);
	MakeRptCmt	(0X349B2,	"fuel priming start time");
	MakeCode	(x=0X349B2);
	OpStkvar	(x,	1);
	MakeRptCmt	(0X349B8,	"\"clock\" time");
	MakeCode	(x=0X349BC);
	OpStkvar	(x,	0);
	MakeCode	(0X349CE);
	MakeCode	(0X349E2);
	MakeCode	(x=0X349E6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X349F0);
	MakeCode	(0X349F4);
	MakeCode	(0X34A00);
	MakeCode	(0X34A08);
	MakeCode	(0X34A82);
	MakeCode	(0X34A84);
	MakeCode	(0X34A86);
	MakeCode	(x=0X34B00);
	OpSign		(x,	1);
	MakeCode	(0X34B28);
	MakeCode	(0X34B52);
	MakeCode	(0X34B72);
	MakeCode	(0X34B7C);
	MakeCode	(x=0X34B9A);
	OpStkvar	(x,	1);
	MakeCode	(0X34BA8);
	MakeCode	(0X34BB0);
	MakeCode	(0X34BB6);
	MakeCode	(x=0X34BB8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X34BD8);
	OpStkvar	(x,	0);
	MakeCode	(0X34BE8);
	MakeCode	(0X34BF0);
	MakeCode	(0X34BF6);
	MakeCode	(x=0X34BF8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X34C02);
	OpStkvar	(x,	0);
	MakeCode	(x=0X34C08);
	OpStkvar	(x,	1);
	MakeCode	(0X34C0E);
	MakeCode	(x=0X34C14);
	OpStkvar	(x,	0);
	MakeCode	(x=0X34C1A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X34C52);
	OpStkvar	(x,	1);
	MakeCode	(x=0X34C56);
	OpStkvar	(x,	0);
	MakeCode	(x=0X34C6A);
	OpStkvar	(x,	1);
	MakeCode	(0X34C78);
	MakeCode	(0X34C80);
	MakeCode	(0X34C86);
	MakeCode	(x=0X34C88);
	OpStkvar	(x,	1);
	MakeCode	(x=0X34CA0);
	OpStkvar	(x,	0);
	MakeCode	(0X34CB0);
	MakeCode	(0X34CB8);
	MakeCode	(0X34CBE);
	MakeCode	(x=0X34CC0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X34CC4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X34CCA);
	OpStkvar	(x,	1);
	MakeCode	(0X34CD0);
	MakeCode	(x=0X34CD6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X34CDC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X34D0C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X34D10);
	OpStkvar	(x,	0);
	MakeCode	(0X34D2C);
	MakeCode	(x=0X34D34);
	OpStkvar	(x,	1);
	MakeCode	(0X34D4C);
	MakeCode	(0X34D66);
	MakeCode	(x=0X34D6E);
	OpStkvar	(x,	1);
	MakeCode	(0X34D86);
	MakeCode	(0X34D98);
	MakeCode	(0X34E06);
	MakeCode	(0X34E16);
	MakeCode	(0X34E28);
	MakeCode	(0X34E8C);
	MakeCode	(0X34E9C);
	MakeCode	(0X34EC0);
	MakeCode	(0X34EE2);
	MakeCode	(x=0X34EFC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X34F10);
	MakeCode	(0X34F30);
	MakeCode	(x=0X34F3C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X34F44);
	MakeCode	(0X34F52);
	MakeCode	(x=0X34F58);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X34F60);
	MakeCode	(x=0X34F86);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X34F9A);
	MakeCode	(x=0X34FB6);
	OpStkvar	(x,	1);
	MakeCode	(0X34FE0);
	MakeCode	(0X34FE6);
	MakeCode	(x=0X34FF2);
	OpStkvar	(x,	1);
	MakeCode	(0X35008);
	MakeCode	(x=0X35026);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X3503A);
	MakeCode	(0X35048);
	MakeCode	(x=0X35054);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X3505C);
	MakeCode	(0X3506A);
	MakeCode	(x=0X35070);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X35078);
	MakeCode	(x=0X350A2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X350B6);
	MakeCode	(0X350F2);
	MakeCode	(0X350F8);
	MakeCode	(x=0X35104);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3510C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X35110);
	OpStkvar	(x,	1);
	MakeCode	(0X35126);
	MakeCode	(0X35138);
	MakeCode	(x=0X35148);
	OpStkvar	(x,	1);
	MakeCode	(x=0X35152);
	OpStkvar	(x,	1);
	MakeCode	(0X35158);
	MakeCode	(x=0X35168);
	OpStkvar	(x,	1);
	MakeCode	(x=0X35174);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3517A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3518C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X351A6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X351BA);
	MakeCode	(x=0X351D4);
	OpStkvar	(x,	1);
	MakeCode	(0X351E4);
	MakeCode	(0X3520C);
	MakeCode	(0X35220);
	MakeCode	(x=0X35230);
	OpStkvar	(x,	1);
	MakeCode	(0X35236);
	MakeCode	(x=0X35248);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3527A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3527E);
	OpStkvar	(x,	0);
	MakeCode	(0X35290);
	MakeCode	(x=0X3529A);
	OpStkvar	(x,	1);
	MakeCode	(0X352A4);
	MakeCode	(x=0X352BC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X352CA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X352D0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X352D6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X352DA);
	OpStkvar	(x,	1);
	MakeCode	(0X352F0);
	MakeCode	(0X35302);
	MakeCode	(x=0X35312);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3531C);
	OpStkvar	(x,	1);
	MakeCode	(0X35322);
	MakeCode	(x=0X35332);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3533E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X35344);
	OpStkvar	(x,	0);
	MakeCode	(x=0X35356);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3536E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X35382);
	MakeCode	(x=0X3539C);
	OpStkvar	(x,	1);
	MakeCode	(0X353AC);
	MakeCode	(0X353D4);
	MakeCode	(x=0X353E6);
	OpStkvar	(x,	1);
	MakeCode	(0X353EC);
	MakeCode	(x=0X353FC);
	OpStkvar	(x,	1);
	MakeCode	(0X35402);
	MakeCode	(x=0X35414);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3542A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X35442);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3544A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X35450);
	OpStkvar	(x,	0);
	MakeCode	(0X3545E);
	MakeCode	(x=0X35468);
	OpStkvar	(x,	1);
	MakeCode	(0X35472);
	MakeCode	(x=0X3547C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3548E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3549C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X354A2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X354B4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X354C4);
	OpStkvar	(x,	0);
	MakeCode	(0X354CE);
	MakeCode	(x=0X354E0);
	OpStkvar	(x,	0);
	MakeCode	(0X354EC);
	MakeCode	(x=0X354F8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X35500);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3550A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X35514);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3551A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3551E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3552A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X35560);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3556C);
	OpStkvar	(x,	0);
	MakeCode	(0X355CA);
	MakeCode	(0X355E4);
	MakeCode	(x=0X35604);
	OpStkvar	(x,	0);
	MakeCode	(0X3561E);
	MakeCode	(0X35652);
	MakeCode	(0X356C0);
	MakeCode	(0X356DA);
	MakeCode	(x=0X356F8);
	OpStkvar	(x,	0);
	MakeCode	(0X35712);
	MakeCode	(0X35746);
	MakeCode	(0X35762);
	MakeCode	(0X3576A);
	MakeCode	(0X3577C);
	MakeCode	(x=0X35784);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X3578E);
	MakeCode	(0X35790);
	MakeCode	(0X3579E);
	MakeCode	(0X357A0);
	MakeCode	(0X357A2);
	MakeCode	(0X357CA);
	MakeCode	(0X35806);
	MakeCode	(0X3580C);
	MakeCode	(0X3589A);
	MakeCode	(0X358B2);
	MakeCode	(0X358F0);
	MakeCode	(0X3591C);
	MakeCode	(0X3593C);
	MakeCode	(0X35952);
	MakeCode	(0X35966);
	MakeCode	(0X359BC);
	MakeCode	(0X35A30);
	MakeCode	(0X35A74);
	MakeCode	(0X35A7A);
	MakeCode	(0X35A8E);
	MakeCode	(0X35B4A);
	MakeCode	(0X35B76);
	MakeCode	(0X35B80);
	MakeCode	(0X35BE4);
	MakeCode	(0X35BEC);
	MakeCode	(0X35C1A);
	MakeCode	(0X35C22);
	MakeCode	(0X35C4E);
	MakeCode	(x=0X35C5A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X35C64);
	MakeCode	(0X35C84);
	MakeCode	(0X35C8C);
	MakeCode	(0X35C94);
	MakeCode	(0X35C9C);
	MakeCode	(0X35CAA);
	MakeCode	(0X35CC0);
	MakeCode	(0X35CF4);
	MakeCode	(0X35CFC);
	MakeCode	(0X35D1C);
	MakeCode	(0X35D32);
	MakeCode	(0X35D4A);
	MakeCode	(0X35D72);
	MakeCode	(0X35DAC);
	MakeCode	(0X35DB2);
	MakeCode	(0X35DDA);
	MakeCode	(0X35E5C);
	MakeCode	(0X35E70);
	MakeCode	(0X35E82);
	MakeCode	(0X35EB2);
	MakeCode	(0X35ED6);
	MakeCode	(0X35EF8);
	MakeCode	(0X35F0A);
	MakeCode	(x=0X35F12);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X35F18);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X35F42);
	MakeCode	(0X35FC0);
	MakeCode	(0X35FDE);
	MakeCode	(0X35FF0);
	MakeCode	(0X36004);
	MakeCode	(0X3600A);
	MakeCode	(0X3601A);
	MakeCode	(0X36030);
	MakeCode	(0X36034);
	MakeCode	(0X36060);
	MakeCode	(0X36066);
	MakeCode	(0X36090);
	MakeCode	(0X360A2);
	MakeCode	(0X360BE);
	MakeCode	(0X360DE);
	MakeCode	(0X360FC);
	MakeCode	(0X36118);
	MakeCode	(0X36134);
	MakeCode	(0X3614E);
	MakeCode	(0X36164);
	MakeCode	(0X36178);
	MakeCode	(0X36188);
	MakeCode	(0X3619E);
	MakeCode	(0X361B0);
	MakeCode	(0X361CE);
	MakeCode	(0X361F0);
	MakeCode	(0X361FC);
	MakeCode	(0X36206);
	MakeCode	(0X3621A);
	MakeCode	(x=0X3622E);
	OpSign		(x,	1);
	MakeCode	(x=0X36238);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3624E);
	OpStkvar	(x,	1);
	MakeCode	(0X36264);
	MakeCode	(0X36280);
	MakeCode	(x=0X3629E);
	OpStkvar	(x,	1);
	MakeCode	(0X362F6);
	MakeCode	(0X36314);
	MakeCode	(0X36320);
	MakeCode	(0X36332);
	MakeCode	(0X36350);
	MakeCode	(x=0X36376);
	OpStkvar	(x,	1);
	MakeCode	(0X36396);
	MakeCode	(x=0X363B8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X363C6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X363D0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X363E0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X363EA);
	OpStkvar	(x,	0);
	MakeCode	(0X36406);
	MakeCode	(x=0X36412);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3641C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X36426);
	OpStkvar	(x,	0);
	MakeCode	(x=0X36436);
	OpStkvar	(x,	1);
	MakeCode	(x=0X36440);
	OpStkvar	(x,	0);
	MakeCode	(x=0X36450);
	OpStkvar	(x,	1);
	MakeCode	(x=0X36458);
	OpStkvar	(x,	0);
	MakeCode	(x=0X36468);
	OpStkvar	(x,	0);
	MakeCode	(0X3647C);
	MakeCode	(0X364E2);
	MakeCode	(0X36510);
	MakeCode	(0X3652C);
	MakeCode	(0X36548);
	MakeCode	(0X36562);
	MakeCode	(0X36572);
	MakeCode	(0X36578);
	MakeCode	(0X365AA);
	MakeCode	(0X365BA);
	MakeCode	(0X365E8);
	MakeCode	(0X36606);
	MakeCode	(0X36638);
	MakeCode	(0X36660);
	MakeCode	(0X3668A);
	MakeCode	(0X366A8);
	MakeCode	(0X366AE);
	MakeCode	(0X366BE);
	MakeCode	(0X366D4);
	MakeCode	(0X366DE);
	MakeCode	(0X366E4);
	MakeCode	(0X36702);
	MakeCode	(0X36724);
	MakeCode	(0X36738);
	MakeCode	(0X3675A);
	MakeCode	(x=0X36764);
	OpSign		(x,	1);
	MakeCode	(x=0X3676C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X3678C);
	MakeCode	(0X367C0);
	MakeCode	(0X367D2);
	MakeCode	(0X367E6);
	MakeCode	(0X36834);
	MakeCode	(0X36846);
	MakeCode	(0X36868);
	MakeCode	(0X3689A);
	MakeCode	(0X368D4);
	MakeCode	(0X368F8);
	MakeCode	(0X3693C);
	MakeCode	(0X3694E);
	MakeCode	(0X3695E);
	MakeCode	(0X3697E);
	MakeCode	(0X36990);
	MakeCode	(0X369A2);
	MakeCode	(0X369B2);
	MakeCode	(0X369D8);
	MakeCode	(x=0X369DC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X369E6);
	OpStkvar	(x,	0);
	MakeCode	(0X36A00);
	MakeCode	(0X36A10);
	MakeCode	(0X36A32);
	MakeCode	(0X36A4C);
	MakeCode	(0X36A50);
	MakeCode	(0X36A68);
	MakeCode	(0X36A74);
	MakeCode	(0X36A8C);
	MakeCode	(0X36AAA);
	MakeCode	(0X36AE4);
	MakeCode	(0X36B0E);
	MakeCode	(0X36B40);
	MakeCode	(x=0X36BBA);
	OpSign		(x,	1);
	MakeCode	(0X36BDA);
	MakeCode	(x=0X36BE0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X36C2E);
	MakeCode	(0X36C58);
	MakeCode	(0X36C66);
	MakeCode	(0X36C82);
	MakeCode	(0X36CB6);
	MakeCode	(0X36CC8);
	MakeRptCmt	(0X36CCC,	"IAC_AIRFLOW_KV_THROTTLE_FOLLOWER_AIRFLOW");
	MakeRptCmt	(0X36CF6,	"get follower decay rate and delay time");
	MakeCode	(0X36CF6);
	MakeCode	(0X36D2A);
	MakeCode	(0X36D3E);
	MakeRptCmt	(0X36D40,	"look up IAC_AIRFLOW_KV_NO_GEAR_TF_DECAY_AIRFLOW");
	MakeCode	(0X36D64);
	MakeCode	(0X36D76);
	MakeRptCmt	(0X36D7A,	"IAC_AIRFLOW_KV_NO_GEAR_TF_DELAY_TIME");
	MakeCode	(0X36D84);
	MakeCode	(0X36D90);
	MakeCode	(0X36DB2);
	MakeCode	(0X36DC6);
	MakeRptCmt	(0X36DD0,	"IAC_AIRFLOW_KA_GEAR_TF_DECAY_AIRFLOW");
	MakeCode	(x=0X36DD8);
	OpStkvar	(x,	1);
	MakeCode	(0X36DFE);
	MakeCode	(0X36E10);
	MakeCode	(x=0X36E22);
	OpStkvar	(x,	1);
	MakeCode	(x=0X36E2C);
	OpStkvar	(x,	0);
	MakeRptCmt	(0X36E48,	"cancel delay timer?");
	MakeCode	(0X36E48);
	MakeRptCmt	(0X36E4E,	"cancel delay timer");
	MakeCode	(0X36E5A);
	MakeCode	(0X36E72);
	MakeCode	(0X36E88);
	MakeCode	(0X36E9A);
	MakeCode	(0X36EAE);
	MakeCode	(0X36ECA);
	MakeCode	(0X36EDA);
	MakeCode	(0X36EE0);
	MakeCode	(0X36F00);
	MakeCode	(0X36F08);
	MakeCode	(0X36F16);
	MakeCode	(0X36F1C);
	MakeCode	(0X36F36);
	MakeCode	(0X36F4A);
	MakeCode	(0X36F4E);
	MakeCode	(0X36F56);
	MakeCode	(0X36F6A);
	MakeCode	(0X36F6E);
	MakeCode	(0X36F76);
	MakeCode	(0X36F8A);
	MakeCode	(0X36F8E);
	MakeCode	(0X36F96);
	MakeCode	(0X36FD6);
	MakeCode	(0X36FDA);
	MakeCode	(0X36FE2);
	MakeCode	(0X36FF6);
	MakeCode	(0X36FFA);
	MakeCode	(0X37002);
	MakeCode	(0X3700C);
	MakeCode	(0X3701A);
	MakeCode	(0X3701E);
	MakeCode	(0X37026);
	MakeCode	(0X3703A);
	MakeCode	(0X3703E);
	MakeCode	(0X37046);
	MakeCode	(0X37062);
	MakeCode	(0X37066);
	MakeCode	(0X3706E);
	MakeCode	(0X37090);
	MakeCode	(0X37094);
	MakeCode	(0X3709C);
	MakeCode	(0X370B4);
	MakeCode	(0X370C4);
	MakeCode	(0X370C8);
	MakeCode	(0X370DA);
	MakeCode	(0X3710A);
	MakeCode	(0X37118);
	MakeCode	(0X37126);
	MakeCode	(0X3712E);
	MakeCode	(0X37134);
	MakeCode	(0X37142);
	MakeCode	(x=0X3714E);
	OpSign		(x,	1);
	MakeName	(0X3714E,	"IsIdleAirLearningActive");
	MakeCode	(0X37260);
	MakeCode	(x=0X372B4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X37304);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3730E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X37348);
	OpStkvar	(x,	1);
	MakeCode	(x=0X37352);
	OpStkvar	(x,	0);
	MakeCode	(0X373AE);
	MakeCode	(0X373D0);
	MakeCode	(0X373EA);
	MakeCode	(0X373FE);
	MakeCode	(0X3743A);
	MakeCode	(0X37448);
	MakeCode	(0X3744E);
	MakeCode	(0X37486);
	MakeCode	(0X3748C);
	MakeCode	(0X37502);
	MakeCode	(0X37508);
	MakeCode	(0X37516);
	MakeCode	(0X3751E);
	MakeCode	(0X37532);
	MakeCode	(0X37538);
	MakeCode	(0X3754E);
	MakeCode	(0X37554);
	MakeCode	(0X37576);
	MakeCode	(0X3757C);
	MakeCode	(0X37592);
	MakeCode	(0X37598);
	MakeCode	(0X375BE);
	MakeCode	(0X375C4);
	MakeCode	(0X375FA);
	MakeCode	(0X37600);
	MakeCode	(0X37616);
	MakeCode	(0X3761C);
	MakeCode	(0X3763E);
	MakeCode	(0X37644);
	MakeCode	(0X3765A);
	MakeCode	(0X37660);
	MakeCode	(0X37688);
	MakeCode	(0X376CA);
	MakeCode	(0X376EC);
	MakeCode	(x=0X37708);
	OpStkvar	(x,	1);
	MakeCode	(0X37724);
	MakeCode	(0X3773E);
	MakeCode	(0X37746);
	MakeCode	(0X3774E);
	MakeCode	(0X378B2);
	MakeCode	(0X378C6);
	MakeCode	(0X378D2);
	MakeCode	(x=0X378F8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X37906);
	MakeCode	(0X37912);
	MakeCode	(0X37932);
	MakeCode	(0X37946);
	MakeCode	(0X3796C);
	MakeCode	(0X3797C);
	MakeCode	(0X3798A);
	MakeCode	(0X3799E);
	MakeCode	(0X379AC);
	MakeCode	(0X379B4);
	MakeCode	(0X379CA);
	MakeCode	(0X379EE);
	MakeCode	(0X37A02);
	MakeCode	(0X37A18);
	MakeCode	(0X37A3C);
	MakeCode	(0X37A50);
	MakeCode	(0X37A70);
	MakeCode	(0X37A82);
	MakeCode	(0X37AAA);
	MakeCode	(0X37AD2);
	MakeCode	(0X37AF8);
	MakeCode	(0X37B1E);
	MakeCode	(0X37B4E);
	MakeCode	(0X37B60);
	MakeCode	(0X37B9A);
	MakeCode	(0X37BB2);
	MakeCode	(0X37C08);
	MakeCode	(0X37C0E);
	MakeCode	(0X37C14);
	MakeCode	(0X37C1A);
	MakeCode	(0X37C20);
	MakeCode	(0X37C3C);
	MakeCode	(0X37C42);
	MakeCode	(0X37C48);
	MakeCode	(0X37C4E);
	MakeCode	(0X37C54);
	MakeCode	(0X37C70);
	MakeCode	(0X37C94);
	MakeCode	(0X37CAE);
	MakeCode	(0X37CC2);
	MakeCode	(0X37CDC);
	MakeCode	(0X37CFA);
	MakeCode	(0X37D16);
	MakeCode	(0X37D2E);
	MakeCode	(0X37D42);
	MakeCode	(0X37D56);
	MakeCode	(0X37D8C);
	MakeCode	(0X37DB4);
	MakeCode	(0X37DCE);
	MakeCode	(0X37DEE);
	MakeCode	(0X37E1A);
	MakeCode	(0X37E50);
	MakeCode	(0X37E66);
	MakeCode	(0X37E7E);
	MakeCode	(0X37E8C);
	MakeCode	(0X37E94);
	MakeCode	(0X37EAE);
	MakeCode	(0X37EBC);
	MakeCode	(0X37EC0);
	MakeCode	(0X37EE6);
	MakeCode	(0X37F08);
	MakeCode	(0X37F12);
	MakeCode	(0X37F28);
	MakeCode	(0X37F4A);
	MakeCode	(0X37F6C);
	MakeCode	(0X37F78);
	MakeCode	(0X37F8C);
	MakeCode	(0X37FAE);
	MakeCode	(x=0X37FC2);
	OpSign		(x,	1);
	MakeCode	(0X3803A);
	MakeCode	(0X38042);
	MakeCode	(0X38058);
	MakeCode	(0X38072);
	MakeCode	(0X3809E);
	MakeCode	(0X380F2);
	MakeCode	(0X380FE);
	MakeCode	(x=0X38102);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X38130);
	MakeCode	(0X3814E);
	MakeCode	(0X38162);
	MakeCode	(0X3817E);
	MakeCode	(0X3818C);
	MakeCode	(0X3819E);
	MakeCode	(0X381AC);
	MakeCode	(x=0X381B6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X381C0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X381C6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X381CC);
	OpStkvar	(x,	0);
	MakeCode	(x=0X381D2);
	OpStkvar	(x,	0);
	MakeCode	(x=0X381D8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X381DE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X381E2);
	OpStkvar	(x,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X381EE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X381F6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X381FC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X38200);
	OpStkvar	(x,	0);
	MakeCode	(x=0X38226);
	OpSign		(x,	1);
	MakeCode	(x=0X3822E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X38238);
	MakeCode	(0X3824E);
	MakeCode	(0X382E8);
	MakeCode	(0X38320);
	MakeCode	(x=0X3832E);
	OpSign		(x,	1);
	MakeCode	(x=0X38360);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X3836C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X38376);
	OpStkvar	(x,	0);
	MakeCode	(0X3838E);
	MakeCode	(0X3839C);
	MakeCode	(0X38422);
	MakeCode	(0X38436);
	MakeCode	(0X3844E);
	MakeCode	(0X38456);
	MakeCode	(x=0X3846A);
	OpSign		(x,	1);
	MakeName	(0X3846A,	"DecideIdleMode");
	MakeCode	(0X384AC);
	MakeCode	(0X384D8);
	MakeCode	(0X3850A);
	MakeCode	(0X3851C);
	MakeRptCmt	(0X38520,	"IAC_REGULATORS_KV_STALL_SAVER_SPEED_NEUTRAL");
	MakeCode	(0X38528);
	MakeCode	(0X3853C);
	MakeCode	(0X3854E);
	MakeRptCmt	(0X38552,	"IAC_REGULATORS_KV_STALL_SAVER_SPEED_DRIVE");
	MakeCode	(0X3856A);
	MakeCode	(0X38586);
	MakeCode	(0X3864E);
	MakeCode	(0X3865C);
	MakeCode	(0X38682);
	MakeCode	(0X38692);
	MakeCode	(x=0X386A6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X386B2);
	OpStkvar	(x,	0);
	MakeCode	(x=0X386B6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X386C4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X386CA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X386D8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X386DE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X386EC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3871C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X38726);
	OpStkvar	(x,	0);
	MakeCode	(x=0X38738);
	OpStkvar	(x,	1);
	MakeCode	(x=0X38742);
	OpStkvar	(x,	0);
	MakeCode	(x=0X38754);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3875E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X38770);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3877A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X387B0);
	OpStkvar	(x,	1);
	MakeCode	(0X387C8);
	MakeCode	(x=0X387CE);
	OpStkvar	(x,	1);
	MakeCode	(0X387E6);
	MakeCode	(x=0X387EC);
	OpStkvar	(x,	1);
	MakeCode	(0X38804);
	MakeCode	(0X38834);
	MakeCode	(0X38864);
	MakeCode	(0X388A4);
	MakeCode	(0X388AE);
	MakeCode	(0X388C0);
	MakeCode	(0X388C4);
	MakeCode	(0X388E2);
	MakeCode	(0X3890A);
	MakeCode	(0X38998);
	MakeCode	(0X389AA);
	MakeRptCmt	(0X389AE,	"IAC_REGULATORS_KV_P_SPEED_HIGH_IN_PARK_NEUTRAL");
	MakeRptCmt	(0X389B4,	"Idle proportional lookup");
	MakeCode	(0X389C2);
	MakeCode	(0X389DA);
	MakeCode	(0X389F2);
	MakeCode	(0X38A08);
	MakeCode	(0X38A2A);
	MakeCode	(0X38A3C);
	MakeRptCmt	(0X38A40,	"IAC_REGULATORS_KV_P_SPEED_HIGH_IN_DRIVE_AC");
	MakeCode	(0X38A4A);
	MakeCode	(0X38A60);
	MakeCode	(0X38A72);
	MakeRptCmt	(0X38A76,	"IAC_REGULATORS_KV_P_SPEED_HIGH_IN_DRIVE");
	MakeCode	(0X38A80);
	MakeCode	(0X38A9E);
	MakeCode	(0X38AB6);
	MakeCode	(0X38AC4);
	MakeCode	(0X38AD6);
	MakeCode	(0X38AEE);
	MakeRptCmt	(0X38AF2,	"IAC_REGULATORS_KV_P_SPEED_HIGH_IN_PARK_NEUTRAL");
	MakeCode	(0X38AFC);
	MakeCode	(0X38B24);
	MakeCode	(0X38B44);
	MakeCode	(0X38BB4);
	MakeCode	(0X38BBA);
	MakeCode	(0X38BC4);
	MakeCode	(0X38BE6);
	MakeCode	(0X38BFC);
	MakeCode	(0X38C1E);
	MakeCode	(0X38C30);
	MakeCode	(0X38C40);
	MakeCode	(0X38C56);
	MakeCode	(0X38C78);
	MakeRptCmt	(0X38C7C,	"IAC_REGULATORS_KV_D_SPEED_DECREASING");
	MakeCode	(0X38CC4);
	MakeCode	(0X38CD0);
	MakeCode	(0X38CEA);
	MakeCode	(0X38D50);
	MakeCode	(0X38D64);
	MakeRptCmt	(0X38D68,	"IAC_REGULATORS_KV_I_SPEED_HIGH_IN_DRIVE");
	MakeCode	(0X38D70);
	MakeCode	(0X38D82);
	MakeCode	(0X38D96);
	MakeRptCmt	(0X38D9A,	"IAC_REGULATORS_KV_I_SPEED_HIGH_IN_PARK_NEUTRAL");
	MakeRptCmt	(0X38DA0,	"Idle integral table lookup");
	MakeCode	(0X38DAE);
	MakeCode	(0X38DD6);
	MakeCode	(0X38DEA);
	MakeRptCmt	(0X38DEE,	"IAC_REGULATORS_KV_I_SPEED_LOW_IN_DRIVE");
	MakeCode	(0X38DF6);
	MakeCode	(0X38E08);
	MakeCode	(0X38E1C);
	MakeRptCmt	(0X38E20,	"IAC_REGULATORS_KV_I_SPEED_LOW_IN_PARK_NEUTRAL");
	MakeCode	(0X38E2E);
	MakeCode	(0X38E7E);
	MakeCode	(0X38ECE);
	MakeCode	(0X38EE2);
	MakeRptCmt	(0X38F1A,	"PTO?");
	MakeCode	(0X38F2C);
	MakeCode	(0X38F42);
	MakeRptCmt	(0X38F54,	"PTO AC?");
	MakeCode	(0X38F66);
	MakeCode	(0X38F7C);
	MakeCode	(0X38FBC);
	MakeCode	(0X38FCE);
	MakeCode	(0X38FDC);
	MakeCode	(0X38FEE);
	MakeCode	(0X39000);
	MakeCode	(0X39040);
	MakeCode	(0X39052);
	MakeCode	(0X39060);
	MakeCode	(0X39072);
	MakeCode	(0X39084);
	MakeCode	(0X390C0);
	MakeCode	(0X390CE);
	MakeCode	(0X390E0);
	MakeCode	(0X390F2);
	MakeCode	(0X3912E);
	MakeCode	(0X3913C);
	MakeCode	(0X3914E);
	MakeCode	(0X39160);
	MakeCode	(0X3918A);
	MakeCode	(0X391BA);
	MakeCode	(0X391E6);
	MakeCode	(0X391FE);
	MakeCode	(0X39224);
	MakeCode	(0X3924C);
	MakeCode	(0X39274);
	MakeCode	(0X392C8);
	MakeCode	(0X392D0);
	MakeCode	(0X392E6);
	MakeCode	(0X3930E);
	MakeCode	(0X3932A);
	MakeCode	(0X39330);
	MakeCode	(0X39348);
	MakeCode	(0X3934E);
	MakeCode	(0X3935E);
	MakeCode	(0X39386);
	MakeCode	(0X3938A);
	MakeCode	(0X393BE);
	MakeCode	(0X393D0);
	MakeCode	(0X393DC);
	MakeCode	(0X3942C);
	MakeCode	(0X3944C);
	MakeCode	(0X3946C);
	MakeCode	(0X394DC);
	MakeCode	(0X39530);
	MakeCode	(0X39546);
	MakeCode	(0X395A2);
	MakeCode	(0X395CC);
	MakeCode	(0X395D6);
	MakeCode	(0X395E6);
	MakeCode	(0X395EC);
	MakeCode	(0X39602);
	MakeCode	(0X3964E);
	MakeCode	(0X39672);
	MakeCode	(x=0X39686);
	OpSign		(x,	1);
	MakeCode	(x=0X396A6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X396B0);
	OpStkvar	(x,	0);
	MakeCode	(0X396C0);
	MakeCode	(0X39702);
	MakeCode	(0X3971A);
	MakeCode	(0X39738);
	MakeCode	(0X3975A);
	MakeCode	(0X39768);
	MakeCode	(0X39786);
	MakeCode	(0X39792);
	MakeCode	(0X397B0);
	MakeCode	(0X397EC);
	MakeCode	(0X39846);
	MakeCode	(x=0X3984E);
	OpSign		(x,	1);
	MakeCode	(0X39874);
	MakeCode	(0X3989C);
	MakeCode	(0X398A0);
	MakeCode	(0X398FA);
	MakeCode	(0X39902);
	MakeCode	(x=0X3990E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X3991A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X39924);
	OpStkvar	(x,	0);
	MakeCode	(0X39940);
	MakeCode	(0X39944);
	MakeCode	(0X39952);
	MakeCode	(0X39994);
	MakeCode	(x=0X3999E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X399AA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X399B4);
	OpStkvar	(x,	0);
	MakeCode	(0X399BC);
	MakeCode	(0X399EC);
	MakeCode	(0X39A0E);
	MakeCode	(0X39A30);
	MakeCode	(0X39A52);
	MakeCode	(0X39AA8);
	MakeCode	(0X39AC6);
	MakeCode	(0X39AFE);
	MakeCode	(0X39B14);
	MakeCode	(0X39B32);
	MakeCode	(0X39BA0);
	MakeCode	(0X39BD6);
	MakeCode	(0X39BFE);
	MakeCode	(x=0X39C20);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X39C2A);
	MakeCode	(x=0X39C40);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X39C4A);
	MakeCode	(x=0X39C78);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X39C80);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X39C88);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X39C92);
	MakeCode	(x=0X39C96);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X39C9E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X39CA6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X39CC0);
	MakeCode	(0X39CEC);
	MakeCode	(0X39D34);
	MakeCode	(x=0X39D50);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X39D58);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X39D60);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X39D6A);
	MakeCode	(x=0X39D6E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X39D76);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X39D7E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X39D98);
	MakeCode	(0X39DC4);
	MakeCode	(x=0X39DFC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X39E12);
	OpSign		(x,	1);
	MakeCode	(x=0X39E2C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X39E36);
	MakeCode	(x=0X39E3A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X39E48);
	OpStkvar	(x,	1);
	MakeCode	(x=0X39E56);
	OpStkvar	(x,	0);
	MakeCode	(x=0X39E5A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X39E6A);
	MakeCode	(0X39EBE);
	MakeCode	(0X39EF2);
	MakeCode	(0X39F08);
	MakeCode	(0X39F12);
	MakeCode	(x=0X39F46);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X39F7A);
	MakeCode	(x=0X39F9E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X39FA6);
	MakeCode	(x=0X39FB6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X39FCE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X3A02E);
	MakeCode	(x=0X3A058);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X3A080);
	MakeCode	(x=0X3A09E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X3A0BE);
	MakeCode	(x=0X3A0E8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X3A11E);
	MakeCode	(0X3A12A);
	MakeCode	(x=0X3A154);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X3A17C);
	MakeCode	(x=0X3A19A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X3A1BA);
	MakeCode	(x=0X3A1E4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X3A218);
	MakeCode	(x=0X3A242);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X3A25E);
	MakeCode	(x=0X3A288);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X3A2A8);
	MakeCode	(x=0X3A2BA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X3A2D6);
	MakeCode	(x=0X3A2E0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X3A2FE);
	MakeCode	(0X3A30C);
	MakeCode	(0X3A318);
	MakeCode	(x=0X3A320);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X3A330);
	OpSign		(x,	1);
	MakeCode	(x=0X3A352);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3A35C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3A36A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X3A39A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X3A3D6);
	MakeCode	(0X3A3F4);
	MakeCode	(0X3A408);
	MakeCode	(0X3A40E);
	MakeCode	(0X3A41A);
	MakeCode	(0X3A420);
	MakeCode	(0X3A436);
	MakeCode	(0X3A462);
	MakeCode	(0X3A47A);
	MakeCode	(0X3A47E);
	MakeCode	(x=0X3A488);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X3A49A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X3A4BA);
	MakeCode	(0X3A4C4);
	MakeCode	(0X3A4CE);
	MakeCode	(0X3A500);
	MakeCode	(0X3A522);
	MakeCode	(0X3A53C);
	MakeCode	(0X3A550);
	MakeCode	(x=0X3A556);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X3A562);
	MakeCode	(0X3A56E);
	MakeCode	(0X3A57E);
	MakeCode	(0X3A594);
	MakeCode	(x=0X3A598);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X3A5B8);
	MakeCode	(0X3A5C4);
	MakeCode	(0X3A5CE);
	MakeCode	(0X3A5E2);
	MakeCode	(0X3A5F0);
	MakeCode	(x=0X3A5FA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X3A60E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X3A63E);
	MakeCode	(0X3A65C);
	MakeCode	(0X3A67A);
	MakeCode	(0X3A67E);
	MakeCode	(0X3A690);
	MakeCode	(0X3A6A2);
	MakeCode	(x=0X3A6A8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X3A6D0);
	MakeCode	(0X3A6EC);
	MakeCode	(0X3A70A);
	MakeCode	(0X3A70E);
	MakeCode	(0X3A71C);
	MakeCode	(x=0X3A722);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X3A754);
	MakeCode	(0X3A772);
	MakeCode	(0X3A790);
	MakeCode	(0X3A794);
	MakeCode	(0X3A7A6);
	MakeCode	(0X3A7B8);
	MakeCode	(x=0X3A7BE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X3A7F0);
	MakeCode	(0X3A80E);
	MakeCode	(0X3A812);
	MakeCode	(0X3A824);
	MakeCode	(0X3A836);
	MakeCode	(x=0X3A83C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X3A856);
	MakeCode	(0X3A86A);
	MakeCode	(0X3A880);
	MakeCode	(0X3A89A);
	MakeCode	(0X3A8A8);
	MakeCode	(0X3A90C);
	MakeCode	(x=0X3A918);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X3A922);
	MakeCode	(0X3A92A);
	MakeCode	(0X3A938);
	MakeCode	(0X3A946);
	MakeCode	(0X3A94E);
	MakeCode	(0X3A956);
	MakeCode	(0X3A95E);
	MakeCode	(0X3A966);
	MakeStr		(0X3A97F,	0X3A9A8);
	MakeName	(0X3A97F,	"aXsXsbXsrXsktc1");
	MakeCode	(0X3A9A8);
	MakeCode	(0X3A9EA);
	MakeCode	(0X3AA22);
	MakeCode	(0X3AA60);
	MakeCode	(0X3AA74);
	MakeCode	(0X3AA86);
	MakeCode	(0X3AAB2);
	MakeCode	(0X3AABC);
	MakeCode	(0X3AAEE);
	MakeCode	(0X3AAFC);
	MakeCode	(0X3AB50);
	MakeCode	(0X3AB76);
	MakeCode	(0X3AB80);
	MakeCode	(0X3ABA2);
	MakeCode	(0X3ABCA);
	MakeCode	(0X3ABD8);
	MakeCode	(0X3ABFA);
	MakeCode	(x=0X3AC2E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X3ACD6);
	MakeCode	(0X3ACF6);
	MakeCode	(0X3AD06);
	MakeCode	(0X3AD16);
	MakeCode	(0X3AD5E);
	MakeCode	(0X3AD72);
	MakeCode	(0X3AD86);
	MakeCode	(0X3ADBA);
	MakeCode	(0X3ADC8);
	MakeCode	(0X3ADE4);
	MakeCode	(0X3ADFE);
	MakeCode	(0X3AE12);
	MakeCode	(0X3AE1E);
	MakeCode	(0X3AE38);
	MakeCode	(0X3AE6C);
	MakeCode	(0X3AE86);
	MakeCode	(0X3AE9A);
	MakeCode	(0X3AEB8);
	MakeCode	(0X3AED0);
	MakeCode	(x=0X3AED4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X3AEF4);
	MakeCode	(0X3AF0C);
	MakeCode	(0X3AF52);
	MakeCode	(0X3AF5C);
	MakeCode	(x=0X3AF66);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X3AF94);
	MakeCode	(x=0X3AF9E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X3AFD2);
	MakeCode	(0X3B00A);
	MakeCode	(0X3B05C);
	MakeCode	(0X3B08A);
	MakeCode	(0X3B0AE);
	MakeCode	(0X3B0DA);
	MakeCode	(0X3B112);
	MakeCode	(0X3B11C);
	MakeCode	(0X3B12A);
	MakeCode	(0X3B1A0);
	MakeCode	(x=0X3B1A8);
	OpSign		(x,	1);
	MakeCode	(x=0X3B1B0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X3B1BC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X3B1C8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X3B1E4);
	MakeCode	(0X3B208);
	MakeCode	(x=0X3B230);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3B23A);
	OpStkvar	(x,	0);
	MakeCode	(0X3B260);
	MakeCode	(x=0X3B284);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3B28E);
	OpStkvar	(x,	0);
	MakeCode	(0X3B2A2);
	MakeCode	(x=0X3B2C6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3B2D0);
	OpStkvar	(x,	0);
	MakeCode	(0X3B2E2);
	MakeCode	(0X3B2EE);
	MakeCode	(0X3B2FC);
	MakeCode	(x=0X3B308);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3B312);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3B330);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3B33A);
	OpStkvar	(x,	0);
	MakeCode	(0X3B376);
	MakeCode	(0X3B37E);
	MakeCode	(0X3B38C);
	MakeCode	(0X3B3BE);
	MakeCode	(0X3B3DA);
	MakeCode	(x=0X3B3E4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X3B408);
	MakeCode	(0X3B42A);
	MakeCode	(0X3B436);
	MakeCode	(0X3B456);
	MakeCode	(0X3B468);
	MakeCode	(0X3B474);
	MakeCode	(x=0X3B490);
	OpStkvar	(x,	1);
	MakeCode	(0X3B498);
	MakeCode	(x=0X3B49E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X3B4A8);
	MakeCode	(0X3B516);
	MakeCode	(0X3B51A);
	MakeCode	(0X3B570);
	MakeCode	(x=0X3B5FA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X3B65A);
	MakeCode	(0X3B662);
	MakeCode	(x=0X3B6AC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X3B6BC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X3B6CC);
	MakeCode	(0X3B710);
	MakeCode	(0X3B72A);
	MakeCode	(0X3B730);
	MakeCode	(x=0X3B73C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X3B74C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X3B75C);
	MakeCode	(0X3B772);
	MakeCode	(0X3B78C);
	MakeCode	(x=0X3B7D0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X3B7E0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X3B7F0);
	MakeCode	(0X3B82A);
	MakeCode	(0X3B84E);
	MakeCode	(x=0X3B862);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X3B8DA);
	MakeCode	(0X3B8E8);
	MakeCode	(x=0X3B90C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X3B960);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X3B97C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X3B9A6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X3B9D0);
	MakeCode	(0X3B9DE);
	MakeCode	(0X3B9FA);
	MakeCode	(0X3BA08);
	MakeCode	(0X3BA1E);
	MakeCode	(0X3BA86);
	MakeCode	(x=0X3BA8A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X3BA94);
	MakeCode	(0X3BA96);
	MakeCode	(0X3BA98);
	MakeCode	(0X3BAA4);
	MakeCode	(0X3BAA6);
	MakeCode	(0X3BAA8);
	MakeCode	(0X3BAB2);
	MakeCode	(x=0X3BABE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X3BAD4);
	MakeCode	(0X3BAE4);
	MakeCode	(0X3BAF6);
	MakeCode	(0X3BB10);
	MakeCode	(0X3BB36);
	MakeCode	(0X3BB44);
	MakeCode	(0X3BB66);
	MakeCode	(x=0X3BBDE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X3BC14);
	MakeCode	(0X3BC2A);
	MakeCode	(0X3BC32);
	MakeCode	(0X3BC3A);
	MakeCode	(0X3BC4E);
	MakeCode	(x=0X3BC58);
	OpStkvar	(x,	1);
	MakeCode	(0X3BC60);
	MakeCode	(0X3BC68);
	MakeCode	(0X3BC80);
	MakeCode	(0X3BCCE);
	MakeCode	(0X3BCF4);
	MakeCode	(0X3BD08);
	MakeCode	(0X3BD52);
	MakeCode	(x=0X3BD66);
	OpStkvar	(x,	1);
	MakeCode	(0X3BD74);
	MakeCode	(0X3BDA0);
	MakeCode	(x=0X3BDB2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3BDC4);
	OpSign		(x,	1);
	MakeCode	(0X3BDF2);
	MakeCode	(0X3BDFC);
	MakeCode	(x=0X3BE0A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeRptCmt	(0X3BE10,	"d0 = multiplier");
	MakeRptCmt	(0X3BE14,	"Noise level?");
	MakeCode	(x=0X3BE14);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X3BE1A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeRptCmt	(0X3BE20,	"d1 = cylinder?");
	MakeCode	(x=0X3BE22);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeRptCmt	(0X3BE28,	"Knock sensor signal?");
	MakeCode	(x=0X3BE28);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X3BE30);
	MakeCode	(0X3BE46);
	MakeCode	(0X3BE50);
	MakeCode	(0X3BE5E);
	MakeCode	(x=0X3BE64);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X3BE7C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X3BE88);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X3BEAA);
	MakeCode	(0X3BEC8);
	MakeCode	(x=0X3BECC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X3BEFC);
	MakeCode	(0X3BF08);
	MakeCode	(x=0X3BF0C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X3BF38);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X3BF40);
	MakeCode	(x=0X3BF44);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X3BF56);
	MakeCode	(x=0X3BF60);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X3BF68);
	MakeCode	(x=0X3BF6C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X3BFBE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X3C03A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X3C04C);
	MakeCode	(x=0X3C052);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X3C090);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X3C0A4);
	MakeCode	(x=0X3C0A8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X3C0E0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X3C10A);
	MakeCode	(0X3C128);
	MakeCode	(0X3C134);
	MakeCode	(x=0X3C188);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3C18E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3C194);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3C198);
	OpStkvar	(x,	0);
	MakeCode	(0X3C1AC);
	MakeCode	(0X3C1CC);
	MakeCode	(x=0X3C1EE);
	OpSign		(x,	1);
	MakeCode	(x=0X3C200);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X3C208);
	MakeCode	(x=0X3C20C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X3C228);
	MakeCode	(0X3C268);
	MakeCode	(0X3C284);
	MakeCode	(0X3C28E);
	MakeCode	(0X3C2BA);
	MakeCode	(0X3C304);
	MakeCode	(0X3C30A);
	MakeCode	(x=0X3C320);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3C32A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3C330);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3C334);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3C340);
	OpStkvar	(x,	0);
	MakeCode	(0X3C34E);
	MakeCode	(0X3C36E);
	MakeCode	(0X3C37C);
	MakeCode	(0X3C38A);
	MakeCode	(x=0X3C392);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X3C3AE);
	MakeCode	(0X3C3BC);
	MakeCode	(x=0X3C3C0);
	OpStkvar	(x,	0);
	MakeCode	(0X3C3D0);
	MakeCode	(x=0X3C3D6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X3C428);
	MakeCode	(0X3C486);
	MakeCode	(0X3C4AC);
	MakeCode	(0X3C508);
	MakeCode	(0X3C516);
	MakeCode	(0X3C52C);
	MakeCode	(0X3C530);
	MakeCode	(0X3C598);
	MakeCode	(0X3C5BE);
	MakeCode	(0X3C5CC);
	MakeCode	(x=0X3C5D0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X3C638);
	MakeCode	(0X3C67C);
	MakeCode	(x=0X3C68C);
	OpSign		(x,	1);
	MakeCode	(x=0X3C698);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3C69E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3C6BC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3C6DC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X3C6F4);
	MakeCode	(x=0X3C702);
	OpStkvar	(x,	0);
	MakeCode	(0X3C72E);
	MakeCode	(0X3C778);
	MakeCode	(x=0X3C782);
	OpStkvar	(x,	0);
	MakeCode	(0X3C7FA);
	MakeCode	(0X3C826);
	MakeCode	(0X3C842);
	MakeCode	(0X3C8AC);
	MakeCode	(0X3C8BC);
	MakeCode	(x=0X3C8C4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X3C8F6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X3C8FE);
	MakeCode	(x=0X3C902);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X3C912);
	MakeCode	(x=0X3C91C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X3C924);
	MakeCode	(x=0X3C928);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X3C938);
	MakeCode	(0X3C954);
	MakeCode	(0X3C968);
	MakeCode	(x=0X3C97A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X3C992);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X3C9B0);
	MakeCode	(0X3C9C6);
	MakeCode	(0X3C9CA);
	MakeCode	(0X3CA02);
	MakeCode	(0X3CA24);
	MakeCode	(0X3CA28);
	MakeCode	(0X3CA2E);
	MakeCode	(0X3CA44);
	MakeCode	(x=0X3CA80);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X3CAD8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X3CAF0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X3CB3C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X3CB4E);
	MakeCode	(0X3CB5E);
	MakeCode	(x=0X3CB70);
	OpSign		(x,	1);
	MakeCode	(x=0X3CB82);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X3CB8C);
	MakeCode	(0X3CBCA);
	MakeCode	(x=0X3CC54);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3CC5A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3CC60);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3CC64);
	OpStkvar	(x,	0);
	MakeCode	(0X3CC78);
	MakeCode	(x=0X3CCA4);
	OpStkvar	(x,	1);
	MakeCode	(0X3CCC6);
	MakeCode	(x=0X3CCE6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X3CD08);
	MakeCode	(x=0X3CD16);
	OpSign		(x,	1);
	MakeCode	(0X3CD30);
	MakeCode	(0X3CD4E);
	MakeCode	(0X3CD52);
	MakeCode	(0X3CD60);
	MakeCode	(x=0X3CD66);
	OpStkvar	(x,	0);
	MakeCode	(0X3CD78);
	MakeCode	(0X3CDCE);
	MakeCode	(0X3CDD6);
	MakeCode	(0X3CDFA);
	MakeCode	(0X3CE0E);
	MakeCode	(0X3CE40);
	MakeCode	(0X3CE7A);
	MakeCode	(0X3CEB8);
	MakeCode	(0X3CEC0);
	MakeCode	(0X3CEE4);
	MakeCode	(0X3CEEC);
	MakeCode	(0X3CF10);
	MakeCode	(0X3CF18);
	MakeCode	(0X3CF3C);
	MakeCode	(0X3CF44);
	MakeCode	(0X3CF66);
	MakeCode	(0X3CF98);
	MakeCode	(0X3CFB2);
	MakeCode	(0X3CFD6);
	MakeCode	(0X3CFF0);
	MakeCode	(0X3D01E);
	MakeCode	(0X3D02C);
	MakeCode	(0X3D03A);
	MakeCode	(0X3D060);
	MakeCode	(0X3D076);
	MakeCode	(0X3D07C);
	MakeCode	(0X3D0A2);
	MakeCode	(0X3D0B0);
	MakeCode	(0X3D0D6);
	MakeCode	(0X3D0E4);
	MakeCode	(0X3D10A);
	MakeCode	(0X3D120);
	MakeCode	(0X3D128);
	MakeCode	(x=0X3D14A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X3D178);
	MakeCode	(0X3D192);
	MakeCode	(0X3D1AE);
	MakeCode	(0X3D1BC);
	MakeCode	(0X3D1E0);
	MakeCode	(0X3D1E8);
	MakeCode	(0X3D20C);
	MakeCode	(0X3D214);
	MakeCode	(0X3D238);
	MakeCode	(0X3D240);
	MakeCode	(0X3D266);
	MakeCode	(0X3D26E);
	MakeCode	(0X3D294);
	MakeCode	(0X3D2BA);
	MakeCode	(0X3D2DC);
	MakeCode	(0X3D2E4);
	MakeCode	(0X3D310);
	MakeCode	(0X3D31E);
	MakeCode	(0X3D344);
	MakeCode	(0X3D35A);
	MakeCode	(0X3D362);
	MakeCode	(0X3D3A0);
	MakeCode	(0X3D3B6);
	MakeCode	(0X3D3FC);
	MakeCode	(0X3D404);
	MakeCode	(0X3D42A);
	MakeCode	(0X3D438);
	MakeCode	(0X3D45A);
	MakeCode	(0X3D488);
	MakeCode	(0X3D4A4);
	MakeCode	(0X3D4D0);
	MakeCode	(0X3D4DE);
	MakeCode	(0X3D50E);
	MakeCode	(0X3D516);
	MakeCode	(0X3D53A);
	MakeCode	(0X3D542);
	MakeCode	(0X3D56C);
	MakeCode	(0X3D574);
	MakeCode	(0X3D59E);
	MakeCode	(0X3D5A6);
	MakeCode	(0X3D5CA);
	MakeCode	(0X3D5D2);
	MakeCode	(0X3D5EA);
	MakeCode	(0X3D606);
	MakeCode	(0X3D632);
	MakeCode	(0X3D638);
	MakeCode	(0X3D65C);
	MakeCode	(0X3D66C);
	MakeCode	(0X3D696);
	MakeCode	(0X3D69E);
	MakeCode	(0X3D6C4);
	MakeCode	(0X3D6DA);
	MakeCode	(0X3D6E2);
	MakeCode	(x=0X3D6FA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X3D714);
	MakeCode	(x=0X3D778);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X3D7A6);
	MakeCode	(x=0X3D7B0);
	OpSign		(x,	1);
	MakeCode	(x=0X3D7BE);
	OpStkvar	(x,	0);
	MakeCode	(0X3D862);
	MakeCode	(x=0X3D998);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3D9A2);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3D9AC);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3D9B6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3D9C0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3D9CA);
	OpStkvar	(x,	0);
	MakeCode	(0X3D9DE);
	MakeCode	(x=0X3DB3A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3DB44);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3DB4E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3DB58);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3DB62);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3DB6C);
	OpStkvar	(x,	0);
	MakeCode	(0X3DB7A);
	MakeCode	(x=0X3DBEC);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3DBF6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3DC00);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3DC0A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3DC14);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3DC1E);
	OpStkvar	(x,	0);
	MakeCode	(0X3DC2C);
	MakeCode	(0X3DC34);
	MakeCode	(0X3DC78);
	MakeCode	(0X3DC8E);
	MakeCode	(0X3DCC4);
	MakeCode	(0X3DCDA);
	MakeCode	(0X3DCEA);
	MakeCode	(0X3DCF6);
	MakeCode	(0X3DD00);
	MakeCode	(0X3DD18);
	MakeCode	(0X3DD26);
	MakeCode	(0X3DD34);
	MakeCode	(0X3DD42);
	MakeCode	(0X3DD56);
	MakeCode	(0X3DD74);
	MakeCode	(0X3DD8A);
	MakeCode	(0X3DD8C);
	MakeCode	(0X3DDB2);
	MakeCode	(0X3DDDC);
	MakeCode	(0X3DDE4);
	MakeCode	(0X3DE0C);
	MakeCode	(0X3DE26);
	MakeCode	(0X3DE40);
	MakeCode	(0X3DE42);
	MakeCode	(0X3DE5C);
	MakeCode	(0X3DE6C);
	MakeCode	(0X3DE6E);
	MakeCode	(0X3DE88);
	MakeCode	(0X3DEA2);
	MakeCode	(0X3DEA4);
	MakeCode	(0X3DEC2);
	MakeCode	(0X3DEE0);
	MakeCode	(0X3DEE2);
	MakeCode	(0X3DF02);
	MakeCode	(0X3DF14);
	MakeCode	(0X3DF16);
	MakeCode	(0X3DF44);
	MakeCode	(x=0X3DF4C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X3DF64);
	MakeCode	(0X3DF86);
	MakeCode	(0X3DF96);
	MakeCode	(0X3DFBA);
	MakeCode	(0X3DFF8);
	MakeCode	(0X3E040);
	MakeCode	(0X3E060);
	MakeCode	(0X3E0C2);
	MakeCode	(0X3E0D6);
	MakeCode	(0X3E0F6);
	MakeCode	(0X3E11E);
	MakeCode	(0X3E12E);
	MakeCode	(0X3E1B0);
	MakeCode	(0X3E1D2);
	MakeCode	(0X3E1DC);
	MakeCode	(0X3E1F0);
	MakeCode	(0X3E224);
	MakeCode	(0X3E234);
	MakeCode	(0X3E250);
	MakeCode	(0X3E2A0);
	MakeCode	(0X3E2B6);
	MakeCode	(0X3E2E2);
	MakeCode	(0X3E300);
	MakeCode	(0X3E316);
	MakeCode	(0X3E340);
	MakeCode	(0X3E346);
	MakeCode	(0X3E382);
	MakeCode	(0X3E39C);
	MakeCode	(0X3E3B6);
	MakeCode	(0X3E3D0);
	MakeCode	(0X3E3D6);
	MakeCode	(x=0X3E3FE);
	OpSign		(x,	1);
	MakeCode	(x=0X3E418);
	OpStkvar	(x,	0);
	MakeCode	(0X3E438);
	MakeCode	(0X3E454);
	MakeCode	(0X3E4B4);
	MakeCode	(x=0X3E4BC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X3E4CE);
	MakeCode	(x=0X3E4F2);
	OpSign		(x,	1);
	MakeCode	(0X3E51A);
	MakeCode	(0X3E526);
	MakeCode	(x=0X3E57A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X3E58E);
	MakeCode	(x=0X3E5BA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3E5C0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3E5C6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3E5D4);
	OpStkvar	(x,	0);
	MakeCode	(0X3E5DC);
	MakeCode	(x=0X3E610);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X3E61A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X3E624);
	MakeCode	(x=0X3E638);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X3E658);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X3E67E);
	MakeCode	(x=0X3E69E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X3E6BC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X3E6C6);
	MakeCode	(x=0X3E6E4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X3E6FC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X3E706);
	MakeCode	(x=0X3E74A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X3E754);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X3E75E);
	MakeCode	(x=0X3E77A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X3E79A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X3E7C0);
	MakeCode	(0X3E838);
	MakeCode	(0X3E84C);
	MakeCode	(0X3E860);
	MakeRptCmt	(0X3E872,	"Mod?");
	MakeCode	(x=0X3E878);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X3E882);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X3E8A4);
	MakeCode	(0X3E8DA);
	MakeCode	(x=0X3E928);
	OpSign		(x,	1);
	MakeCode	(x=0X3E936);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3E944);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3E94A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3E958);
	OpStkvar	(x,	0);
	MakeCode	(0X3E960);
	MakeCode	(x=0X3E968);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3E96E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3E97C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3E982);
	OpStkvar	(x,	0);
	MakeCode	(0X3E996);
	MakeCode	(x=0X3E99E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3E9A2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X3E9B4);
	OpSign		(x,	1);
	MakeCode	(x=0X3E9BE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3E9CA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3E9D0);
	OpStkvar	(x,	0);
	MakeCode	(0X3E9E0);
	MakeCode	(x=0X3E9E8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3E9F0);
	OpStkvar	(x,	0);
	MakeCode	(0X3EA02);
	MakeCode	(0X3EA34);
	MakeCode	(0X3EA5C);
	MakeCode	(x=0X3EA90);
	OpSign		(x,	1);
	MakeCode	(x=0X3EA9C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3EAAC);
	OpStkvar	(x,	1);
	MakeCode	(0X3EACE);
	MakeCode	(x=0X3EAFC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3EB0E);
	OpStkvar	(x,	1);
	MakeCode	(0X3EB1E);
	MakeCode	(x=0X3EB48);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3EB62);
	OpStkvar	(x,	1);
	MakeCode	(0X3EB68);
	MakeCode	(x=0X3EB72);
	OpStkvar	(x,	1);
	MakeCode	(0X3EB7E);
	MakeCode	(0X3EBA2);
	MakeCode	(0X3EBAE);
	MakeCode	(0X3EBB4);
	MakeCode	(x=0X3EBB6);
	OpStkvar	(x,	1);
	MakeCode	(0X3EBCE);
	MakeCode	(0X3EBD8);
	MakeCode	(0X3EBDE);
	MakeCode	(0X3EBE2);
	MakeCode	(x=0X3EC0C);
	OpStkvar	(x,	1);
	MakeCode	(0X3EC18);
	MakeCode	(0X3EC3C);
	MakeCode	(0X3EC48);
	MakeCode	(0X3EC4E);
	MakeCode	(x=0X3EC50);
	OpStkvar	(x,	1);
	MakeCode	(0X3EC5C);
	MakeCode	(x=0X3EC68);
	OpStkvar	(x,	1);
	MakeCode	(0X3EC76);
	MakeCode	(x=0X3EC82);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3EC8C);
	OpStkvar	(x,	1);
	MakeCode	(0X3ECA4);
	MakeCode	(0X3ECC6);
	MakeCode	(0X3ECD2);
	MakeCode	(0X3ECD8);
	MakeCode	(x=0X3ECDA);
	OpStkvar	(x,	1);
	MakeCode	(0X3ECE8);
	MakeCode	(x=0X3ECF4);
	OpStkvar	(x,	1);
	MakeCode	(0X3ED02);
	MakeCode	(x=0X3ED0E);
	OpStkvar	(x,	1);
	MakeCode	(0X3ED1C);
	MakeCode	(x=0X3ED48);
	OpStkvar	(x,	1);
	MakeCode	(0X3ED54);
	MakeCode	(x=0X3ED6A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3ED80);
	OpStkvar	(x,	1);
	MakeCode	(0X3ED90);
	MakeCode	(0X3EDB0);
	MakeCode	(x=0X3EDD4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X3EDDE);
	MakeCode	(0X3EDF2);
	MakeCode	(0X3EE0C);
	MakeCode	(0X3EE26);
	MakeCode	(0X3EE42);
	MakeCode	(x=0X3EE74);
	OpStkvar	(x,	1);
	MakeCode	(0X3EE84);
	MakeCode	(x=0X3EEB8);
	OpStkvar	(x,	1);
	MakeCode	(0X3EEC8);
	MakeCode	(x=0X3EEEE);
	OpStkvar	(x,	1);
	MakeCode	(0X3EEFE);
	MakeCode	(0X3EF1C);
	MakeCode	(x=0X3EF44);
	OpStkvar	(x,	1);
	MakeCode	(0X3EF54);
	MakeCode	(x=0X3EF7E);
	OpStkvar	(x,	1);
	MakeCode	(0X3EF8E);
	MakeCode	(0X3EFA2);
	MakeCode	(0X3EFBA);
	MakeCode	(0X3EFD4);
	MakeCode	(x=0X3EFF4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3EFF8);
	OpStkvar	(x,	1);
	MakeCode	(0X3F002);
	MakeCode	(x=0X3F036);
	OpStkvar	(x,	1);
	MakeCode	(0X3F04A);
	MakeCode	(x=0X3F07E);
	OpStkvar	(x,	1);
	MakeCode	(0X3F0AA);
	MakeCode	(x=0X3F0D0);
	OpStkvar	(x,	1);
	MakeCode	(0X3F0E6);
	MakeCode	(x=0X3F100);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3F108);
	OpStkvar	(x,	1);
	MakeCode	(0X3F114);
	MakeCode	(x=0X3F13C);
	OpStkvar	(x,	1);
	MakeCode	(0X3F152);
	MakeCode	(x=0X3F17C);
	OpStkvar	(x,	1);
	MakeCode	(0X3F192);
	MakeCode	(0X3F1B0);
	MakeCode	(0X3F1CE);
	MakeCode	(x=0X3F1F4);
	OpStkvar	(x,	1);
	MakeCode	(0X3F204);
	MakeCode	(x=0X3F22C);
	OpStkvar	(x,	1);
	MakeCode	(0X3F23C);
	MakeCode	(x=0X3F266);
	OpStkvar	(x,	1);
	MakeCode	(0X3F276);
	MakeCode	(x=0X3F290);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3F298);
	OpStkvar	(x,	1);
	MakeCode	(0X3F2A4);
	MakeCode	(x=0X3F2BE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3F2C6);
	OpStkvar	(x,	1);
	MakeCode	(0X3F2D2);
	MakeCode	(x=0X3F2F8);
	OpStkvar	(x,	1);
	MakeCode	(0X3F312);
	MakeCode	(x=0X3F338);
	OpStkvar	(x,	1);
	MakeCode	(0X3F350);
	MakeCode	(x=0X3F378);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3F38E);
	OpStkvar	(x,	1);
	MakeCode	(0X3F3AC);
	MakeCode	(0X3F3DE);
	MakeCode	(0X3F3E8);
	MakeCode	(0X3F3EE);
	MakeCode	(x=0X3F3F0);
	OpStkvar	(x,	1);
	MakeCode	(0X3F408);
	MakeCode	(0X3F412);
	MakeCode	(0X3F418);
	MakeCode	(x=0X3F41A);
	OpStkvar	(x,	1);
	MakeCode	(0X3F422);
	MakeCode	(0X3F454);
	MakeCode	(0X3F464);
	MakeCode	(x=0X3F46C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3F470);
	OpStkvar	(x,	1);
	MakeCode	(0X3F480);
	MakeCode	(0X3F4BA);
	MakeCode	(0X3F4E0);
	MakeCode	(0X3F506);
	MakeCode	(x=0X3F52C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3F536);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X3F53E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3F546);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3F54A);
	OpStkvar	(x,	1);
	MakeCode	(0X3F56C);
	MakeCode	(x=0X3F5A8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3F5C0);
	OpStkvar	(x,	1);
	MakeCode	(0X3F5CE);
	MakeCode	(x=0X3F600);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3F60A);
	OpStkvar	(x,	0);
	MakeCode	(0X3F618);
	MakeCode	(0X3F64E);
	MakeCode	(x=0X3F674);
	OpSign		(x,	1);
	MakeCode	(x=0X3F67A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3F68A);
	OpStkvar	(x,	1);
	MakeCode	(0X3F696);
	MakeCode	(x=0X3F6C2);
	OpStkvar	(x,	0);
	MakeCode	(0X3F6CC);
	MakeCode	(x=0X3F6FE);
	OpSign		(x,	1);
	MakeCode	(x=0X3F704);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3F71A);
	OpStkvar	(x,	1);
	MakeCode	(0X3F728);
	MakeCode	(0X3F746);
	MakeCode	(x=0X3F764);
	OpStkvar	(x,	1);
	MakeCode	(0X3F76C);
	MakeCode	(x=0X3F772);
	OpStkvar	(x,	1);
	MakeCode	(0X3F77A);
	MakeCode	(x=0X3F780);
	OpStkvar	(x,	1);
	MakeCode	(0X3F788);
	MakeCode	(x=0X3F78E);
	OpStkvar	(x,	1);
	MakeCode	(0X3F796);
	MakeCode	(x=0X3F79C);
	OpStkvar	(x,	1);
	MakeCode	(0X3F7AC);
	MakeCode	(0X3F7CC);
	MakeCode	(x=0X3F7F2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X3F7FE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X3F80A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X3F810);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X3F81C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X3F822);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X3F82E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X3F834);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X3F840);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X3F846);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X3F852);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X3F858);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X3F864);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X3F86A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X3F876);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X3F87C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X3F888);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X3F892);
	MakeCode	(x=0X3F8A0);
	OpStkvar	(x,	1);
	MakeCode	(0X3F8A8);
	MakeCode	(0X3F8C8);
	MakeCode	(x=0X3F8EC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X3F8F6);
	MakeCode	(x=0X3F900);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3F908);
	OpStkvar	(x,	1);
	MakeCode	(0X3F910);
	MakeCode	(x=0X3F914);
	OpStkvar	(x,	0);
	MakeCode	(0X3F91E);
	MakeCode	(0X3F958);
	MakeCode	(x=0X3F9B2);
	OpSign		(x,	1);
	MakeCode	(0X3FA22);
	MakeCode	(x=0X3FA4A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X3FA60);
	MakeCode	(x=0X3FA80);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X3FA96);
	MakeCode	(0X3FB0C);
	MakeCode	(x=0X3FB52);
	OpSign		(x,	1);
	MakeCode	(0X3FB8C);
	MakeCode	(0X3FB90);
	MakeCode	(0X3FBBC);
	MakeCode	(x=0X3FBC8);
	OpSign		(x,	1);
	MakeCode	(0X3FC02);
	MakeCode	(0X3FC06);
	MakeCode	(0X3FC3E);
	MakeName	(0X3FC3E,	"TenSecondDelayIsInHere");
	MakeRptCmt	(0X3FC5C,	"This is the ten-second delay timer!");
	MakeCode	(0X3FC9C);
	MakeCode	(0X3FCA8);
	MakeCode	(x=0X3FCD4);
	OpStkvar	(x,	1);
	MakeCode	(0X3FCF8);
	MakeCode	(x=0X3FD04);
	OpStkvar	(x,	1);
	MakeCode	(0X3FD18);
	MakeCode	(0X3FD28);
	MakeCode	(0X3FD48);
	MakeCode	(0X3FDB8);
	MakeCode	(0X3FDE0);
	MakeCode	(0X3FDFE);
	MakeCode	(0X3FE2C);
	MakeCode	(0X3FE4A);
	MakeCode	(0X3FE5E);
	MakeCode	(0X3FE94);
	MakeCode	(0X3FE98);
	MakeCode	(0X3FEB8);
	MakeCode	(0X3FEC6);
	MakeCode	(0X3FF16);
	MakeCode	(0X3FF3E);
	MakeCode	(0X3FF4C);
	MakeCode	(0X3FF68);
	MakeCode	(x=0X3FF6E);
	OpSign		(x,	1);
	MakeCode	(0X3FFA8);
	MakeCode	(0X40012);
	MakeCode	(0X4002C);
	MakeCode	(0X40040);
	MakeCode	(0X40044);
	MakeCode	(x=0X40052);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40078);
	OpSign		(x,	1);
	MakeCode	(0X400A8);
	MakeCode	(0X400C0);
	MakeCode	(x=0X400D0);
	OpSign		(x,	1);
	MakeCode	(0X400FE);
	MakeCode	(0X40114);
	MakeCode	(x=0X40120);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X40152);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X40160);
	MakeCode	(x=0X4016A);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(0X4019A);
	MakeCode	(0X401D4);
	MakeCode	(0X401E4);
	MakeCode	(x=0X401F2);
	OpSign		(x,	1);
	MakeCode	(0X4023E);
	MakeCode	(0X40254);
	MakeCode	(0X40278);
	MakeCode	(x=0X40296);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X402B2);
	MakeCode	(0X40338);
	MakeCode	(0X4039A);
	MakeCode	(0X403C8);
	MakeCode	(x=0X403CA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X403D8);
	OpStkvar	(x,	1);
	MakeCode	(0X403FA);
	MakeCode	(x=0X40414);
	OpSign		(x,	1);
	MakeCode	(x=0X4046E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X40490);
	OpStkvar	(x,	0);
	MakeCode	(x=0X404A2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X404AC);
	OpStkvar	(x,	0);
	MakeCode	(0X404DC);
	MakeCode	(x=0X404FA);
	OpSign		(x,	1);
	MakeCode	(x=0X4052E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X4055A);
	MakeCode	(0X40564);
	MakeCode	(0X4058E);
	MakeCode	(0X40598);
	MakeCode	(0X405A8);
	MakeCode	(0X405D0);
	MakeCode	(0X405F0);
	MakeCode	(0X405FA);
	MakeCode	(0X40632);
	MakeCode	(x=0X40686);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X406AC);
	MakeCode	(0X406B0);
	MakeCode	(0X40708);
	MakeCode	(0X4070C);
	MakeCode	(x=0X4071A);
	OpSign		(x,	1);
	MakeCode	(0X40760);
	MakeCode	(0X4077A);
	MakeCode	(0X407BC);
	MakeCode	(x=0X407D2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X407EC);
	MakeCode	(0X407FA);
	MakeCode	(x=0X4081A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X40830);
	MakeCode	(0X4084E);
	MakeCode	(0X4085C);
	MakeCode	(x=0X40866);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X40894);
	MakeCode	(0X408C2);
	MakeCode	(0X408C6);
	MakeCode	(0X408EA);
	MakeCode	(0X4093C);
	MakeCode	(0X4094A);
	MakeCode	(0X40974);
	MakeCode	(x=0X40982);
	OpSign		(x,	1);
	MakeCode	(x=0X4099C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X409A2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X409A8);
	OpStkvar	(x,	0);
	MakeCode	(x=0X409C0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X409D6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X409E2);
	OpStkvar	(x,	0);
	MakeCode	(0X40A18);
	MakeCode	(0X40A60);
	MakeCode	(x=0X40A94);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X40A9A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X40AA0);
	OpStkvar	(x,	0);
	MakeCode	(0X40AC6);
	MakeCode	(x=0X40AD6);
	OpSign		(x,	1);
	MakeCode	(x=0X40AE4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X40B46);
	OpStkvar	(x,	1);
	MakeCode	(x=0X40B68);
	OpStkvar	(x,	0);
	MakeCode	(x=0X40B8C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X40B96);
	OpStkvar	(x,	0);
	MakeCode	(0X40BD6);
	MakeCode	(0X40BE6);
	MakeCode	(x=0X40BF4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X40C02);
	OpStkvar	(x,	0);
	MakeCode	(x=0X40C0E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X40C2A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X40C32);
	OpStkvar	(x,	0);
	MakeCode	(x=0X40C46);
	OpStkvar	(x,	0);
	MakeCode	(x=0X40C4A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X40C5C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X40C66);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X40C6E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X40C7C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X40C80);
	OpStkvar	(x,	1);
	MakeCode	(x=0X40C8C);
	OpStkvar	(x,	1);
	MakeCode	(0X40C9A);
	MakeCode	(x=0X40C9C);
	OpStkvar	(x,	0);
	MakeCode	(0X40CA8);
	MakeCode	(x=0X40CAA);
	OpStkvar	(x,	0);
	MakeCode	(x=0X40CB2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X40CBA);
	OpStkvar	(x,	0);
	MakeCode	(x=0X40CBE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X40CC8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X40CCC);
	OpStkvar	(x,	0);
	MakeCode	(x=0X40CD2);
	OpStkvar	(x,	0);
	MakeCode	(x=0X40CE0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X40CE4);
	OpStkvar	(x,	0);
	MakeCode	(0X40CEE);
	MakeCode	(x=0X40CF0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X40CF4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X40CFA);
	OpStkvar	(x,	0);
	MakeCode	(x=0X40D00);
	OpStkvar	(x,	1);
	MakeCode	(x=0X40D08);
	OpStkvar	(x,	0);
	MakeCode	(0X40D12);
	MakeCode	(x=0X40D14);
	OpStkvar	(x,	0);
	MakeCode	(x=0X40D18);
	OpStkvar	(x,	0);
	MakeCode	(x=0X40D1E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X40D24);
	OpStkvar	(x,	1);
	MakeCode	(x=0X40D2C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X40D32);
	OpStkvar	(x,	0);
	MakeCode	(x=0X40D38);
	OpStkvar	(x,	1);
	MakeCode	(x=0X40D40);
	OpStkvar	(x,	0);
	MakeCode	(x=0X40D46);
	OpStkvar	(x,	0);
	MakeCode	(x=0X40D4C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X40D54);
	OpStkvar	(x,	0);
	MakeCode	(x=0X40D5E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X40D66);
	OpStkvar	(x,	0);
	MakeCode	(x=0X40D76);
	OpStkvar	(x,	1);
	MakeCode	(x=0X40D88);
	OpStkvar	(x,	1);
	MakeCode	(x=0X40D9A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X40DAC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X40DB2);
	OpStkvar	(x,	0);
	MakeCode	(x=0X40DBC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X40DDC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X40DE6);
	MakeCode	(0X40DEA);
	MakeCode	(x=0X40DEE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X40DF4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X40DFA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X40E02);
	OpStkvar	(x,	0);
	MakeCode	(x=0X40E08);
	OpStkvar	(x,	0);
	MakeCode	(x=0X40E0E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X40E16);
	OpStkvar	(x,	0);
	MakeCode	(0X40E20);
	MakeCode	(x=0X40E24);
	OpStkvar	(x,	0);
	MakeCode	(x=0X40E2A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X40E30);
	OpStkvar	(x,	1);
	MakeCode	(x=0X40E38);
	OpStkvar	(x,	0);
	MakeCode	(x=0X40E3E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X40E44);
	OpStkvar	(x,	1);
	MakeCode	(x=0X40E4C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X40E52);
	OpStkvar	(x,	0);
	MakeCode	(x=0X40E58);
	OpStkvar	(x,	1);
	MakeCode	(x=0X40E60);
	OpStkvar	(x,	0);
	MakeCode	(x=0X40E66);
	OpStkvar	(x,	0);
	MakeCode	(x=0X40E6C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X40E74);
	OpStkvar	(x,	0);
	MakeCode	(x=0X40E7A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X40E80);
	OpStkvar	(x,	1);
	MakeCode	(x=0X40E88);
	OpStkvar	(x,	0);
	MakeCode	(x=0X40E8E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X40E94);
	OpStkvar	(x,	1);
	MakeCode	(x=0X40E9C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X40EA2);
	OpStkvar	(x,	0);
	MakeCode	(x=0X40EA8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X40EB0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X40EB6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X40EBC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X40ECC);
	OpStkvar	(x,	0);
	MakeCode	(x=0X40ED2);
	OpStkvar	(x,	1);
	MakeCode	(0X40EE0);
	MakeCode	(x=0X40EE4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X40EE8);
	OpStkvar	(x,	0);
	MakeCode	(0X40EF2);
	MakeCode	(x=0X40EFC);
	OpStkvar	(x,	0);
	MakeCode	(0X40F0E);
	MakeCode	(0X40F5C);
	MakeCode	(0X40F9C);
	MakeCode	(0X40FA8);
	MakeCode	(0X40FB8);
	MakeCode	(0X40FC2);
	MakeCode	(0X40FD4);
	MakeCode	(0X40FEC);
	MakeCode	(0X41030);
	MakeCode	(0X41084);
	MakeCode	(0X4108E);
	MakeCode	(0X410D8);
	MakeCode	(0X410F6);
	MakeCode	(0X41108);
	MakeCode	(0X41148);
	MakeCode	(0X4114C);
	MakeCode	(0X4117A);
	MakeCode	(0X41188);
	MakeCode	(0X411A4);
	MakeCode	(0X411C8);
	MakeCode	(0X411E6);
	MakeCode	(0X4120A);
	MakeCode	(x=0X41232);
	OpSign		(x,	1);
	MakeCode	(0X4124E);
	MakeCode	(0X41288);
	MakeCode	(x=0X41290);
	OpStkvar	(x,	0);
	MakeCode	(x=0X412C6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X412F4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4131C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4133C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X41340);
	OpStkvar	(x,	0);
	MakeCode	(0X41358);
	MakeCode	(0X4135C);
	MakeCode	(0X4137A);
	MakeCode	(x=0X4138E);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4139E);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X413A8);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X413B0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X413C2);
	OpStkvar	(x,	0);
	MakeCode	(x=0X413CA);
	OpStkvar	(x,	0);
	MakeCode	(x=0X413DC);
	OpStkvar	(x,	0);
	MakeCode	(x=0X413E2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X413F4);
	OpStkvar	(x,	0);
	MakeCode	(0X4140C);
	MakeCode	(0X41410);
	MakeCode	(x=0X41422);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(0X41430);
	MakeCode	(x=0X4143A);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X41444);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4144E);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X41458);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X41464);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4146E);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X41476);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X41480);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X4148C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X41492);
	OpStkvar	(x,	1);
	MakeCode	(0X4149A);
	MakeCode	(x=0X414A2);
	OpStkvar	(x,	0);
	MakeCode	(x=0X414A6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X414AC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X414B2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X414B8);
	OpStkvar	(x,	0);
	MakeCode	(x=0X414E2);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X414EC);
	OpStkvar	(x,	0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X414F8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X414FE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4150A);
	OpSign		(x,	1);
	MakeCode	(0X41526);
	MakeCode	(0X41572);
	MakeCode	(0X41580);
	MakeCode	(x=0X41598);
	OpSign		(x,	1);
	MakeCode	(0X415BC);
	MakeCode	(0X415C6);
	MakeCode	(0X415E8);
	MakeCode	(0X41646);
	MakeCode	(x=0X41664);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4166C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X41682);
	MakeCode	(0X41690);
	MakeCode	(0X416A0);
	MakeCode	(0X416E4);
	MakeCode	(0X416EC);
	MakeCode	(x=0X41708);
	OpSign		(x,	1);
	MakeCode	(0X4182E);
	MakeCode	(0X4184E);
	MakeCode	(0X418F6);
	MakeCode	(0X41906);
	MakeCode	(0X41A7E);
	MakeCode	(x=0X41A8C);
	OpSign		(x,	1);
	MakeCode	(0X41AD6);
	MakeCode	(0X41AEA);
	MakeCode	(0X41B08);
	MakeCode	(0X41B1C);
	MakeCode	(0X41B42);
	MakeCode	(0X41B60);
	MakeCode	(0X41B6A);
	MakeCode	(0X41B94);
	MakeCode	(0X41BB2);
	MakeCode	(0X41BDA);
	MakeCode	(0X41BE8);
	MakeCode	(0X41BEC);
	MakeCode	(0X41C34);
	MakeCode	(0X41C46);
	MakeCode	(0X41C4C);
	MakeCode	(0X41C8E);
	MakeCode	(x=0X41CDC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X41D22);
	MakeCode	(0X41D2C);
	MakeCode	(0X41D3A);
	MakeCode	(0X41D74);
	MakeCode	(0X41D8C);
	MakeCode	(0X41DAA);
	MakeCode	(0X41DDA);
	MakeCode	(0X41DF0);
	MakeCode	(0X41DF6);
	MakeCode	(0X41E0C);
	MakeCode	(0X41E12);
	MakeCode	(x=0X41E26);
	OpSign		(x,	1);
	MakeCode	(x=0X41E4E);
	OpStkvar	(x,	1);
	MakeCode	(0X41E62);
	MakeCode	(x=0X41E6C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X41E72);
	OpStkvar	(x,	1);
	MakeCode	(x=0X41E76);
	OpStkvar	(x,	0);
	MakeCode	(x=0X41EB4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X41EBE);
	MakeCode	(0X41ECA);
	MakeCode	(0X41ED4);
	MakeCode	(0X41EE0);
	MakeCode	(0X41EE4);
	MakeCode	(0X41F18);
	MakeCode	(x=0X41F24);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X41F2E);
	MakeCode	(0X41F5A);
	MakeCode	(0X41F64);
	MakeCode	(0X41F92);
	MakeCode	(0X41F96);
	MakeCode	(0X41FC4);
	MakeCode	(0X41FC8);
	MakeCode	(0X41FE2);
	MakeCode	(0X41FFE);
	MakeCode	(0X42026);
	MakeCode	(0X42040);
	MakeCode	(0X42064);
	MakeCode	(0X4207E);
	MakeCode	(0X42086);
	MakeCode	(0X420C4);
	MakeCode	(x=0X420E4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4210A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X42130);
	OpSign		(x,	1);
	MakeCode	(x=0X4213E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X42146);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4214C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X42158);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4215C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4216A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X42178);
	OpStkvar	(x,	0);
	MakeCode	(x=0X421AA);
	OpSign		(x,	1);
	MakeCode	(x=0X421B8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X421C0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X421C6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X421D2);
	OpStkvar	(x,	0);
	MakeCode	(x=0X421D6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X421E4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X421F2);
	OpStkvar	(x,	0);
	MakeCode	(x=0X42224);
	OpSign		(x,	1);
	MakeCode	(x=0X42232);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4223A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X42240);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4224C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X42250);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4225E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4226C);
	OpStkvar	(x,	0);
	MakeCode	(0X4227E);
	MakeCode	(x=0X42284);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X422AA);
	OpSign		(x,	1);
	MakeCode	(x=0X422B8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X422C0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X422C6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X422D2);
	OpStkvar	(x,	0);
	MakeCode	(x=0X422D6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X422E4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X422F2);
	OpStkvar	(x,	0);
	MakeCode	(0X42304);
	MakeCode	(x=0X4230A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X42330);
	OpSign		(x,	1);
	MakeCode	(x=0X4233C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X42340);
	OpStkvar	(x,	0);
	MakeCode	(x=0X42346);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4234E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X42354);
	OpStkvar	(x,	0);
	MakeCode	(x=0X42362);
	OpStkvar	(x,	0);
	MakeCode	(x=0X42366);
	OpStkvar	(x,	0);
	MakeCode	(x=0X42376);
	OpStkvar	(x,	0);
	MakeCode	(x=0X42386);
	OpStkvar	(x,	0);
	MakeCode	(0X42398);
	MakeCode	(x=0X423BC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X423C4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X423CE);
	OpStkvar	(x,	1);
	MakeCode	(0X423E2);
	MakeCode	(x=0X423F0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X423F8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X42402);
	MakeCode	(x=0X4240C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X42428);
	OpStkvar	(x,	0);
	MakeCode	(x=0X42438);
	OpSign		(x,	1);
	MakeCode	(x=0X42444);
	OpStkvar	(x,	0);
	MakeCode	(x=0X42448);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4244E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X42456);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4245C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4246A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4246E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4247E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4248E);
	OpStkvar	(x,	0);
	MakeCode	(0X424A0);
	MakeCode	(x=0X424C4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X424CC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X424D6);
	OpStkvar	(x,	1);
	MakeCode	(0X424EA);
	MakeCode	(x=0X424F8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X42500);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X4250A);
	MakeCode	(x=0X42514);
	OpStkvar	(x,	0);
	MakeCode	(x=0X42530);
	OpStkvar	(x,	0);
	MakeCode	(x=0X42540);
	OpSign		(x,	1);
	MakeCode	(x=0X4254C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X42552);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4255A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X42560);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4256C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X42570);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4257E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4258C);
	OpStkvar	(x,	0);
	MakeCode	(0X4259E);
	MakeCode	(0X425C6);
	MakeCode	(x=0X425DA);
	OpStkvar	(x,	0);
	MakeCode	(x=0X425EE);
	OpSign		(x,	1);
	MakeCode	(x=0X425FA);
	OpStkvar	(x,	0);
	MakeCode	(x=0X42600);
	OpStkvar	(x,	1);
	MakeCode	(x=0X42608);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4260E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4261A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4261E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4262C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4263A);
	OpStkvar	(x,	0);
	MakeCode	(0X4264C);
	MakeCode	(0X42674);
	MakeCode	(x=0X42688);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4269C);
	OpSign		(x,	1);
	MakeCode	(x=0X426A8);
	OpStkvar	(x,	0);
	MakeCode	(x=0X426AC);
	OpStkvar	(x,	0);
	MakeCode	(x=0X426B2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X426BA);
	OpStkvar	(x,	0);
	MakeCode	(x=0X426C0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X426CE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X426D2);
	OpStkvar	(x,	0);
	MakeCode	(x=0X426E2);
	OpStkvar	(x,	0);
	MakeCode	(x=0X426F2);
	OpStkvar	(x,	0);
	MakeCode	(0X42704);
	MakeCode	(x=0X42716);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4271E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X42728);
	OpStkvar	(x,	1);
	MakeCode	(0X4273C);
	MakeCode	(x=0X4274A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X42752);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X4275C);
	MakeCode	(x=0X42766);
	OpStkvar	(x,	0);
	MakeCode	(x=0X42776);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4277E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X42788);
	OpStkvar	(x,	1);
	MakeCode	(0X4279C);
	MakeCode	(x=0X427AA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X427B2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X427BC);
	MakeCode	(x=0X427C6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X427D2);
	OpStkvar	(x,	0);
	MakeCode	(0X427E2);
	MakeCode	(0X427F4);
	MakeCode	(0X427FE);
	MakeCode	(x=0X42802);
	OpSign		(x,	1);
	MakeCode	(x=0X4280A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4283E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4284C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X42858);
	OpStkvar	(x,	1);
	MakeCode	(x=0X42860);
	OpStkvar	(x,	1);
	MakeCode	(x=0X42868);
	OpStkvar	(x,	1);
	MakeCode	(x=0X42876);
	OpStkvar	(x,	1);
	MakeCode	(x=0X42884);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4288C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X42896);
	OpSign		(x,	1);
	MakeCode	(x=0X428B0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X428B4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X428C2);
	OpStkvar	(x,	0);
	MakeCode	(x=0X428C6);
	OpStkvar	(x,	0);
	MakeCode	(0X428E0);
	MakeCode	(0X428FE);
	MakeCode	(0X42916);
	MakeCode	(0X4292C);
	MakeCode	(0X42944);
	MakeCode	(0X4295A);
	MakeCode	(0X42972);
	MakeCode	(0X4298A);
	MakeCode	(0X429A2);
	MakeCode	(0X429E2);
	MakeCode	(0X429F8);
	MakeCode	(x=0X42A3A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X42A44);
	MakeCode	(x=0X42A48);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X42A52);
	MakeCode	(x=0X42A56);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X42A60);
	MakeCode	(x=0X42A64);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X42A6E);
	MakeCode	(x=0X42A72);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X42A7C);
	MakeCode	(x=0X42A80);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X42A8A);
	MakeCode	(x=0X42A8E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X42A98);
	MakeCode	(x=0X42A9C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X42AC0);
	OpSign		(x,	1);
	MakeCode	(x=0X42AC4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X42AD8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpStkvar	(x,	1);
	MakeCode	(0X42AE6);
	MakeCode	(x=0X42AF6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpStkvar	(x,	1);
	MakeCode	(0X42B04);
	MakeCode	(x=0X42B14);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpStkvar	(x,	1);
	MakeCode	(0X42B22);
	MakeCode	(x=0X42B32);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpStkvar	(x,	1);
	MakeCode	(0X42B3E);
	MakeCode	(x=0X42B4E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpStkvar	(x,	1);
	MakeCode	(0X42B5A);
	MakeCode	(x=0X42B6A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpStkvar	(x,	1);
	MakeCode	(0X42B76);
	MakeCode	(x=0X42B86);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpStkvar	(x,	1);
	MakeCode	(0X42B92);
	MakeCode	(x=0X42B9C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X42BAE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X42BBC);
	OpSign		(x,	1);
	MakeCode	(x=0X42BC6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X42BCE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X42BE2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X42BF0);
	MakeCode	(x=0X42BFA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X42C08);
	MakeCode	(x=0X42C12);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X42C20);
	MakeCode	(x=0X42C2A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X42C38);
	MakeCode	(x=0X42C42);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X42C50);
	MakeCode	(x=0X42C5A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X42C68);
	MakeCode	(x=0X42C72);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X42C80);
	MakeCode	(x=0X42C8A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X42C98);
	OpStkvar	(x,	0);
	MakeCode	(0X42CA0);
	MakeCode	(x=0X42CA6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X42CAA);
	OpStkvar	(x,	0);
	MakeCode	(0X42CBA);
	MakeCode	(x=0X42CC0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X42CC4);
	OpStkvar	(x,	0);
	MakeCode	(0X42CD4);
	MakeCode	(x=0X42CDA);
	OpStkvar	(x,	0);
	MakeCode	(x=0X42CDE);
	OpStkvar	(x,	0);
	MakeCode	(0X42CEE);
	MakeCode	(x=0X42CF4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X42CF8);
	OpStkvar	(x,	0);
	MakeCode	(0X42D08);
	MakeCode	(x=0X42D0E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X42D14);
	OpStkvar	(x,	0);
	MakeCode	(x=0X42D1A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X42D1E);
	OpStkvar	(x,	0);
	MakeCode	(0X42D2E);
	MakeCode	(x=0X42D34);
	OpStkvar	(x,	0);
	MakeCode	(x=0X42D3A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X42D40);
	OpStkvar	(x,	0);
	MakeCode	(x=0X42D44);
	OpStkvar	(x,	0);
	MakeCode	(0X42D52);
	MakeCode	(x=0X42D58);
	OpStkvar	(x,	0);
	MakeCode	(x=0X42D5E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X42D64);
	OpStkvar	(x,	0);
	MakeCode	(x=0X42D68);
	OpStkvar	(x,	0);
	MakeCode	(0X42D76);
	MakeCode	(x=0X42D7C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X42D82);
	OpStkvar	(x,	0);
	MakeCode	(x=0X42D88);
	OpStkvar	(x,	0);
	MakeCode	(x=0X42D8C);
	OpStkvar	(x,	0);
	MakeCode	(0X42D9A);
	MakeCode	(x=0X42DA0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X42DA6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X42DAC);
	OpStkvar	(x,	0);
	MakeCode	(x=0X42DB0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X42DBE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X42DC2);
	OpStkvar	(x,	0);
	MakeCode	(x=0X42DDE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X42DEC);
	OpStkvar	(x,	0);
	MakeCode	(x=0X42DF2);
	OpStkvar	(x,	0);
	MakeCode	(x=0X42DF8);
	OpStkvar	(x,	0);
	MakeCode	(x=0X42E04);
	OpStkvar	(x,	0);
	MakeCode	(0X42E12);
	MakeCode	(x=0X42E1E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X42E2C);
	MakeCode	(x=0X42E3C);
	OpSign		(x,	1);
	MakeCode	(x=0X42E44);
	OpStkvar	(x,	0);
	MakeCode	(x=0X42E48);
	OpStkvar	(x,	0);
	MakeCode	(x=0X42E58);
	OpStkvar	(x,	0);
	MakeCode	(x=0X42E6E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X42E7C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X42E82);
	OpStkvar	(x,	0);
	MakeCode	(x=0X42E90);
	OpStkvar	(x,	1);
	MakeCode	(x=0X42E96);
	OpStkvar	(x,	0);
	MakeCode	(x=0X42EA4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X42EA8);
	OpStkvar	(x,	0);
	MakeCode	(0X42EB2);
	MakeCode	(0X42EDC);
	MakeCode	(0X42EEC);
	MakeCode	(0X42F10);
	MakeCode	(0X42F3A);
	MakeCode	(0X42F4A);
	MakeCode	(x=0X42F76);
	OpSign		(x,	1);
	MakeName	(0X42F76,	"GetPid_1100");
	MakeCode	(0X42F8A);
	MakeCode	(0X42F98);
	MakeCode	(0X42FAA);
	MakeCode	(0X42FBC);
	MakeCode	(0X42FCE);
	MakeCode	(0X42FE0);
	MakeCode	(0X42FF0);
	MakeCode	(0X43002);
	MakeCode	(0X43014);
	MakeCode	(x=0X4301C);
	OpSign		(x,	1);
	MakeName	(0X4301C,	"GetPid_1101");
	MakeCode	(0X43040);
	MakeCode	(0X4304E);
	MakeCode	(0X4306A);
	MakeCode	(0X4307E);
	MakeCode	(0X43090);
	MakeCode	(x=0X4309E);
	OpSign		(x,	1);
	MakeName	(0X4309E,	"GetPid_1102");
	MakeCode	(0X430B2);
	MakeCode	(0X430CA);
	MakeCode	(0X430D8);
	MakeCode	(0X430F0);
	MakeCode	(0X43108);
	MakeCode	(0X43118);
	MakeCode	(0X43132);
	MakeCode	(0X4314C);
	MakeCode	(0X4315C);
	MakeCode	(x=0X4316A);
	OpSign		(x,	1);
	MakeName	(0X4316A,	"GetPid_1103");
	MakeCode	(0X4318A);
	MakeCode	(0X43198);
	MakeCode	(0X431BE);
	MakeCode	(0X431CC);
	MakeCode	(0X431E4);
	MakeCode	(0X431FC);
	MakeCode	(0X43212);
	MakeCode	(0X43228);
	MakeCode	(0X43238);
	MakeCode	(0X43246);
	MakeName	(0X43246,	"GetPid_1104");
	MakeCode	(0X43254);
	MakeCode	(0X43266);
	MakeCode	(0X43284);
	MakeCode	(0X4329A);
	MakeCode	(0X432AA);
	MakeCode	(0X432D4);
	MakeCode	(0X432EC);
	MakeCode	(0X43304);
	MakeCode	(0X4330E);
	MakeName	(0X4330E,	"GetPid_1105");
	MakeCode	(0X4331A);
	MakeCode	(0X4332C);
	MakeCode	(0X4333C);
	MakeCode	(0X4334C);
	MakeCode	(0X4335C);
	MakeCode	(0X4336C);
	MakeCode	(0X4337C);
	MakeCode	(0X4338E);
	MakeCode	(0X43394);
	MakeName	(0X43394,	"GetPid_1106_VTDFuelDisable");
	MakeCode	(0X433A2);
	MakeCode	(0X433B2);
	MakeCode	(0X433C6);
	MakeCode	(0X433D6);
	MakeCode	(0X433E6);
	MakeCode	(0X43402);
	MakeCode	(0X4341A);
	MakeCode	(0X43424);
	MakeName	(0X43424,	"GetPid_1107_ThrottleAtIdle");
	MakeCode	(0X43434);
	MakeCode	(0X4344E);
	MakeCode	(0X4345E);
	MakeCode	(0X43470);
	MakeCode	(0X43480);
	MakeCode	(0X43486);
	MakeName	(0X43486,	"GetPid_1108");
	MakeCode	(0X434AA);
	MakeCode	(0X434BA);
	MakeCode	(x=0X434C0);
	OpSign		(x,	1);
	MakeName	(0X434C0,	"GetPid_110C");
	MakeCode	(0X434DC);
	MakeCode	(0X434EE);
	MakeCode	(0X43500);
	MakeCode	(0X43512);
	MakeCode	(0X43524);
	MakeCode	(0X43536);
	MakeCode	(0X43548);
	MakeCode	(x=0X43550);
	OpSign		(x,	1);
	MakeName	(0X43550,	"GetPid_110D");
	MakeCode	(0X4356C);
	MakeCode	(0X4357E);
	MakeCode	(0X43590);
	MakeCode	(0X435A2);
	MakeCode	(0X435B4);
	MakeCode	(0X435C6);
	MakeCode	(0X435D8);
	MakeCode	(x=0X435E0);
	OpSign		(x,	1);
	MakeName	(0X435E0,	"GetPid_110E");
	MakeCode	(0X435FC);
	MakeCode	(0X4360E);
	MakeCode	(0X43620);
	MakeCode	(0X43632);
	MakeCode	(0X43644);
	MakeCode	(0X43656);
	MakeCode	(0X43668);
	MakeCode	(x=0X43670);
	OpSign		(x,	1);
	MakeName	(0X43670,	"GetPid_110F_RearOCurrentNonVolatile");
	MakeCode	(0X4368C);
	MakeCode	(0X4369E);
	MakeCode	(0X436B0);
	MakeCode	(0X436C2);
	MakeCode	(0X436D4);
	MakeCode	(0X436E6);
	MakeCode	(0X436F8);
	MakeCode	(x=0X43700);
	OpSign		(x,	1);
	MakeName	(0X43700,	"GetPid_1110");
	MakeCode	(0X4371C);
	MakeCode	(0X4372E);
	MakeCode	(0X43740);
	MakeCode	(0X43752);
	MakeCode	(0X43764);
	MakeCode	(0X43776);
	MakeCode	(0X43788);
	MakeCode	(x=0X43790);
	OpSign		(x,	1);
	MakeName	(0X43790,	"GetPid_1111");
	MakeCode	(0X437AC);
	MakeCode	(0X437BE);
	MakeCode	(0X437D0);
	MakeCode	(0X437E2);
	MakeCode	(0X437F4);
	MakeCode	(0X43806);
	MakeCode	(0X43818);
	MakeCode	(x=0X43820);
	OpSign		(x,	1);
	MakeName	(0X43820,	"GetPid_1112");
	MakeCode	(0X43830);
	MakeCode	(0X43844);
	MakeCode	(0X43852);
	MakeCode	(0X43866);
	MakeCode	(0X43874);
	MakeCode	(0X43888);
	MakeCode	(0X43896);
	MakeCode	(0X438AA);
	MakeCode	(0X438B8);
	MakeCode	(0X438CC);
	MakeCode	(0X438DA);
	MakeCode	(0X438EE);
	MakeCode	(0X438FC);
	MakeCode	(0X43910);
	MakeCode	(0X4391E);
	MakeCode	(0X43926);
	MakeName	(0X43926,	"GetPid_1113");
	MakeCode	(0X43936);
	MakeCode	(0X43944);
	MakeCode	(0X43954);
	MakeCode	(0X43964);
	MakeCode	(0X43974);
	MakeCode	(0X43984);
	MakeCode	(0X43994);
	MakeCode	(0X439A4);
	MakeCode	(0X439AA);
	MakeName	(0X439AA,	"GetPid_1114");
	MakeCode	(0X439B8);
	MakeCode	(0X439CA);
	MakeCode	(0X439DC);
	MakeCode	(0X439EE);
	MakeCode	(0X43A00);
	MakeCode	(0X43A12);
	MakeCode	(0X43A24);
	MakeCode	(0X43A36);
	MakeCode	(x=0X43A3C);
	OpSign		(x,	1);
	MakeName	(0X43A3C,	"GetPid_1115");
	MakeCode	(0X43A4E);
	MakeCode	(0X43A60);
	MakeCode	(0X43A72);
	MakeCode	(0X43A84);
	MakeCode	(0X43A96);
	MakeCode	(0X43AB4);
	MakeCode	(0X43AD0);
	MakeCode	(0X43AEC);
	MakeCode	(x=0X43AF4);
	OpSign		(x,	1);
	MakeName	(0X43AF4,	"GetPid_1116");
	MakeCode	(0X43B06);
	MakeCode	(0X43B18);
	MakeCode	(0X43B2A);
	MakeCode	(0X43B3C);
	MakeCode	(0X43B4E);
	MakeCode	(0X43B6C);
	MakeCode	(0X43B88);
	MakeCode	(0X43BA4);
	MakeCode	(0X43BAC);
	MakeName	(0X43BAC,	"GetPid_1117");
	MakeCode	(0X43BBC);
	MakeCode	(0X43BCE);
	MakeCode	(0X43BDC);
	MakeCode	(0X43BEE);
	MakeCode	(0X43C00);
	MakeCode	(0X43C12);
	MakeCode	(0X43C2C);
	MakeCode	(0X43C3C);
	MakeCode	(x=0X43C42);
	OpSign		(x,	1);
	MakeName	(0X43C42,	"GetPid_1118");
	MakeCode	(0X43C6C);
	MakeCode	(0X43C92);
	MakeCode	(0X43C9C);
	MakeCode	(0X43CAC);
	MakeCode	(0X43CBA);
	MakeCode	(x=0X43CC2);
	OpSign		(x,	1);
	MakeName	(0X43CC2,	"GetPid_1119");
	MakeCode	(0X43CDE);
	MakeCode	(0X43CF0);
	MakeCode	(0X43D02);
	MakeCode	(0X43D14);
	MakeCode	(0X43D26);
	MakeCode	(0X43D38);
	MakeCode	(0X43D4A);
	MakeCode	(x=0X43D52);
	OpSign		(x,	1);
	MakeName	(0X43D52,	"GetPid_1120");
	MakeCode	(0X43D6E);
	MakeCode	(0X43D80);
	MakeCode	(0X43D92);
	MakeCode	(0X43DA4);
	MakeCode	(0X43DB6);
	MakeCode	(0X43DC8);
	MakeCode	(0X43DDA);
	MakeCode	(0X43DE2);
	MakeName	(0X43DE2,	"GetPid_1140_MassAirFlowSensor");
	MakeCode	(0X43DE8);
	MakeName	(0X43DE8,	"GetPid_1141_IgnitionVoltage");
	MakeCode	(0X43E06);
	MakeName	(0X43E06,	"GetPid_1142");
	MakeCode	(0X43E12);
	MakeName	(0X43E12,	"GetPid_1143_ThrottlePositionSensor");
	MakeCode	(0X43E1E);
	MakeName	(0X43E1E,	"GetPid_1144_AirConditionerPressure");
	MakeCode	(0X43E2A);
	MakeName	(0X43E2A,	"GetPid_1145");
	MakeCode	(0X43E36);
	MakeName	(0X43E36,	"GetPid_1146_OSensorBankSensormv");
	MakeCode	(0X43E42);
	MakeName	(0X43E42,	"GetPid_1148_OSensorBankSensormv");
	MakeCode	(0X43E4E);
	MakeName	(0X43E4E,	"GetPid_1149_OSensorBankSensormv");
	MakeCode	(0X43E5A);
	MakeName	(0X43E5A,	"GetPid_114B");
	MakeCode	(0X43E62);
	MakeName	(0X43E62,	"GetPid_114C");
	MakeCode	(0X43E7C);
	MakeName	(0X43E7C,	"GetPid_114D");
	MakeCode	(0X43E92);
	MakeName	(0X43E92,	"GetPid_114E_FuelTankPressure");
	MakeCode	(0X43E9A);
	MakeName	(0X43E9A,	"GetPid_1151_ThrottlePositionSensorNormalizedinDegreesPercent");
	MakeCode	(0X43EB0);
	MakeName	(0X43EB0,	"GetPid_1152");
	MakeCode	(0X43EBE);
	MakeName	(0X43EBE,	"GetPid_1155");
	MakeCode	(0X43EC4);
	MakeName	(0X43EC4,	"GetPid_115C");
	MakeCode	(0X43ED0);
	MakeName	(0X43ED0,	"GetPid_116F_StartUpEngineCoolantTemperature");
	MakeCode	(0X43EE2);
	MakeName	(0X43EE2,	"GetPid_1170_ControlledCanisterPurgeSolenoid");
	MakeCode	(0X43EF8);
	MakeName	(0X43EF8,	"GetPid_1172");
	MakeCode	(0X43F00);
	MakeName	(0X43F00,	"GetPid_1177");
	MakeCode	(0X43F24);
	MakeName	(0X43F24,	"GetPid_1186");
	MakeCode	(0X43F2A);
	MakeName	(0X43F2A,	"GetPid_1187");
	MakeCode	(0X43F30);
	MakeName	(0X43F30,	"GetPid_1190_FuelTrimCell");
	MakeCode	(0X43F36);
	MakeName	(0X43F36,	"GetPid_1192_DesiredIdleSpeed");
	MakeCode	(0X43F48);
	MakeName	(0X43F48,	"GetPid_119B");
	MakeCode	(0X43F56);
	MakeName	(0X43F56,	"GetPid_119D_BarometricPressure");
	MakeCode	(0X43F74);
	MakeCode	(0X43F78);
	MakeName	(0X43F78,	"GetPid_119E_AirFuelRatio");
	MakeCode	(0X43F90);
	MakeName	(0X43F90,	"GetPid_119F");
	MakeCode	(0X43FA6);
	MakeCode	(0X43FB2);
	MakeName	(0X43FB2,	"GetPid_11A1_EngineRunTime");
	MakeCode	(0X43FC2);
	MakeName	(0X43FC2,	"GetPid_11A6");
	MakeCode	(0X43FDA);
	MakeCode	(0X43FDE);
	MakeName	(0X43FDE,	"GetPid_11BB_EGRClosedPositionVolts");
	MakeCode	(0X43FE6);
	MakeName	(0X43FE6,	"GetPid_11BD_EGRTestCount");
	MakeCode	(0X43FEC);
	MakeName	(0X43FEC,	"GetPid_11C1_EGRPositionError");
	MakeCode	(0X43FF8);
	MakeName	(0X43FF8,	"GetPid_11D7_OResponseLeantoRichSwitchesBankSensor");
	MakeCode	(0X43FFE);
	MakeName	(0X43FFE,	"GetPid_11E4_CylinderModeMisfireIndex");
	MakeCode	(0X44004);
	MakeName	(0X44004,	"GetPid_11E5");
	MakeCode	(0X4400A);
	MakeName	(0X4400A,	"GetPid_11E6_RevolutionModeMisfireIndexBalanceTime");
	MakeCode	(0X44010);
	MakeName	(0X44010,	"GetPid_11E7");
	MakeCode	(0X44016);
	MakeName	(0X44016,	"GetPid_11E8");
	MakeCode	(0X4401C);
	MakeName	(0X4401C,	"GetPid_11E9");
	MakeCode	(x=0X44022);
	OpSign		(x,	1);
	MakeName	(0X44022,	"GetPid_11EA_MisfireCurrentCylinder");
	MakeCode	(0X44046);
	MakeCode	(x=0X4404E);
	OpSign		(x,	1);
	MakeName	(0X4404E,	"GetPid_11EB_MisfireCurrentCylinder");
	MakeCode	(0X44072);
	MakeCode	(x=0X4407A);
	OpSign		(x,	1);
	MakeName	(0X4407A,	"GetPid_11EC_MisfireCurrentCylinder");
	MakeCode	(0X4409E);
	MakeCode	(x=0X440A6);
	OpSign		(x,	1);
	MakeName	(0X440A6,	"GetPid_11ED_MisfireCurrentCylinder");
	MakeCode	(0X440CA);
	MakeCode	(0X440D2);
	MakeName	(0X440D2,	"GetPid_11F2");
	MakeCode	(0X440D8);
	MakeName	(0X440D8,	"GetPid_11F3_TotalMisfiresperTestSpecial");
	MakeCode	(0X440DE);
	MakeName	(0X440DE,	"GetPid_11F4");
	MakeCode	(0X440E4);
	MakeName	(0X440E4,	"GetPid_11F5");
	MakeCode	(0X440EA);
	MakeName	(0X440EA,	"GetPid_11F6");
	MakeCode	(0X440F0);
	MakeName	(0X440F0,	"GetPid_11F7");
	MakeCode	(x=0X440F6);
	OpSign		(x,	1);
	MakeName	(0X440F6,	"GetPid_11F8_MisfireHistoryCylinder");
	MakeCode	(0X4411A);
	MakeCode	(x=0X44122);
	OpSign		(x,	1);
	MakeName	(0X44122,	"GetPid_11F9_MisfireHistoryCylinder");
}


static Bytes_13(void) {
        auto x;
#define id x

	MakeCode	(0X44146);
	MakeCode	(x=0X4414E);
	OpSign		(x,	1);
	MakeName	(0X4414E,	"GetPid_11FA_MisfireHistoryCylinder");
	MakeCode	(0X44172);
	MakeCode	(x=0X4417A);
	OpSign		(x,	1);
	MakeName	(0X4417A,	"GetPid_11FB_MisfireHistoryCylinder");
	MakeCode	(0X4419E);
	MakeCode	(0X441A6);
	MakeName	(0X441A6,	"GetPid_1200_TotalMisfireCurrentCount");
	MakeCode	(x=0X441AC);
	OpSign		(x,	1);
	MakeName	(0X441AC,	"GetPid_1201_MisfireHistoryCylinder");
	MakeCode	(0X441D0);
	MakeCode	(x=0X441D8);
	OpSign		(x,	1);
	MakeName	(0X441D8,	"GetPid_1202_MisfireHistoryCylinder");
	MakeCode	(0X441FC);
	MakeCode	(x=0X44204);
	OpSign		(x,	1);
	MakeName	(0X44204,	"GetPid_1203_MisfireHistoryCylinder");
	MakeCode	(0X44228);
	MakeCode	(x=0X44230);
	OpSign		(x,	1);
	MakeName	(0X44230,	"GetPid_1204_MisfireHistoryCylinder");
	MakeCode	(0X44254);
	MakeCode	(x=0X4425C);
	OpSign		(x,	1);
	MakeName	(0X4425C,	"GetPid_1205_MisfireCurrentCylinder");
	MakeCode	(0X44280);
	MakeCode	(x=0X44288);
	OpSign		(x,	1);
	MakeName	(0X44288,	"GetPid_1206_MisfireCurrentCylinder");
	MakeCode	(0X442AC);
	MakeCode	(x=0X442B4);
	OpSign		(x,	1);
	MakeName	(0X442B4,	"GetPid_1207_MisfireCurrentCylinder");
	MakeCode	(0X442D8);
	MakeCode	(x=0X442E0);
	OpSign		(x,	1);
	MakeName	(0X442E0,	"GetPid_1208_MisfireCurrentCylinder");
	MakeCode	(0X44304);
	MakeCode	(0X4430C);
	MakeName	(0X4430C,	"GetPid_120A_ShortTermFuelTrimBank");
	MakeCode	(0X44312);
	MakeName	(0X44312,	"GetPid_120B_LongTermFuelTrimBank");
	MakeCode	(0X44318);
	MakeName	(0X44318,	"GetPid_120C_ShortTermFuelTrimBank");
	MakeCode	(0X4431E);
	MakeName	(0X4431E,	"GetPid_1212_RichLeantoLeanRichRatioSen");
	MakeCode	(0X44326);
	MakeName	(0X44326,	"GetPid_1216_OResponseRichtoLeanSwitchesBankSensor");
	MakeCode	(0X4432C);
	MakeName	(0X4432C,	"GetPid_1217_OResponseLeantoRichSwitchesBankSensor");
	MakeCode	(0X44332);
	MakeName	(0X44332,	"GetPid_121A_OResponseRichtoLeanSwitchesBankSensor");
	MakeCode	(0X44338);
	MakeName	(0X44338,	"GetPid_1221");
	MakeCode	(0X4433E);
	MakeName	(0X4433E,	"GetPid_1227_TotalMisfireFailuresSinceFirstFail");
	MakeCode	(0X44344);
	MakeName	(0X44344,	"GetPid_1228_TotalMisfirePassesSinceFirstFail");
	MakeCode	(0X4434A);
	MakeName	(0X4434A,	"GetPid_1229");
	MakeCode	(0X44350);
	MakeName	(0X44350,	"GetPid_122A_CyclesofMisfireData");
	MakeCode	(0X44356);
	MakeName	(0X44356,	"GetPid_1232_Warmupcycleswithoutanemissionfault");
	MakeCode	(0X4435C);
	MakeName	(0X4435C,	"GetPid_1233_Warmupcycleswithoutanonemissionfault");
	MakeCode	(0X44362);
	MakeName	(0X44362,	"GetPid_1234_MileageSinceLastCodeClear");
	MakeCode	(0X44368);
	MakeName	(0X44368,	"GetPid_1235_MileageSinceFirstFail");
	MakeCode	(0X4436E);
	MakeName	(0X4436E,	"GetPid_1236_MileageSinceLastFail");
	MakeCode	(0X44374);
	MakeName	(0X44374,	"GetPid_1237_FailCounter");
	MakeCode	(0X4437A);
	MakeName	(0X4437A,	"GetPid_1238_PassCounter");
	MakeCode	(0X44380);
	MakeName	(0X44380,	"GetPid_1239_NoResultsCounter");
	MakeCode	(0X44386);
	MakeName	(0X44386,	"GetPid_123A_LongTermFuelTrimBank");
	MakeCode	(0X4438C);
	MakeName	(0X4438C,	"GetPid_1243");
	MakeCode	(0X443A0);
	MakeName	(0X443A0,	"GetPid_1244");
	MakeCode	(0X443B4);
	MakeName	(0X443B4,	"GetPid_1245");
	MakeCode	(0X443C8);
	MakeName	(0X443C8,	"GetPid_1246_OResponseRichtoLeanAverageTimeBankSensor");
	MakeCode	(0X443DC);
	MakeName	(0X443DC,	"GetPid_1247");
	MakeCode	(0X443E4);
	MakeName	(0X443E4,	"GetPid_1250_MAFFrequencyHz");
	MakeCode	(0X443EA);
	MakeName	(0X443EA,	"GetPid_1255");
	MakeCode	(0X443F0);
	MakeName	(0X443F0,	"GetPid_125A_InjectorPulseWidthAverageBank");
	MakeCode	(0X443F6);
	MakeName	(0X443F6,	"GetPid_125B_InjectorPulseWidthAverageBank");
	MakeCode	(0X443FC);
	MakeName	(0X443FC,	"GetPid_1296");
	MakeCode	(0X4440A);
	MakeName	(0X4440A,	"GetPid_12B0");
	MakeCode	(0X44420);
	MakeName	(0X44420,	"GetPid_12B1");
	MakeCode	(0X44426);
	MakeName	(0X44426,	"GetPid_1324");
	MakeCode	(x=0X4442C);
	OpSign		(x,	1);
	MakeName	(0X4442C,	"GetPid_12B6");
	MakeCode	(x=0X44472);
	OpSign		(x,	1);
	MakeName	(0X44472,	"GetPid_12B8");
	MakeCode	(x=0X444B8);
	OpSign		(x,	1);
	MakeName	(0X444B8,	"GetPid_12BD");
	MakeCode	(0X444DC);
	MakeName	(0X444DC,	"GetPid_12C5_FuelLevelPercentage");
	MakeCode	(0X444F2);
	MakeName	(0X444F2,	"GetPid_12E2");
	MakeCode	(0X44504);
	MakeName	(0X44504,	"GetPid_12E3");
	MakeCode	(0X44512);
	MakeCode	(0X44528);
	MakeCode	(0X4452C);
	MakeName	(0X4452C,	"GetPid_12EA");
	MakeCode	(0X44532);
	MakeName	(0X44532,	"GetPid_12EB");
	MakeCode	(0X44548);
	MakeName	(0X44548,	"GetPid_12EE");
	MakeCode	(0X4454E);
	MakeName	(0X4454E,	"GetPid_12EF");
	MakeCode	(0X44554);
	MakeName	(0X44554,	"GetPid_12F0");
	MakeCode	(0X4455A);
	MakeName	(0X4455A,	"GetPid_12F3");
	MakeCode	(0X44568);
	MakeName	(0X44568,	"GetPid_12F5");
	MakeCode	(0X44576);
	MakeName	(0X44576,	"GetPid_12F7");
	MakeCode	(0X4457E);
	MakeName	(0X4457E,	"GetPid_12FF");
	MakeCode	(0X44584);
	MakeName	(0X44584,	"GetPid_1300");
	MakeCode	(0X4458A);
	MakeName	(0X4458A,	"GetPid_1301");
	MakeCode	(0X44590);
	MakeName	(0X44590,	"GetPid_1310");
	MakeCode	(0X44596);
	MakeName	(0X44596,	"GetPid_1311");
	MakeCode	(0X4459C);
	MakeName	(0X4459C,	"GetPid_1312");
	MakeCode	(0X445A2);
	MakeName	(0X445A2,	"GetPid_132B");
	MakeCode	(0X445A8);
	MakeName	(0X445A8,	"GetPid_132C");
	MakeCode	(0X445AE);
	MakeName	(0X445AE,	"GetPid_130E");
	MakeCode	(0X445C8);
	MakeCode	(0X445D8);
	MakeName	(0X445D8,	"GetPid_130F");
	MakeCode	(0X445DE);
	MakeName	(0X445DE,	"GetPid_1315");
	MakeCode	(0X445E4);
	MakeName	(0X445E4,	"GetPid_1316");
	MakeCode	(0X445EA);
	MakeName	(0X445EA,	"GetPid_1317");
	MakeCode	(0X445F0);
	MakeName	(0X445F0,	"GetPid_1318");
	MakeCode	(0X445F6);
	MakeName	(0X445F6,	"GetPid_1319");
	MakeCode	(0X445FC);
	MakeName	(0X445FC,	"GetPid_131A");
	MakeCode	(0X44602);
	MakeName	(0X44602,	"GetPid_131B");
	MakeCode	(0X44608);
	MakeName	(0X44608,	"GetPid_131C");
	MakeCode	(0X4460E);
	MakeName	(0X4460E,	"GetPid_131D");
	MakeCode	(0X44616);
	MakeName	(0X44616,	"GetPid_131E");
	MakeCode	(0X4461C);
	MakeName	(0X4461C,	"GetPid_131F");
	MakeCode	(0X44622);
	MakeName	(0X44622,	"GetPid_132A");
	MakeCode	(0X4462E);
	MakeCode	(0X44638);
	MakeName	(0X44638,	"GetPid_1336");
	MakeCode	(0X4463E);
	MakeName	(0X4463E,	"GetPid_1337");
	MakeCode	(0X44644);
	MakeName	(0X44644,	"GetPid_1338");
	MakeCode	(0X4464A);
	MakeName	(0X4464A,	"GetPid_139C");
	MakeCode	(0X44662);
	MakeName	(0X44662,	"GetPid_139D");
	MakeCode	(0X44676);
	MakeName	(0X44676,	"GetPid_1481");
	MakeCode	(0X44682);
	MakeName	(0X44682,	"GetPid_1482");
	MakeCode	(0X4468E);
	MakeName	(0X4468E,	"GetPid_1484");
	MakeCode	(0X4469A);
	MakeName	(0X4469A,	"GetPid_1485");
	MakeCode	(0X446A6);
	MakeName	(0X446A6,	"GetPid_1617");
	MakeCode	(0X446AC);
	MakeName	(0X446AC,	"GetPid_1627");
	MakeCode	(0X446BC);
	MakeName	(0X446BC,	"GetPid_1628");
	MakeCode	(0X446CC);
	MakeName	(0X446CC,	"GetPid_162B");
	MakeCode	(0X446E4);
	MakeName	(0X446E4,	"GetPid_163F");
	MakeCode	(0X446FC);
	MakeName	(0X446FC,	"GetPid_1900");
	MakeCode	(0X44712);
	MakeCode	(0X44736);
	MakeCode	(0X44750);
	MakeCode	(0X44760);
	MakeName	(0X44760,	"GetPid_1901");
	MakeCode	(0X4476E);
	MakeCode	(0X4478C);
	MakeCode	(0X4479A);
	MakeCode	(0X447A6);
	MakeCode	(0X447BA);
	MakeCode	(0X447C0);
	MakeName	(0X447C0,	"GetPid_1921");
	MakeCode	(0X447D0);
	MakeCode	(0X447E0);
	MakeCode	(0X447F0);
	MakeCode	(0X44800);
	MakeCode	(0X44810);
	MakeCode	(0X44820);
	MakeCode	(0X44830);
	MakeCode	(0X4483E);
	MakeCode	(0X44844);
	MakeName	(0X44844,	"GetPid_1922");
	MakeCode	(0X44856);
	MakeCode	(0X4486C);
	MakeCode	(0X44884);
	MakeCode	(0X44894);
	MakeCode	(0X448A6);
	MakeCode	(0X448B6);
	MakeCode	(0X448BC);
	MakeName	(0X448BC,	"GetPid_1923");
	MakeCode	(0X448CA);
	MakeCode	(0X448DC);
	MakeCode	(0X448EE);
	MakeCode	(0X44900);
	MakeCode	(0X44912);
	MakeCode	(0X44924);
	MakeCode	(0X44936);
	MakeCode	(0X44948);
	MakeCode	(0X4494E);
	MakeName	(0X4494E,	"GetPid_1924");
	MakeCode	(0X4495C);
	MakeCode	(0X44972);
	MakeCode	(0X4498C);
	MakeCode	(0X449A2);
	MakeName	(0X449A2,	"GetPid_1925");
	MakeCode	(0X449C2);
	MakeCode	(0X449D2);
	MakeCode	(0X449E4);
	MakeCode	(0X449F6);
	MakeCode	(0X449FC);
	MakeName	(0X449FC,	"GetPid_1927");
	MakeCode	(0X44A08);
	MakeCode	(0X44A18);
	MakeCode	(0X44A28);
	MakeCode	(0X44A38);
	MakeCode	(0X44A4E);
	MakeCode	(0X44A64);
	MakeCode	(0X44A6A);
	MakeName	(0X44A6A,	"GetPid_1928");
	MakeCode	(0X44A78);
	MakeCode	(0X44A8C);
	MakeCode	(0X44A9C);
	MakeCode	(0X44AB4);
	MakeCode	(0X44AC4);
	MakeCode	(0X44ACA);
	MakeName	(0X44ACA,	"GetPid_1929");
	MakeCode	(0X44ADA);
	MakeCode	(0X44AEE);
	MakeCode	(0X44AFE);
	MakeCode	(0X44B0E);
	MakeCode	(0X44B1E);
	MakeCode	(0X44B2E);
	MakeCode	(0X44B3E);
	MakeCode	(0X44B44);
	MakeName	(0X44B44,	"GetPid_192A");
	MakeCode	(0X44B52);
	MakeCode	(0X44B66);
	MakeCode	(0X44B76);
	MakeCode	(0X44B86);
	MakeCode	(0X44B9A);
	MakeCode	(0X44BAA);
	MakeCode	(0X44BBA);
	MakeCode	(x=0X44BC0);
	OpSign		(x,	1);
	MakeName	(0X44BC0,	"GetPid_192B");
	MakeCode	(0X44BE8);
	MakeName	(0X44BE8,	"GetPid_192D");
	MakeCode	(0X44C04);
	MakeCode	(0X44C14);
	MakeCode	(0X44C2A);
	MakeCode	(0X44C40);
	MakeCode	(0X44C4E);
	MakeCode	(0X44C5A);
	MakeCode	(0X44C64);
	MakeName	(0X44C64,	"GetPid_1940_TransmissionOilTemperature");
	MakeCode	(0X44C86);
	MakeCode	(0X44C8A);
	MakeName	(0X44C8A,	"GetPid_1941_TransmissionInputShaftSpeed");
	MakeCode	(0X44C92);
	MakeName	(0X44C92,	"GetPid_1942_TransmissionOutputShaftSpeed");
	MakeCode	(0X44C9A);
	MakeName	(0X44C9A,	"GetPid_195D");
	MakeCode	(0X44CA0);
	MakeName	(0X44CA0,	"GetPid_1970_TCCPWMDutyCycle");
	MakeCode	(0X44CA8);
	MakeName	(0X44CA8,	"GetPid_1971");
	MakeCode	(0X44CB0);
	MakeName	(0X44CB0,	"GetPid_1973");
	MakeCode	(0X44CB6);
	MakeName	(0X44CB6,	"GetPid_1972_PCPressureControlSolenoidDutyCycle");
	MakeCode	(0X44CC4);
	MakeCode	(0X44CC8);
	MakeName	(0X44CC8,	"GetPid_1975");
	MakeCode	(0X44CCE);
	MakeName	(0X44CCE,	"GetPid_1976");
	MakeCode	(0X44CD4);
	MakeName	(0X44CD4,	"GetPid_1991_TCCSlipSpeed");
	MakeCode	(0X44CE4);
	MakeCode	(0X44CEA);
	MakeName	(0X44CEA,	"GetPid_1992_TimeofLatestShift");
	MakeCode	(0X44CFC);
	MakeName	(0X44CFC,	"GetPid_1993_TimeofLatestShift");
	MakeCode	(0X44D0E);
	MakeName	(0X44D0E,	"GetPid_1994_TimeofLatestShift");
	MakeCode	(0X44D20);
	MakeName	(0X44D20,	"GetPid_1995_TimeofLatestShift");
	MakeCode	(0X44D32);
	MakeName	(0X44D32,	"GetPid_1996_ShiftTimeErrorforLatestShift");
	MakeCode	(0X44D54);
	MakeCode	(0X44D58);
	MakeName	(0X44D58,	"GetPid_1997_ShiftTimeErrorforShift");
	MakeCode	(0X44D72);
	MakeCode	(0X44D76);
	MakeName	(0X44D76,	"GetPid_1998_ShiftTimeErrorforShift");
	MakeCode	(0X44D90);
	MakeCode	(0X44D94);
	MakeName	(0X44D94,	"GetPid_1999_ShiftTimeErrorforShift");
	MakeCode	(0X44DAE);
	MakeCode	(0X44DB2);
	MakeName	(0X44DB2,	"GetPid_199A");
	MakeCode	(0X44DBA);
	MakeName	(0X44DBA,	"GetPid_199B");
	MakeCode	(0X44DC0);
	MakeName	(0X44DC0,	"GetPid_199C_CurrentTAPTransmissionAdaptivePressureCell");
	MakeCode	(0X44DCE);
	MakeCode	(0X44DD2);
	MakeName	(0X44DD2,	"GetPid_199D_TransmissionPressure");
	MakeCode	(0X44DDA);
	MakeName	(0X44DDA,	"GetPid_199E_PressureControlActualCurrent");
	MakeCode	(0X44DF2);
	MakeName	(0X44DF2,	"GetPid_199F_PressureControlReferenceCircuit");
	MakeCode	(0X44E02);
	MakeName	(0X44E02,	"GetPid_19A0_ShiftDelay");
	MakeCode	(0X44E1C);
	MakeName	(0X44E1C,	"GetPid_19A1");
	MakeCode	(0X44E2E);
	MakeName	(0X44E2E,	"GetPid_19AD_TransmissionTempSensor");
	MakeCode	(0X44E3A);
	MakeName	(0X44E3A,	"GetPid_19D4");
	MakeCode	(0X44E42);
	MakeName	(0X44E42,	"GetPid_19DE");
	MakeCode	(0X44E4A);
	MakeName	(0X44E4A,	"GetPid_19FF");
	MakeCode	(0X44E5C);
	MakeName	(0X44E5C,	"GetPid_1A02");
	MakeCode	(0X44E64);
	MakeName	(0X44E64,	"GetPid_1A13");
	MakeCode	(0X44E6A);
	MakeName	(0X44E6A,	"GetPid_1A88");
	MakeCode	(0X44E70);
	MakeName	(0X44E70,	"GetPid_FC4A");
	MakeCode	(0X44E78);
	MakeName	(0X44E78,	"GetPid_FC48");
	MakeCode	(0X44E7E);
	MakeName	(0X44E7E,	"GetPid_FC47");
	MakeCode	(0X44E84);
	MakeName	(0X44E84,	"GetPid_FC46");
	MakeCode	(0X44EA4);
	MakeCode	(0X44EB2);
	MakeName	(0X44EB2,	"GetPid_FC45");
	MakeCode	(0X44EBE);
	MakeCode	(0X44ED0);
	MakeCode	(0X44EE2);
	MakeCode	(0X44EF2);
	MakeCode	(0X44F06);
	MakeCode	(0X44F1A);
	MakeCode	(0X44F20);
	MakeName	(0X44F20,	"GetPid_FC43");
	MakeCode	(0X44F26);
	MakeName	(0X44F26,	"GetPid_FC41");
	MakeCode	(0X44F2C);
	MakeName	(0X44F2C,	"GetPid_FC40");
	MakeCode	(0X44F34);
	MakeName	(0X44F34,	"GetPid_FC30");
	MakeCode	(0X44F3A);
	MakeName	(0X44F3A,	"GetPid_FC2C");
	MakeCode	(0X44F40);
	MakeName	(0X44F40,	"GetPid_FC25");
	MakeCode	(0X44F46);
	MakeName	(0X44F46,	"GetPid_FC24");
	MakeCode	(0X44F4C);
	MakeName	(0X44F4C,	"GetPid_FC22");
	MakeCode	(0X44F52);
	MakeName	(0X44F52,	"GetPid_FC1E");
	MakeCode	(0X44F58);
	MakeName	(0X44F58,	"GetPid_FC1C");
	MakeCode	(0X44F5E);
	MakeName	(0X44F5E,	"GetPid_FC12");
	MakeCode	(0X44F64);
	MakeName	(0X44F64,	"GetPid_FC39");
	MakeCode	(x=0X44F6A);
	OpSign		(x,	1);
	MakeName	(0X44F6A,	"ModeInitHandler");
	MakeCode	(x=0X44F76);
	OpStkvar	(x,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X44F7C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X44F8A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X44F9C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X44FAC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X44FB8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X45014);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X45020);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4505E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4506C);
	OpStkvar	(x,	1);
	MakeCode	(0X45074);
	MakeCode	(x=0X45078);
	OpStkvar	(x,	0);
	MakeCode	(x=0X45088);
	OpStkvar	(x,	0);
	MakeCode	(0X45094);
	MakeCode	(x=0X45098);
	OpStkvar	(x,	0);
	MakeCode	(x=0X450A8);
	OpStkvar	(x,	0);
	MakeCode	(x=0X450BC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X450C0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X450C4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X450CA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X450D6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X450F0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X45128);
	OpStkvar	(x,	0);
	MakeCode	(0X45138);
	MakeCode	(0X45152);
	MakeCode	(0X4519E);
	MakeCode	(x=0X451EA);
	OpSign		(x,	1);
	MakeCode	(x=0X451F8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X45202);
	OpStkvar	(x,	0);
	MakeCode	(x=0X45206);
	OpStkvar	(x,	0);
	MakeCode	(0X45232);
	MakeCode	(x=0X45244);
	OpStkvar	(x,	0);
	MakeCode	(x=0X45252);
	OpStkvar	(x,	0);
	MakeCode	(0X4526C);
	MakeCode	(0X45272);
	MakeCode	(x=0X45274);
	OpStkvar	(x,	0);
	MakeCode	(0X4527A);
	MakeCode	(x=0X45296);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X452B2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X452C4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X452D6);
	MakeCode	(x=0X452F0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X452FE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4531E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X45328);
	MakeCode	(x=0X45336);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4533E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X45346);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4534C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X45360);
	OpStkvar	(x,	0);
	MakeCode	(x=0X45366);
	OpStkvar	(x,	0);
	MakeCode	(x=0X45376);
	OpStkvar	(x,	0);
	MakeCode	(x=0X453A0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X453B0);
	MakeCode	(0X453C0);
	MakeCode	(x=0X453D4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X453F0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X453F8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X45412);
	OpStkvar	(x,	1);
	MakeCode	(x=0X45416);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4541E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X45422);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4544E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4545E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X45468);
	MakeCode	(0X4547C);
	MakeCode	(x=0X45480);
	OpStkvar	(x,	1);
	MakeCode	(x=0X45486);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4548C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X45492);
	OpStkvar	(x,	1);
	MakeCode	(x=0X45496);
	OpStkvar	(x,	0);
	MakeCode	(0X454C8);
	MakeCode	(x=0X454E2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X454EC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X45508);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X45512);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X45538);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X45542);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4555C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X45566);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4558C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X45596);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X455B0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X455BA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X455D6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X455E0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X4563C);
	MakeCode	(x=0X4564C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4565A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X45668);
	OpStkvar	(x,	0);
	MakeCode	(x=0X45676);
	OpStkvar	(x,	0);
	MakeCode	(x=0X45684);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4568A);
	OpStkvar	(x,	0);
	MakeCode	(0X4569C);
	MakeCode	(x=0X456A2);
	OpStkvar	(x,	0);
	MakeCode	(0X456B4);
	MakeCode	(x=0X456C6);
	OpStkvar	(x,	0);
	MakeCode	(0X456D0);
	MakeCode	(x=0X456DE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X456F0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X456FE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4570C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4571A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X45720);
	OpStkvar	(x,	0);
	MakeCode	(0X45734);
	MakeCode	(0X45736);
	MakeCode	(x=0X4573C);
	OpStkvar	(x,	0);
	MakeCode	(0X4574C);
	MakeCode	(x=0X45754);
	OpStkvar	(x,	0);
	MakeCode	(0X45764);
	MakeCode	(x=0X4576C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4577A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X45788);
	OpStkvar	(x,	0);
	MakeCode	(x=0X45796);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4579C);
	OpStkvar	(x,	0);
	MakeCode	(0X457AE);
	MakeCode	(x=0X457B4);
	OpStkvar	(x,	0);
	MakeCode	(0X457C4);
	MakeCode	(x=0X457CC);
	OpStkvar	(x,	0);
	MakeCode	(x=0X457DA);
	OpStkvar	(x,	0);
	MakeCode	(x=0X457E8);
	OpStkvar	(x,	0);
	MakeCode	(x=0X457F6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X457FC);
	OpStkvar	(x,	0);
	MakeCode	(0X4580E);
	MakeCode	(x=0X45814);
	OpStkvar	(x,	0);
	MakeCode	(0X45824);
	MakeCode	(x=0X4582A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4584A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X45866);
	OpStkvar	(x,	1);
	MakeCode	(x=0X45878);
	OpSign		(x,	1);
	MakeCode	(x=0X45880);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4588A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4588E);
	OpStkvar	(x,	0);
	MakeCode	(0X458A0);
	MakeCode	(0X458B2);
	MakeCode	(x=0X458B8);
	OpStkvar	(x,	0);
	MakeCode	(0X458C0);
	MakeCode	(x=0X458E6);
	OpSign		(x,	1);
	MakeCode	(x=0X458EC);
	OpStkvar	(x,	0);
	MakeCode	(x=0X458FC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X45918);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4592A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X4593C);
	MakeCode	(x=0X45956);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X45972);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X4597C);
	MakeCode	(0X45982);
	MakeCode	(x=0X45992);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X4599E);
	MakeCode	(0X459A2);
	MakeCode	(x=0X459B2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X459BE);
	MakeCode	(x=0X459CC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X459D6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X459EA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X459F4);
	MakeCode	(x=0X45A04);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X45A0E);
	MakeCode	(0X45A10);
	MakeCode	(x=0X45A22);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X45A2C);
	MakeCode	(x=0X45A3E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X45A50);
	MakeCode	(x=0X45A6C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X45A7C);
	MakeCode	(0X45A8C);
	MakeCode	(x=0X45AA0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X45ABC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X45ACC);
	MakeCode	(x=0X45AE8);
	OpSign		(x,	1);
	MakeCode	(0X45B4C);
	MakeCode	(x=0X45B50);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X45B62);
	OpStkvar	(x,	1);
	MakeCode	(x=0X45B82);
	OpStkvar	(x,	1);
	MakeCode	(0X45B8E);
	MakeCode	(x=0X45B98);
	OpStkvar	(x,	1);
	MakeCode	(0X45BA4);
	MakeCode	(0X45BAE);
	MakeCode	(x=0X45BB8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X45BCC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X45BD4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X45BE0);
	OpStkvar	(x,	0);
	MakeCode	(0X45C02);
	MakeCode	(0X45C14);
	MakeCode	(0X45CA4);
	MakeCode	(x=0X45CC4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X45CCE);
	OpSign		(x,	1);
	MakeCode	(x=0X45CD8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X45CDE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X45CE4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X45CEA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X45CEE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X45D00);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X45D10);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X45D1E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X45D3C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X45D4C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X45D76);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X45D86);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X45DA2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X45DB2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X45DC0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X45DE4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X45DF4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X45E02);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X45E1E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X45E2E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X45E3C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X45E5A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X45E6A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X45E78);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X45EA2);
	OpStkvar	(x,	1);
	MakeCode	(0X45EBA);
	MakeCode	(0X45ED2);
	MakeCode	(x=0X45EE2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X45EF4);
	OpStkvar	(x,	1);
	MakeCode	(0X45F0A);
	MakeCode	(x=0X45F14);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X45F20);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X45F3A);
	OpSign		(x,	1);
	MakeCode	(0X45F78);
	MakeCode	(0X45F9C);
	MakeCode	(0X45FC0);
	MakeCode	(0X46000);
	MakeCode	(0X4601E);
	MakeCode	(x=0X46036);
	OpStkvar	(x,	1);
	MakeCode	(x=0X46040);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4606A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X46076);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X46086);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X46094);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X460B6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X460C0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X46102);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X46110);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X46142);
	MakeCode	(0X4614C);
	MakeCode	(0X46156);
	MakeCode	(0X4615E);
	MakeCode	(0X461B0);
	MakeCode	(x=0X461E2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X461EC);
	OpStkvar	(x,	0);
	MakeCode	(0X461FE);
	MakeCode	(x=0X4626A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X462C4);
	MakeCode	(0X46320);
	MakeCode	(x=0X4634C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X46356);
	OpStkvar	(x,	0);
	MakeCode	(x=0X46394);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X463A2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X463E0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X463EE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X46414);
	MakeCode	(0X4642A);
	MakeCode	(x=0X46432);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X46440);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X46460);
	MakeCode	(0X4646C);
	MakeCode	(x=0X4648A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4648E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4649C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X464A6);
	OpStkvar	(x,	0);
	MakeCode	(0X464F0);
	MakeCode	(x=0X464FC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X46506);
	OpStkvar	(x,	0);
	MakeCode	(x=0X46518);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4652A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X465A4);
	MakeCode	(x=0X465B6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X46610);
	MakeCode	(0X46638);
	MakeCode	(x=0X4664A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X46654);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4667C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X46688);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X466CE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X466D8);
	OpStkvar	(x,	0);
	MakeCode	(x=0X46712);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4671E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4674C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X46756);
	OpStkvar	(x,	0);
	MakeCode	(x=0X46786);
	OpStkvar	(x,	1);
	MakeCode	(x=0X46790);
	OpStkvar	(x,	0);
	MakeCode	(x=0X467B0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X467BC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X467D0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X467DC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X467FC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X46806);
	OpStkvar	(x,	0);
	MakeCode	(x=0X46824);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X46830);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X46860);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4686E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4688E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X46898);
	OpStkvar	(x,	0);
	MakeCode	(x=0X468CC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X468DA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X468EC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X46912);
	OpStkvar	(x,	1);
	MakeCode	(x=0X46918);
	OpStkvar	(x,	0);
	MakeCode	(x=0X46926);
	OpStkvar	(x,	1);
	MakeCode	(x=0X46930);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4696A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X46974);
	OpStkvar	(x,	0);
	MakeCode	(x=0X469AE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X469C6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X469E2);
	MakeCode	(x=0X46A0A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X46A22);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X46A5C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X46A6A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X46A9A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X46AA8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X46AD4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X46AE2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X46B0C);
	MakeCode	(0X46B1A);
	MakeCode	(0X46B30);
	MakeCode	(0X46B3E);
	MakeCode	(x=0X46B44);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X46B52);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X46B74);
	MakeCode	(0X46B82);
	MakeCode	(x=0X46B88);
	OpStkvar	(x,	1);
	MakeCode	(x=0X46B92);
	OpStkvar	(x,	0);
	MakeCode	(x=0X46BAC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X46BB6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X46BF4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X46C02);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X46C3E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X46C48);
	OpStkvar	(x,	0);
	MakeCode	(x=0X46CB6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X46CC0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X46CFA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X46D04);
	OpStkvar	(x,	0);
	MakeCode	(x=0X46D18);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X46D40);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X46D70);
	MakeCode	(x=0X46D84);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X46D92);
	MakeCode	(x=0X46DA8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X46DB6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X46DDE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X46DE8);
	OpStkvar	(x,	0);
	MakeCode	(x=0X46DFC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X46E30);
	MakeCode	(x=0X46E52);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X46E76);
	MakeCode	(x=0X46E96);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X46EA2);
	MakeCode	(x=0X46EB8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X46EC4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X46EEA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X46EF6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X46F26);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X46F34);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X46F64);
	OpStkvar	(x,	1);
	MakeCode	(x=0X46F68);
	OpStkvar	(x,	0);
	MakeCode	(x=0X46F76);
	OpStkvar	(x,	1);
	MakeCode	(x=0X46F80);
	OpStkvar	(x,	0);
	MakeCode	(x=0X46FBE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X46FCA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X46FF6);
	MakeCode	(x=0X4701E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X47028);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4706A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X47084);
	MakeCode	(x=0X47090);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X470E0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X470EA);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4711A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X47128);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X47180);
	MakeCode	(x=0X47186);
	OpStkvar	(x,	1);
	MakeCode	(x=0X47190);
	OpStkvar	(x,	0);
	MakeCode	(0X471CA);
	MakeCode	(0X471EE);
	MakeCode	(x=0X47206);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X47214);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X4724A);
	MakeCode	(x=0X4725E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X47268);
	OpStkvar	(x,	0);
	MakeCode	(x=0X47294);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X472A2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X472EA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X472F4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X47342);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X47352);
	MakeCode	(x=0X47386);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X47394);
	MakeCode	(x=0X473D4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X473D8);
	OpStkvar	(x,	0);
	MakeCode	(x=0X473E6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X473F0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X47440);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4744A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X4745A);
	MakeCode	(x=0X47490);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4749C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X474AA);
	MakeCode	(x=0X474AE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X474DE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X474F6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X47522);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4752C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4754C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4755A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X47594);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X475A4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X475AE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X475E8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X475EC);
	OpStkvar	(x,	0);
	MakeCode	(x=0X475FA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X47604);
	OpStkvar	(x,	0);
	MakeCode	(0X4764C);
	MakeCode	(x=0X47666);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X47674);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X476A0);
	MakeCode	(x=0X476BA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X476C8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X476F8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X47706);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X47736);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X47744);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X47786);
	MakeCode	(0X4778C);
	MakeCode	(x=0X477A0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X477AA);
	OpStkvar	(x,	0);
	MakeCode	(x=0X477DA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X477E8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X47816);
	MakeCode	(x=0X4782C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4783A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X47860);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4786E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X478A0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X478AE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X478E8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X478F6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X47934);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X47942);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X47968);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X47976);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X479BE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X479CC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X479FE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X47A0C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X47A46);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X47A54);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X47A84);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X47A92);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X47AB4);
	MakeCode	(0X47ADA);
	MakeCode	(0X47AF6);
	MakeCode	(0X47B10);
	MakeCode	(x=0X47B18);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X47B24);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X47B5C);
	MakeCode	(0X47B72);
	MakeCode	(0X47B78);
	MakeCode	(0X47B88);
	MakeCode	(0X47BD4);
	MakeCode	(0X47C08);
	MakeCode	(0X47C54);
	MakeCode	(0X47C6C);
	MakeCode	(0X47C82);
	MakeCode	(0X47CB0);
	MakeCode	(0X47CCA);
	MakeCode	(0X47CE2);
	MakeCode	(0X47CFE);
	MakeCode	(0X47D1C);
	MakeCode	(0X47D2E);
	MakeCode	(0X47D4A);
	MakeCode	(0X47D6E);
	MakeCode	(0X47D88);
	MakeCode	(0X47D9A);
	MakeCode	(x=0X47DA2);
	OpSign		(x,	1);
	MakeCode	(x=0X47DCE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X47DD2);
	OpStkvar	(x,	0);
	MakeCode	(0X47E50);
	MakeCode	(0X47E6E);
	MakeCode	(x=0X47EAE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X47EB2);
	OpStkvar	(x,	0);
	MakeCode	(x=0X47EC8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X47ED4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X47EE6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X47EF4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X47F2A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X47F2E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X47F4C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X47F58);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X47F68);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X47F74);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X47F84);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X47FB2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X47FE6);
	MakeCode	(0X47FFC);
	MakeCode	(0X48012);
	MakeCode	(0X48018);
	MakeCode	(0X4802A);
	MakeCode	(x=0X48036);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X48042);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X48052);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4805E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X480C8);
	MakeCode	(x=0X480D4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X480E2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X48106);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X48122);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X48130);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X48174);
	MakeCode	(x=0X4819C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X481A0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X481BA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X481CE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X481D4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X481E2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4821C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X48220);
	OpStkvar	(x,	0);
	MakeCode	(x=0X48254);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X48282);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X48290);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X482BE);
	MakeCode	(0X482D4);
	MakeCode	(0X482E6);
	MakeCode	(0X48302);
	MakeCode	(0X4831C);
	MakeCode	(0X48336);
	MakeCode	(0X48350);
	MakeCode	(0X48378);
	MakeCode	(0X48390);
	MakeCode	(0X483A8);
	MakeCode	(0X483C4);
	MakeCode	(0X483DE);
	MakeCode	(0X483F6);
	MakeCode	(0X48416);
	MakeCode	(0X48446);
	MakeCode	(0X4845E);
	MakeCode	(0X48486);
	MakeCode	(0X484A0);
	MakeCode	(0X484B4);
	MakeCode	(0X484C6);
	MakeCode	(0X484E0);
	MakeCode	(0X484FA);
	MakeCode	(0X48512);
	MakeCode	(0X4852A);
	MakeCode	(0X4854A);
	MakeCode	(0X48564);
	MakeCode	(0X48572);
	MakeCode	(0X48582);
	MakeCode	(0X485CA);
	MakeCode	(0X485FE);
	MakeCode	(0X48604);
	MakeCode	(0X4869E);
	MakeCode	(0X486AC);
	MakeCode	(0X4874C);
	MakeCode	(x=0X48914);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4891E);
	OpStkvar	(x,	0);
	MakeCode	(0X4894C);
	MakeCode	(x=0X48A5E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X48A70);
	MakeCode	(0X48A9C);
	MakeCode	(0X48ABC);
	MakeCode	(0X48ADE);
	MakeCode	(0X48B16);
	MakeCode	(x=0X48B1E);
	OpDecimal	(x,	1);
	MakeCode	(0X48B32);
	MakeCode	(0X48B68);
	MakeCode	(0X48B8E);
	MakeCode	(0X48BA0);
	MakeCode	(0X48BC2);
	MakeCode	(0X48BE6);
	MakeCode	(0X48C84);
	MakeCode	(0X48CA0);
	MakeCode	(0X48CB4);
	MakeCode	(0X48CBC);
	MakeCode	(0X48CEE);
	MakeCode	(0X48D2C);
	MakeCode	(0X48D38);
	MakeCode	(0X48D42);
	MakeCode	(0X48D50);
	MakeCode	(0X48D5E);
	MakeCode	(0X48D6A);
	MakeCode	(0X48D78);
	MakeCode	(0X48D86);
	MakeCode	(0X48D92);
	MakeCode	(0X48D9E);
	MakeCode	(0X48DBA);
	MakeCode	(x=0X48DC2);
	OpDecimal	(x,	1);
	MakeCode	(0X48DDE);
	MakeCode	(x=0X48E36);
	OpSign		(x,	1);
	MakeCode	(0X48EA8);
	MakeCode	(x=0X48EAC);
	OpDecimal	(x,	0);
	MakeCode	(0X48ECE);
	MakeCode	(0X48EEA);
	MakeCode	(0X48F06);
	MakeCode	(0X48F14);
	MakeCode	(0X48F38);
	MakeCode	(0X48F5A);
	MakeCode	(0X48F62);
	MakeCode	(0X48F80);
	MakeCode	(x=0X48F8A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X48F98);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X48FB2);
	MakeCode	(0X48FD2);
	MakeCode	(0X48FDC);
	MakeCode	(0X48FF6);
	MakeCode	(0X49000);
	MakeCode	(0X49024);
	MakeCode	(x=0X49036);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X49044);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X4905E);
	MakeCode	(x=0X49066);
	OpDecimal	(x,	1);
	MakeCode	(0X4907A);
	MakeCode	(x=0X4908E);
	OpSign		(x,	1);
	MakeCode	(0X490D8);
	MakeCode	(0X4910A);
	MakeCode	(0X49112);
	MakeCode	(0X49128);
	MakeCode	(0X49144);
	MakeCode	(0X4914C);
	MakeCode	(0X49166);
	MakeCode	(0X4916E);
	MakeCode	(0X49188);
	MakeCode	(0X49190);
	MakeCode	(0X491AA);
	MakeCode	(0X491B2);
	MakeCode	(0X491CC);
	MakeCode	(0X491D4);
	MakeCode	(0X491F6);
	MakeCode	(0X49200);
	MakeCode	(0X49220);
	MakeCode	(0X4926C);
	MakeCode	(0X49280);
	MakeCode	(0X49296);
	MakeCode	(0X492A4);
	MakeCode	(0X492E8);
	MakeCode	(0X492F4);
	MakeCode	(0X4930E);
	MakeCode	(x=0X4931A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X49326);
	MakeCode	(0X49350);
	MakeCode	(0X49356);
	MakeCode	(0X49362);
	MakeCode	(0X49372);
	MakeCode	(x=0X49382);
	OpSign		(x,	1);
	MakeCode	(x=0X4938C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X49396);
	OpStkvar	(x,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4939C);
	OpStkvar	(x,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X493A2);
	OpStkvar	(x,	0);
	MakeCode	(x=0X493AA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X493BA);
	OpStkvar	(x,	0);
	MakeCode	(x=0X493C4);
	OpStkvar	(x,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X493CA);
	OpStkvar	(x,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X493D0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X493D4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X493DA);
	OpStkvar	(x,	0);
	MakeCode	(x=0X493E0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X493E6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X493EA);
	OpStkvar	(x,	0);
	MakeCode	(x=0X493F2);
	OpStkvar	(x,	0);
	MakeCode	(x=0X493FC);
	OpStkvar	(x,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X49402);
	OpStkvar	(x,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X49408);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4940C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X49412);
	OpStkvar	(x,	0);
	MakeCode	(x=0X49418);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4941E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X49422);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4942A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X49434);
	OpStkvar	(x,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4943A);
	OpStkvar	(x,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X49440);
	OpStkvar	(x,	0);
	MakeCode	(x=0X49444);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4944A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X49450);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4945A);
	OpStkvar	(x,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X49460);
	OpStkvar	(x,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X49468);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4946E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X49472);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4947A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X49484);
	OpStkvar	(x,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4948A);
	OpStkvar	(x,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X49490);
	OpStkvar	(x,	0);
	MakeCode	(x=0X49494);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4949A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X494A0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X494A6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X494AA);
	OpStkvar	(x,	0);
	MakeCode	(x=0X494B8);
	OpSign		(x,	1);
	MakeCode	(x=0X494D8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X494E0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X494E8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X494F0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X494FC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X49504);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4950C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X49514);
	OpStkvar	(x,	1);
	MakeCode	(0X49522);
	MakeCode	(x=0X49530);
	OpStkvar	(x,	1);
	MakeCode	(x=0X49538);
	OpStkvar	(x,	1);
	MakeCode	(x=0X49540);
	OpStkvar	(x,	1);
	MakeCode	(x=0X49548);
	OpStkvar	(x,	1);
	MakeCode	(0X49554);
	MakeCode	(0X4956C);
	MakeCode	(x=0X4956E);
	OpStkvar	(x,	0);
	MakeCode	(0X4957A);
	MakeCode	(x=0X49582);
	OpSign		(x,	1);
	MakeCode	(0X4959C);
	MakeCode	(x=0X495A4);
	OpStkvar	(x,	1);
	MakeCode	(0X495AA);
	MakeCode	(x=0X495B2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X495E8);
	OpDecimal	(x,	0);
	MakeCode	(x=0X495EC);
	OpDecimal	(x,	0);
	MakeCode	(0X495F2);
	MakeCode	(x=0X495FA);
	OpSign		(x,	1);
	OpDecimal	(x,	1);
	MakeCode	(x=0X49626);
	OpSign		(x,	1);
	OpDecimal	(x,	1);
	MakeCode	(x=0X49652);
	OpSign		(x,	1);
	MakeCode	(0X4967E);
	MakeCode	(0X49690);
	MakeCode	(0X496A0);
	MakeCode	(0X496AA);
	MakeCode	(0X496BA);
	MakeCode	(0X496CA);
	MakeCode	(x=0X496CC);
	OpDecimal	(x,	0);
	MakeCode	(0X496DA);
	MakeCode	(0X496EA);
	MakeCode	(0X496FA);
	MakeCode	(0X4970A);
	MakeCode	(0X4971A);
	MakeCode	(0X4972A);
	MakeCode	(0X4973A);
	MakeCode	(0X4974A);
	MakeCode	(x=0X497C2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X497CC);
	MakeCode	(x=0X497D4);
	OpSign		(x,	1);
	MakeCode	(x=0X497DE);
	OpStkvar	(x,	0);
	MakeCode	(0X497EE);
	MakeCode	(0X497F8);
	MakeCode	(0X4980A);
	MakeCode	(x=0X49830);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X49838);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X49846);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X49856);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X4986E);
	MakeCode	(x=0X49872);
	OpDecimal	(x,	0);
	MakeCode	(0X49878);
	MakeCode	(0X4988A);
	MakeCode	(0X4988E);
	MakeCode	(0X4989C);
	MakeCode	(0X498A4);
	MakeCode	(0X498B2);
	MakeCode	(0X498C0);
	MakeCode	(0X498CE);
	MakeCode	(0X498DC);
	MakeCode	(0X498EA);
	MakeCode	(0X498F8);
	MakeCode	(0X49906);
	MakeCode	(x=0X49908);
	OpDecimal	(x,	0);
	MakeCode	(0X49914);
	MakeCode	(0X49922);
	MakeCode	(0X49930);
	MakeCode	(0X49940);
	MakeCode	(0X49950);
	MakeCode	(x=0X49952);
	OpDecimal	(x,	0);
	MakeCode	(0X49960);
	MakeCode	(x=0X49962);
	OpDecimal	(x,	0);
	MakeCode	(0X49970);
	MakeCode	(0X49980);
	MakeCode	(0X49990);
	MakeCode	(0X499A0);
	MakeCode	(0X499B0);
	MakeCode	(0X499C0);
	MakeCode	(0X499D0);
	MakeCode	(0X499E0);
	MakeCode	(0X499F0);
	MakeCode	(0X499FA);
	MakeCode	(0X49A0C);
	MakeCode	(0X49A10);
	MakeCode	(0X49A1A);
	MakeCode	(0X49A2C);
	MakeCode	(0X49A30);
	MakeCode	(0X49A3A);
	MakeCode	(0X49A4C);
	MakeCode	(0X49A50);
	MakeCode	(0X49A5A);
	MakeCode	(0X49A6C);
	MakeCode	(0X49A70);
	MakeCode	(0X49A7A);
	MakeCode	(0X49A8C);
	MakeCode	(0X49A90);
	MakeCode	(0X49AA0);
	MakeCode	(0X49AB0);
	MakeCode	(0X49AC0);
	MakeCode	(0X49AD0);
	MakeCode	(0X49AE0);
	MakeCode	(0X49AF0);
	MakeCode	(0X49B00);
	MakeCode	(x=0X49B02);
	OpDecimal	(x,	0);
	MakeCode	(0X49B10);
	MakeCode	(0X49B20);
	MakeCode	(x=0X49B22);
	OpDecimal	(x,	0);
	MakeCode	(0X49B30);
	MakeCode	(0X49B40);
	MakeCode	(0X49B50);
	MakeName	(0X49B50,	"GetPid_0021");
	MakeCode	(0X49B56);
	MakeName	(0X49B56,	"GetPid_001E");
	MakeCode	(0X49B8A);
	MakeCode	(0X49B90);
	MakeName	(0X49B90,	"GetPid_001C_OBDRequirements");
	MakeCode	(x=0X49B98);
	OpSign		(x,	1);
	MakeName	(0X49B98,	"GetPid_0019_OBS");
	MakeCode	(x=0X49BC2);
	OpSign		(x,	1);
	MakeName	(0X49BC2,	"GetPid_0018_OBS");
	MakeCode	(0X49C02);
	MakeCode	(x=0X49C10);
	OpSign		(x,	1);
	MakeName	(0X49C10,	"GetPid_0015_OBS");
	MakeCode	(x=0X49C3A);
	OpSign		(x,	1);
	MakeName	(0X49C3A,	"GetPid_0014_OBS");
	MakeCode	(0X49C7A);
	MakeCode	(0X49C88);
	MakeName	(0X49C88,	"GetPid_0013_ReportOSensorConfiguration");
	MakeCode	(0X49C90);
	MakeName	(0X49C90,	"GetPid_0012_CommandedSecondaryAir");
	MakeCode	(0X49CB0);
	MakeCode	(0X49CC2);
	MakeCode	(0X49CC8);
	MakeName	(0X49CC8,	"GetPid_0011_ThrottlePositionSensor");
	MakeCode	(0X49CD4);
	MakeCode	(0X49CE2);
	MakeName	(0X49CE2,	"GetPid_0010_MassAirFlow");
	MakeCode	(0X49CEE);
	MakeName	(0X49CEE,	"GetPid_000F_IntakeAirTemperature");
	MakeCode	(0X49D00);
	MakeName	(0X49D00,	"GetPid_000E_IgnitionTimingAdvance");
	MakeCode	(0X49D0C);
	MakeCode	(0X49D26);
	MakeCode	(0X49D2A);
	MakeName	(0X49D2A,	"GetPid_000D_SpeedinKPH");
	MakeCode	(x=0X49D38);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X49D62);
	MakeName	(0X49D62,	"GetPid_000C_EngineRPMHighResolutionRPMx");
	MakeCode	(0X49D6E);
	MakeName	(0X49D6E,	"GetPid_000B_ManifoldAbsolutePressure");
	MakeCode	(0X49D7A);
	MakeName	(0X49D7A,	"GetPid_0009_LongTermFuelTrimBank");
	MakeCode	(0X49D9E);
	MakeCode	(0X49DA2);
	MakeName	(0X49DA2,	"GetPid_0008_ShortTermFuelTrimBank");
	MakeCode	(0X49DC6);
	MakeCode	(0X49DCA);
	MakeName	(0X49DCA,	"GetPid_0007_LongTermFuelTrimBank");
	MakeCode	(0X49DEE);
	MakeCode	(0X49DF2);
	MakeName	(0X49DF2,	"GetPid_0006_ShortTermFuelTrimBank");
	MakeCode	(0X49E16);
	MakeCode	(0X49E1A);
	MakeName	(0X49E1A,	"GetPid_0005_EngineCoolantTemperature");
	MakeCode	(0X49E2C);
	MakeName	(0X49E2C,	"GetPid_0004_CalculatedLoad");
	MakeCode	(0X49E7E);
	MakeCode	(x=0X49E82);
	OpSign		(x,	1);
	MakeName	(0X49E82,	"GetPid_0003_FuelSystemStatus");
	MakeCode	(x=0X49E8C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X49EA4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X49EB0);
	MakeCode	(x=0X49EBC);
	OpSign		(x,	1);
	MakeName	(0X49EBC,	"GetPid_0001_NumberofEmissionRelatedDTC");
	MakeCode	(0X49EE2);
	MakeCode	(0X49F20);
	MakeCode	(0X49F34);
	MakeCode	(0X49F48);
	MakeCode	(x=0X49F60);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X49F76);
	MakeCode	(x=0X49F82);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X49F94);
	MakeCode	(x=0X49FA0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X49FB2);
	MakeCode	(0X49FD6);
	MakeCode	(0X49FEA);
	MakeCode	(0X49FFE);
	MakeCode	(0X4A012);
	MakeCode	(0X4A026);
	MakeCode	(0X4A03A);
	MakeCode	(0X4A04E);
	MakeCode	(0X4A062);
	MakeCode	(x=0X4A07C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X4A092);
	MakeCode	(x=0X4A09E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X4A0B0);
	MakeCode	(x=0X4A0BC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X4A0CE);
	MakeCode	(x=0X4A0DA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X4A0EC);
	MakeCode	(x=0X4A0F8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X4A10A);
	MakeCode	(x=0X4A116);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X4A128);
	MakeCode	(x=0X4A134);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X4A146);
	MakeCode	(x=0X4A152);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X4A164);
	MakeCode	(0X4A194);
	MakeCode	(x=0X4A1A0);
	OpStkvar	(x,	1);
	MakeCode	(0X4A1C4);
	MakeCode	(x=0X4A1E0);
	OpStkvar	(x,	1);
	MakeCode	(0X4A1F4);
	MakeCode	(x=0X4A212);
	OpStkvar	(x,	1);
	MakeCode	(0X4A226);
	MakeCode	(x=0X4A232);
	OpSign		(x,	1);
	MakeCode	(x=0X4A23A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4A244);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4A252);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4A2B8);
	OpStkvar	(x,	1);
	MakeCode	(0X4A2C2);
	MakeCode	(x=0X4A2C8);
	OpStkvar	(x,	1);
	MakeCode	(0X4A2D2);
	MakeCode	(x=0X4A2D8);
	OpStkvar	(x,	1);
	MakeCode	(0X4A2E2);
	MakeCode	(x=0X4A2E8);
	OpStkvar	(x,	1);
	MakeCode	(0X4A2F0);
	MakeCode	(x=0X4A2F6);
	OpStkvar	(x,	1);
	MakeCode	(0X4A2FE);
	MakeCode	(x=0X4A304);
	OpStkvar	(x,	1);
	MakeCode	(0X4A30C);
	MakeCode	(x=0X4A312);
	OpStkvar	(x,	1);
	MakeCode	(0X4A31A);
	MakeCode	(x=0X4A320);
	OpStkvar	(x,	1);
	MakeCode	(0X4A328);
	MakeCode	(x=0X4A32E);
	OpStkvar	(x,	1);
	MakeCode	(0X4A334);
	MakeCode	(x=0X4A33A);
	OpStkvar	(x,	1);
	MakeCode	(0X4A342);
	MakeCode	(x=0X4A348);
	OpStkvar	(x,	1);
	MakeCode	(0X4A350);
	MakeCode	(x=0X4A356);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4A35E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4A364);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4A376);
	OpStkvar	(x,	0);
	MakeCode	(0X4A382);
	MakeCode	(x=0X4A38A);
	OpStkvar	(x,	0);
	MakeCode	(0X4A390);
	MakeCode	(0X4A3A2);
	MakeCode	(0X4A3AE);
	MakeCode	(0X4A3C0);
	MakeCode	(0X4A3D6);
	MakeCode	(0X4A432);
	MakeCode	(0X4A43C);
	MakeCode	(0X4A448);
	MakeCode	(0X4A454);
	MakeCode	(0X4A45C);
	MakeCode	(x=0X4A468);
	OpDecimal	(x,	0);
	MakeCode	(x=0X4A472);
	OpDecimal	(x,	0);
	MakeCode	(0X4A47E);
	MakeCode	(0X4A48A);
	MakeCode	(x=0X4A48E);
	OpDecimal	(x,	0);
	MakeCode	(x=0X4A496);
	OpDecimal	(x,	0);
	MakeCode	(0X4A4A0);
	MakeCode	(0X4A4AC);
	MakeCode	(0X4A4BA);
	MakeCode	(0X4A4C0);
	MakeCode	(0X4A4DE);
	MakeCode	(x=0X4A4E4);
	OpDecimal	(x,	0);
	MakeCode	(x=0X4A4EC);
	OpDecimal	(x,	0);
	MakeCode	(x=0X4A4F6);
	OpDecimal	(x,	0);
	MakeCode	(x=0X4A4FC);
	OpDecimal	(x,	0);
	MakeCode	(x=0X4A504);
	OpDecimal	(x,	0);
	MakeCode	(0X4A50A);
	MakeCode	(0X4A510);
	MakeCode	(0X4A516);
	MakeCode	(0X4A51C);
	MakeCode	(x=0X4A51E);
	OpSign		(x,	1);
	MakeCode	(x=0X4A530);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4A55A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4A572);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4A58E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4A5A8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4A5C0);
	OpStkvar	(x,	1);
	MakeCode	(0X4A5CC);
	MakeCode	(x=0X4A5DE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4A5F0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4A602);
	OpStkvar	(x,	0);
	MakeCode	(0X4A630);
	MakeCode	(0X4A678);
	MakeCode	(x=0X4A67A);
	OpDecimal	(x,	0);
	MakeCode	(0X4A710);
	MakeCode	(x=0X4A71A);
	OpSign		(x,	1);
	MakeCode	(x=0X4A72C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4A734);
	OpStkvar	(x,	0);
	MakeCode	(0X4A73E);
	MakeCode	(0X4A756);
	MakeCode	(0X4A75A);
	MakeCode	(x=0X4A75E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4A768);
	OpStkvar	(x,	1);
	MakeCode	(0X4A78E);
	MakeCode	(0X4A79A);
	MakeCode	(0X4A7A6);
	MakeCode	(0X4A7B2);
	MakeCode	(x=0X4A7D8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X4A7E2);
	MakeCode	(x=0X4A7E6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4A7FE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X4A816);
	MakeCode	(0X4A828);
	MakeCode	(x=0X4A83A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X4A856);
	MakeCode	(x=0X4A85C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4A89A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4A8AE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4A8C0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4A8CA);
	OpStkvar	(x,	0);
	MakeCode	(0X4A8DA);
	MakeCode	(x=0X4A8E2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4A8EC);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4A8F0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4A908);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4A912);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4A942);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4A94C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4A96C);
	OpStkvar	(x,	0);
	MakeCode	(0X4A980);
	MakeCode	(0X4A9BC);
	MakeCode	(0X4A9D2);
	MakeCode	(0X4A9E4);
	MakeCode	(x=0X4A9EC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4A9F6);
	OpDecimal	(x,	0);
	MakeCode	(0X4AA0C);
	MakeCode	(0X4AA0E);
	MakeCode	(0X4AA10);
	MakeCode	(0X4AA18);
	MakeCode	(0X4AA90);
	MakeCode	(0X4AAA2);
	MakeCode	(0X4AAE8);
	MakeCode	(0X4AAEE);
	MakeCode	(0X4AAF4);
	MakeCode	(0X4AB08);
	MakeCode	(0X4AB0E);
	MakeCode	(0X4AB14);
	MakeCode	(0X4AB28);
	MakeCode	(0X4AB2E);
	MakeCode	(0X4AB34);
	MakeCode	(0X4AB48);
	MakeCode	(0X4AB4E);
	MakeCode	(0X4AB64);
	MakeCode	(x=0X4AB8E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4ABB2);
	OpSign		(x,	1);
	MakeCode	(x=0X4ABBA);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4ABC4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4ABCC);
	OpStkvar	(x,	0);
	MakeCode	(0X4AC12);
	MakeCode	(0X4ACC0);
	MakeCode	(x=0X4ACCA);
	OpSign		(x,	1);
	MakeCode	(0X4ACEA);
	MakeCode	(0X4ACF0);
	MakeCode	(x=0X4ACF4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4AD0C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4AD1A);
	OpStkvar	(x,	1);
	MakeCode	(0X4AD22);
	MakeCode	(x=0X4AD26);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4AD34);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4AD4E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4AD5C);
	OpStkvar	(x,	0);
	MakeCode	(0X4AD72);
	MakeCode	(x=0X4AD78);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4AD84);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4AD8A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4AD96);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4ADA2);
	OpStkvar	(x,	1);
	MakeCode	(0X4ADAA);
	MakeCode	(x=0X4ADB8);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4ADC6);
	OpStkvar	(x,	1);
	MakeCode	(0X4ADCE);
	MakeCode	(x=0X4ADD2);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4ADE0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4ADE8);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4ADF4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4ADFE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4AE06);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4AE12);
	OpStkvar	(x,	1);
	MakeCode	(0X4AE1A);
	MakeCode	(x=0X4AE2C);
	OpStkvar	(x,	1);
	MakeCode	(0X4AE3C);
	MakeCode	(0X4AE48);
	MakeCode	(x=0X4AE50);
	OpSign		(x,	1);
	MakeCode	(x=0X4AE68);
	OpStkvar	(x,	1);
	MakeCode	(0X4AE72);
	MakeCode	(x=0X4AE78);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4AE80);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4AE86);
	OpStkvar	(x,	0);
	MakeCode	(0X4AEA0);
	MakeCode	(x=0X4AEBE);
	OpSign		(x,	1);
	MakeCode	(x=0X4AED0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4AEEA);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4AEF6);
	OpStkvar	(x,	1);
	MakeCode	(0X4AEFE);
	MakeCode	(x=0X4AF02);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4AF0E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4AF26);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4AF34);
	OpStkvar	(x,	0);
	MakeCode	(0X4AF4A);
	MakeCode	(x=0X4AF50);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4AF5C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4AF62);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4AF6C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4AF78);
	OpStkvar	(x,	1);
	MakeCode	(0X4AF80);
	MakeCode	(x=0X4AF8C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4AF98);
	OpStkvar	(x,	1);
	MakeCode	(0X4AFA0);
	MakeCode	(x=0X4AFA4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4AFB0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4AFB8);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4AFC6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4AFCC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4AFD4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4AFE0);
	OpStkvar	(x,	1);
	MakeCode	(0X4AFE8);
	MakeCode	(x=0X4AFF8);
	OpStkvar	(x,	1);
	MakeCode	(0X4B012);
	MakeCode	(0X4B030);
	MakeCode	(0X4B03E);
	MakeCode	(0X4B044);
	MakeCode	(0X4B048);
	MakeCode	(0X4B04E);
	MakeCode	(0X4B054);
	MakeCode	(0X4B080);
	MakeCode	(0X4B092);
	MakeCode	(0X4B0CA);
	MakeCode	(0X4B0EA);
	MakeCode	(0X4B10A);
	MakeCode	(0X4B114);
	MakeCode	(0X4B126);
	MakeCode	(0X4B130);
	MakeCode	(0X4B13E);
	MakeCode	(0X4B14A);
	MakeCode	(0X4B154);
	MakeCode	(x=0X4B174);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X4B18C);
	MakeCode	(x=0X4B192);
	OpSign		(x,	1);
	MakeCode	(x=0X4B19C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4B1AA);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4B1B0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4B1C8);
	OpSign		(x,	1);
	MakeCode	(x=0X4B1D6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X4B1E0);
	MakeCode	(0X4B276);
	MakeCode	(0X4B282);
	MakeCode	(0X4B2B6);
	MakeCode	(0X4B2C6);
	MakeCode	(0X4B2D0);
	MakeCode	(x=0X4B2E4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X4B37C);
	MakeCode	(x=0X4B390);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4B420);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4B42E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X4B44E);
	MakeCode	(x=0X4B456);
	OpDecimal	(x,	0);
	MakeCode	(0X4B494);
	MakeCode	(0X4B4C4);
	MakeCode	(x=0X4B51C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4B538);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X4B548);
	MakeCode	(0X4B562);
	MakeCode	(0X4B5B2);
	MakeCode	(0X4B5C4);
	MakeCode	(x=0X4B5C8);
	OpSign		(x,	1);
	MakeCode	(0X4B5F2);
	MakeCode	(0X4B60A);
	MakeCode	(0X4B618);
	MakeCode	(x=0X4B61E);
	OpStkvar	(x,	1);
	MakeCode	(0X4B624);
	MakeCode	(0X4B62A);
	MakeCode	(0X4B63E);
	MakeCode	(0X4B64A);
	MakeCode	(x=0X4B64E);
	OpSign		(x,	1);
	MakeCode	(0X4B668);
	MakeCode	(0X4B67E);
	MakeCode	(0X4B68C);
	MakeCode	(0X4B6F6);
	MakeCode	(0X4B72A);
	MakeCode	(x=0X4B758);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X4B76E);
	MakeCode	(0X4B776);
	MakeCode	(0X4B780);
	MakeCode	(0X4B792);
	MakeCode	(0X4B796);
	MakeCode	(0X4B7A0);
	MakeCode	(0X4B7B6);
	MakeCode	(0X4B7CA);
	MakeCode	(0X4B7CE);
	MakeCode	(0X4B7E2);
	MakeCode	(0X4B7E6);
	MakeCode	(0X4B7F2);
	MakeCode	(0X4B7FE);
	MakeCode	(0X4B802);
	MakeCode	(0X4B80E);
	MakeCode	(0X4B81A);
	MakeCode	(0X4B826);
	MakeCode	(0X4B82A);
	MakeCode	(0X4B836);
	MakeCode	(0X4B83A);
	MakeCode	(0X4B84A);
	MakeCode	(0X4B854);
	MakeCode	(0X4B858);
	MakeCode	(0X4B866);
	MakeCode	(0X4B894);
	MakeCode	(0X4B8A6);
	MakeCode	(0X4B8B8);
	MakeCode	(0X4B8DC);
	MakeCode	(0X4B8E4);
	MakeCode	(0X4B902);
	MakeCode	(0X4B928);
	MakeCode	(0X4B93E);
	MakeCode	(0X4B974);
	MakeCode	(0X4B994);
	MakeCode	(0X4B9B8);
	MakeCode	(x=0X4B9C2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X4B9CC);
	MakeCode	(0X4B9CE);
	MakeCode	(0X4B9DA);
	MakeCode	(0X4B9E6);
	MakeCode	(0X4B9EE);
	MakeCode	(0X4BA30);
	MakeCode	(0X4BA46);
	MakeCode	(x=0X4BA5C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X4BA7E);
	MakeCode	(0X4BA8C);
	MakeCode	(0X4BA98);
	MakeCode	(0X4BAA6);
	MakeCode	(x=0X4BAAA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X4BAD2);
	MakeCode	(0X4BAE8);
	MakeCode	(0X4BB08);
	MakeCode	(0X4BB10);
	MakeCode	(0X4BB46);
	MakeCode	(0X4BB5A);
	MakeCode	(x=0X4BB72);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X4BB94);
	MakeCode	(0X4BBA2);
	MakeCode	(0X4BBB0);
	MakeCode	(0X4BBBE);
	MakeCode	(x=0X4BBC2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X4BBE6);
	MakeCode	(0X4BBFC);
	MakeCode	(0X4BC2E);
	MakeCode	(0X4BC68);
	MakeCode	(0X4BC76);
	MakeCode	(x=0X4BC7C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4BC86);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X4BC94);
	MakeCode	(0X4BCB4);
	MakeCode	(0X4BCF0);
	MakeCode	(0X4BD08);
	MakeCode	(0X4BD5A);
	MakeCode	(0X4BD60);
	MakeCode	(0X4BD6A);
	MakeCode	(0X4BD72);
	MakeCode	(0X4BD8C);
	MakeCode	(0X4BDAC);
	MakeCode	(0X4BDBE);
	MakeCode	(x=0X4BDDC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X4BDFC);
	MakeCode	(0X4BE30);
	MakeCode	(0X4BE7A);
	MakeCode	(0X4BE80);
	MakeCode	(0X4BE88);
	MakeCode	(0X4BEA2);
	MakeCode	(0X4BEAE);
	MakeCode	(0X4BEF8);
	MakeCode	(0X4BF3C);
	MakeCode	(0X4BF5C);
	MakeCode	(0X4BFAA);
	MakeCode	(0X4C002);
	MakeCode	(0X4C034);
	MakeCode	(0X4C080);
	MakeCode	(0X4C094);
	MakeCode	(0X4C0C4);
	MakeCode	(0X4C106);
	MakeCode	(0X4C11E);
	MakeCode	(0X4C13E);
	MakeCode	(0X4C154);
	MakeCode	(0X4C186);
	MakeCode	(0X4C19A);
	MakeCode	(0X4C1CE);
	MakeCode	(0X4C1DC);
	MakeCode	(0X4C216);
	MakeCode	(0X4C22A);
	MakeCode	(0X4C24A);
	MakeCode	(0X4C25E);
	MakeCode	(0X4C28A);
	MakeCode	(0X4C296);
	MakeCode	(0X4C2B4);
	MakeCode	(x=0X4C2D8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X4C2EC);
	MakeCode	(x=0X4C30C);
	OpSign		(x,	1);
	MakeCode	(x=0X4C314);
	OpStkvar	(x,	0);
	MakeCode	(0X4C330);
	MakeCode	(0X4C352);
	MakeCode	(0X4C39A);
	MakeCode	(0X4C3BE);
	MakeCode	(0X4C3E2);
	MakeCode	(0X4C3EE);
	MakeCode	(0X4C400);
	MakeCode	(0X4C428);
	MakeCode	(0X4C44C);
	MakeCode	(0X4C45E);
	MakeCode	(0X4C488);
	MakeCode	(0X4C496);
	MakeCode	(0X4C4A8);
	MakeCode	(0X4C4C6);
	MakeCode	(0X4C4DA);
	MakeCode	(0X4C4E2);
	MakeCode	(0X4C4EA);
	MakeCode	(0X4C4FE);
	MakeCode	(0X4C506);
	MakeCode	(0X4C50E);
	MakeCode	(x=0X4C536);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4C540);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4C54A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X4C570);
	MakeCode	(0X4C5A2);
	MakeCode	(0X4C5B2);
	MakeCode	(0X4C5DC);
	MakeCode	(0X4C60A);
	MakeCode	(0X4C62E);
	MakeCode	(0X4C648);
	MakeCode	(0X4C658);
	MakeCode	(0X4C664);
	MakeCode	(0X4C694);
	MakeCode	(0X4C6C8);
	MakeCode	(0X4C6D2);
	MakeCode	(0X4C6F4);
	MakeCode	(0X4C716);
	MakeCode	(0X4C72A);
	MakeCode	(0X4C72E);
	MakeCode	(0X4C740);
	MakeCode	(0X4C75A);
	MakeCode	(0X4C76C);
	MakeCode	(0X4C7B0);
	MakeCode	(0X4C7CA);
	MakeCode	(0X4C7E4);
	MakeCode	(0X4C800);
	MakeCode	(0X4C81A);
	MakeCode	(0X4C830);
	MakeCode	(0X4C84A);
	MakeCode	(0X4C866);
	MakeCode	(0X4C88E);
	MakeCode	(0X4C8D4);
	MakeCode	(0X4C8F8);
	MakeCode	(0X4C90A);
	MakeCode	(0X4C92A);
	MakeCode	(0X4C93E);
	MakeCode	(0X4C960);
	MakeCode	(0X4C9AE);
	MakeCode	(0X4C9D0);
	MakeCode	(0X4C9DA);
	MakeCode	(0X4C9FE);
	MakeCode	(0X4CA06);
	MakeCode	(0X4CA2C);
	MakeCode	(0X4CA40);
	MakeCode	(0X4CA54);
	MakeCode	(0X4CA68);
	MakeCode	(0X4CA7C);
	MakeCode	(0X4CA8C);
	MakeCode	(0X4CAB0);
	MakeCode	(0X4CAB8);
	MakeCode	(0X4CAE2);
	MakeCode	(0X4CAF6);
	MakeCode	(0X4CB06);
	MakeCode	(x=0X4CB12);
	OpSign		(x,	1);
	MakeCode	(x=0X4CB20);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4CB30);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4CB38);
	OpStkvar	(x,	0);
	MakeCode	(0X4CB46);
	MakeCode	(0X4CB56);
	MakeCode	(0X4CB64);
	MakeCode	(0X4CB7A);
	MakeCode	(0X4CB94);
	MakeCode	(x=0X4CB9A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4CBA6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X4CBBC);
	MakeCode	(x=0X4CBCE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4CBEC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X4CC02);
	MakeCode	(x=0X4CC1C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4CC3A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X4CC4E);
	MakeCode	(x=0X4CC54);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4CC62);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X4CC76);
	MakeCode	(x=0X4CC7C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4CC88);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X4CC9C);
	MakeCode	(x=0X4CCA2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4CCBC);
	OpSign		(x,	1);
	MakeCode	(x=0X4CCD8);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4CCE8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4CCF0);
	OpStkvar	(x,	0);
	MakeCode	(0X4CCF8);
	MakeCode	(0X4CCFE);
	MakeCode	(x=0X4CD5E);
	OpSign		(x,	1);
	MakeCode	(x=0X4CD9E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4CDBA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4CDBE);
	OpStkvar	(x,	0);
	MakeCode	(0X4CDC6);
	MakeCode	(x=0X4CDDA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4CDE2);
	OpStkvar	(x,	1);
	MakeCode	(0X4CDEC);
	MakeCode	(x=0X4CDF4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4CDFC);
	OpStkvar	(x,	1);
	MakeCode	(0X4CE06);
	MakeCode	(x=0X4CE2E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4CE32);
	OpStkvar	(x,	1);
	MakeCode	(0X4CE3A);
	MakeCode	(x=0X4CE4E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4CE52);
	OpStkvar	(x,	1);
	MakeCode	(0X4CE5C);
	MakeCode	(x=0X4CE66);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4CE6C);
	OpStkvar	(x,	1);
	MakeCode	(0X4CE76);
	MakeCode	(x=0X4CE98);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4CE9C);
	OpStkvar	(x,	1);
	MakeCode	(0X4CEA6);
	MakeCode	(x=0X4CEAC);
	OpStkvar	(x,	1);
	MakeCode	(0X4CEB4);
	MakeCode	(x=0X4CEE8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4CEEC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4CEF6);
	OpStkvar	(x,	1);
	MakeCode	(0X4CEFE);
	MakeCode	(x=0X4CF0C);
	OpStkvar	(x,	1);
	MakeCode	(0X4CF1A);
	MakeCode	(x=0X4CF26);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X4CF30);
	MakeCode	(x=0X4CF34);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X4CF66);
	MakeCode	(x=0X4CF76);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4CF7A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4CF82);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4CF86);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4CF8C);
	OpStkvar	(x,	0);
	MakeCode	(0X4CFA6);
	MakeCode	(x=0X4CFA8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4CFB2);
	OpStkvar	(x,	0);
	MakeCode	(0X4CFCE);
	MakeCode	(x=0X4CFD0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4CFDA);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4CFE0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4CFE4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4CFEA);
	OpStkvar	(x,	0);
	MakeCode	(0X4CFF8);
	MakeCode	(0X4D01C);
	MakeCode	(0X4D02C);
	MakeCode	(x=0X4D046);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X4D054);
	MakeCode	(0X4D08A);
	MakeCode	(x=0X4D0A0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X4D0AE);
	MakeCode	(0X4D0C4);
	MakeCode	(0X4D0CC);
	MakeCode	(0X4D0D2);
	MakeCode	(0X4D0DA);
	MakeCode	(0X4D13A);
	MakeCode	(0X4D15E);
	MakeCode	(0X4D1BA);
	MakeCode	(x=0X4D1DC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X4D1E6);
	MakeCode	(0X4D224);
	MakeCode	(0X4D230);
	MakeCode	(x=0X4D258);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X4D2CA);
	MakeCode	(0X4D2EE);
	MakeCode	(0X4D2FE);
	MakeCode	(0X4D326);
	MakeCode	(x=0X4D34C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X4D36A);
	MakeCode	(0X4D38A);
	MakeCode	(x=0X4D3AC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X4D3C6);
	MakeCode	(0X4D3E8);
	MakeCode	(0X4D40C);
	MakeCode	(0X4D42E);
	MakeCode	(x=0X4D480);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X4D4B0);
	MakeCode	(0X4D4CE);
	MakeCode	(0X4D4DC);
	MakeCode	(0X4D4F6);
	MakeCode	(0X4D50A);
	MakeCode	(0X4D522);
	MakeCode	(0X4D536);
	MakeCode	(0X4D546);
	MakeCode	(0X4D55C);
	MakeCode	(0X4D56C);
	MakeCode	(0X4D5BE);
	MakeCode	(0X4D5F4);
	MakeCode	(0X4D61E);
	MakeCode	(0X4D65A);
	MakeCode	(0X4D67A);
	MakeCode	(0X4D6A8);
	MakeCode	(0X4D6E0);
	MakeCode	(0X4D70E);
	MakeCode	(0X4D736);
	MakeCode	(0X4D766);
	MakeCode	(0X4D774);
	MakeCode	(0X4D786);
	MakeCode	(0X4D7AA);
	MakeCode	(0X4D7FE);
	MakeCode	(0X4D822);
	MakeCode	(0X4D864);
	MakeCode	(0X4D86E);
	MakeCode	(0X4D8A0);
	MakeCode	(0X4D8A8);
	MakeCode	(0X4D8F0);
	MakeCode	(0X4D90C);
	MakeCode	(0X4D918);
	MakeCode	(0X4D966);
	MakeCode	(0X4D974);
	MakeCode	(0X4D97C);
	MakeCode	(x=0X4D9B0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X4DA10);
	MakeCode	(0X4DA38);
	MakeCode	(0X4DA6C);
	MakeCode	(0X4DA94);
	MakeCode	(0X4DAC6);
	MakeCode	(0X4DB06);
	MakeCode	(0X4DB20);
	MakeCode	(0X4DB5C);
	MakeCode	(x=0X4DBB2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X4DBC4);
	MakeCode	(0X4DBF2);
	MakeCode	(0X4DC04);
	MakeCode	(x=0X4DC64);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X4DCAA);
	MakeCode	(0X4DCE2);
	MakeCode	(0X4DCF2);
	MakeCode	(0X4DD1A);
	MakeCode	(0X4DD5C);
	MakeCode	(0X4DD6C);
	MakeCode	(0X4DD78);
	MakeCode	(x=0X4DD96);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4DDC6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4DDFC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4DE18);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X4DE3E);
	MakeCode	(x=0X4DE66);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X4DE84);
	MakeCode	(x=0X4DEC0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4DED8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X4DEF0);
	MakeCode	(x=0X4DF24);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4DF48);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X4DF7E);
	MakeCode	(0X4DFA6);
	MakeCode	(0X4DFB2);
	MakeCode	(0X4DFDE);
	MakeCode	(0X4DFF4);
	MakeCode	(0X4E02C);
	MakeCode	(0X4E032);
	MakeCode	(0X4E068);
	MakeCode	(0X4E0A4);
	MakeCode	(0X4E0D6);
	MakeCode	(0X4E11A);
	MakeCode	(0X4E122);
	MakeCode	(0X4E13E);
	MakeCode	(0X4E146);
	MakeCode	(0X4E198);
	MakeCode	(0X4E1BA);
	MakeCode	(0X4E1C2);
	MakeCode	(0X4E20C);
	MakeCode	(0X4E238);
	MakeCode	(0X4E260);
	MakeCode	(0X4E2AC);
	MakeCode	(0X4E2CC);
	MakeCode	(0X4E2E2);
	MakeCode	(x=0X4E3AA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X4E3DA);
	MakeCode	(0X4E468);
	MakeCode	(0X4E488);
	MakeCode	(x=0X4E4A0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X4E4B2);
	MakeCode	(x=0X4E4C4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X4E4DC);
	MakeCode	(x=0X4E4EA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X4E508);
	MakeCode	(0X4E51A);
	MakeCode	(0X4E540);
	MakeCode	(0X4E55A);
	MakeCode	(0X4E5A2);
	MakeCode	(0X4E5BE);
	MakeCode	(x=0X4E606);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X4E618);
	MakeCode	(0X4E66E);
	MakeCode	(0X4E68A);
	MakeCode	(0X4E6AA);
	MakeCode	(0X4E6BA);
	MakeCode	(0X4E6C4);
	MakeCode	(0X4E6DC);
	MakeCode	(0X4E74A);
	MakeCode	(0X4E768);
	MakeCode	(0X4E788);
	MakeCode	(0X4E79C);
	MakeCode	(0X4E7D4);
	MakeCode	(x=0X4E816);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X4E820);
	MakeCode	(x=0X4E82C);
	OpDecimal	(x,	0);
	MakeCode	(0X4E874);
	MakeCode	(0X4E8AC);
	MakeCode	(0X4E8E4);
	MakeCode	(0X4E8EA);
	MakeCode	(0X4E8EE);
	MakeCode	(0X4E8FE);
	MakeCode	(0X4E934);
	MakeCode	(0X4E948);
	MakeCode	(0X4E964);
	MakeCode	(0X4E99A);
	MakeCode	(0X4E9A2);
	MakeCode	(0X4E9A4);
	MakeCode	(0X4EA0A);
	MakeCode	(x=0X4EA40);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X4EA50);
	MakeCode	(x=0X4EA70);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X4EA96);
	MakeCode	(x=0X4EA9C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4EACE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4EB0C);
	OpStkvar	(x,	1);
	MakeCode	(0X4EB56);
	MakeCode	(x=0X4EBA2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X4EBAC);
	MakeCode	(x=0X4EBB8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X4EBCA);
	MakeCode	(0X4EBFE);
	MakeCode	(0X4EC58);
	MakeCode	(0X4EC92);
	MakeCode	(0X4ECC6);
	MakeCode	(0X4ED10);
	MakeCode	(0X4ED26);
	MakeCode	(0X4ED50);
	MakeCode	(0X4ED9E);
	MakeCode	(0X4EDBA);
	MakeCode	(0X4EDDE);
	MakeCode	(0X4EDFC);
	MakeCode	(0X4EE1A);
	MakeCode	(x=0X4EE2C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4EE3E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X4EE50);
	MakeCode	(0X4EE7A);
	MakeCode	(0X4EEA0);
	MakeCode	(x=0X4EEB4);
	OpSign		(x,	1);
	MakeCode	(x=0X4EEE0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4EEFE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4EF06);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4EF18);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4EF20);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4EF24);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4EF2C);
	OpStkvar	(x,	0);
	MakeCode	(0X4EF42);
	MakeCode	(0X4EF5C);
	MakeCode	(0X4EFAA);
	MakeCode	(0X4EFB8);
	MakeCode	(0X4EFE2);
	MakeCode	(0X4EFF2);
	MakeCode	(x=0X4F044);
	OpStkvar	(x,	1);
	MakeCode	(0X4F04C);
	MakeCode	(0X4F06A);
	MakeCode	(0X4F0A6);
	MakeCode	(0X4F0D0);
	MakeCode	(0X4F0FE);
	MakeCode	(0X4F12A);
	MakeCode	(0X4F15E);
	MakeCode	(0X4F182);
	MakeCode	(0X4F1C0);
	MakeCode	(0X4F1E8);
	MakeCode	(0X4F21C);
	MakeCode	(0X4F236);
	MakeCode	(x=0X4F246);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X4F262);
	MakeCode	(0X4F288);
	MakeCode	(x=0X4F2BE);
	OpStkvar	(x,	1);
	MakeCode	(0X4F2C8);
	MakeCode	(x=0X4F2F4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X4F310);
	MakeCode	(x=0X4F334);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X4F356);
	MakeCode	(0X4F37E);
	MakeCode	(0X4F3BC);
	MakeCode	(0X4F422);
	MakeCode	(0X4F450);
	MakeCode	(0X4F46E);
	MakeCode	(0X4F49E);
	MakeCode	(0X4F4FE);
	MakeCode	(0X4F542);
	MakeCode	(0X4F570);
	MakeCode	(0X4F5B6);
	MakeCode	(0X4F5C2);
	MakeCode	(0X4F5D0);
	MakeCode	(x=0X4F63E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4F648);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4F652);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4F664);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X4F726);
	MakeCode	(x=0X4F734);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4F744);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4F760);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4F774);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4F784);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4F794);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4F7A4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4F7B4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4F7C4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4F7D4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4F7E4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4F7F4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4F804);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4F814);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4F824);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4F834);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4F844);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X4F85E);
	MakeCode	(x=0X4F864);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4F874);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X4F884);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X4F896);
	MakeCode	(0X4F8C0);
	MakeCode	(0X4F8C8);
	MakeCode	(0X4F900);
	MakeCode	(0X4F97C);
	MakeCode	(0X4F9F4);
	MakeCode	(0X4FA2E);
	MakeCode	(0X4FAA2);
	MakeCode	(0X4FB1A);
	MakeCode	(0X4FB52);
	MakeCode	(0X4FBB8);
	MakeCode	(0X4FC18);
	MakeCode	(0X4FC7E);
	MakeCode	(0X4FCA2);
	MakeCode	(0X4FCDC);
	MakeCode	(0X4FD42);
	MakeCode	(0X4FDD4);
	MakeCode	(0X4FE3A);
	MakeCode	(x=0X4FE9C);
	OpSign		(x,	1);
	MakeCode	(0X4FF54);
	MakeCode	(0X4FF62);
	MakeCode	(0X4FFFA);
	MakeCode	(0X50000);
	MakeCode	(0X5006A);
	MakeCode	(0X500D6);
	MakeCode	(0X500F8);
	MakeCode	(0X50106);
	MakeCode	(0X50128);
	MakeCode	(0X501D8);
	MakeCode	(0X501E6);
	MakeCode	(0X502AC);
	MakeCode	(0X503BA);
	MakeCode	(0X503CA);
	MakeCode	(0X50490);
	MakeCode	(0X504BC);
	MakeCode	(0X504F8);
	MakeCode	(0X504FC);
	MakeCode	(0X50510);
	MakeCode	(0X50514);
	MakeCode	(0X50576);
	MakeCode	(0X50586);
	MakeCode	(0X505A4);
	MakeCode	(x=0X505D0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X505F6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X505FE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X50618);
	MakeCode	(0X50628);
	MakeCode	(0X5066A);
	MakeCode	(0X506C0);
	MakeCode	(0X50700);
	MakeCode	(0X5094E);
	MakeCode	(0X50986);
	MakeCode	(0X50A00);
	MakeCode	(0X50A18);
	MakeCode	(0X50A64);
	MakeCode	(0X50AB4);
	MakeCode	(0X50AC6);
	MakeCode	(0X50B72);
	MakeCode	(0X50B98);
	MakeCode	(0X50BD4);
	MakeCode	(0X50BFC);
	MakeCode	(0X50C1C);
	MakeCode	(0X50C3E);
	MakeCode	(0X50C86);
	MakeCode	(0X50DA4);
	MakeCode	(0X50E3A);
	MakeCode	(0X50E86);
	MakeCode	(0X50E9C);
	MakeCode	(0X50EAA);
	MakeCode	(0X50EF4);
	MakeCode	(0X50F3C);
	MakeCode	(0X50F52);
	MakeCode	(0X50F94);
	MakeCode	(0X50FAA);
	MakeCode	(0X50FB6);
	MakeCode	(0X5104C);
	MakeCode	(0X51084);
	MakeCode	(0X5110A);
	MakeCode	(0X51218);
	MakeCode	(0X5123E);
	MakeCode	(0X51256);
	MakeCode	(0X5125C);
	MakeCode	(0X512BA);
	MakeCode	(0X512D4);
	MakeCode	(0X5130E);
	MakeCode	(0X51334);
	MakeCode	(0X5134C);
	MakeCode	(0X51352);
	MakeCode	(0X51396);
	MakeCode	(0X5139C);
	MakeCode	(0X513AA);
	MakeCode	(0X513C0);
	MakeCode	(0X5143A);
	MakeCode	(0X51444);
	MakeCode	(0X5148C);
	MakeCode	(0X51498);
	MakeCode	(0X514D2);
	MakeCode	(0X51502);
	MakeCode	(0X5154E);
	MakeCode	(0X5158E);
	MakeCode	(0X5167E);
	MakeCode	(0X5169A);
	MakeCode	(0X516A0);
	MakeCode	(0X516BC);
	MakeCode	(0X516C2);
	MakeCode	(0X51712);
	MakeCode	(0X5172C);
	MakeCode	(0X517A6);
	MakeCode	(0X517B0);
	MakeCode	(0X517DA);
	MakeCode	(0X517E0);
	MakeCode	(0X5182A);
	MakeCode	(0X5186E);
	MakeCode	(0X51888);
	MakeCode	(0X518A6);
	MakeCode	(0X518AE);
	MakeCode	(0X518B4);
	MakeCode	(0X5195C);
	MakeCode	(0X51A52);
	MakeCode	(0X51A9E);
	MakeCode	(0X51AD2);
	MakeCode	(0X51ADA);
	MakeCode	(0X51B50);
	MakeCode	(0X51B7C);
	MakeCode	(0X51B8E);
	MakeCode	(0X51BFE);
	MakeCode	(0X51C2A);
	MakeCode	(0X51C36);
	MakeCode	(0X51C44);
	MakeCode	(0X51D9A);
	MakeCode	(0X51E20);
	MakeCode	(0X51E94);
	MakeCode	(0X51EAA);
	MakeCode	(0X51EBA);
	MakeCode	(0X51EDC);
	MakeCode	(0X51F02);
	MakeCode	(0X51F0A);
	MakeCode	(0X51F0E);
	MakeCode	(0X51F84);
	MakeCode	(0X51F98);
	MakeCode	(0X51FA8);
	MakeCode	(0X5201E);
	MakeCode	(0X52032);
	MakeCode	(0X52042);
	MakeCode	(0X5205C);
	MakeCode	(0X52060);
	MakeCode	(0X520D6);
	MakeCode	(0X520EA);
	MakeCode	(0X520FA);
	MakeCode	(0X52198);
	MakeCode	(0X521AC);
	MakeCode	(0X521BC);
	MakeCode	(0X52232);
	MakeCode	(0X52246);
	MakeCode	(0X52256);
	MakeCode	(0X522CC);
	MakeCode	(0X522E0);
	MakeCode	(0X522F0);
	MakeCode	(0X5230A);
	MakeCode	(0X5230E);
	MakeCode	(0X52384);
	MakeCode	(0X52398);
	MakeCode	(0X524C4);
	MakeCode	(0X52530);
	MakeCode	(0X52544);
	MakeCode	(0X52554);
	MakeCode	(0X525C2);
	MakeCode	(0X525D6);
	MakeCode	(0X525E6);
	MakeCode	(0X52654);
	MakeCode	(0X52668);
	MakeCode	(0X52678);
	MakeCode	(0X52696);
	MakeCode	(0X526BC);
	MakeCode	(0X526C4);
	MakeCode	(0X526C8);
	MakeCode	(0X52736);
	MakeCode	(0X5274C);
	MakeCode	(0X5285A);
	MakeCode	(0X528B0);
	MakeCode	(0X528E2);
	MakeCode	(0X528EA);
	MakeCode	(0X52914);
	MakeCode	(0X52950);
	MakeCode	(0X5296C);
	MakeCode	(0X529EE);
	MakeCode	(0X529F6);
	MakeCode	(0X52A28);
	MakeCode	(0X52A30);
	MakeCode	(0X52A58);
	MakeCode	(0X52A7C);
	MakeCode	(0X52ACE);
	MakeCode	(0X52AF6);
	MakeCode	(0X52B28);
	MakeCode	(0X52B7C);
	MakeCode	(0X52BA8);
	MakeCode	(0X52BC8);
	MakeCode	(0X52BE2);
	MakeCode	(0X52BE8);
	MakeCode	(0X52C84);
	MakeCode	(0X52CCA);
	MakeCode	(0X52CD6);
	MakeCode	(0X52DAA);
	MakeCode	(0X52DC6);
	MakeCode	(0X52E1E);
	MakeCode	(0X52E34);
	MakeCode	(0X52E44);
	MakeCode	(0X52E68);
	MakeCode	(0X52E70);
	MakeCode	(0X52F30);
	MakeCode	(0X52F7E);
	MakeCode	(0X52F9C);
	MakeCode	(0X52FE8);
	MakeCode	(0X52FFE);
	MakeCode	(0X53008);
	MakeCode	(0X5302E);
	MakeCode	(0X53068);
	MakeCode	(0X53094);
	MakeCode	(0X530DC);
	MakeCode	(0X530FA);
	MakeCode	(0X5314C);
	MakeCode	(0X53162);
	MakeCode	(0X53174);
	MakeCode	(0X53182);
	MakeCode	(0X531B8);
	MakeCode	(0X53212);
	MakeCode	(0X53252);
	MakeCode	(0X532C4);
	MakeCode	(0X5330C);
	MakeCode	(0X53318);
	MakeCode	(0X5333C);
	MakeCode	(0X53344);
	MakeCode	(0X5334E);
	MakeCode	(0X533B8);
	MakeCode	(0X533CC);
	MakeCode	(0X53400);
	MakeCode	(0X53414);
	MakeCode	(0X5341E);
	MakeCode	(0X5344A);
	MakeCode	(0X53544);
	MakeCode	(0X5354C);
	MakeCode	(0X53574);
	MakeCode	(0X5357C);
	MakeCode	(0X53586);
	MakeCode	(0X535B2);
	MakeCode	(0X5364C);
	MakeCode	(0X53662);
	MakeCode	(0X536AA);
	MakeCode	(0X536CC);
	MakeCode	(0X536E2);
	MakeCode	(0X53712);
	MakeCode	(0X53738);
	MakeCode	(0X53760);
	MakeCode	(0X537A8);
	MakeCode	(0X537D6);
	MakeCode	(0X538E6);
	MakeCode	(0X5391A);
	MakeCode	(0X53922);
	MakeCode	(0X5395A);
	MakeCode	(0X5396E);
	MakeCode	(0X5398A);
	MakeCode	(0X5399E);
	MakeCode	(0X53A0E);
	MakeCode	(0X53A22);
	MakeCode	(0X53A4E);
	MakeCode	(0X53A62);
	MakeCode	(0X53AA0);
	MakeCode	(0X53AB4);
	MakeCode	(0X53AE0);
	MakeCode	(0X53AF4);
	MakeCode	(0X53B10);
	MakeCode	(x=0X53B7E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X53BDC);
	MakeCode	(0X53C64);
	MakeCode	(x=0X53CCE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X53D2A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X53D6A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X53D84);
	MakeCode	(0X53D94);
	MakeCode	(0X53DA0);
	MakeCode	(x=0X53DA4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X53DDA);
	MakeCode	(0X53DEE);
	MakeCode	(0X53F1C);
	MakeCode	(0X53F22);
	MakeCode	(0X53F36);
	MakeCode	(0X53F6C);
	MakeCode	(0X53F82);
	MakeCode	(0X53F90);
	MakeCode	(0X53FC8);
	MakeCode	(0X5402C);
	MakeCode	(0X5406E);
	MakeCode	(0X540AC);
	MakeCode	(0X54114);
	MakeCode	(0X54156);
	MakeCode	(x=0X54162);
	OpSign		(x,	1);
	MakeCode	(0X54190);
	MakeCode	(0X541C8);
	MakeCode	(x=0X541DA);
	OpStkvar	(x,	1);
	MakeCode	(0X541E4);
	MakeCode	(x=0X541E8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X541F0);
	OpStkvar	(x,	0);
	MakeCode	(0X541FA);
	MakeCode	(x=0X54204);
	OpStkvar	(x,	0);
	MakeCode	(0X5427A);
	MakeCode	(0X54288);
	MakeCode	(0X542CE);
	MakeCode	(0X542F4);
	MakeCode	(0X5430E);
	MakeCode	(0X54324);
	MakeCode	(x=0X5432A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X54334);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5434C);
	MakeCode	(x=0X5436E);
	OpSign		(x,	1);
	MakeCode	(x=0X5437C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X54382);
	OpStkvar	(x,	1);
	MakeCode	(x=0X54390);
	OpStkvar	(x,	1);
	MakeCode	(x=0X543B6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X543BC);
	OpStkvar	(x,	0);
	MakeCode	(x=0X543CC);
	OpStkvar	(x,	0);
	MakeCode	(x=0X543D8);
	OpStkvar	(x,	0);
	MakeCode	(x=0X543DC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X543EE);
	OpStkvar	(x,	0);
	MakeCode	(0X54440);
	MakeCode	(0X54450);
	MakeCode	(0X54488);
	MakeCode	(0X54490);
	MakeCode	(0X5449C);
	MakeCode	(0X544E2);
	MakeCode	(0X544EA);
	MakeCode	(0X54508);
	MakeCode	(0X54540);
	MakeCode	(x=0X54546);
	OpStkvar	(x,	1);
	MakeCode	(0X54554);
	MakeCode	(0X54560);
	MakeCode	(0X5457C);
	MakeCode	(0X54584);
	MakeCode	(0X54590);
	MakeCode	(0X545BC);
	MakeCode	(0X545D6);
	MakeCode	(0X54602);
	MakeCode	(0X5464A);
	MakeCode	(0X5465E);
	MakeCode	(0X546B4);
	MakeCode	(0X546D8);
	MakeCode	(0X5472E);
	MakeCode	(0X54750);
	MakeCode	(0X5476E);
	MakeCode	(0X5478E);
	MakeCode	(0X547D2);
	MakeCode	(0X547F4);
	MakeCode	(0X54802);
	MakeCode	(0X5480A);
	MakeCode	(0X54810);
	MakeCode	(0X54836);
	MakeCode	(0X5485A);
	MakeCode	(0X5486C);
	MakeCode	(0X54896);
	MakeCode	(0X548A4);
	MakeCode	(0X548D4);
	MakeCode	(0X548E8);
	MakeCode	(0X5497A);
	MakeCode	(x=0X549A4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X549AE);
	MakeCode	(x=0X549C2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X549E6);
	MakeCode	(0X54A20);
	MakeCode	(0X54A28);
	MakeCode	(0X54A30);
	MakeCode	(0X54A40);
	MakeCode	(0X54A6E);
	MakeCode	(x=0X54A9E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X54AFE);
	MakeCode	(0X54B2E);
	MakeCode	(x=0X54B68);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X54B6E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X54B74);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X54BB6);
	MakeCode	(x=0X54BDA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X54BE8);
	MakeCode	(0X54BF6);
	MakeCode	(0X54C2C);
	MakeCode	(x=0X54C44);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X54C6C);
	MakeCode	(x=0X54C72);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X54CE4);
	MakeCode	(0X54D2A);
	MakeCode	(0X54D90);
	MakeCode	(0X54DA0);
	MakeCode	(0X54DDE);
	MakeCode	(0X54E1C);
	MakeCode	(0X54E4A);
	MakeCode	(0X54E4E);
	MakeCode	(0X54E80);
	MakeCode	(0X54ECE);
	MakeCode	(0X54EF0);
	MakeCode	(0X54F2C);
	MakeCode	(0X54F3A);
	MakeCode	(0X54F40);
	MakeCode	(0X54F64);
	MakeCode	(0X54F72);
	MakeCode	(0X54F78);
	MakeCode	(0X54F8C);
	MakeCode	(0X54F9C);
	MakeCode	(0X54FAE);
	MakeCode	(0X54FDC);
	MakeCode	(0X55004);
	MakeCode	(0X5504A);
	MakeCode	(0X5506A);
	MakeCode	(0X5508E);
	MakeCode	(0X550AE);
	MakeCode	(0X550DC);
	MakeCode	(0X55102);
	MakeCode	(0X55156);
	MakeCode	(0X5515C);
	MakeCode	(0X55160);
	MakeCode	(0X55176);
	MakeCode	(0X5517C);
	MakeCode	(0X551A0);
	MakeCode	(0X551C4);
	MakeCode	(0X55226);
	MakeCode	(0X55250);
	MakeCode	(0X5527E);
	MakeCode	(0X552AE);
	MakeCode	(0X552EA);
	MakeCode	(0X552EE);
	MakeCode	(0X552FC);
	MakeCode	(0X55318);
	MakeCode	(0X5532E);
	MakeCode	(0X5534A);
	MakeCode	(0X55356);
	MakeCode	(0X5537A);
	MakeCode	(0X5538A);
	MakeCode	(x=0X5539A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X553BC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X553EE);
	MakeCode	(x=0X55428);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X55432);
	MakeCode	(x=0X55442);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5546E);
	MakeCode	(0X5549E);
	MakeCode	(0X554BE);
	MakeCode	(0X554C6);
	MakeCode	(0X554FA);
	MakeCode	(0X5550E);
	MakeCode	(0X55526);
	MakeCode	(0X5553A);
	MakeCode	(0X55544);
	MakeCode	(0X555A4);
	MakeCode	(0X555EA);
	MakeCode	(0X55612);
	MakeCode	(0X55620);
	MakeCode	(0X5562E);
	MakeCode	(0X5563C);
	MakeCode	(0X5564A);
	MakeCode	(0X55658);
	MakeCode	(0X55666);
	MakeCode	(x=0X55682);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X556DC);
	MakeCode	(0X556E4);
	MakeCode	(0X556FC);
	MakeCode	(x=0X55700);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X55730);
	MakeCode	(x=0X55734);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X55796);
	OpSign		(x,	1);
	MakeCode	(x=0X557A2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X557AA);
	OpStkvar	(x,	1);
	MakeCode	(0X557BA);
	MakeCode	(0X557EE);
	MakeCode	(x=0X5584E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X55858);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X55864);
	OpStkvar	(x,	0);
	MakeCode	(x=0X55868);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5586E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X55878);
	OpStkvar	(x,	0);
	MakeCode	(0X55886);
	MakeCode	(x=0X55890);
	OpStkvar	(x,	0);
	MakeCode	(0X55898);
	MakeCode	(0X558A2);
	MakeCode	(0X558B4);
	MakeCode	(0X558CA);
	MakeCode	(0X558DA);
	MakeCode	(0X558EC);
	MakeCode	(0X55902);
	MakeCode	(0X55912);
	MakeCode	(0X5595A);
	MakeCode	(0X5596C);
	MakeCode	(0X559B0);
	MakeCode	(0X559BE);
	MakeCode	(0X559C4);
	MakeCode	(x=0X559D6);
	OpSign		(x,	1);
	MakeCode	(0X55A48);
	MakeCode	(0X55A70);
	MakeCode	(0X55A7E);
	MakeCode	(0X55AA2);
	MakeCode	(0X55ABE);
	MakeCode	(0X55AC6);
	MakeCode	(0X55B78);
	MakeCode	(0X55BA2);
	MakeCode	(0X55C06);
	MakeCode	(0X55C1C);
	MakeCode	(0X55C48);
	MakeCode	(0X55C5E);
	MakeCode	(0X55CE0);
	MakeCode	(0X55CF0);
	MakeCode	(0X55CFE);
	MakeCode	(0X55D18);
	MakeCode	(x=0X55D1C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X55D4A);
	MakeCode	(0X55D74);
	MakeCode	(0X55D84);
	MakeCode	(0X55D92);
	MakeCode	(0X55DAC);
	MakeCode	(x=0X55DB0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X55DBA);
	MakeCode	(0X55DE4);
	MakeCode	(0X55DF4);
	MakeCode	(0X55E02);
	MakeCode	(0X55E1C);
	MakeCode	(x=0X55E20);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X55E2A);
	MakeCode	(0X55E54);
	MakeCode	(0X55E64);
	MakeCode	(0X55E72);
	MakeCode	(0X55E88);
	MakeCode	(x=0X55E8C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X55E96);
	MakeCode	(0X55EA0);
	MakeCode	(0X55EA8);
	MakeCode	(0X55EF0);
	MakeCode	(0X55F00);
	MakeCode	(0X55F10);
	MakeCode	(0X55F2E);
	MakeCode	(0X55F46);
	MakeCode	(0X55F56);
	MakeCode	(0X55F64);
	MakeCode	(0X55F7E);
	MakeCode	(x=0X55F82);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X55F8C);
	MakeCode	(0X55FA4);
	MakeCode	(0X55FB4);
	MakeCode	(0X55FC2);
	MakeCode	(0X55FDC);
	MakeCode	(x=0X55FE0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X55FEA);
	MakeCode	(0X56002);
	MakeCode	(0X56012);
	MakeCode	(0X56020);
	MakeCode	(0X5603A);
	MakeCode	(x=0X5603E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X56046);
	MakeCode	(0X5606E);
	MakeCode	(0X5607E);
	MakeCode	(0X5608E);
	MakeCode	(x=0X56092);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X560E2);
	MakeCode	(0X56124);
	MakeCode	(0X56132);
	MakeCode	(0X56140);
	MakeCode	(0X56158);
	MakeCode	(x=0X5615C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X56166);
	MakeCode	(0X5617E);
	MakeCode	(0X5618C);
	MakeCode	(0X5619A);
	MakeCode	(0X561B2);
	MakeCode	(x=0X561B6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X561BE);
	MakeCode	(0X561D6);
	MakeCode	(0X561E4);
	MakeCode	(0X561F2);
	MakeCode	(0X5620A);
	MakeCode	(x=0X5620E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5621A);
	MakeCode	(0X56232);
	MakeCode	(0X56240);
	MakeCode	(0X5624E);
	MakeCode	(0X56264);
	MakeCode	(x=0X56268);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X562D4);
	MakeCode	(0X562F6);
	MakeCode	(0X56382);
	MakeCode	(0X563C8);
	MakeCode	(0X563FC);
	MakeCode	(0X56436);
	MakeCode	(0X564CA);
	MakeCode	(x=0X5650A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X56542);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X56552);
	MakeCode	(0X56572);
	MakeCode	(x=0X5657A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5658A);
	OpStkvar	(x,	1);
	MakeCode	(0X56590);
	MakeCode	(x=0X565AE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X565B4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X565CE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X565D6);
	OpStkvar	(x,	0);
	MakeCode	(0X565FA);
	MakeCode	(0X565FE);
	MakeCode	(0X5661E);
	MakeCode	(x=0X56628);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5662E);
	OpStkvar	(x,	0);
	MakeCode	(0X5663A);
	MakeCode	(0X56642);
	MakeCode	(0X56646);
	MakeCode	(0X5666E);
	MakeCode	(0X56690);
	MakeCode	(x=0X566CC);
	OpStkvar	(x,	1);
	MakeCode	(0X566D4);
	MakeCode	(x=0X566D8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X566E8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X566FA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5673C);
	MakeCode	(0X5674A);
	MakeCode	(x=0X5674E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X56760);
	OpStkvar	(x,	1);
	MakeCode	(0X56766);
	MakeCode	(0X56784);
	MakeCode	(0X56792);
	MakeCode	(x=0X56796);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5679E);
	MakeCode	(x=0X567B2);
	OpStkvar	(x,	0);
	MakeCode	(0X567C8);
	MakeCode	(0X567CE);
	MakeCode	(0X567E4);
	MakeCode	(0X567EA);
	MakeCode	(0X56812);
	MakeCode	(x=0X5685A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X56860);
	OpStkvar	(x,	0);
	MakeCode	(x=0X56864);
	OpStkvar	(x,	0);
	MakeCode	(x=0X56868);
	OpStkvar	(x,	1);
	MakeCode	(0X5686E);
	MakeCode	(x=0X5688A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X56890);
	OpStkvar	(x,	0);
	MakeCode	(x=0X56894);
	OpStkvar	(x,	0);
	MakeCode	(0X5689A);
	MakeCode	(x=0X568BA);
	OpStkvar	(x,	0);
	MakeCode	(0X568F6);
	MakeCode	(x=0X5694A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X56950);
	OpStkvar	(x,	0);
	MakeCode	(x=0X56954);
	OpStkvar	(x,	0);
	MakeCode	(x=0X56958);
	OpStkvar	(x,	1);
	MakeCode	(0X5695E);
	MakeCode	(x=0X5697A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X56980);
	OpStkvar	(x,	0);
	MakeCode	(x=0X56984);
	OpStkvar	(x,	0);
	MakeCode	(0X5698A);
	MakeCode	(x=0X569AA);
	OpStkvar	(x,	0);
	MakeCode	(0X569E6);
	MakeCode	(0X56A08);
	MakeCode	(x=0X56A7E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X56AAE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X56AE4);
	MakeCode	(0X56B10);
	MakeCode	(x=0X56B1A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X56B30);
	MakeCode	(x=0X56B3C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X56B52);
	MakeCode	(x=0X56B60);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X56B7A);
	MakeCode	(x=0X56BA2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X56BB4);
	MakeCode	(x=0X56BC4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X56BDC);
	MakeCode	(0X56C2A);
	MakeCode	(0X56C42);
	MakeCode	(x=0X56C5A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X56C70);
	MakeCode	(x=0X56C80);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X56C92);
	MakeCode	(x=0X56CA2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X56CBC);
	MakeCode	(0X56D08);
	MakeCode	(0X56D12);
	MakeCode	(0X56D20);
	MakeCode	(0X56D26);
	MakeCode	(0X56D2E);
	MakeCode	(0X56D60);
	MakeCode	(0X56D72);
	MakeCode	(0X56DF4);
	MakeCode	(0X56DFA);
	MakeCode	(0X56E1E);
	MakeCode	(0X56EB0);
	MakeCode	(0X56EC8);
	MakeCode	(0X56EDC);
	MakeCode	(0X56F12);
	MakeCode	(0X56F46);
	MakeCode	(0X56F54);
	MakeCode	(0X56F62);
	MakeCode	(x=0X56F7A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X56F8C);
	MakeCode	(0X56FA0);
	MakeCode	(x=0X56FA8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X56FE4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X56FFA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X57014);
	MakeCode	(0X57030);
	MakeCode	(x=0X5703C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X57050);
	MakeCode	(x=0X57084);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X57096);
	MakeCode	(0X570B0);
	MakeCode	(0X570B6);
	MakeCode	(0X570C0);
	MakeCode	(x=0X570E6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X570FA);
	MakeCode	(x=0X5711E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X57128);
	MakeCode	(0X57148);
	MakeCode	(0X57184);
	MakeCode	(0X57198);
	MakeCode	(0X571A6);
	MakeCode	(0X571AE);
	MakeCode	(0X571CE);
	MakeCode	(0X571E6);
	MakeCode	(0X571F2);
	MakeCode	(0X57202);
	MakeCode	(0X5720E);
	MakeCode	(x=0X5722A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5723C);
	MakeCode	(x=0X5726A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5729C);
	MakeCode	(0X572A2);
	MakeCode	(x=0X572B6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X572D8);
	MakeCode	(x=0X572F0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X57302);
	MakeCode	(x=0X5731C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X57330);
	MakeCode	(0X5736C);
	MakeCode	(0X57384);
	MakeCode	(0X5739E);
	MakeCode	(x=0X573B6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X573D6);
	MakeCode	(0X573E4);
	MakeCode	(0X573EC);
	MakeCode	(x=0X57416);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X57480);
	MakeCode	(0X57486);
	MakeCode	(x=0X574A0);
	OpStkvar	(x,	1);
	MakeCode	(0X574BE);
	MakeCode	(0X5752E);
	MakeCode	(x=0X57544);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5755A);
	MakeCode	(0X57562);
	MakeCode	(0X575BC);
	MakeCode	(0X575C6);
	MakeCode	(0X575DC);
	MakeCode	(0X575EA);
	MakeCode	(0X5760C);
	MakeCode	(0X57618);
	MakeCode	(0X57638);
	MakeCode	(0X57642);
	MakeCode	(0X57648);
	MakeCode	(0X57668);
	MakeCode	(0X57676);
	MakeCode	(0X57708);
	MakeCode	(0X5775E);
	MakeCode	(0X57794);
	MakeCode	(0X577AA);
	MakeCode	(0X577B0);
	MakeCode	(0X577BA);
	MakeCode	(x=0X577CC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X577DE);
	MakeCode	(0X577EE);
	MakeCode	(0X57802);
	MakeCode	(0X57812);
	MakeCode	(0X5781E);
	MakeCode	(0X578A0);
	MakeCode	(0X578BA);
	MakeCode	(0X578CE);
	MakeCode	(x=0X578EA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X578FC);
	MakeCode	(0X5797A);
	MakeCode	(0X579A8);
	MakeCode	(x=0X579C6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X579DE);
	MakeCode	(0X57A22);
	MakeCode	(0X57A42);
	MakeCode	(x=0X57A5E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X57AC8);
	MakeCode	(0X57AE8);
	MakeCode	(0X57AEE);
	MakeCode	(0X57AFC);
	MakeCode	(x=0X57BA4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X57BB6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X57BC8);
	OpStkvar	(x,	1);
	MakeCode	(0X57BD4);
	MakeCode	(x=0X57BEE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X57C06);
	OpStkvar	(x,	1);
	MakeCode	(x=0X57C0C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X57C32);
	OpStkvar	(x,	1);
	MakeCode	(0X57C50);
	MakeCode	(x=0X57C96);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X57CA2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X57CB4);
	OpStkvar	(x,	1);
	MakeCode	(0X57CC2);
	MakeCode	(x=0X57CDE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X57CF0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X57CF6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X57D1C);
	OpStkvar	(x,	1);
	MakeCode	(0X57D28);
	MakeCode	(x=0X57D8E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X57DA0);
	OpStkvar	(x,	1);
	MakeCode	(0X57DAA);
	MakeCode	(x=0X57DC6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X57DDE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X57DE4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X57DEE);
	MakeCode	(x=0X57E32);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X57E3E);
	OpStkvar	(x,	1);
	MakeCode	(0X57E46);
	MakeCode	(x=0X57E60);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X57E72);
	OpStkvar	(x,	1);
	MakeCode	(x=0X57E78);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X57EA2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X57EB4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X57EC8);
	MakeCode	(0X57EF0);
	MakeCode	(x=0X57F36);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X57F4A);
	MakeCode	(0X57F60);
	MakeCode	(0X57F70);
	MakeCode	(x=0X57FB4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X57FD8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X57FF2);
	MakeCode	(0X58006);
	MakeCode	(x=0X5803A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X5805E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X58078);
	MakeCode	(x=0X58092);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X580AC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X580B8);
	MakeCode	(0X580C2);
	MakeCode	(x=0X580F6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5811C);
	MakeCode	(x=0X58120);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5813A);
	MakeCode	(x=0X58154);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X58170);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X58188);
	MakeCode	(0X581EE);
	MakeCode	(x=0X581FE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X58212);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5823E);
	MakeCode	(0X5824A);
	MakeCode	(x=0X58256);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X5826A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X5827A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X58290);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X582B0);
	MakeCode	(0X58300);
	MakeCode	(0X58308);
	MakeCode	(x=0X58338);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X583C4);
	MakeCode	(0X5842E);
	MakeCode	(0X58496);
	MakeCode	(0X584D0);
	MakeCode	(0X584E4);
	MakeCode	(0X5852C);
	MakeCode	(0X5854E);
	MakeCode	(0X5855C);
	MakeCode	(0X5858A);
	MakeCode	(0X585AC);
	MakeCode	(0X585B4);
	MakeCode	(0X585D8);
	MakeCode	(0X585E6);
	MakeCode	(0X585F4);
	MakeCode	(0X58616);
	MakeCode	(0X58638);
	MakeCode	(x=0X58642);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5865A);
	MakeCode	(0X5867A);
	MakeCode	(0X58688);
	MakeCode	(0X586E2);
	MakeCode	(x=0X586E8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X58706);
	MakeCode	(x=0X5874E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X58774);
	MakeCode	(x=0X5877C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X5879E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X587C4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X587E0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5881A);
	MakeCode	(x=0X5883A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5885C);
	MakeCode	(x=0X58866);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X58890);
	MakeCode	(x=0X588AE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X588D6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X588FA);
	MakeCode	(0X58908);
	MakeCode	(0X58914);
	MakeCode	(0X58930);
	MakeCode	(0X5894C);
	MakeCode	(0X5896A);
	MakeCode	(0X58974);
	MakeCode	(x=0X5898C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X58996);
	MakeCode	(0X589D0);
	MakeCode	(x=0X589E0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X589F8);
	OpStkvar	(x,	1);
	MakeCode	(0X58A0C);
	MakeCode	(0X58A38);
	MakeCode	(x=0X58A42);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X58A5E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X58A86);
	MakeCode	(0X58ABA);
	MakeCode	(x=0X58AC4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X58AE4);
	MakeCode	(x=0X58AEE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X58B0A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X58B34);
	MakeCode	(0X58B42);
	MakeCode	(0X58B46);
	MakeCode	(0X58B52);
	MakeCode	(0X58B7A);
	MakeCode	(x=0X58B92);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X58BD0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X58BDA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X58BEE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X58C10);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X58C1E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X58C3E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X58C68);
	MakeCode	(0X58C6E);
	MakeCode	(0X58C94);
	MakeCode	(0X58CCE);
	MakeCode	(0X58D08);
	MakeCode	(0X58D18);
	MakeCode	(0X58D52);
	MakeCode	(0X58D58);
	MakeCode	(0X58D86);
	MakeCode	(0X58DC4);
	MakeCode	(0X58DCE);
	MakeCode	(0X58DDA);
	MakeCode	(0X58DF0);
	MakeCode	(0X58E0C);
	MakeCode	(x=0X58E3A);
	OpSign		(x,	1);
	MakeCode	(x=0X58E66);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X58E7A);
	MakeCode	(0X58E92);
	MakeCode	(x=0X58E9A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X58EAA);
	OpStkvar	(x,	1);
	MakeCode	(0X58EC6);
	MakeCode	(x=0X58ECA);
	OpStkvar	(x,	0);
	MakeCode	(0X58EF6);
	MakeCode	(0X58F16);
	MakeCode	(0X58F32);
	MakeCode	(x=0X58F36);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X58F4A);
	MakeCode	(x=0X58F50);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X58F64);
	MakeCode	(x=0X58F8E);
	OpStkvar	(x,	1);
	MakeCode	(0X58FAA);
	MakeCode	(x=0X58FC6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X58FD0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X58FE8);
	MakeCode	(0X58FEE);
	MakeCode	(0X58FFC);
	MakeCode	(x=0X59026);
	OpStkvar	(x,	1);
	MakeCode	(0X59030);
	MakeCode	(0X5903E);
	MakeCode	(0X5904C);
	MakeCode	(x=0X59064);
	OpSign		(x,	1);
	MakeCode	(x=0X59094);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X590AA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X59112);
	MakeCode	(0X59134);
	MakeCode	(x=0X59152);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X5917E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X59186);
	OpStkvar	(x,	0);
	MakeCode	(0X5919A);
	MakeCode	(x=0X591B0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X591D8);
	MakeCode	(x=0X591E2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X591F2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X59214);
	OpStkvar	(x,	1);
	MakeCode	(x=0X59224);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5923E);
	MakeCode	(0X59272);
	MakeCode	(0X592A4);
	MakeCode	(x=0X592AE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X592C4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X592CA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X592EA);
	MakeCode	(0X592F6);
	MakeCode	(0X5932C);
	MakeCode	(0X59332);
	MakeCode	(0X59368);
	MakeCode	(0X59400);
	MakeCode	(0X59416);
	MakeCode	(0X59428);
	MakeCode	(0X59440);
	MakeCode	(x=0X59460);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5949A);
	MakeCode	(0X594B0);
	MakeCode	(0X594C8);
	MakeCode	(0X594D0);
	MakeCode	(0X594E6);
	MakeCode	(0X594F4);
	MakeCode	(0X5951E);
	MakeCode	(0X59526);
	MakeCode	(0X5954E);
	MakeCode	(0X5955E);
	MakeCode	(0X5958E);
	MakeCode	(0X595BA);
	MakeCode	(0X595C0);
	MakeCode	(0X59626);
	MakeCode	(0X5964E);
	MakeCode	(0X59680);
	MakeCode	(0X596AA);
	MakeCode	(0X596E2);
	MakeCode	(0X596F0);
	MakeCode	(0X59700);
	MakeCode	(x=0X59718);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X59722);
	MakeCode	(x=0X5972C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5973C);
	MakeCode	(0X59766);
	MakeCode	(x=0X5976C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X59782);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5978C);
	MakeCode	(0X597A8);
	MakeCode	(0X597CC);
	MakeCode	(0X597F2);
	MakeCode	(x=0X5980C);
	OpSign		(x,	1);
	MakeCode	(x=0X59816);
	OpStkvar	(x,	1);
	MakeCode	(0X5982C);
	MakeCode	(x=0X59834);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5983E);
	OpSign		(x,	1);
	MakeCode	(x=0X59848);
	OpStkvar	(x,	1);
	MakeCode	(0X5985E);
	MakeCode	(x=0X59866);
	OpStkvar	(x,	0);
	MakeCode	(x=0X59870);
	OpSign		(x,	1);
	MakeCode	(x=0X5987A);
	OpStkvar	(x,	1);
	MakeCode	(0X59890);
	MakeCode	(x=0X59898);
	OpStkvar	(x,	0);
	MakeCode	(x=0X598A2);
	OpSign		(x,	1);
	MakeCode	(x=0X598AC);
	OpStkvar	(x,	1);
	MakeCode	(0X598C2);
	MakeCode	(x=0X598CA);
	OpStkvar	(x,	0);
	MakeCode	(x=0X598D4);
	OpSign		(x,	1);
	MakeCode	(x=0X598E2);
	OpStkvar	(x,	0);
	MakeCode	(x=0X59900);
	OpStkvar	(x,	1);
	MakeCode	(x=0X59906);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5990C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X59918);
	OpStkvar	(x,	0);
	MakeCode	(0X59936);
	MakeCode	(x=0X59950);
	OpStkvar	(x,	1);
	MakeCode	(x=0X59956);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5995C);
	OpStkvar	(x,	0);
	MakeCode	(0X5999C);
	MakeCode	(x=0X599B8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X599BE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X599C4);
	OpStkvar	(x,	0);
	MakeCode	(0X599DC);
	MakeCode	(0X599F6);
	MakeCode	(x=0X59A0A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X59A12);
	OpStkvar	(x,	1);
	MakeCode	(x=0X59A16);
	OpStkvar	(x,	0);
	MakeCode	(x=0X59A30);
	OpStkvar	(x,	0);
	MakeCode	(x=0X59A38);
	OpStkvar	(x,	0);
	MakeCode	(0X59A60);
	MakeCode	(0X59A7A);
	MakeCode	(x=0X59A8E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X59A94);
	OpStkvar	(x,	1);
	MakeCode	(x=0X59A9A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X59AA0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X59AB6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X59ABE);
	OpStkvar	(x,	0);
	MakeCode	(0X59AE8);
	MakeCode	(x=0X59AEA);
	OpStkvar	(x,	0);
	MakeCode	(0X59AF4);
	MakeCode	(x=0X59B02);
	OpSign		(x,	1);
	MakeCode	(x=0X59B2A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X59B30);
	OpStkvar	(x,	1);
	MakeCode	(x=0X59B36);
	OpStkvar	(x,	0);
	MakeCode	(x=0X59B42);
	OpStkvar	(x,	0);
	MakeCode	(x=0X59B6A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X59B70);
	OpStkvar	(x,	1);
	MakeCode	(x=0X59B76);
	OpStkvar	(x,	0);
	MakeCode	(0X59BA2);
	MakeCode	(0X59BAA);
	MakeCode	(0X59BB0);
	MakeCode	(x=0X59BCE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X59BD4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X59BDA);
	OpStkvar	(x,	0);
	MakeCode	(0X59BF2);
	MakeCode	(0X59C0E);
	MakeCode	(x=0X59C22);
	OpStkvar	(x,	0);
	MakeCode	(x=0X59C28);
	OpStkvar	(x,	1);
	MakeCode	(x=0X59C2E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X59C34);
	OpStkvar	(x,	0);
	MakeCode	(x=0X59C40);
	OpStkvar	(x,	0);
	MakeCode	(x=0X59C48);
	OpStkvar	(x,	0);
	MakeCode	(0X59C62);
	MakeCode	(0X59C6A);
	MakeCode	(0X59C70);
	MakeCode	(0X59C7A);
	MakeCode	(x=0X59C84);
	OpSign		(x,	1);
	MakeCode	(x=0X59CA2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X59CA8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X59CAE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X59CB8);
	OpStkvar	(x,	0);
	MakeCode	(x=0X59CD8);
	OpSign		(x,	1);
	MakeCode	(x=0X59CE6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X59CEA);
	OpStkvar	(x,	0);
	MakeCode	(x=0X59CEE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X59D0C);
	OpStkvar	(x,	0);
	MakeCode	(0X59D44);
	MakeCode	(0X59D64);
	MakeCode	(0X59D7E);
	MakeCode	(x=0X59D8A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X59D9E);
	OpSign		(x,	1);
	MakeCode	(x=0X59DAA);
	OpStkvar	(x,	0);
	MakeCode	(x=0X59DAE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X59DB2);
	OpStkvar	(x,	0);
	MakeCode	(x=0X59DD0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X59DF0);
	OpStkvar	(x,	0);
	MakeCode	(0X59E04);
	MakeCode	(0X59E16);
	MakeCode	(0X59E2E);
	MakeCode	(0X59E38);
	MakeCode	(0X59E9A);
	MakeCode	(0X59EB8);
	MakeCode	(0X59EBE);
	MakeCode	(0X59ED6);
	MakeCode	(0X59EF6);
	MakeCode	(0X59F22);
	MakeCode	(0X59F30);
	MakeCode	(0X59F58);
	MakeCode	(0X59F72);
	MakeCode	(0X59FB6);
	MakeCode	(0X59FC8);
	MakeCode	(0X59FFA);
	MakeCode	(0X5A02A);
	MakeCode	(0X5A038);
	MakeCode	(0X5A058);
	MakeCode	(0X5A070);
	MakeCode	(x=0X5A09C);
	OpSign		(x,	0);
	MakeCode	(0X5A0E4);
	MakeCode	(0X5A10A);
	MakeCode	(x=0X5A110);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5A116);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5A12E);
	MakeCode	(0X5A16C);
	MakeCode	(0X5A194);
	MakeCode	(x=0X5A1AE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X5A1BC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X5A1E6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X5A1FA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5A202);
	MakeCode	(0X5A23C);
	MakeCode	(0X5A24A);
	MakeCode	(0X5A250);
	MakeCode	(0X5A25C);
	MakeCode	(0X5A270);
	MakeCode	(0X5A284);
	MakeCode	(0X5A294);
	MakeCode	(0X5A2B8);
	MakeCode	(0X5A2C0);
	MakeCode	(0X5A2D4);
	MakeCode	(0X5A2E6);
	MakeCode	(0X5A2F2);
	MakeCode	(x=0X5A2FE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X5A314);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5A336);
	MakeCode	(0X5A358);
	MakeCode	(0X5A37E);
	MakeCode	(0X5A3A0);
	MakeCode	(0X5A3C4);
	MakeCode	(0X5A3E4);
	MakeCode	(0X5A40C);
	MakeCode	(0X5A444);
	MakeCode	(0X5A476);
	MakeCode	(0X5A51E);
	MakeCode	(0X5A53C);
	MakeCode	(x=0X5A54C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5A560);
	MakeCode	(0X5A578);
	MakeCode	(0X5A582);
	MakeCode	(x=0X5A5A0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5A5AC);
	MakeCode	(0X5A610);
	MakeCode	(0X5A61A);
	MakeCode	(0X5A628);
	MakeCode	(0X5A66C);
	MakeCode	(0X5A680);
	MakeCode	(0X5A6A0);
	MakeCode	(0X5A6B0);
	MakeCode	(0X5A6C4);
	MakeCode	(0X5A6E4);
	MakeCode	(0X5A6F2);
	MakeCode	(0X5A70C);
	MakeCode	(0X5A722);
	MakeCode	(0X5A738);
	MakeCode	(0X5A768);
	MakeCode	(0X5A798);
	MakeCode	(0X5A7D4);
	MakeCode	(0X5A7E8);
	MakeCode	(0X5A800);
	MakeCode	(0X5A816);
	MakeCode	(0X5A836);
	MakeCode	(0X5A86C);
	MakeCode	(0X5A878);
	MakeCode	(0X5A88E);
	MakeCode	(0X5A8B8);
	MakeCode	(0X5A91A);
	MakeCode	(0X5A930);
	MakeCode	(0X5A960);
	MakeCode	(0X5A97C);
	MakeCode	(0X5A992);
	MakeCode	(0X5A9A8);
	MakeCode	(x=0X5A9DA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X5A9F2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5AA28);
	MakeCode	(x=0X5AA72);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5AAA2);
	MakeCode	(0X5AB00);
	MakeCode	(0X5AB1E);
	MakeCode	(0X5AB3C);
	MakeCode	(0X5AB46);
	MakeCode	(0X5AB54);
	MakeCode	(0X5AB62);
	MakeCode	(0X5AB76);
	MakeCode	(x=0X5AB84);
	OpSign		(x,	1);
	MakeCode	(0X5ABA0);
	MakeCode	(0X5ABB2);
	MakeCode	(0X5ABCA);
	MakeCode	(x=0X5ABD0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5ABDC);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5AC06);
	OpStkvar	(x,	0);
	MakeCode	(0X5AC1E);
	MakeCode	(x=0X5AC20);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5AC24);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5AC2E);
	OpStkvar	(x,	0);
	MakeCode	(0X5AC4C);
	MakeCode	(0X5AC5A);
	MakeCode	(0X5AC68);
	MakeCode	(0X5AC76);
	MakeCode	(0X5AC8C);
	MakeCode	(0X5ACB8);
	MakeCode	(x=0X5ACC8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5ACDA);
	MakeCode	(0X5AD0A);
	MakeCode	(x=0X5AD22);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5AD68);
	MakeCode	(x=0X5AD7C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5AD84);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5AD94);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5AD9C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5ADFC);
	MakeCode	(0X5AE12);
	MakeCode	(0X5AE50);
	MakeCode	(0X5AE94);
	MakeCode	(0X5AEA2);
	MakeCode	(0X5AED2);
	MakeCode	(0X5AEEE);
	MakeCode	(0X5AF32);
	MakeCode	(0X5AF52);
	MakeCode	(0X5AF5A);
	MakeCode	(0X5AF72);
	MakeCode	(0X5AFD2);
	MakeCode	(0X5B006);
	MakeCode	(0X5B016);
	MakeCode	(0X5B02C);
	MakeCode	(0X5B054);
	MakeCode	(0X5B062);
	MakeCode	(0X5B080);
	MakeCode	(0X5B0B8);
	MakeCode	(0X5B0C2);
	MakeCode	(x=0X5B0D6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5B11E);
	MakeCode	(0X5B12A);
	MakeCode	(0X5B144);
	MakeCode	(0X5B14C);
	MakeCode	(x=0X5B17C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5B1C8);
	MakeCode	(0X5B1D0);
	MakeCode	(0X5B23E);
	MakeCode	(0X5B246);
	MakeCode	(0X5B264);
	MakeCode	(0X5B28C);
	MakeCode	(0X5B2B6);
	MakeCode	(0X5B2CA);
	MakeCode	(0X5B2E4);
	MakeCode	(0X5B304);
	MakeCode	(0X5B30E);
	MakeCode	(0X5B318);
	MakeCode	(0X5B32E);
	MakeCode	(0X5B336);
	MakeCode	(0X5B354);
	MakeCode	(0X5B35A);
	MakeCode	(0X5B36C);
	MakeCode	(0X5B398);
	MakeCode	(0X5B3B2);
	MakeCode	(0X5B3F8);
	MakeCode	(x=0X5B41C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5B426);
	MakeCode	(0X5B42E);
	MakeCode	(0X5B442);
	MakeCode	(0X5B452);
	MakeCode	(0X5B472);
	MakeCode	(0X5B49E);
	MakeCode	(0X5B4AE);
	MakeCode	(0X5B4C8);
	MakeCode	(0X5B4E0);
	MakeCode	(0X5B4EE);
	MakeCode	(0X5B504);
	MakeCode	(0X5B51A);
	MakeCode	(0X5B542);
	MakeCode	(0X5B568);
	MakeCode	(0X5B59E);
	MakeCode	(0X5B5B0);
	MakeCode	(0X5B5C8);
	MakeCode	(0X5B622);
	MakeCode	(0X5B630);
	MakeCode	(0X5B690);
	MakeCode	(0X5B6DE);
	MakeCode	(0X5B6F4);
	MakeCode	(0X5B736);
	MakeCode	(0X5B744);
	MakeCode	(0X5B786);
	MakeCode	(0X5B794);
	MakeCode	(0X5B7A0);
	MakeCode	(0X5B7A6);
	MakeCode	(0X5B7F4);
	MakeCode	(0X5B802);
	MakeCode	(0X5B808);
	MakeCode	(0X5B83C);
	MakeCode	(0X5B85C);
	MakeCode	(0X5B86A);
	MakeCode	(0X5B874);
	MakeCode	(0X5B8A0);
	MakeCode	(0X5B8BE);
	MakeCode	(0X5B922);
	MakeCode	(0X5B950);
	MakeCode	(0X5B966);
	MakeCode	(0X5B96E);
	MakeCode	(0X5B9C8);
	MakeCode	(0X5B9DC);
	MakeCode	(0X5B9FC);
	MakeCode	(0X5BA10);
	MakeCode	(0X5BA2E);
	MakeCode	(0X5BA8A);
	MakeCode	(0X5BAD0);
	MakeCode	(x=0X5BAF4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5BB1E);
	MakeCode	(0X5BB6E);
	MakeCode	(0X5BB84);
	MakeCode	(0X5BB92);
	MakeCode	(0X5BC04);
	MakeCode	(0X5BC10);
	MakeCode	(0X5BC20);
	MakeCode	(0X5BC5C);
	MakeCode	(0X5BC72);
	MakeCode	(0X5BC8A);
	MakeCode	(0X5BCA4);
	MakeCode	(0X5BCAC);
	MakeCode	(0X5BCB2);
	MakeCode	(0X5BCCC);
	MakeCode	(0X5BCD6);
	MakeCode	(0X5BCF2);
	MakeCode	(0X5BD24);
	MakeCode	(0X5BD2C);
	MakeCode	(0X5BD34);
	MakeCode	(0X5BD48);
	MakeCode	(x=0X5BD76);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5BDBC);
	MakeCode	(x=0X5BDC8);
	OpSign		(x,	1);
	MakeCode	(0X5BDEE);
	MakeCode	(0X5BE32);
	MakeCode	(0X5BE3A);
	MakeCode	(0X5BE40);
	MakeCode	(0X5BE4C);
	MakeCode	(0X5BE54);
	MakeCode	(0X5BE5A);
	MakeCode	(0X5BE72);
	MakeCode	(0X5BEA8);
	MakeCode	(0X5BEC2);
	MakeCode	(0X5BEC6);
	MakeCode	(0X5BED8);
	MakeCode	(0X5BF18);
	MakeCode	(x=0X5BF42);
	OpStkvar	(x,	1);
	MakeCode	(0X5BF88);
	MakeCode	(0X5BF96);
	MakeCode	(0X5BFDA);
	MakeCode	(0X5BFEC);
	MakeCode	(0X5C00A);
	MakeCode	(0X5C024);
	MakeCode	(x=0X5C030);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X5C06E);
	OpStkvar	(x,	0);
	MakeCode	(0X5C080);
	MakeCode	(x=0X5C084);
	OpStkvar	(x,	1);
	MakeCode	(0X5C08C);
	MakeCode	(0X5C0EE);
	MakeCode	(0X5C12A);
	MakeCode	(x=0X5C144);
	OpStkvar	(x,	0);
	MakeCode	(0X5C15A);
	MakeCode	(x=0X5C162);
	OpStkvar	(x,	0);
	MakeCode	(0X5C172);
	MakeCode	(x=0X5C182);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5C18E);
	OpStkvar	(x,	0);
	MakeCode	(0X5C1A8);
	MakeCode	(0X5C1B0);
	MakeCode	(0X5C1B6);
	MakeCode	(0X5C1D8);
	MakeCode	(0X5C1E2);
	MakeCode	(0X5C1FE);
	MakeCode	(0X5C222);
	MakeCode	(0X5C23E);
	MakeCode	(0X5C258);
	MakeCode	(0X5C25C);
	MakeCode	(0X5C29E);
	MakeCode	(0X5C2E0);
	MakeCode	(0X5C2E6);
	MakeCode	(0X5C304);
	MakeCode	(0X5C316);
	MakeCode	(0X5C31E);
	MakeCode	(0X5C324);
	MakeCode	(0X5C340);
	MakeCode	(0X5C35E);
	MakeCode	(0X5C3B4);
	MakeCode	(0X5C3C4);
	MakeCode	(0X5C442);
	MakeCode	(0X5C46E);
	MakeCode	(0X5C494);
	MakeCode	(0X5C4CC);
	MakeCode	(0X5C4EA);
	MakeCode	(0X5C508);
	MakeCode	(0X5C510);
	MakeCode	(0X5C52A);
	MakeCode	(0X5C53A);
	MakeCode	(x=0X5C54A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5C56A);
	MakeCode	(0X5C57A);
	MakeCode	(x=0X5C588);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5C5D6);
	MakeCode	(0X5C5E4);
	MakeCode	(0X5C606);
	MakeCode	(0X5C62C);
	MakeCode	(0X5C654);
	MakeCode	(0X5C66A);
	MakeCode	(0X5C678);
	MakeCode	(0X5C690);
	MakeCode	(0X5C6AE);
	MakeCode	(0X5C6B8);
	MakeCode	(0X5C6CA);
	MakeCode	(0X5C6D4);
	MakeCode	(0X5C6E2);
	MakeCode	(0X5C6EE);
	MakeCode	(0X5C6F8);
	MakeCode	(x=0X5C71C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5C76C);
	MakeCode	(0X5C782);
	MakeCode	(0X5C78E);
	MakeCode	(0X5C7B4);
	MakeCode	(0X5C7E2);
	MakeCode	(0X5C844);
	MakeCode	(0X5C864);
	MakeCode	(0X5C884);
	MakeCode	(0X5C8DE);
	MakeCode	(0X5C8F6);
	MakeCode	(0X5C900);
	MakeCode	(0X5C90E);
	MakeCode	(0X5C93C);
	MakeCode	(0X5C950);
	MakeCode	(x=0X5C970);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5C982);
	MakeCode	(0X5C9A4);
	MakeCode	(0X5C9C6);
	MakeCode	(0X5C9E8);
	MakeCode	(0X5CA0A);
	MakeCode	(0X5CA1E);
	MakeCode	(0X5CA3C);
	MakeCode	(0X5CA62);
	MakeCode	(0X5CA68);
	MakeCode	(0X5CA7C);
	MakeCode	(0X5CAB4);
	MakeCode	(0X5CAC0);
	MakeCode	(0X5CB54);
	MakeCode	(0X5CB64);
	MakeCode	(0X5CB8A);
	MakeCode	(0X5CB9E);
	MakeCode	(0X5CBA6);
	MakeCode	(0X5CBAC);
	MakeCode	(x=0X5CBAE);
	OpStkvar	(x,	1);
	MakeCode	(0X5CC00);
	MakeCode	(0X5CC10);
	MakeCode	(0X5CC36);
	MakeCode	(0X5CC50);
	MakeCode	(0X5CC58);
	MakeCode	(0X5CC5E);
	MakeCode	(x=0X5CC60);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5CC66);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5CC7E);
	MakeCode	(0X5CCCE);
	MakeCode	(0X5CCDC);
	MakeCode	(x=0X5CCF6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X5CD1A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5CD6E);
	MakeCode	(0X5CD80);
	MakeCode	(x=0X5CD8E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5CD94);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5CDBC);
	MakeCode	(x=0X5CDC0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X5CDF8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5CE2E);
	MakeCode	(0X5CE4E);
	MakeCode	(x=0X5CE5A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X5CE60);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X5CE66);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5CE76);
	MakeCode	(0X5CE90);
	MakeCode	(x=0X5CE98);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X5CE9E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X5CEA4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X5CEB4);
	OpSign		(x,	1);
	MakeCode	(x=0X5CEBE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5CEC2);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5CECA);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5CEF2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5CEF8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5CEFC);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5CF02);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5CF08);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5CF0E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5CF1A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5CF22);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5CF28);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5CF3E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5CF62);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5CF68);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5CF76);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5CF7C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5CF82);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5CF88);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5CF96);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5CF9E);
	OpStkvar	(x,	0);
	MakeCode	(0X5CFCC);
	MakeCode	(x=0X5CFCE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5CFF2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5CFF8);
	OpStkvar	(x,	1);
	MakeCode	(0X5D00C);
	MakeCode	(0X5D026);
	MakeCode	(x=0X5D03A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5D040);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5D046);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5D05C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5D064);
	OpStkvar	(x,	0);
	MakeCode	(0X5D088);
	MakeCode	(0X5D0A2);
	MakeCode	(x=0X5D0B8);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5D0BE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5D0C4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5D0CA);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5D0DC);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5D0E4);
	OpStkvar	(x,	0);
	MakeCode	(0X5D112);
	MakeCode	(x=0X5D128);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5D142);
	MakeCode	(x=0X5D14E);
	OpStkvar	(x,	0);
	MakeCode	(0X5D15C);
	MakeCode	(x=0X5D16A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X5D170);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5D17E);
	MakeCode	(x=0X5D184);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5D192);
	MakeCode	(0X5D1A2);
	MakeCode	(x=0X5D1A8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X5D1AE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5D1BE);
	MakeCode	(x=0X5D1C4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X5D1CA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5D1DA);
	MakeCode	(x=0X5D1E0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X5D1E6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X5D1F4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5D20C);
	MakeCode	(0X5D22A);
	MakeCode	(x=0X5D23A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5D246);
	OpStkvar	(x,	1);
	MakeCode	(0X5D252);
	MakeCode	(0X5D28E);
	MakeCode	(0X5D2A0);
	MakeCode	(0X5D2A4);
	MakeCode	(0X5D2DC);
	MakeCode	(0X5D2EE);
	MakeCode	(0X5D2F2);
	MakeCode	(0X5D342);
	MakeCode	(x=0X5D370);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5D39A);
	MakeCode	(x=0X5D39E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5D430);
	MakeCode	(0X5D45C);
	MakeCode	(x=0X5D47C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5D4A0);
	MakeCode	(x=0X5D4AA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5D4BC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5D4D4);
	MakeCode	(x=0X5D4EA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X5D570);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X5D586);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5D594);
	MakeCode	(x=0X5D5A6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X5D5FE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5D616);
	MakeCode	(0X5D632);
	MakeCode	(0X5D636);
	MakeCode	(0X5D664);
	MakeCode	(0X5D668);
	MakeCode	(0X5D684);
	MakeCode	(0X5D694);
	MakeCode	(0X5D698);
	MakeCode	(x=0X5D6A8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5D700);
	MakeCode	(0X5D704);
	MakeCode	(0X5D70C);
	MakeCode	(0X5D72E);
	MakeCode	(0X5D732);
	MakeCode	(0X5D754);
	MakeCode	(0X5D762);
	MakeCode	(0X5D766);
	MakeCode	(x=0X5D770);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X5D78A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5D7AC);
	MakeCode	(x=0X5D7CC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5D7DE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5D7F6);
	MakeCode	(0X5D828);
	MakeCode	(x=0X5D82A);
	OpSign		(x,	1);
	MakeCode	(x=0X5D832);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X5D848);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X5D84C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5D850);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5D87C);
	MakeCode	(x=0X5D880);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X5D896);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X5D89C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5D8BC);
	MakeCode	(0X5D8C4);
	MakeCode	(x=0X5D8DA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X5D8E4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5D902);
	MakeCode	(x=0X5D934);
	OpStkvar	(x,	1);
	MakeCode	(0X5D942);
	MakeCode	(x=0X5D948);
	OpStkvar	(x,	1);
	MakeCode	(0X5D95A);
	MakeCode	(x=0X5D960);
	OpStkvar	(x,	1);
	MakeCode	(0X5D96A);
	MakeCode	(0X5D97E);
	MakeCode	(x=0X5D9AC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5D9C6);
	MakeCode	(x=0X5D9F2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5DA34);
	MakeCode	(0X5DA7E);
	MakeCode	(x=0X5DA80);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5DAA0);
	MakeCode	(x=0X5DAB2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X5DAD4);
	OpStkvar	(x,	1);
	MakeCode	(0X5DAF4);
	MakeCode	(x=0X5DAFE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X5DB40);
	OpStkvar	(x,	1);
	MakeCode	(0X5DB4A);
	MakeCode	(x=0X5DB56);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
}


static Bytes_14(void) {
        auto x;
#define id x

	MakeCode	(x=0X5DB8A);
	OpStkvar	(x,	1);
	MakeCode	(0X5DB98);
	MakeCode	(0X5DBA0);
	MakeCode	(x=0X5DBB6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X5DC4C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5DC70);
	MakeCode	(x=0X5DCB4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X5DCEA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X5DD58);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X5DD62);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5DD8A);
	MakeCode	(x=0X5DD92);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X5DDB8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X5DDEC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X5DDF6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5DE2A);
	MakeCode	(x=0X5DE36);
	OpSign		(x,	1);
	MakeCode	(x=0X5DE5C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(0X5DEC8);
	MakeCode	(x=0X5DED6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5DEF0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5DF00);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5DF08);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5DF10);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5DF1C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5DF28);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X5DF36);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5DF40);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5DF4E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5DF5C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5DF78);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X5DF86);
	OpStkvar	(x,	1);
	MakeCode	(0X5DFBC);
	MakeCode	(0X5DFDC);
	MakeCode	(x=0X5DFEA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X5E004);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X5E012);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5E026);
	MakeCode	(x=0X5E036);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5E04C);
	MakeCode	(0X5E06E);
	MakeCode	(0X5E08A);
	MakeCode	(0X5E0CE);
	MakeCode	(0X5E0DE);
	MakeCode	(0X5E156);
	MakeCode	(0X5E166);
	MakeCode	(x=0X5E1A4);
	OpSign		(x,	1);
	MakeCode	(0X5E1BA);
	MakeCode	(x=0X5E1C8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X5E20E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X5E226);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X5E230);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X5E23A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5E240);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5E256);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5E26C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5E29C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X5E2A6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X5E2B0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5E2B6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5E2CC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5E2E2);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5E316);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5E37C);
	MakeName	(0X5E37C,	"nullsub_4");
	MakeCode	(0X5E37E);
	MakeCode	(x=0X5E3A0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X5E464);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5E48C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X5E498);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5E4A4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5E4E4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X5E512);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5E542);
	MakeCode	(x=0X5E574);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X5E59A);
	OpStkvar	(x,	1);
	MakeCode	(0X5E5A6);
	MakeCode	(x=0X5E5F8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X5E624);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X5E66C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5E688);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X5E6B0);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(0X5E6E8);
	MakeCode	(0X5E6F4);
	MakeCode	(x=0X5E716);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X5E740);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5E770);
	MakeCode	(0X5E77C);
	MakeCode	(x=0X5E7C2);
	OpStkvar	(x,	1);
	MakeCode	(0X5E7CA);
	MakeCode	(x=0X5E7E8);
	OpStkvar	(x,	1);
	MakeCode	(0X5E7F0);
	MakeCode	(x=0X5E804);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5E81C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5E844);
	MakeCode	(x=0X5E848);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(0X5E872);
	MakeCode	(0X5E894);
	MakeCode	(x=0X5E8C6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X5E91A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5E930);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X5E97C);
	OpStkvar	(x,	1);
	MakeCode	(0X5E9AE);
	MakeCode	(x=0X5EA04);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5EA1A);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X5EA26);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5EA32);
	OpStkvar	(x,	1);
	MakeCode	(0X5EA4A);
	MakeCode	(x=0X5EA4E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X5EA84);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5EA96);
	MakeCode	(x=0X5EAAC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5EAE6);
	MakeCode	(0X5EAF6);
	MakeCode	(x=0X5EB4C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5EB60);
	MakeCode	(x=0X5EB9A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5EBD4);
	MakeCode	(0X5EBE4);
	MakeCode	(x=0X5EC3A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5EC4E);
	MakeCode	(x=0X5EC88);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X5ECC0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5ECFC);
	MakeCode	(x=0X5ED1A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5ED2C);
	MakeCode	(0X5ED34);
	MakeCode	(0X5ED42);
	MakeCode	(x=0X5EDA4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5EDC4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5EDDA);
	OpSign		(x,	1);
	MakeCode	(x=0X5EDFE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X5EE0E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5EE1E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X5EE4A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X5EE54);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5EE5A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5EE66);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5EE7E);
	OpSign		(x,	1);
	MakeCode	(x=0X5EE92);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(0X5EEBC);
	MakeCode	(x=0X5EEC4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5EECE);
	OpStkvar	(x,	0);
	MakeCode	(0X5EF12);
	MakeCode	(x=0X5EF32);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X5EF3A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5EF62);
	MakeCode	(x=0X5EF9A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X5EFA2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X5EFCC);
	OpSign		(x,	1);
	MakeCode	(x=0X5F01A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X5F02A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5F03A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X5F066);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X5F070);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5F076);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5F082);
	OpStkvar	(x,	0);
	MakeCode	(0X5F08A);
	MakeCode	(0X5F0AE);
	MakeCode	(0X5F0BE);
	MakeCode	(x=0X5F0E2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5F110);
	MakeCode	(x=0X5F134);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X5F15A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5F180);
	MakeCode	(x=0X5F198);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5F1AE);
	MakeCode	(0X5F1BE);
	MakeCode	(x=0X5F1E4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X5F1FA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X5F20A);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(0X5F224);
	MakeCode	(x=0X5F22C);
	OpSign		(x,	1);
	MakeCode	(x=0X5F230);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5F23A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X5F250);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X5F260);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X5F274);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5F282);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5F290);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5F2B2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5F2C4);
	OpStkvar	(x,	0);
	MakeCode	(0X5F2CC);
	MakeCode	(0X5F2D8);
	MakeCode	(0X5F2E8);
	MakeCode	(x=0X5F2EC);
	OpSign		(x,	1);
	MakeCode	(x=0X5F30C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5F31C);
	MakeCode	(0X5F326);
	MakeCode	(x=0X5F336);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5F33C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5F34C);
	OpStkvar	(x,	0);
	MakeCode	(0X5F358);
	MakeCode	(x=0X5F368);
	OpStkvar	(x,	0);
	MakeCode	(0X5F376);
	MakeCode	(x=0X5F380);
	OpSign		(x,	1);
	MakeCode	(x=0X5F388);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5F38C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5F396);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5F39A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5F3A0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5F3A4);
	OpStkvar	(x,	0);
	OpStkvar	(x,	1);
	MakeCode	(0X5F3AC);
	MakeCode	(x=0X5F3B2);
	OpStkvar	(x,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5F3BA);
	OpStkvar	(x,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5F3C0);
	OpStkvar	(x,	0);
	MakeCode	(0X5F3CC);
	MakeCode	(0X5F3D2);
	MakeCode	(0X5F3E6);
	MakeCode	(0X5F3EC);
	MakeCode	(x=0X5F3F8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5F402);
	MakeCode	(x=0X5F408);
	OpDecimal	(x,	0);
	MakeCode	(x=0X5F416);
	OpDecimal	(x,	0);
	MakeCode	(0X5F41E);
	MakeStr		(0X5F426,	0X5F43A);
	MakeName	(0X5F426,	"aB8Pb8B8B8Nu");
	MakeCode	(0X5F43A);
	MakeCode	(0X5F472);
	MakeCode	(0X5F49A);
	MakeCode	(0X5F4A6);
	MakeCode	(0X5F4EA);
	MakeCode	(0X5F508);
	MakeCode	(0X5F540);
	MakeCode	(0X5F566);
	MakeCode	(0X5F5B0);
	MakeCode	(0X5F618);
	MakeCode	(0X5F63C);
	MakeCode	(0X5F644);
	MakeCode	(0X5F670);
	MakeCode	(0X5F696);
	MakeCode	(0X5F6AC);
	MakeCode	(0X5F6BC);
	MakeCode	(x=0X5F750);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5F756);
	OpStkvar	(x,	1);
	MakeCode	(0X5F79C);
	MakeCode	(x=0X5F7AE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5F7B8);
	MakeCode	(0X5F7DE);
	MakeCode	(0X5F7EE);
	MakeCode	(0X5F806);
	MakeCode	(0X5F810);
	MakeCode	(0X5F820);
	MakeCode	(0X5F87A);
	MakeCode	(0X5F8AA);
	MakeCode	(0X5F8E4);
	MakeCode	(0X5F93C);
	MakeCode	(0X5F96A);
	MakeCode	(0X5F97A);
	MakeCode	(0X5F982);
	MakeCode	(0X5F9AE);
	MakeCode	(0X5F9C6);
	MakeCode	(0X5F9D6);
	MakeCode	(x=0X5FA22);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X5FA46);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X5FA68);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5FACE);
	MakeCode	(x=0X5FAE6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X5FB0A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X5FB2C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X5FBB8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X5FBDA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5FBFA);
	MakeCode	(x=0X5FC00);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X5FC24);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X5FCA2);
	MakeCode	(0X5FD56);
	MakeCode	(0X5FD6E);
	MakeCode	(0X5FD7C);
	MakeCode	(0X5FDEE);
	MakeCode	(0X5FE3A);
	MakeCode	(0X5FE46);
	MakeCode	(0X5FE6A);
	MakeCode	(0X5FF28);
	MakeCode	(0X5FF36);
	MakeCode	(0X5FF40);
	MakeCode	(0X60000);
	MakeCode	(0X6002C);
	MakeCode	(0X60042);
	MakeCode	(0X60072);
	MakeCode	(0X600A8);
	MakeCode	(0X600B6);
	MakeCode	(0X600D0);
	MakeCode	(0X600DC);
	MakeCode	(0X600E2);
	MakeCode	(0X600F6);
	MakeCode	(0X60102);
	MakeCode	(0X6010A);
	MakeCode	(x=0X60146);
	OpStkvar	(x,	1);
	MakeCode	(0X6015A);
	MakeCode	(x=0X60178);
	OpSign		(x,	1);
	MakeCode	(x=0X60198);
	OpStkvar	(x,	1);
	MakeCode	(0X601B6);
	MakeCode	(x=0X601BA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X601CE);
	OpStkvar	(x,	1);
	MakeCode	(0X60210);
	MakeCode	(0X6024C);
	MakeCode	(x=0X60266);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X6028A);
	OpStkvar	(x,	1);
	MakeCode	(0X6051E);
	MakeCode	(0X60560);
	MakeCode	(0X6056C);
	MakeCode	(0X60574);
	MakeCode	(x=0X6057A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6057E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6059C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X605B4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X605BC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X605D6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X605DC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X605E4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6060E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6061E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpStkvar	(x,	1);
	MakeCode	(0X60632);
	MakeCode	(x=0X60644);
	OpStkvar	(x,	0);
	MakeCode	(x=0X60654);
	OpStkvar	(x,	1);
	MakeCode	(x=0X60698);
	OpStkvar	(x,	0);
	MakeCode	(0X606E4);
	MakeCode	(0X60708);
	MakeCode	(0X6072C);
	MakeCode	(0X60756);
	MakeCode	(0X6076C);
	MakeCode	(0X6078A);
	MakeCode	(0X607A6);
	MakeCode	(0X607C2);
	MakeCode	(0X6080C);
	MakeCode	(0X60834);
	MakeCode	(x=0X60880);
	OpSign		(x,	1);
	MakeCode	(0X608EC);
	MakeCode	(0X6091A);
	MakeCode	(0X609B8);
	MakeCode	(0X609F0);
	MakeCode	(x=0X60A28);
	OpStkvar	(x,	1);
	MakeCode	(0X60A50);
	MakeCode	(x=0X60A5A);
	OpStkvar	(x,	1);
	MakeCode	(0X60A68);
	MakeCode	(0X60A6E);
	MakeCode	(0X60A9A);
	MakeCode	(x=0X60AA4);
	OpStkvar	(x,	1);
	MakeCode	(0X60AB2);
	MakeCode	(0X60AB8);
	MakeCode	(0X60B0A);
	MakeCode	(0X60B40);
	MakeCode	(0X60B70);
	MakeCode	(0X60BA6);
	MakeCode	(0X60BD6);
	MakeCode	(x=0X60BE2);
	OpSign		(x,	1);
	MakeCode	(x=0X60BEA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X60C08);
	OpStkvar	(x,	1);
	MakeCode	(x=0X60C1A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X60C22);
	OpStkvar	(x,	1);
	MakeCode	(x=0X60C28);
	OpStkvar	(x,	1);
	MakeCode	(x=0X60C32);
	OpStkvar	(x,	1);
	MakeCode	(x=0X60C36);
	OpStkvar	(x,	1);
	MakeCode	(x=0X60C40);
	OpStkvar	(x,	1);
	MakeCode	(x=0X60C44);
	OpStkvar	(x,	1);
	MakeCode	(x=0X60C4E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X60C52);
	OpStkvar	(x,	1);
	MakeCode	(x=0X60C5C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X60C60);
	OpStkvar	(x,	1);
	MakeCode	(x=0X60C6A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X60C80);
	OpStkvar	(x,	0);
	MakeCode	(0X60CA2);
	MakeCode	(x=0X60CAA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X60CB2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X60CB8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X60CC2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X60CC6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X60CD0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X60CD4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X60CDE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X60CE2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X60CEC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X60CF0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X60CFA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X60D10);
	OpStkvar	(x,	0);
	MakeCode	(x=0X60D24);
	OpStkvar	(x,	1);
	MakeCode	(x=0X60D36);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X60D3E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X60D44);
	OpStkvar	(x,	1);
	MakeCode	(x=0X60D4E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X60D52);
	OpStkvar	(x,	1);
	MakeCode	(x=0X60D5C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X60D60);
	OpStkvar	(x,	1);
	MakeCode	(x=0X60D6A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X60D6E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X60D78);
	OpStkvar	(x,	1);
	MakeCode	(x=0X60D7C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X60D86);
	OpStkvar	(x,	1);
	MakeCode	(x=0X60D9C);
	OpStkvar	(x,	0);
	MakeCode	(0X60DB0);
	MakeCode	(x=0X60DB8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X60DC0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X60DC6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X60DD0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X60DD4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X60DDE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X60DE2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X60DEC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X60DF0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X60DFA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X60DFE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X60E08);
	OpStkvar	(x,	1);
	MakeCode	(x=0X60E1E);
	OpStkvar	(x,	0);
	MakeCode	(0X60E32);
	MakeCode	(0X60E42);
	MakeCode	(0X60F86);
	MakeCode	(0X60F8C);
	MakeCode	(x=0X60FA6);
	OpSign		(x,	1);
	MakeCode	(x=0X60FC4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X60FCA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X60FD0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X60FD6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X60FDC);
	OpStkvar	(x,	0);
	MakeCode	(x=0X60FE2);
	OpStkvar	(x,	0);
	MakeCode	(x=0X60FEC);
	OpSign		(x,	1);
	MakeCode	(x=0X61020);
	OpStkvar	(x,	0);
	MakeCode	(x=0X61048);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X61054);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X6106A);
	MakeCode	(x=0X6106E);
	OpStkvar	(x,	1);
	MakeCode	(0X61080);
	MakeCode	(0X61088);
	MakeCode	(0X610B8);
	MakeCode	(x=0X610CC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X610D8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X610F6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X61158);
	OpStkvar	(x,	1);
	MakeCode	(0X61162);
	MakeCode	(x=0X6119C);
	OpStkvar	(x,	1);
	MakeCode	(0X611F6);
	MakeCode	(0X61230);
	MakeCode	(x=0X6125E);
	OpStkvar	(x,	1);
	MakeCode	(0X6127C);
	MakeCode	(0X612B6);
	MakeCode	(0X612C2);
	MakeCode	(x=0X612D8);
	OpSign		(x,	1);
	MakeCode	(x=0X612EC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X612F0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X612FE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X61306);
	OpStkvar	(x,	1);
	MakeCode	(x=0X61310);
	OpStkvar	(x,	0);
	MakeCode	(x=0X61330);
	OpStkvar	(x,	0);
	MakeCode	(x=0X61342);
	OpStkvar	(x,	0);
	MakeCode	(0X6134C);
	MakeCode	(x=0X61370);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X61378);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X6139C);
	MakeCode	(x=0X6139E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X613A8);
	OpStkvar	(x,	0);
	MakeCode	(x=0X613C6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X613D2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X613F6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X613FA);
	OpStkvar	(x,	0);
	MakeCode	(0X6140C);
	MakeCode	(x=0X61432);
	OpStkvar	(x,	1);
	MakeCode	(x=0X61438);
	OpStkvar	(x,	0);
	MakeCode	(0X61452);
	MakeCode	(x=0X61460);
	OpSign		(x,	1);
	MakeCode	(x=0X61468);
	OpStkvar	(x,	0);
	MakeCode	(x=0X61476);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6147C);
	OpStkvar	(x,	1);
	MakeCode	(0X61494);
	MakeCode	(x=0X614A4);
	OpStkvar	(x,	0);
	MakeCode	(0X614D4);
	MakeCode	(0X614EE);
	MakeCode	(x=0X61502);
	OpSign		(x,	1);
	MakeCode	(0X6152E);
	MakeCode	(x=0X61536);
	OpStkvar	(x,	0);
	MakeCode	(0X61550);
	MakeCode	(0X61560);
	MakeCode	(x=0X61568);
	OpStkvar	(x,	1);
	MakeCode	(x=0X615BC);
	OpSign		(x,	1);
	MakeCode	(x=0X615C8);
	OpStkvar	(x,	0);
	MakeCode	(x=0X615CC);
	OpStkvar	(x,	0);
	MakeCode	(x=0X615D0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X615FA);
	OpStkvar	(x,	0);
	MakeCode	(x=0X61616);
	OpStkvar	(x,	0);
	MakeCode	(0X61630);
	MakeCode	(0X6163A);
	MakeCode	(0X616A4);
	MakeCode	(0X616BA);
	MakeCode	(0X616D8);
	MakeCode	(0X61776);
	MakeCode	(0X61788);
	MakeCode	(0X617E0);
	MakeCode	(x=0X617FE);
	OpSign		(x,	1);
	MakeCode	(x=0X61806);
	OpStkvar	(x,	0);
	MakeCode	(x=0X61812);
	OpStkvar	(x,	0);
	MakeCode	(x=0X61816);
	OpStkvar	(x,	0);
	MakeCode	(0X61832);
	MakeCode	(x=0X6183E);
	OpSign		(x,	1);
	MakeCode	(x=0X618B2);
	OpStkvar	(x,	0);
	MakeCode	(x=0X618BE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X618C2);
	OpStkvar	(x,	0);
	MakeCode	(0X61900);
	MakeCode	(0X61926);
	MakeCode	(0X6193C);
	MakeCode	(0X6195A);
	MakeCode	(x=0X61962);
	OpSign		(x,	1);
	MakeCode	(x=0X6196C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X61976);
	MakeCode	(0X61988);
	MakeCode	(0X61992);
	MakeCode	(0X61994);
	MakeCode	(x=0X619CA);
	OpDecimal	(x,	0);
	MakeCode	(0X619FE);
	MakeCode	(0X61A30);
	MakeCode	(x=0X61A3E);
	OpSign		(x,	1);
	MakeCode	(0X61A60);
	MakeCode	(0X61AA2);
	MakeCode	(0X61ABE);
	MakeCode	(x=0X61AC6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X61AE0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X61B04);
	OpStkvar	(x,	1);
	MakeCode	(x=0X61B26);
	OpStkvar	(x,	1);
	MakeCode	(0X61B30);
	MakeCode	(x=0X61B70);
	OpStkvar	(x,	1);
	MakeCode	(x=0X61B8C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X61BA8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X61BC8);
	MakeCode	(x=0X61BD6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X61BE2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X61BFA);
	MakeCode	(0X61C54);
	MakeCode	(x=0X61C58);
	OpStkvar	(x,	1);
	MakeCode	(x=0X61C5E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X61C66);
	OpStkvar	(x,	1);
	MakeCode	(x=0X61C6C);
	OpStkvar	(x,	0);
	MakeCode	(0X61C8E);
	MakeCode	(0X61CA2);
	MakeCode	(0X61CB0);
	MakeCode	(x=0X61CC4);
	OpStkvar	(x,	0);
	MakeCode	(0X61CD2);
	MakeCode	(x=0X61CD6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X61CEA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X61D02);
	OpStkvar	(x,	1);
	MakeCode	(x=0X61D08);
	OpStkvar	(x,	1);
	MakeCode	(x=0X61D10);
	OpStkvar	(x,	1);
	MakeCode	(0X61D36);
	MakeCode	(x=0X61D3A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X61D46);
	OpStkvar	(x,	0);
	MakeCode	(x=0X61D4A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X61D72);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X61D7C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X61D94);
	MakeCode	(0X61DA4);
	MakeCode	(x=0X61DB2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X61DC6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X61DE2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X61DE8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X61E00);
	MakeCode	(x=0X61E16);
	OpStkvar	(x,	1);
	MakeCode	(x=0X61E1C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X61E24);
	OpStkvar	(x,	1);
	MakeCode	(0X61E2E);
	MakeCode	(x=0X61E3A);
	OpStkvar	(x,	0);
	MakeCode	(0X61E4C);
	MakeCode	(0X61EC8);
	MakeCode	(0X61ECE);
	MakeCode	(x=0X61ED4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X61EDE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X61EE8);
	OpStkvar	(x,	1);
	MakeCode	(0X61F02);
	MakeCode	(x=0X61F10);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X61F8A);
	MakeCode	(0X61FE6);
	MakeCode	(0X61FFE);
	MakeCode	(0X62046);
	MakeCode	(0X6206C);
	MakeCode	(x=0X62076);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X620EE);
	MakeCode	(0X6214A);
	MakeCode	(0X62162);
	MakeCode	(0X621AA);
	MakeCode	(0X621D0);
	MakeCode	(0X621D6);
	MakeCode	(0X621E6);
	MakeCode	(0X62228);
	MakeCode	(0X622DE);
	MakeCode	(0X622E6);
	MakeCode	(x=0X622EE);
	OpSign		(x,	1);
	MakeCode	(0X6234E);
	MakeCode	(0X6236C);
	MakeCode	(0X6241E);
	MakeCode	(0X6243C);
	MakeCode	(0X6244C);
	MakeCode	(0X6245E);
	MakeCode	(0X6249C);
	MakeCode	(0X624B2);
	MakeCode	(0X624C0);
	MakeCode	(0X6252E);
	MakeCode	(0X62614);
	MakeCode	(0X6264C);
	MakeCode	(0X62652);
	MakeCode	(0X626EE);
	MakeCode	(0X62734);
	MakeCode	(0X62780);
	MakeCode	(0X627D0);
	MakeCode	(0X62818);
	MakeCode	(0X62834);
	MakeCode	(0X62854);
	MakeCode	(0X62868);
	MakeCode	(0X6289C);
	MakeCode	(0X628A2);
	MakeCode	(0X628C0);
	MakeCode	(0X628C6);
	MakeCode	(0X628E6);
	MakeCode	(0X628EC);
	MakeCode	(0X62906);
	MakeCode	(0X62930);
	MakeCode	(0X62946);
	MakeCode	(x=0X6296E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X62976);
	MakeCode	(0X6298A);
	MakeCode	(0X629B8);
	MakeCode	(0X629BE);
	MakeCode	(x=0X629E4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X62A28);
	MakeCode	(0X62A76);
	MakeCode	(x=0X62A84);
	OpStkvar	(x,	1);
	MakeCode	(x=0X62A8A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X62A8E);
	OpStkvar	(x,	0);
	MakeCode	(0X62AC0);
	MakeCode	(0X62AF0);
	MakeCode	(0X62B62);
	MakeCode	(0X62B70);
	MakeCode	(x=0X62BE8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X62BFA);
	MakeCode	(0X62C08);
	MakeCode	(0X62E90);
	MakeCode	(0X62EDA);
	MakeCode	(0X62EDE);
	MakeCode	(x=0X62EE4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X62EF0);
	MakeCode	(0X62EFE);
	MakeCode	(0X62F40);
	MakeCode	(0X62F5C);
	MakeCode	(0X62F92);
	MakeCode	(0X62FDE);
	MakeCode	(0X6301E);
	MakeCode	(0X63038);
	MakeCode	(0X63046);
	MakeCode	(0X63056);
	MakeCode	(0X63154);
	MakeCode	(x=0X63172);
	OpSign		(x,	1);
	MakeCode	(0X63204);
	MakeCode	(x=0X6326A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X63274);
	MakeCode	(0X6328A);
	MakeCode	(0X6329A);
	MakeCode	(0X632AA);
	MakeCode	(0X632CA);
	MakeCode	(0X632DE);
	MakeCode	(0X6331C);
	MakeCode	(0X63328);
	MakeCode	(0X63342);
	MakeCode	(0X63346);
	MakeCode	(0X6334E);
	MakeCode	(0X6336C);
	MakeCode	(0X6337E);
	MakeCode	(0X633C0);
	MakeCode	(0X633F6);
	MakeCode	(0X6343E);
	MakeCode	(0X6347A);
	MakeCode	(0X6348E);
	MakeCode	(x=0X63492);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X63580);
	MakeCode	(0X635E0);
	MakeCode	(0X63636);
	MakeCode	(0X63656);
	MakeCode	(0X6367E);
	MakeCode	(0X6368C);
	MakeCode	(0X63692);
	MakeCode	(0X636B0);
	MakeCode	(0X636B6);
	MakeCode	(0X636CE);
	MakeCode	(0X636E6);
	MakeCode	(0X636FC);
	MakeCode	(0X63710);
	MakeCode	(0X6371C);
	MakeCode	(0X63774);
	MakeCode	(0X63792);
	MakeCode	(0X637B4);
	MakeCode	(0X637F2);
	MakeCode	(0X6381E);
	MakeCode	(x=0X63824);
	OpDecimal	(x,	1);
	MakeCode	(0X63862);
	MakeCode	(0X63876);
	MakeCode	(x=0X6387A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X6389A);
	MakeCode	(0X63994);
	MakeCode	(0X639CA);
	MakeCode	(0X63A1E);
	MakeCode	(0X63A90);
	MakeCode	(0X63AAA);
	MakeCode	(0X63AF4);
	MakeCode	(0X63B3A);
	MakeCode	(0X63B5A);
	MakeCode	(0X63BBE);
	MakeCode	(0X63BEA);
	MakeCode	(0X63C0E);
	MakeCode	(0X63C22);
	MakeCode	(x=0X63C26);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X63C4E);
	MakeCode	(0X63C66);
	MakeCode	(0X63C74);
	MakeCode	(0X63C86);
	MakeCode	(0X63C9C);
	MakeCode	(0X63CB4);
	MakeCode	(0X63CC2);
	MakeCode	(0X63CDE);
	MakeCode	(0X63D00);
	MakeCode	(0X63D06);
	MakeCode	(0X63D2A);
	MakeCode	(0X63D30);
	MakeCode	(0X63D70);
	MakeCode	(0X63DD4);
	MakeCode	(0X63DF4);
	MakeCode	(0X63E1C);
	MakeCode	(0X63E2E);
	MakeCode	(0X63E4A);
	MakeCode	(0X63E5E);
	MakeCode	(0X63E6C);
	MakeCode	(0X63E7A);
	MakeCode	(x=0X63E94);
	OpSign		(x,	1);
	MakeCode	(0X63F5C);
	MakeCode	(x=0X63F60);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X63F80);
	MakeCode	(x=0X63F84);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X63FD6);
	MakeCode	(x=0X63FDE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X63FF2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X63FF8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X63FFE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X64002);
	OpStkvar	(x,	1);
	MakeCode	(0X64020);
	MakeCode	(0X64058);
	MakeCode	(0X6406C);
	MakeCode	(0X64084);
	MakeCode	(0X640F6);
	MakeCode	(0X641D4);
	MakeCode	(0X641DA);
	MakeCode	(x=0X64216);
	OpSign		(x,	1);
	MakeCode	(x=0X6422C);
	OpStkvar	(x,	0);
	MakeCode	(0X64276);
	MakeCode	(0X642AE);
	MakeCode	(0X642BA);
	MakeCode	(x=0X642BE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X642DE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X64314);
	MakeCode	(0X64324);
	MakeCode	(x=0X6432A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X6433E);
	MakeCode	(0X6434C);
	MakeCode	(0X64352);
	MakeCode	(0X6436E);
	MakeCode	(x=0X64372);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X64398);
	MakeCode	(0X643A8);
	MakeCode	(x=0X643AC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X643BE);
	MakeCode	(0X643CC);
	MakeCode	(0X643D2);
	MakeCode	(0X643EE);
	MakeCode	(0X64416);
	MakeCode	(x=0X64422);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X6443A);
	MakeCode	(x=0X64444);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X64478);
	MakeCode	(0X644A6);
	MakeCode	(0X644B0);
	MakeCode	(0X644E6);
	MakeCode	(0X6450A);
	MakeCode	(0X64510);
	MakeCode	(0X64554);
	MakeCode	(0X64570);
	MakeCode	(0X6457C);
	MakeCode	(0X64596);
	MakeCode	(x=0X645B0);
	OpSign		(x,	1);
	MakeCode	(0X645E8);
	MakeCode	(0X6460E);
	MakeCode	(0X64622);
	MakeCode	(x=0X6462C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X64642);
	OpSign		(x,	1);
	MakeCode	(x=0X64656);
	OpStkvar	(x,	1);
	MakeCode	(x=0X64660);
	OpStkvar	(x,	0);
	MakeCode	(x=0X646A8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X646DE);
	MakeCode	(0X646F6);
	MakeCode	(0X64762);
	MakeCode	(0X647EE);
	MakeCode	(x=0X64802);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X6480C);
	MakeCode	(0X64830);
	MakeCode	(0X64882);
	MakeCode	(0X6488A);
	MakeCode	(0X6489C);
	MakeCode	(0X648CC);
	MakeCode	(0X64914);
	MakeCode	(0X6495C);
	MakeCode	(0X64A0E);
	MakeCode	(0X64A52);
	MakeCode	(0X64A80);
	MakeCode	(0X64B16);
	MakeCode	(0X64B3E);
	MakeCode	(0X64B8E);
	MakeCode	(0X64B9C);
	MakeCode	(0X64B9E);
	MakeCode	(0X64BCE);
	MakeCode	(0X64BF6);
	MakeName	(0X64BF6,	"nullsub_5");
	MakeCode	(0X64BF8);
	MakeCode	(0X64C06);
	MakeCode	(0X64C14);
	MakeCode	(0X64C1C);
	MakeCode	(0X64C40);
	MakeCode	(0X64C56);
	MakeCode	(0X64C70);
	MakeCode	(0X64CC8);
	MakeCode	(0X64CDE);
	MakeCode	(x=0X64CE2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X64CEC);
	MakeCode	(0X64CEE);
	MakeCode	(x=0X64CF2);
	OpDecimal	(x,	0);
	MakeCode	(x=0X64CF6);
	OpDecimal	(x,	0);
	MakeCode	(0X64D62);
	MakeCode	(0X64D68);
	MakeCode	(0X64D6C);
	MakeCode	(0X64D80);
	MakeCode	(0X64DB0);
	MakeCode	(0X64DB6);
	MakeCode	(0X64DBA);
	MakeCode	(0X64EC8);
	MakeCode	(0X64EE0);
	MakeCode	(0X64EF8);
	MakeCode	(0X64EFC);
	MakeCode	(0X65000);
	MakeCode	(0X6503A);
	MakeCode	(0X6507E);
	MakeCode	(0X650B2);
	MakeCode	(0X650E2);
	MakeCode	(0X65106);
	MakeCode	(0X65136);
	MakeCode	(0X65144);
	MakeCode	(0X65152);
	MakeCode	(0X65186);
	MakeCode	(0X651F4);
	MakeCode	(0X6522A);
	MakeCode	(0X6524A);
	MakeCode	(0X65274);
	MakeCode	(x=0X65280);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X6528A);
	MakeCode	(0X652A8);
	MakeCode	(x=0X652CC);
	OpDecimal	(x,	0);
	MakeCode	(0X652EA);
	MakeCode	(0X65308);
	MakeCode	(x=0X6530E);
	OpDecimal	(x,	0);
	MakeCode	(x=0X6531C);
	OpDecimal	(x,	0);
	MakeCode	(0X6534E);
	MakeCode	(0X65372);
	MakeCode	(0X65382);
	MakeCode	(0X653C0);
	MakeCode	(0X653DE);
	MakeCode	(0X65402);
	MakeCode	(0X6541E);
	MakeCode	(0X65428);
	MakeCode	(0X65446);
	MakeCode	(0X6546E);
	MakeCode	(x=0X6549E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X654A8);
	MakeCode	(0X654B0);
	MakeCode	(0X654C4);
	MakeCode	(0X654C8);
	MakeCode	(0X654DC);
	MakeCode	(0X654E8);
	MakeCode	(x=0X654F4);
	OpDecimal	(x,	0);
	MakeCode	(x=0X654FE);
	OpDecimal	(x,	0);
	MakeCode	(0X65536);
	MakeCode	(x=0X6553A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X65544);
	MakeCode	(0X6554A);
	MakeCode	(0X65586);
	MakeCode	(0X6558A);
	MakeCode	(0X65594);
	MakeCode	(0X655A6);
	MakeCode	(0X655CA);
	MakeCode	(0X655EA);
	MakeCode	(0X6561C);
	MakeCode	(0X65636);
	MakeCode	(0X65678);
	MakeCode	(0X6568A);
	MakeCode	(0X6569C);
	MakeCode	(0X656A2);
	MakeCode	(0X656D2);
	MakeCode	(0X656F8);
	MakeCode	(0X65710);
	MakeCode	(0X6575A);
	MakeCode	(0X65764);
	MakeCode	(0X65786);
	MakeCode	(0X657B4);
	MakeCode	(0X657BE);
	MakeCode	(x=0X65804);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X65826);
	MakeCode	(0X6584E);
	MakeCode	(0X65864);
	MakeCode	(0X65896);
	MakeCode	(x=0X658C0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X658E2);
	MakeCode	(0X6590C);
	MakeCode	(0X65950);
	MakeCode	(0X65968);
	MakeCode	(0X6598E);
	MakeCode	(0X65A02);
	MakeCode	(0X65A16);
	MakeCode	(0X65A36);
	MakeCode	(0X65A44);
	MakeCode	(0X65A76);
	MakeCode	(0X65A7A);
	MakeCode	(0X65A80);
	MakeCode	(0X65A90);
	MakeCode	(0X65AAA);
	MakeCode	(0X65AC2);
	MakeCode	(0X65AE0);
	MakeCode	(0X65AF4);
	MakeCode	(0X65B10);
	MakeCode	(0X65B48);
	MakeCode	(0X65B60);
	MakeCode	(0X65BA4);
	MakeCode	(0X65BCC);
	MakeCode	(0X65BE8);
	MakeCode	(0X65BFE);
	MakeCode	(0X65C26);
	MakeCode	(0X65C62);
	MakeCode	(0X65CC0);
	MakeCode	(0X65CF2);
	MakeCode	(0X65D0A);
	MakeCode	(0X65D2C);
	MakeCode	(0X65DCA);
	MakeCode	(0X65DD0);
	MakeCode	(0X65E54);
	MakeCode	(0X65E5A);
	MakeCode	(x=0X65E7E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X65E88);
	MakeCode	(0X65EC4);
	MakeCode	(x=0X65EE4);
	OpDecimal	(x,	0);
	MakeCode	(0X65F1E);
	MakeCode	(x=0X65F44);
	OpDecimal	(x,	0);
	MakeCode	(0X65F74);
	MakeCode	(0X65F92);
	MakeCode	(0X65FC0);
	MakeCode	(0X65FF4);
	MakeCode	(0X6607A);
	MakeCode	(0X660B2);
	MakeCode	(0X660EC);
	MakeCode	(0X6614A);
	MakeCode	(x=0X6616A);
	OpDecimal	(x,	1);
	MakeCode	(0X66192);
	MakeCode	(0X6619A);
	MakeCode	(0X661D0);
	MakeCode	(0X661EE);
	MakeCode	(0X66204);
	MakeCode	(0X6621A);
	MakeCode	(0X66226);
	MakeCode	(0X66294);
	MakeCode	(0X66334);
	MakeCode	(0X66340);
	MakeCode	(0X66364);
	MakeCode	(0X6637C);
	MakeCode	(0X66396);
	MakeCode	(0X6639A);
	MakeCode	(0X663C6);
	MakeCode	(0X663D4);
	MakeCode	(0X663E0);
	MakeCode	(0X663F2);
	MakeCode	(0X66408);
	MakeCode	(0X66414);
	MakeCode	(0X66432);
	MakeCode	(0X66438);
	MakeCode	(0X66444);
	MakeCode	(0X66456);
	MakeCode	(0X6645C);
	MakeCode	(0X664A0);
	MakeCode	(0X664C4);
	MakeCode	(0X664D8);
	MakeCode	(0X664F0);
	MakeCode	(0X66504);
	MakeCode	(0X66518);
	MakeCode	(0X6652C);
	MakeCode	(x=0X6653A);
	OpSign		(x,	1);
	MakeCode	(0X66552);
	MakeCode	(0X66586);
	MakeCode	(0X665C8);
	MakeCode	(0X665FA);
	MakeCode	(0X66660);
	MakeCode	(0X66676);
	MakeCode	(0X666A8);
	MakeCode	(0X666DC);
	MakeCode	(0X666EE);
	MakeCode	(x=0X66700);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X66734);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X6676A);
	MakeCode	(0X667BA);
	MakeCode	(0X66824);
	MakeCode	(x=0X66828);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X66850);
	MakeCode	(x=0X66854);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X6686A);
	MakeCode	(0X6688C);
	MakeCode	(x=0X66890);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X668B8);
	MakeCode	(x=0X668BC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X668D2);
	MakeCode	(0X668EE);
	MakeCode	(x=0X6693C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X6696A);
	MakeCode	(0X66974);
	MakeCode	(0X669A0);
	MakeCode	(0X669BC);
	MakeCode	(0X669CA);
	MakeCode	(x=0X669EC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X66A02);
	MakeCode	(x=0X66A0A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X66A32);
	MakeCode	(0X66A46);
	MakeCode	(0X66A9A);
	MakeCode	(0X66AD0);
	MakeCode	(0X66AD8);
	MakeCode	(x=0X66AE6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X66AFA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X66B00);
	OpStkvar	(x,	1);
	MakeCode	(x=0X66B06);
	OpStkvar	(x,	1);
	MakeCode	(x=0X66B0A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X66B12);
	OpStkvar	(x,	1);
	MakeCode	(x=0X66B1A);
	OpStkvar	(x,	1);
	MakeCode	(0X66B4C);
	MakeCode	(x=0X66B54);
	OpStkvar	(x,	1);
	MakeCode	(x=0X66B5C);
	OpStkvar	(x,	1);
	MakeCode	(0X66B8C);
	MakeCode	(0X66BFC);
	MakeCode	(0X66C44);
	MakeCode	(0X66C6A);
	MakeCode	(0X66C78);
	MakeCode	(0X66C8E);
	MakeCode	(0X66CAE);
	MakeCode	(0X66CFC);
	MakeCode	(x=0X66D04);
	OpDecimal	(x,	0);
	MakeCode	(0X66D42);
	MakeCode	(x=0X66D4A);
	OpDecimal	(x,	0);
	MakeCode	(x=0X66D52);
	OpDecimal	(x,	0);
	MakeCode	(0X66E1A);
	MakeCode	(0X66E2A);
	MakeCode	(0X66E48);
	MakeCode	(0X66E70);
	MakeCode	(0X66E8A);
	MakeCode	(0X66E98);
	MakeCode	(0X66EB2);
	MakeCode	(0X66ED2);
	MakeCode	(0X66F22);
	MakeCode	(0X66F36);
	MakeCode	(x=0X66F48);
	OpSign		(x,	1);
	MakeCode	(x=0X66F7E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X66F84);
	OpStkvar	(x,	1);
	MakeCode	(x=0X66F8E);
	OpStkvar	(x,	0);
	MakeCode	(0X66FE0);
	MakeCode	(0X67004);
	MakeCode	(0X67010);
	MakeCode	(0X6709A);
	MakeCode	(0X670BE);
	MakeCode	(0X670C2);
	MakeCode	(0X670F8);
	MakeCode	(0X670FE);
	MakeCode	(0X67140);
	MakeCode	(0X6716E);
	MakeCode	(0X671A4);
	MakeCode	(0X671AA);
	MakeCode	(0X671E8);
	MakeCode	(0X6720E);
	MakeCode	(0X67262);
	MakeCode	(0X672DE);
	MakeCode	(0X672FE);
	MakeCode	(x=0X67328);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X67340);
	MakeCode	(0X6734E);
	MakeCode	(0X67360);
	MakeCode	(x=0X67374);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6737A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X67380);
	OpStkvar	(x,	1);
	MakeCode	(x=0X673A6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X673AC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X673B2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X673BC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X673C6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X673D2);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X673DA);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X67410);
	OpSign		(x,	1);
	MakeCode	(x=0X6741C);
	OpStkvar	(x,	1);
	MakeCode	(0X6743C);
	MakeCode	(0X6745E);
	MakeCode	(0X67468);
	MakeCode	(0X67518);
	MakeCode	(x=0X67524);
	OpStkvar	(x,	1);
	MakeCode	(0X67548);
	MakeCode	(0X67564);
	MakeCode	(0X67592);
	MakeCode	(x=0X675AE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X675B2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X675C4);
	MakeCode	(x=0X675CA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X675F2);
	OpStkvar	(x,	0);
	MakeCode	(0X6760E);
	MakeCode	(0X67640);
	MakeCode	(0X67648);
	MakeCode	(0X67672);
	MakeCode	(0X6768C);
	MakeCode	(x=0X676AC);
	OpStkvar	(x,	0);
	MakeCode	(0X676E8);
	MakeCode	(0X67750);
	MakeCode	(0X677AC);
	MakeCode	(x=0X677E8);
	OpStkvar	(x,	0);
	MakeCode	(x=0X677EC);
	OpStkvar	(x,	1);
	MakeCode	(0X677FA);
	MakeCode	(x=0X67830);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6785A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X67862);
	OpStkvar	(x,	0);
	MakeCode	(x=0X67866);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X6787E);
	OpStkvar	(x,	1);
	MakeCode	(0X67890);
	MakeCode	(0X678B8);
	MakeCode	(x=0X678C8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X678EE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X6790C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6791C);
	OpStkvar	(x,	1);
	MakeCode	(0X67924);
	MakeCode	(x=0X67942);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X6795C);
	MakeCode	(x=0X6795E);
	OpStkvar	(x,	1);
	MakeCode	(0X67966);
	MakeCode	(x=0X6796C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X67972);
	OpStkvar	(x,	1);
	MakeCode	(x=0X67980);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6798C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X67998);
	OpStkvar	(x,	0);
	MakeCode	(x=0X679AE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X679B4);
	OpStkvar	(x,	1);
	MakeCode	(0X679DC);
	MakeCode	(0X679E6);
	MakeCode	(x=0X67A44);
	OpStkvar	(x,	0);
	MakeCode	(0X67A7C);
	MakeCode	(0X67ABA);
	MakeCode	(x=0X67AC0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X67ACA);
	OpDecimal	(x,	0);
	MakeCode	(0X67AFC);
	MakeCode	(0X67B0E);
	MakeCode	(x=0X67B1C);
	OpDecimal	(x,	0);
	MakeCode	(0X67B30);
	MakeCode	(0X67B46);
	MakeCode	(0X67B6A);
	MakeCode	(0X67B90);
	MakeCode	(0X67BA0);
	MakeCode	(0X67BA8);
	MakeCode	(x=0X67BB4);
	OpStkvar	(x,	0);
	MakeCode	(0X67C12);
	MakeCode	(x=0X67C52);
	OpStkvar	(x,	1);
	MakeCode	(x=0X67C76);
	OpStkvar	(x,	1);
	MakeCode	(0X67CB0);
	MakeCode	(x=0X67CE2);
	OpStkvar	(x,	0);
	MakeCode	(0X67D28);
	MakeCode	(0X67D58);
	MakeCode	(0X67D74);
	MakeCode	(x=0X67DB6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X67DD8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X67E02);
	OpStkvar	(x,	1);
	MakeCode	(0X67E0A);
	MakeCode	(x=0X67E1C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X67E28);
	OpStkvar	(x,	0);
	MakeCode	(x=0X67E2C);
	OpStkvar	(x,	1);
	MakeCode	(0X67E3A);
	MakeCode	(x=0X67E5C);
	OpStkvar	(x,	1);
	MakeCode	(0X67E6E);
	MakeCode	(x=0X67E8A);
	OpStkvar	(x,	1);
	MakeCode	(0X67E94);
	MakeCode	(0X67EA4);
	MakeCode	(x=0X67EB2);
	OpStkvar	(x,	1);
	MakeCode	(0X67EC2);
	MakeCode	(x=0X67ECA);
	OpStkvar	(x,	0);
	MakeCode	(0X67ED8);
	MakeCode	(x=0X67EDC);
	OpStkvar	(x,	0);
	MakeCode	(0X67F22);
	MakeCode	(x=0X67F3C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X67F58);
	MakeCode	(x=0X67F5A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X67F60);
	OpStkvar	(x,	1);
	MakeCode	(x=0X67F7A);
	OpStkvar	(x,	0);
	MakeCode	(0X67FA2);
	MakeCode	(0X67FBE);
	MakeCode	(0X67FC8);
	MakeCode	(x=0X6803E);
	OpStkvar	(x,	0);
	MakeCode	(0X68078);
	MakeCode	(0X68096);
	MakeCode	(0X6810A);
	MakeCode	(0X68120);
	MakeCode	(x=0X6812C);
	OpStkvar	(x,	0);
	MakeCode	(0X681F0);
	MakeCode	(0X68230);
	MakeCode	(0X68240);
	MakeCode	(x=0X682A4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X682D4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X682F6);
	OpStkvar	(x,	1);
	MakeCode	(0X68300);
	MakeCode	(x=0X6830E);
	OpStkvar	(x,	0);
	MakeCode	(0X6831E);
	MakeCode	(0X6832C);
	MakeCode	(x=0X68360);
	OpStkvar	(x,	0);
	MakeCode	(0X68404);
	MakeCode	(0X68452);
	MakeCode	(0X684A0);
	MakeCode	(0X684E8);
	MakeCode	(0X68546);
	MakeCode	(0X68560);
	MakeCode	(0X685A2);
	MakeCode	(0X685EC);
	MakeCode	(0X6860C);
	MakeCode	(0X68618);
	MakeCode	(x=0X68620);
	OpStkvar	(x,	0);
	MakeCode	(x=0X68624);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X6862C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X68630);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6866E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X6867E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X68696);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X686C8);
	OpStkvar	(x,	1);
	MakeCode	(0X686D0);
	MakeCode	(x=0X686D8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X686F6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X68728);
	OpStkvar	(x,	1);
	MakeCode	(x=0X68730);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6873C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6874A);
	OpStkvar	(x,	0);
	MakeCode	(0X687CC);
	MakeCode	(0X687E8);
	MakeCode	(0X68808);
	MakeCode	(0X68816);
	MakeCode	(0X68824);
	MakeCode	(0X6886E);
	MakeCode	(0X688C2);
	MakeCode	(x=0X688C8);
	OpStkvar	(x,	0);
	MakeCode	(x=0X688E6);
	OpStkvar	(x,	1);
	MakeCode	(0X688EE);
	MakeCode	(x=0X68900);
	OpStkvar	(x,	1);
	MakeCode	(0X68908);
	MakeCode	(x=0X68914);
	OpStkvar	(x,	1);
	MakeCode	(0X6891E);
	MakeCode	(x=0X6892C);
	OpStkvar	(x,	1);
	MakeCode	(0X68934);
	MakeCode	(x=0X6894C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X68956);
	OpStkvar	(x,	1);
	MakeCode	(0X68960);
	MakeCode	(x=0X6896E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X68972);
	OpStkvar	(x,	1);
	MakeCode	(x=0X689A2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X689AC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X689C4);
	OpStkvar	(x,	1);
	MakeCode	(0X689CE);
	MakeCode	(x=0X689EE);
	OpStkvar	(x,	1);
	MakeCode	(0X689F6);
	MakeCode	(x=0X68A06);
	OpStkvar	(x,	1);
	MakeCode	(x=0X68A26);
	OpStkvar	(x,	1);
	MakeCode	(x=0X68A2A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X68A3C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X68A40);
	OpStkvar	(x,	0);
	MakeCode	(x=0X68A54);
	OpStkvar	(x,	1);
	MakeCode	(x=0X68A5E);
	OpStkvar	(x,	1);
	MakeCode	(0X68A76);
	MakeCode	(x=0X68A7C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X68A84);
	OpStkvar	(x,	1);
	MakeCode	(0X68AAA);
	MakeCode	(x=0X68ABC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X68AEE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X68AF4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X68AFE);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(0X68B56);
	MakeCode	(x=0X68B5E);
	OpStkvar	(x,	0);
	MakeCode	(0X68B7A);
	MakeCode	(0X68BA0);
	MakeCode	(x=0X68BA2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X68BBC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X68BE8);
	MakeCode	(x=0X68BF0);
	OpStkvar	(x,	0);
	MakeCode	(0X68C0C);
	MakeCode	(x=0X68C18);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X68C34);
	MakeCode	(x=0X68C36);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X68C40);
	OpStkvar	(x,	0);
	MakeCode	(x=0X68C4A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X68C4E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X68C80);
	OpStkvar	(x,	1);
	MakeCode	(x=0X68C98);
	OpStkvar	(x,	1);
	MakeCode	(0X68CA2);
	MakeCode	(x=0X68CC2);
	OpStkvar	(x,	1);
	MakeCode	(0X68CCA);
	MakeCode	(x=0X68CE0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X68CFA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X68D0E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X68D26);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(0X68D52);
	MakeCode	(x=0X68D64);
	OpStkvar	(x,	1);
	MakeCode	(x=0X68D96);
	OpStkvar	(x,	1);
	MakeCode	(x=0X68D9C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X68DA6);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X68DCE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X68DFA);
	MakeCode	(x=0X68E02);
	OpStkvar	(x,	0);
	MakeCode	(0X68E1E);
	MakeCode	(x=0X68E2A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X68E46);
	MakeCode	(x=0X68E48);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X68E52);
	OpStkvar	(x,	0);
	MakeCode	(0X68E94);
	MakeCode	(x=0X68E9E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X68F1E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X68F3A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X68F40);
	OpStkvar	(x,	1);
	MakeCode	(x=0X68F4E);
	OpStkvar	(x,	1);
	MakeCode	(0X68F58);
	MakeCode	(x=0X68F6E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X68F80);
	OpStkvar	(x,	1);
	MakeCode	(x=0X68FA6);
	OpStkvar	(x,	1);
	MakeCode	(0X68FB0);
	MakeCode	(0X68FC0);
	MakeCode	(x=0X68FDE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X68FE4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X68FEE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X69006);
	OpStkvar	(x,	1);
	MakeCode	(0X69010);
	MakeCode	(0X69030);
	MakeCode	(x=0X6904A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X69052);
	OpStkvar	(x,	1);
	MakeCode	(x=0X69060);
	OpStkvar	(x,	1);
	MakeCode	(x=0X69068);
	OpStkvar	(x,	1);
	MakeCode	(0X69076);
	MakeCode	(0X69086);
	MakeCode	(x=0X690A2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X690BA);
	OpStkvar	(x,	1);
	MakeCode	(0X690C2);
	MakeCode	(x=0X690F2);
	OpStkvar	(x,	1);
	MakeCode	(0X69114);
	MakeCode	(x=0X6914C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X69168);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X69178);
	MakeCode	(x=0X6917C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X69196);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X691A6);
	MakeCode	(x=0X691AA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X691DA);
	MakeCode	(0X691EA);
	MakeCode	(0X691F4);
	MakeCode	(0X69208);
	MakeCode	(0X69248);
	MakeCode	(0X69266);
	MakeCode	(0X692A4);
	MakeCode	(0X692AC);
	MakeCode	(0X692E0);
	MakeCode	(x=0X69356);
	OpStkvar	(x,	1);
	MakeCode	(x=0X69396);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X693AE);
	MakeCode	(0X693FA);
	MakeCode	(0X69436);
	MakeCode	(0X6945E);
	MakeCode	(0X69490);
	MakeCode	(0X694C8);
	MakeCode	(0X694D2);
	MakeCode	(0X694F4);
	MakeCode	(0X6953A);
	MakeCode	(0X6954C);
	MakeCode	(0X6955E);
	MakeCode	(0X6957C);
	MakeCode	(0X69582);
	MakeCode	(x=0X6958E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X69594);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X6959A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X695A0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X695A6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X695AC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X695C0);
	MakeCode	(0X695DE);
	MakeCode	(0X695E4);
	MakeCode	(x=0X695F0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X695F6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X695FC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X69602);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X69608);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X6960E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X69622);
	MakeCode	(x=0X69650);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X69656);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X6965C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X69662);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X69668);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X6966E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X69682);
	MakeCode	(x=0X696B0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X696B6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X696BC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X696C2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X696C8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X696CE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X696E2);
	MakeCode	(0X69712);
	MakeCode	(0X69736);
	MakeCode	(0X6973C);
	MakeCode	(0X69786);
	MakeCode	(0X697B2);
	MakeCode	(0X697C8);
	MakeCode	(0X697CC);
	MakeCode	(0X697F6);
	MakeCode	(0X69814);
	MakeCode	(0X69836);
	MakeCode	(0X6983E);
	MakeCode	(0X69854);
	MakeCode	(0X69906);
	MakeCode	(0X6997C);
	MakeCode	(0X69A24);
	MakeCode	(0X69A4E);
	MakeCode	(0X69A58);
	MakeCode	(0X69A62);
	MakeCode	(x=0X69A9E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X69AA4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X69AAE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X69AB6);
	OpStkvar	(x,	1);
	MakeCode	(0X69ACA);
	MakeCode	(x=0X69AD8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X69AF0);
	OpStkvar	(x,	1);
	MakeCode	(0X69B0A);
	MakeCode	(x=0X69B20);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X69B2A);
	MakeCode	(x=0X69B38);
	OpDecimal	(x,	1);
	MakeCode	(0X69BC8);
	MakeCode	(x=0X69BEA);
	OpDecimal	(x,	0);
	MakeCode	(0X69C3A);
	MakeCode	(0X69C98);
	MakeCode	(0X69CB4);
	MakeCode	(x=0X69CC4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X69CEA);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X69D3E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X69D84);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X69DC2);
	MakeCode	(0X69E0E);
	MakeCode	(0X69E38);
	MakeCode	(0X69E50);
	MakeCode	(0X69E64);
	MakeCode	(0X69E7E);
	MakeCode	(0X69EFA);
	MakeCode	(x=0X69F44);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X69F6A);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(0X69FC6);
	MakeCode	(0X6A02C);
	MakeCode	(x=0X6A076);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X6A09C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(0X6A0F4);
	MakeCode	(0X6A12A);
	MakeCode	(0X6A13C);
	MakeCode	(0X6A162);
	MakeCode	(0X6A16A);
	MakeCode	(0X6A172);
	MakeCode	(0X6A1A4);
	MakeCode	(x=0X6A1B6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X6A1D6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X6A1F6);
	MakeCode	(0X6A21C);
	MakeCode	(0X6A252);
	MakeCode	(0X6A296);
	MakeCode	(0X6A2AE);
	MakeCode	(x=0X6A2CE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X6A2E8);
	MakeCode	(0X6A31C);
	MakeCode	(x=0X6A324);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X6A358);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6A39E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6A3C4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X6A3EC);
	MakeCode	(0X6A410);
	MakeCode	(0X6A418);
	MakeCode	(0X6A442);
	MakeCode	(0X6A452);
	MakeCode	(0X6A54E);
	MakeCode	(0X6A556);
	MakeCode	(0X6A56E);
	MakeCode	(0X6A576);
	MakeCode	(0X6A5B8);
	MakeCode	(0X6A5C6);
	MakeCode	(0X6A5D2);
	MakeCode	(0X6A5EC);
	MakeCode	(x=0X6A5F4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X6A61E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X6A630);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X6A67C);
	MakeCode	(x=0X6A694);
	OpSign		(x,	1);
	MakeCode	(0X6A6C0);
	MakeCode	(x=0X6A6FC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6A718);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6A7B6);
	OpStkvar	(x,	1);
	MakeCode	(0X6A7D4);
	MakeCode	(x=0X6A7D6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6A806);
	OpStkvar	(x,	1);
	MakeCode	(0X6A824);
	MakeCode	(x=0X6A826);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6A82C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6A834);
	OpStkvar	(x,	0);
	MakeCode	(0X6A86C);
	MakeCode	(0X6A89A);
	MakeCode	(0X6A8B8);
	MakeCode	(x=0X6A8F6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X6AA02);
	MakeCode	(0X6AA12);
	MakeCode	(0X6AA22);
	MakeCode	(0X6AA2C);
	MakeCode	(0X6AA44);
	MakeCode	(0X6AA60);
	MakeCode	(x=0X6AA76);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X6AAA6);
	MakeCode	(0X6AABE);
	MakeCode	(x=0X6AAC2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X6AAE4);
	MakeCode	(0X6AAFE);
	MakeCode	(0X6AB0C);
	MakeCode	(0X6AB30);
	MakeCode	(0X6AB36);
	MakeCode	(0X6AB8A);
	MakeCode	(0X6AB92);
	MakeCode	(0X6ABB0);
	MakeCode	(0X6ABC2);
	MakeCode	(0X6ABD4);
	MakeCode	(0X6ABEA);
	MakeCode	(0X6AC4C);
	MakeCode	(0X6AC86);
	MakeCode	(0X6ACFA);
	MakeCode	(0X6AD56);
	MakeCode	(0X6AD6E);
	MakeCode	(0X6ADB6);
	MakeCode	(0X6AE50);
	MakeCode	(0X6AEAC);
	MakeCode	(0X6AEC4);
	MakeCode	(0X6AF0C);
	MakeCode	(0X6AF3E);
	MakeCode	(0X6AF7C);
	MakeCode	(0X6B048);
	MakeCode	(0X6B052);
	MakeCode	(0X6B05C);
	MakeCode	(0X6B070);
	MakeCode	(0X6B084);
	MakeCode	(x=0X6B142);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6B156);
	OpSign		(x,	1);
	MakeCode	(x=0X6B1AC);
	OpStkvar	(x,	1);
	MakeCode	(0X6B1DC);
	MakeCode	(0X6B1EE);
	MakeCode	(0X6B264);
	MakeCode	(0X6B29C);
	MakeCode	(0X6B2BC);
	MakeCode	(0X6B2F0);
	MakeCode	(x=0X6B324);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6B342);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X6B364);
	MakeCode	(x=0X6B396);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X6B3A6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6B3BC);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6B3C0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6B3DE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X6B3EC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6B3F2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X6B402);
	MakeCode	(x=0X6B414);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6B41C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X6B436);
	MakeCode	(x=0X6B438);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X6B446);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6B44C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X6B45C);
	MakeCode	(x=0X6B46E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6B476);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X6B48E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6B498);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6B4AA);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6B4CA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X6B4D2);
	MakeCode	(x=0X6B4D4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X6B4E2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6B4EE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6B4F2);
	OpStkvar	(x,	1);
	MakeCode	(0X6B500);
	MakeCode	(x=0X6B536);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X6B54C);
	OpStkvar	(x,	1);
	MakeCode	(0X6B556);
	MakeCode	(0X6B566);
	MakeCode	(x=0X6B56E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6B572);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6B582);
	OpStkvar	(x,	1);
	MakeCode	(0X6B58C);
	MakeCode	(0X6B594);
	MakeCode	(x=0X6B59A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X6B5B0);
	OpStkvar	(x,	1);
	MakeCode	(0X6B5BA);
	MakeCode	(0X6B5CA);
	MakeCode	(x=0X6B5D2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6B5D6);
	OpStkvar	(x,	0);
	MakeCode	(0X6B5E8);
	MakeCode	(x=0X6B5F0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6B602);
	OpSign		(x,	1);
	MakeCode	(x=0X6B62E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X6B640);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X6B658);
	MakeCode	(x=0X6B660);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X6B688);
	OpStkvar	(x,	1);
	MakeCode	(0X6B6A0);
	MakeCode	(x=0X6B6BE);
	OpStkvar	(x,	1);
	MakeCode	(0X6B6CE);
	MakeCode	(x=0X6B71C);
	OpStkvar	(x,	1);
	MakeCode	(0X6B728);
	MakeCode	(0X6B752);
	MakeCode	(x=0X6B76A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6B77C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X6B78E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpStkvar	(x,	1);
	MakeCode	(0X6B79C);
	MakeCode	(x=0X6B7E0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6B7E8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X6B81A);
	MakeCode	(x=0X6B820);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6B838);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6B84E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X6B864);
	OpStkvar	(x,	1);
	MakeCode	(0X6B86C);
	MakeCode	(x=0X6B886);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6B89E);
	OpStkvar	(x,	1);
	MakeCode	(0X6B8C0);
	MakeCode	(0X6B8CE);
	MakeCode	(0X6B8D4);
	MakeCode	(x=0X6B8E2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X6B8F2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X6B906);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6B90C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6B912);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X6B91E);
	OpStkvar	(x,	1);
	MakeCode	(0X6B93A);
	MakeCode	(0X6B94E);
	MakeCode	(0X6B970);
	MakeCode	(0X6B976);
	MakeCode	(x=0X6B980);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6B994);
	OpStkvar	(x,	1);
	MakeCode	(0X6B9A4);
	MakeCode	(x=0X6B9BA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6B9CA);
	OpStkvar	(x,	0);
	MakeCode	(0X6BA58);
	MakeCode	(x=0X6BA78);
	OpSign		(x,	1);
	MakeCode	(x=0X6BA86);
	OpStkvar	(x,	0);
	MakeCode	(0X6BAAC);
	MakeCode	(0X6BAE2);
	MakeCode	(0X6BAE8);
	MakeCode	(0X6BB1C);
	MakeCode	(0X6BB3E);
	MakeCode	(0X6BB44);
	MakeCode	(0X6BB4C);
	MakeCode	(0X6BB68);
	MakeCode	(0X6BB70);
	MakeCode	(0X6BB84);
	MakeCode	(0X6BBA8);
	MakeCode	(0X6BBD6);
	MakeCode	(0X6BBE0);
	MakeCode	(x=0X6BBF2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6BC0A);
	OpStkvar	(x,	1);
	MakeCode	(0X6BC50);
	MakeCode	(0X6BC5C);
	MakeCode	(x=0X6BC6C);
	OpSign		(x,	1);
	MakeCode	(x=0X6BC84);
	OpStkvar	(x,	1);
	MakeCode	(0X6BC92);
	MakeCode	(x=0X6BCA2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X6BCB8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X6BCC2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X6BCCC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X6BD04);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X6BD0E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X6BD2C);
	MakeCode	(x=0X6BD36);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X6BD52);
	MakeCode	(x=0X6BD84);
	OpStkvar	(x,	1);
	MakeCode	(0X6BD8C);
	MakeCode	(x=0X6BD90);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6BDB0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X6BDBA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X6BDCC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6BDD2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X6BDDE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6BDE4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6BDEC);
	OpStkvar	(x,	0);
	MakeCode	(0X6BDFE);
	MakeCode	(x=0X6BE0A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X6BE14);
	MakeCode	(0X6BEE8);
	MakeCode	(x=0X6BEFE);
	OpStkvar	(x,	1);
	MakeCode	(0X6BF26);
	MakeCode	(x=0X6BF2E);
	OpDecimal	(x,	0);
	MakeCode	(0X6BF36);
	MakeCode	(0X6BF4C);
	MakeCode	(0X6BF68);
	MakeCode	(0X6BF8C);
	MakeCode	(0X6BFBC);
	MakeCode	(x=0X6BFEE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X6C052);
	MakeCode	(0X6C06C);
	MakeCode	(0X6C0C0);
	MakeCode	(0X6C0F2);
	MakeCode	(0X6C0FC);
	MakeCode	(0X6C102);
	MakeCode	(0X6C146);
	MakeCode	(0X6C18C);
	MakeCode	(0X6C1E2);
	MakeCode	(0X6C226);
	MakeCode	(0X6C236);
	MakeCode	(0X6C272);
	MakeCode	(0X6C298);
	MakeCode	(0X6C356);
	MakeCode	(0X6C362);
	MakeCode	(x=0X6C37E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X6C3AA);
	MakeCode	(x=0X6C3BC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X6C3E6);
	MakeCode	(x=0X6C412);
	OpStkvar	(x,	1);
	MakeCode	(0X6C41A);
	MakeCode	(0X6C466);
	MakeCode	(0X6C4B0);
	MakeCode	(0X6C4F4);
	MakeCode	(0X6C500);
	MakeCode	(x=0X6C5A2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6C5D4);
	OpStkvar	(x,	1);
	MakeCode	(0X6C5DC);
	MakeCode	(x=0X6C626);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X6C662);
	MakeCode	(x=0X6C678);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X6C680);
	MakeCode	(x=0X6C69C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X6C6A4);
	MakeCode	(x=0X6C6BA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X6C700);
	MakeCode	(0X6C77A);
	MakeCode	(0X6C7C0);
	MakeCode	(0X6C824);
	MakeCode	(0X6C868);
	MakeCode	(0X6C870);
	MakeCode	(0X6C8AE);
	MakeCode	(0X6C8CA);
	MakeCode	(0X6C92A);
	MakeCode	(0X6C93E);
	MakeCode	(0X6C962);
	MakeCode	(0X6C986);
	MakeCode	(0X6C9AA);
	MakeCode	(0X6C9C0);
	MakeCode	(0X6CA04);
	MakeCode	(0X6CA48);
	MakeCode	(0X6CA76);
	MakeCode	(0X6CA80);
	MakeCode	(0X6CA9E);
	MakeCode	(0X6CAB2);
	MakeCode	(0X6CAC4);
	MakeCode	(0X6CACA);
	MakeCode	(0X6CB04);
	MakeCode	(0X6CB44);
	MakeCode	(0X6CB56);
	MakeCode	(0X6CB64);
	MakeCode	(0X6CB7E);
	MakeCode	(0X6CB98);
	MakeCode	(0X6CBC4);
	MakeCode	(0X6CBDC);
	MakeCode	(0X6CBF6);
	MakeCode	(0X6CC12);
	MakeCode	(0X6CC26);
	MakeCode	(0X6CC3C);
	MakeCode	(x=0X6CC48);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X6CC7A);
	MakeCode	(0X6CC92);
	MakeCode	(x=0X6CC9C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X6CCC2);
	MakeCode	(0X6CCDA);
	MakeCode	(0X6CCE6);
	MakeCode	(x=0X6CD00);
	OpSign		(x,	1);
	MakeCode	(0X6CD14);
	MakeCode	(x=0X6CD18);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6CD1E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6CD28);
	OpStkvar	(x,	0);
	MakeCode	(0X6CD4E);
	MakeCode	(0X6CD66);
	MakeCode	(0X6CD74);
	MakeName	(0X6CD74,	"nullsub_7");
	MakeCode	(0X6CD76);
	MakeCode	(0X6CD94);
	MakeCode	(0X6CDB4);
	MakeCode	(x=0X6CDBA);
	OpSign		(x,	1);
	MakeCode	(0X6CDE4);
	MakeCode	(x=0X6CDF6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6CE00);
	OpStkvar	(x,	0);
	MakeCode	(0X6CE14);
	MakeCode	(0X6CE22);
	MakeCode	(x=0X6CF1E);
	OpSign		(x,	1);
	MakeCode	(x=0X6CF32);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6CF3A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6CF40);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6CF4A);
	OpStkvar	(x,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6CF50);
	OpStkvar	(x,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6CF58);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6CF60);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6CF68);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6CF78);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6CF80);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6CF88);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6CF96);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6CFA4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6CFB2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6CFC0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6CFCE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6CFDC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6D042);
	OpSign		(x,	1);
	MakeCode	(x=0X6D054);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6D066);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6D07E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6D08C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6D0A6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X6D0B6);
	MakeCode	(x=0X6D0CA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X6D0DE);
	MakeCode	(x=0X6D0E8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X6D110);
	MakeCode	(x=0X6D11C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X6D198);
	MakeCode	(0X6D1B0);
	MakeCode	(0X6D1D4);
	MakeCode	(0X6D1DC);
	MakeCode	(0X6D1F0);
	MakeCode	(0X6D202);
	MakeCode	(0X6D216);
	MakeCode	(0X6D22A);
	MakeCode	(0X6D232);
	MakeCode	(0X6D244);
	MakeCode	(0X6D29E);
	MakeCode	(0X6D2DE);
	MakeCode	(0X6D2FE);
	MakeCode	(0X6D316);
	MakeCode	(0X6D392);
	MakeCode	(0X6D3BA);
	MakeCode	(0X6D412);
	MakeCode	(0X6D44A);
	MakeCode	(0X6D4A6);
	MakeCode	(0X6D568);
	MakeCode	(0X6D5A0);
	MakeCode	(0X6D5A6);
	MakeCode	(0X6D5C8);
	MakeCode	(0X6D618);
	MakeCode	(0X6D62C);
	MakeCode	(0X6D636);
	MakeCode	(0X6D652);
	MakeCode	(0X6D72C);
	MakeCode	(0X6D73A);
	MakeCode	(0X6D748);
	MakeCode	(0X6D756);
	MakeCode	(0X6D78A);
	MakeCode	(0X6D798);
	MakeCode	(0X6D7B6);
	MakeCode	(0X6D7D0);
	MakeCode	(0X6D7D8);
	MakeCode	(0X6D7E6);
	MakeCode	(0X6D7FC);
	MakeCode	(0X6D83C);
	MakeCode	(0X6D872);
	MakeCode	(0X6D88A);
	MakeCode	(0X6D8D0);
	MakeCode	(0X6D8F0);
	MakeCode	(0X6D920);
	MakeCode	(0X6D940);
	MakeCode	(0X6D944);
	MakeCode	(0X6D964);
	MakeCode	(0X6D978);
	MakeCode	(0X6D994);
	MakeCode	(0X6D9D0);
	MakeCode	(0X6D9EC);
	MakeCode	(0X6D9F2);
	MakeCode	(x=0X6DA1A);
	OpSign		(x,	1);
	MakeCode	(0X6DA68);
	MakeCode	(0X6DA70);
	MakeCode	(0X6DBE2);
	MakeCode	(0X6DC08);
	MakeCode	(x=0X6DC0E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6DC18);
	OpStkvar	(x,	0);
	MakeCode	(0X6DC2C);
	MakeCode	(x=0X6DC40);
	OpSign		(x,	1);
	MakeCode	(x=0X6DC52);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6DC58);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6DC62);
	OpStkvar	(x,	0);
	MakeCode	(0X6DCA4);
	MakeCode	(x=0X6DCAA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6DCB4);
	OpStkvar	(x,	0);
	MakeCode	(0X6DCC8);
	MakeCode	(0X6DCD4);
	MakeCode	(0X6DCEE);
	MakeCode	(0X6DD26);
	MakeCode	(0X6DD54);
	MakeCode	(0X6DD7A);
	MakeCode	(0X6DDC8);
	MakeCode	(0X6DDD8);
	MakeCode	(0X6DDE6);
	MakeCode	(x=0X6DDE8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X6DE12);
	MakeCode	(0X6DE22);
	MakeCode	(0X6DE30);
	MakeCode	(x=0X6DE32);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X6DE5C);
	MakeCode	(0X6DE80);
	MakeCode	(0X6DE8E);
	MakeCode	(0X6DEA8);
	MakeCode	(0X6DEC2);
	MakeCode	(0X6DED4);
	MakeCode	(0X6DEDA);
	MakeCode	(0X6DF0A);
	MakeCode	(0X6DF80);
	MakeCode	(0X6DFD4);
	MakeCode	(0X6DFE8);
	MakeCode	(0X6E032);
	MakeCode	(0X6E048);
	MakeCode	(0X6E07E);
	MakeCode	(0X6E10E);
	MakeCode	(0X6E162);
	MakeCode	(0X6E176);
	MakeCode	(0X6E1C0);
	MakeCode	(0X6E1D6);
	MakeCode	(0X6E1FA);
	MakeCode	(0X6E21E);
	MakeCode	(0X6E252);
	MakeCode	(0X6E264);
	MakeCode	(0X6E284);
	MakeCode	(0X6E296);
	MakeCode	(0X6E2BA);
	MakeCode	(0X6E358);
	MakeCode	(0X6E3C8);
	MakeCode	(0X6E3E2);
	MakeCode	(0X6E400);
	MakeCode	(0X6E41E);
	MakeCode	(0X6E446);
	MakeCode	(0X6E474);
	MakeCode	(0X6E4AA);
	MakeCode	(0X6E4F0);
	MakeCode	(0X6E4FE);
	MakeCode	(0X6E528);
	MakeCode	(0X6E53C);
	MakeCode	(0X6E556);
	MakeCode	(0X6E588);
	MakeCode	(0X6E5B6);
	MakeCode	(0X6E5C0);
	MakeCode	(0X6E5D0);
	MakeCode	(0X6E736);
	MakeCode	(0X6E742);
	MakeCode	(0X6E78C);
	MakeCode	(0X6E81E);
	MakeCode	(0X6E838);
	MakeCode	(0X6E84C);
	MakeCode	(0X6E87A);
	MakeCode	(0X6E8BC);
	MakeCode	(0X6EA38);
	MakeCode	(0X6EA3E);
	MakeCode	(0X6EA6C);
	MakeCode	(0X6EA80);
	MakeCode	(0X6EAC8);
	MakeCode	(0X6EAF6);
	MakeCode	(0X6EB0A);
	MakeCode	(0X6EB10);
	MakeCode	(0X6EB4A);
	MakeCode	(0X6EE3E);
	MakeCode	(0X6EE46);
	MakeCode	(0X6EE62);
	MakeCode	(0X6EE6A);
	MakeCode	(x=0X6EE74);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X6EE7E);
	OpDecimal	(x,	0);
	MakeCode	(x=0X6EE84);
	OpDecimal	(x,	1);
	MakeCode	(0X6EEA6);
	MakeCode	(x=0X6EEC0);
	OpDecimal	(x,	0);
	MakeCode	(0X6EEC8);
	MakeCode	(0X6EEE6);
	MakeCode	(x=0X6EF00);
	OpSign		(x,	1);
	MakeCode	(0X6EF1E);
	MakeCode	(0X6EF36);
	MakeCode	(0X6EF48);
	MakeCode	(0X6EF5A);
	MakeCode	(x=0X6EF5E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6EF68);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6EF88);
	OpStkvar	(x,	1);
	MakeCode	(0X6EF96);
	MakeCode	(0X6EFC2);
	MakeCode	(0X6EFEE);
	MakeCode	(x=0X6EFFA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6F004);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6F018);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6F036);
	OpStkvar	(x,	1);
	MakeCode	(0X6F03E);
	MakeCode	(x=0X6F068);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6F090);
	OpStkvar	(x,	1);
	MakeCode	(0X6F098);
	MakeCode	(x=0X6F0B4);
	OpStkvar	(x,	1);
	MakeCode	(0X6F0D6);
	MakeCode	(0X6F0FC);
	MakeCode	(0X6F126);
	MakeCode	(0X6F140);
	MakeCode	(0X6F1AE);
	MakeCode	(0X6F1F8);
	MakeCode	(0X6F206);
	MakeCode	(0X6F260);
	MakeCode	(x=0X6F29A);
	OpSign		(x,	1);
	MakeCode	(x=0X6F2BE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6F2FE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6F310);
	OpStkvar	(x,	1);
	MakeCode	(0X6F320);
	MakeCode	(x=0X6F3AA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X6F3B4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X6F3BE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X6F3C8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X6F3DC);
	MakeCode	(x=0X6F3E2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X6F3EC);
	MakeCode	(x=0X6F3FE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X6F408);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X6F412);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X6F41C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X6F42C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X6F436);
	MakeCode	(x=0X6F45A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X6F466);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X6F472);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X6F47E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X6F490);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X6F498);
	MakeCode	(x=0X6F4C0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X6F4D8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X6F4E4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X6F4F6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X6F508);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X6F552);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X6F564);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X6F56E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X6F57E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X6F592);
	MakeCode	(x=0X6F598);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X6F5A2);
	MakeCode	(x=0X6F5C8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X6F5D2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X6F5DC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X6F5E6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X6F5F6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X6F5FE);
	MakeCode	(x=0X6F626);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X6F63E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X6F64A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X6F65C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X6F66E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X6F698);
	MakeCode	(0X6F6B6);
	MakeCode	(0X6F6C4);
	MakeCode	(0X6F6DA);
	MakeCode	(0X6F73E);
	MakeCode	(0X6F756);
	MakeCode	(0X6F772);
	MakeCode	(0X6F798);
	MakeCode	(0X6F7C2);
	MakeCode	(0X6F806);
	MakeCode	(0X6F820);
	MakeCode	(0X6F828);
	MakeCode	(0X6F848);
	MakeCode	(x=0X6F85E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6F868);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6F86C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6F874);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6F87C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6F882);
	OpStkvar	(x,	1);
	MakeCode	(0X6F88A);
	MakeCode	(x=0X6F88C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6F89C);
	OpStkvar	(x,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6F8A4);
	OpStkvar	(x,	0);
	OpStkvar	(x,	1);
	MakeCode	(0X6F8AC);
	MakeCode	(x=0X6F8B2);
	OpStkvar	(x,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6F8B8);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6F8C0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6F8CE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6F8D2);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6F8E0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6F908);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6F914);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6F918);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6F91C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6F924);
	OpStkvar	(x,	0);
	MakeCode	(0X6F92C);
	MakeCode	(x=0X6F93E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6F94C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6F960);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6F96E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6F972);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6F976);
	OpStkvar	(x,	0);
	MakeCode	(0X6F980);
	MakeCode	(x=0X6F9A6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6F9B2);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6F9B6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6F9C4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6F9C8);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6F9D4);
	OpStkvar	(x,	0);
	MakeCode	(0X6FA06);
	MakeCode	(0X6FA52);
	MakeCode	(x=0X6FA62);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6FA66);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6FA7A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6FA86);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6FA8E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6FA94);
	OpStkvar	(x,	1);
	MakeCode	(0X6FA9C);
	MakeCode	(x=0X6FA9E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6FAB0);
	OpStkvar	(x,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6FAB8);
	OpStkvar	(x,	0);
	OpStkvar	(x,	1);
	MakeCode	(0X6FAC0);
	MakeCode	(x=0X6FAC6);
	OpStkvar	(x,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6FACC);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6FAD6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6FAE4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6FAF8);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6FB06);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6FB0E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6FB14);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6FB1C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6FB32);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6FB46);
	OpStkvar	(x,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6FB4E);
	OpStkvar	(x,	0);
	OpStkvar	(x,	1);
	MakeCode	(0X6FB56);
	MakeCode	(x=0X6FB5C);
	OpStkvar	(x,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6FB62);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6FB6A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6FB74);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6FB78);
	OpStkvar	(x,	0);
	MakeCode	(0X6FB98);
	MakeCode	(x=0X6FBA0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6FBDC);
	OpStkvar	(x,	0);
	MakeCode	(0X6FBF8);
	MakeCode	(x=0X6FC00);
	OpStkvar	(x,	0);
	MakeCode	(0X6FC34);
	MakeCode	(0X6FC58);
	MakeCode	(0X6FCA4);
	MakeCode	(0X6FCEE);
	MakeCode	(x=0X6FCF4);
	OpStkvar	(x,	0);
	MakeCode	(0X6FCFE);
	MakeCode	(x=0X6FD06);
	OpStkvar	(x,	0);
	MakeCode	(0X6FD10);
	MakeCode	(x=0X6FD1E);
	OpStkvar	(x,	1);
	MakeCode	(0X6FD42);
	MakeCode	(x=0X6FD44);
	OpStkvar	(x,	1);
	MakeCode	(0X6FD4E);
	MakeCode	(x=0X6FD5E);
	OpStkvar	(x,	0);
	MakeCode	(0X6FD7A);
	MakeCode	(x=0X6FD82);
	OpStkvar	(x,	0);
	MakeCode	(0X6FDB6);
	MakeCode	(0X6FDDA);
	MakeCode	(0X6FE16);
	MakeCode	(0X6FE26);
	MakeCode	(x=0X6FE62);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6FE76);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6FE82);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6FE8A);
	OpStkvar	(x,	0);
	MakeCode	(0X6FE92);
	MakeCode	(x=0X6FEA4);
	OpStkvar	(x,	1);
	MakeCode	(0X6FEAE);
	MakeCode	(x=0X6FEB4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6FEC4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6FED8);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6FEE6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6FEEE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6FEF2);
	OpStkvar	(x,	0);
	MakeCode	(0X6FEFA);
	MakeCode	(x=0X6FF20);
	OpStkvar	(x,	1);
	MakeCode	(0X6FF2A);
	MakeCode	(x=0X6FF30);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6FF38);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6FF40);
	OpStkvar	(x,	0);
	MakeCode	(0X6FF60);
	MakeCode	(x=0X6FF68);
	OpStkvar	(x,	0);
	MakeCode	(0X6FF7A);
	MakeCode	(0X6FFA2);
	MakeCode	(0X6FFB6);
	MakeCode	(0X6FFC2);
	MakeCode	(x=0X6FFD4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6FFE2);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6FFF2);
	OpStkvar	(x,	0);
	MakeCode	(0X70022);
	MakeCode	(0X70028);
	MakeCode	(x=0X7004A);
	OpStkvar	(x,	0);
	MakeCode	(0X7005A);
	MakeCode	(x=0X70088);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7008E);
	OpStkvar	(x,	0);
	MakeCode	(0X700C0);
	MakeCode	(x=0X700C4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X700EE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X700F8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X70106);
	MakeCode	(x=0X7010C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X70118);
	MakeCode	(0X70138);
	MakeCode	(x=0X70158);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X701AA);
	MakeCode	(0X701DC);
	MakeCode	(x=0X701F0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X702A6);
	OpSign		(x,	1);
	MakeCode	(0X7030A);
	MakeCode	(0X70340);
	MakeCode	(0X703D6);
	MakeCode	(0X70400);
	MakeCode	(x=0X7042E);
	OpStkvar	(x,	1);
	MakeCode	(0X70434);
	MakeCode	(x=0X70438);
	OpStkvar	(x,	1);
	MakeCode	(x=0X70452);
	OpStkvar	(x,	1);
	MakeCode	(0X70458);
	MakeCode	(x=0X7045C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7046A);
	OpStkvar	(x,	1);
	MakeCode	(0X70470);
	MakeCode	(x=0X70474);
	OpStkvar	(x,	1);
	MakeCode	(0X7048C);
	MakeCode	(0X704A2);
	MakeCode	(0X704AC);
	MakeCode	(0X704BE);
	MakeCode	(0X704C8);
	MakeCode	(x=0X70506);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7050C);
	OpStkvar	(x,	1);
	MakeCode	(0X70548);
	MakeCode	(0X70560);
	MakeCode	(0X7057A);
	MakeCode	(0X705C2);
	MakeCode	(0X705EA);
	MakeCode	(0X705F8);
	MakeCode	(x=0X705FE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X70604);
	OpStkvar	(x,	0);
	MakeCode	(x=0X70614);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X7061A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7061E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7068C);
	OpStkvar	(x,	0);
	MakeCode	(0X70696);
	MakeCode	(0X706C4);
	MakeCode	(0X706D2);
	MakeCode	(0X706E0);
	MakeCode	(0X70742);
	MakeCode	(0X70780);
	MakeCode	(0X707D8);
	MakeCode	(x=0X707FE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7080A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X70812);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7081A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X70826);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X708AA);
	MakeCode	(0X708CC);
	MakeCode	(0X708EE);
	MakeCode	(0X70944);
	MakeCode	(0X7098C);
	MakeCode	(0X709A8);
	MakeCode	(0X70A26);
	MakeCode	(x=0X70A56);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X70A96);
	OpStkvar	(x,	0);
	MakeCode	(x=0X70AA2);
	OpStkvar	(x,	0);
	MakeCode	(0X70AAC);
	MakeCode	(x=0X70AC2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X70AF6);
	OpStkvar	(x,	0);
	MakeCode	(0X70B00);
	MakeCode	(0X70B1C);
	MakeCode	(x=0X70BCE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X70BDA);
	OpStkvar	(x,	0);
	MakeCode	(0X70BE4);
	MakeCode	(x=0X70BFA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X70C32);
	OpStkvar	(x,	0);
	MakeCode	(0X70C3C);
	MakeCode	(x=0X70C58);
	OpStkvar	(x,	0);
	MakeCode	(0X70C62);
	MakeCode	(x=0X70C86);
	OpStkvar	(x,	0);
	MakeCode	(0X70C90);
	MakeCode	(x=0X70CC2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X70CF2);
	MakeCode	(x=0X70CFE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X70D08);
	OpDecimal	(x,	0);
	MakeCode	(x=0X70D80);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X70D88);
	OpStkvar	(x,	1);
	MakeCode	(x=0X70D94);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X70D9C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X70DAA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X70DB6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X70DBC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X70DC2);
	OpStkvar	(x,	1);
	MakeCode	(0X70DD4);
	MakeCode	(x=0X70E7E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X70E86);
	OpStkvar	(x,	1);
	MakeCode	(x=0X70E92);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X70EA0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X70EA6);
	OpStkvar	(x,	1);
	MakeCode	(0X70EC0);
	MakeCode	(0X70ECE);
	MakeCode	(x=0X70FE8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X70FEE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X70FF4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X70FFA);
	OpStkvar	(x,	1);
	MakeCode	(0X7100A);
	MakeCode	(x=0X710E0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X710E8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X710F4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X71102);
	OpStkvar	(x,	1);
	MakeCode	(x=0X71108);
	OpStkvar	(x,	1);
	MakeCode	(0X71122);
	MakeCode	(x=0X71162);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X7117C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X71182);
	OpStkvar	(x,	1);
	MakeCode	(x=0X711BA);
	OpStkvar	(x,	1);
	MakeCode	(0X711C2);
	MakeCode	(0X711D2);
	MakeCode	(x=0X711D6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X711F0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X711FE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X71208);
	MakeCode	(x=0X7120C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X71226);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7122E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X7124A);
	OpDecimal	(x,	0);
	MakeCode	(x=0X71266);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7128C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X71292);
	OpStkvar	(x,	1);
	MakeCode	(x=0X712A4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X712AE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X712BA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X712D6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X712FC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X71302);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7130C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X71316);
	OpStkvar	(x,	1);
	MakeCode	(x=0X71322);
	OpDecimal	(x,	0);
	MakeCode	(x=0X7132A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X71336);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X71354);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7137A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X71386);
	OpStkvar	(x,	1);
	MakeCode	(0X71390);
	MakeCode	(x=0X71398);
	OpStkvar	(x,	1);
	MakeCode	(x=0X713A2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X713BE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X713E4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X713F0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X71426);
	OpStkvar	(x,	1);
	MakeCode	(0X7142E);
	MakeCode	(0X7143E);
	MakeCode	(x=0X71442);
	OpStkvar	(x,	1);
	MakeCode	(x=0X71452);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X7145C);
	MakeCode	(x=0X7145E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X71468);
	OpStkvar	(x,	1);
	MakeCode	(x=0X71470);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X7147C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X71498);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7149E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X714A8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X714C4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X714CA);
	OpStkvar	(x,	1);
	MakeCode	(0X714E0);
	MakeCode	(x=0X7153E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7156A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X71572);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X7157C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X7159A);
	MakeCode	(x=0X715C8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X715D0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X715E0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X715E8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X71604);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7160A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X71614);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpStkvar	(x,	1);
	MakeCode	(0X71624);
	MakeCode	(x=0X7162A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X7163A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X71648);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X71650);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X71660);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X71668);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X71678);
	MakeCode	(x=0X7167E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X7168A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X71692);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X716A2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X716AA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X716C6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X716CC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X716D6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X71734);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7173A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X71756);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7175C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X71778);
	OpStkvar	(x,	1);
	MakeCode	(x=0X71784);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X71790);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X71798);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X717AC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X717D2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X717F0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X71802);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X71810);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X71826);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X7182E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X71850);
	MakeCode	(x=0X71852);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X71868);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X71872);
	MakeCode	(x=0X71878);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X71892);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X7189A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X718AA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X718B2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X718CE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X71914);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X7191C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X7197C);
	MakeCode	(x=0X71990);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X7199C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X719C4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X719D0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X719EC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X719F8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X71A26);
	MakeCode	(x=0X71A2C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X71A58);
	OpStkvar	(x,	1);
	MakeCode	(0X71A60);
	MakeCode	(x=0X71A9A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X71AA0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X71ABC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X71AC2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X71ADE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X71AEA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X71AF6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X71AFE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X71B12);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X71B38);
	OpStkvar	(x,	1);
	MakeCode	(x=0X71B56);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X71B68);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X71B76);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X71B8C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X71B94);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X71BB6);
	MakeCode	(x=0X71BB8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X71BCE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X71BD8);
	MakeCode	(x=0X71BDE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X71BFC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X71C04);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X71C14);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X71C1C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X71C38);
	OpStkvar	(x,	1);
	MakeCode	(x=0X71C7C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X71C84);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X71CE4);
	MakeCode	(x=0X71D0A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X71D16);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X71D32);
	OpStkvar	(x,	1);
	MakeCode	(x=0X71D3E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X71D6C);
	MakeCode	(x=0X71D72);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X71DA2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X71DC2);
	OpSign		(x,	1);
	MakeCode	(x=0X71DF6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X71DFC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X71E08);
	OpStkvar	(x,	0);
	MakeCode	(x=0X71E0E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X71E16);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X71E22);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X71E2C);
	OpStkvar	(x,	0);
	MakeCode	(0X71E3E);
	MakeCode	(0X71E58);
	MakeCode	(x=0X71E72);
	OpStkvar	(x,	1);
	MakeCode	(x=0X71E78);
	OpStkvar	(x,	1);
	MakeCode	(x=0X71E7E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X71E88);
	OpStkvar	(x,	1);
	MakeCode	(x=0X71EBC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X71EC2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X71EC8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X71EE8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X71EEE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X71EF8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X71F06);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X71F0E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X71F18);
	OpStkvar	(x,	1);
	MakeCode	(0X71F2C);
	MakeCode	(x=0X71F3A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X71F4C);
	MakeCode	(x=0X71F56);
	OpStkvar	(x,	0);
	MakeCode	(x=0X71F66);
	OpStkvar	(x,	1);
	MakeCode	(x=0X71F6E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X71F76);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X71F80);
	OpStkvar	(x,	1);
	MakeCode	(0X71F90);
	MakeCode	(x=0X71FA2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X71FB4);
	MakeCode	(x=0X71FC2);
	OpStkvar	(x,	0);
	MakeCode	(x=0X71FD0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X71FD6);
	OpStkvar	(x,	1);
	MakeCode	(0X71FFE);
	MakeCode	(x=0X7200E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X72014);
	OpStkvar	(x,	1);
	MakeCode	(x=0X72018);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7203C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7204E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X72052);
	OpStkvar	(x,	0);
	MakeCode	(x=0X72056);
	OpStkvar	(x,	1);
	MakeCode	(x=0X72060);
	OpStkvar	(x,	1);
	MakeCode	(x=0X72066);
	OpStkvar	(x,	1);
	MakeCode	(x=0X72072);
	OpStkvar	(x,	0);
	MakeCode	(0X72098);
	MakeCode	(x=0X7209A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X720AC);
	OpStkvar	(x,	0);
	MakeCode	(0X720BC);
	MakeCode	(x=0X720C0);
	OpStkvar	(x,	1);
	MakeCode	(0X720E6);
	MakeCode	(x=0X720E8);
	OpStkvar	(x,	0);
	MakeCode	(x=0X720FA);
	OpStkvar	(x,	0);
	MakeCode	(0X7210A);
	MakeCode	(x=0X7210E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7211E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X72124);
	OpStkvar	(x,	0);
	MakeCode	(x=0X72144);
	OpStkvar	(x,	1);
	MakeCode	(0X7214C);
	MakeCode	(x=0X7214E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7215C);
	OpStkvar	(x,	0);
	MakeCode	(0X72180);
	MakeCode	(x=0X72184);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7218A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X72196);
	OpStkvar	(x,	1);
	MakeCode	(x=0X721A0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X721AC);
	OpStkvar	(x,	0);
	MakeCode	(x=0X721B4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X721BC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X721C6);
	OpStkvar	(x,	1);
	MakeCode	(0X721DA);
	MakeCode	(x=0X721E6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X721FA);
	MakeCode	(x=0X72208);
	OpStkvar	(x,	0);
	MakeCode	(x=0X72218);
	OpStkvar	(x,	1);
	MakeCode	(x=0X72228);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X72230);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X7223A);
	OpStkvar	(x,	1);
	MakeCode	(0X7224E);
	MakeCode	(x=0X7225A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X7226E);
	MakeCode	(x=0X7227C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7228C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X72296);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X7229E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X722AA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X722BC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X722CC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X722D4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X722DE);
	OpStkvar	(x,	1);
	MakeCode	(0X722F2);
	MakeCode	(x=0X72300);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X72312);
	MakeCode	(x=0X72320);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7232C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X72334);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X7233C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X72346);
	OpStkvar	(x,	1);
	MakeCode	(0X72356);
	MakeCode	(x=0X72368);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X7237A);
	MakeCode	(x=0X72388);
	OpStkvar	(x,	0);
	MakeCode	(x=0X72394);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7239A);
	OpStkvar	(x,	1);
	MakeCode	(0X723C4);
	MakeCode	(x=0X723CA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X723D6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X723DE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X723E8);
	OpStkvar	(x,	1);
	MakeCode	(0X723FC);
	MakeCode	(x=0X7240A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X7241C);
	MakeCode	(x=0X7242A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X72436);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7243E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X72446);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X72450);
	OpStkvar	(x,	1);
	MakeCode	(0X72464);
	MakeCode	(x=0X72472);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X72484);
	MakeCode	(x=0X7248E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7249A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X724A0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X724C6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X724CE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X724DA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X724E2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X724EA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X724F2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X724FC);
	OpStkvar	(x,	1);
	MakeCode	(0X72510);
	MakeCode	(x=0X7251E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X72530);
	MakeCode	(x=0X7253A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7254A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X72552);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X7255A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X72564);
	OpStkvar	(x,	1);
	MakeCode	(0X72578);
	MakeCode	(x=0X72586);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X72598);
	MakeCode	(x=0X725A2);
	OpStkvar	(x,	0);
	MakeCode	(0X725D2);
	MakeCode	(x=0X725E2);
	OpStkvar	(x,	0);
	MakeCode	(x=0X725E8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X725EC);
	OpStkvar	(x,	0);
	MakeCode	(0X72604);
	MakeCode	(0X72620);
	MakeCode	(0X72624);
	MakeCode	(0X7263A);
	MakeCode	(0X72642);
	MakeCode	(0X7264A);
	MakeCode	(0X72656);
	MakeCode	(0X7266C);
	MakeCode	(0X72674);
	MakeCode	(0X7267C);
	MakeCode	(0X72688);
	MakeCode	(0X7269E);
	MakeCode	(x=0X72718);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X72730);
	MakeCode	(0X7273E);
	MakeCode	(0X72748);
	MakeCode	(0X727FC);
	MakeCode	(x=0X72802);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X7280A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X7281C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X72826);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X72830);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X72842);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X72854);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X72866);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X7288E);
	MakeCode	(0X7289A);
	MakeCode	(0X728A8);
	MakeCode	(0X728B6);
	MakeCode	(0X728C4);
	MakeCode	(0X728D2);
	MakeCode	(0X728E0);
	MakeCode	(0X728EE);
	MakeCode	(0X728FC);
	MakeCode	(0X7290A);
	MakeCode	(0X72918);
	MakeCode	(x=0X72926);
	OpSign		(x,	1);
	MakeCode	(0X7293C);
	MakeCode	(x=0X72942);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X72960);
	MakeCode	(0X72966);
	MakeCode	(0X7296C);
	MakeCode	(x=0X72972);
	OpStkvar	(x,	1);
	MakeCode	(0X72998);
	MakeCode	(0X729A8);
	MakeCode	(x=0X729B2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X729BC);
	OpStkvar	(x,	0);
	MakeCode	(0X729E8);
	MakeCode	(0X729F4);
	MakeCode	(0X72A56);
	MakeCode	(x=0X72A8A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X72AA2);
	MakeCode	(0X72AF4);
	MakeCode	(0X72B06);
	MakeCode	(x=0X72B0E);
	OpSign		(x,	1);
	MakeCode	(0X72B2A);
	MakeCode	(0X72B4C);
	MakeCode	(x=0X72BCC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X72BD6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X72C24);
	MakeCode	(0X72C2C);
	MakeCode	(0X72C46);
	MakeCode	(0X72C60);
	MakeCode	(x=0X72CDC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X72CE6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X72D34);
	MakeCode	(0X72D3C);
	MakeCode	(0X72D56);
	MakeCode	(0X72D76);
	MakeCode	(0X72DD6);
	MakeCode	(x=0X72DD8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X72E0C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X72E2C);
	MakeCode	(0X72E3A);
	MakeCode	(0X72E5A);
	MakeCode	(0X72EB6);
	MakeCode	(x=0X72EB8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X72EE8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X72EF8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X72F1A);
	MakeCode	(x=0X72F20);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X72F46);
	MakeCode	(0X72F54);
	MakeCode	(x=0X72F82);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X72FC2);
	MakeCode	(0X72FCC);
	MakeCode	(x=0X72FDE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X7300E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X73026);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X73056);
	OpStkvar	(x,	1);
	MakeCode	(0X7305E);
	MakeCode	(0X73066);
	MakeCode	(x=0X73068);
	OpStkvar	(x,	1);
	MakeCode	(0X730A6);
	MakeCode	(0X730C4);
	MakeCode	(x=0X730D6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X730F2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X73106);
	OpSign		(x,	1);
	MakeCode	(x=0X73184);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X73196);
	MakeCode	(x=0X731A6);
	OpStkvar	(x,	1);
	MakeCode	(0X731B4);
	MakeCode	(x=0X731B8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X731C2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X731CA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X731D6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X73236);
	OpStkvar	(x,	1);
	MakeCode	(x=0X73246);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X73250);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X7326C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X732A4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X732BA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X732E6);
	OpStkvar	(x,	1);
	MakeCode	(0X732F0);
	MakeCode	(x=0X7332E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X73344);
	OpStkvar	(x,	1);
	MakeCode	(0X73378);
	MakeCode	(x=0X733BC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X733C2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X733CE);
	OpStkvar	(x,	0);
	MakeCode	(0X733E0);
	MakeCode	(0X73420);
	MakeCode	(0X73466);
	MakeCode	(0X734A2);
	MakeCode	(0X7350C);
	MakeCode	(0X7351C);
	MakeCode	(0X7353C);
	MakeCode	(0X7354C);
	MakeCode	(0X7356E);
	MakeCode	(0X7357E);
	MakeCode	(0X7359E);
	MakeCode	(0X735AE);
	MakeCode	(0X735CE);
	MakeCode	(0X735DE);
	MakeCode	(0X735FE);
	MakeCode	(0X73608);
	MakeCode	(0X73626);
	MakeCode	(0X73642);
	MakeCode	(0X7366C);
	MakeCode	(0X73672);
	MakeCode	(0X73688);
	MakeCode	(x=0X7368E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X73698);
	MakeCode	(0X736D0);
	MakeCode	(x=0X736DE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X73716);
	MakeCode	(0X73796);
	MakeCode	(0X737AC);
	MakeCode	(0X73808);
	MakeCode	(0X7381E);
	MakeCode	(0X73826);
	MakeCode	(0X73836);
	MakeCode	(0X73846);
	MakeCode	(0X73856);
	MakeCode	(0X73866);
	MakeCode	(0X73876);
	MakeCode	(0X73886);
	MakeCode	(0X73896);
	MakeCode	(0X738A6);
	MakeCode	(0X738B4);
	MakeCode	(0X738C2);
	MakeCode	(0X738D0);
	MakeCode	(0X738DE);
	MakeCode	(0X738EC);
	MakeCode	(0X738FA);
	MakeCode	(0X73908);
	MakeCode	(0X73916);
	MakeCode	(0X73924);
	MakeCode	(0X73932);
	MakeCode	(0X73942);
	MakeCode	(0X73952);
	MakeCode	(0X73962);
	MakeCode	(0X73972);
	MakeCode	(0X73982);
	MakeCode	(0X73992);
	MakeCode	(0X739A2);
	MakeCode	(0X739B2);
	MakeCode	(0X739C0);
	MakeCode	(0X739CE);
	MakeCode	(0X739DC);
	MakeCode	(0X739EA);
	MakeCode	(0X739F8);
	MakeCode	(0X73A06);
	MakeCode	(0X73A14);
	MakeCode	(0X73A22);
	MakeCode	(0X73A30);
	MakeCode	(x=0X73A3E);
	OpSign		(x,	1);
	MakeCode	(x=0X73BAE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X73BB6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X73BBC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X73BC2);
	OpStkvar	(x,	0);
	MakeCode	(x=0X73BD0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X73BEE);
	OpStkvar	(x,	0);
	MakeCode	(0X73C02);
	MakeCode	(x=0X73C16);
	OpStkvar	(x,	0);
	MakeCode	(x=0X73C26);
	OpStkvar	(x,	0);
	MakeCode	(x=0X73C2E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X73C34);
	OpStkvar	(x,	1);
	MakeCode	(x=0X73C3A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X73C48);
	OpStkvar	(x,	0);
	MakeCode	(x=0X73C64);
	OpStkvar	(x,	0);
	MakeCode	(0X73C78);
	MakeCode	(x=0X73C8C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X73C9C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X73CA4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X73CAA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X73CB0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X73CBE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X73CDA);
	OpStkvar	(x,	0);
	MakeCode	(0X73CEE);
	MakeCode	(x=0X73D02);
	OpStkvar	(x,	0);
	MakeCode	(x=0X73D18);
	OpStkvar	(x,	0);
	MakeCode	(x=0X73D20);
	OpStkvar	(x,	1);
	MakeCode	(x=0X73D2C);
	OpStkvar	(x,	1);
	MakeCode	(0X73D34);
	MakeCode	(x=0X73D3A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X73D40);
	OpStkvar	(x,	0);
	MakeCode	(x=0X73D4E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X73D6A);
	OpStkvar	(x,	0);
	MakeCode	(0X73D7E);
	MakeCode	(x=0X73D92);
	OpStkvar	(x,	0);
	MakeCode	(x=0X73DA2);
	OpStkvar	(x,	0);
	MakeCode	(x=0X73DAA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X73DB0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X73DB6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X73DC4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X73DE0);
	OpStkvar	(x,	0);
	MakeCode	(0X73DF4);
	MakeCode	(x=0X73E08);
	OpStkvar	(x,	0);
	MakeCode	(x=0X73E36);
	OpStkvar	(x,	0);
	MakeCode	(x=0X73E3E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X73E44);
	OpStkvar	(x,	1);
	MakeCode	(x=0X73E4A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X73E64);
	OpStkvar	(x,	0);
	MakeCode	(0X73E78);
	MakeCode	(x=0X73E8C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X73E9C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X73EA4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X73EAA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X73EB0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X73ECA);
	OpStkvar	(x,	0);
	MakeCode	(0X73EDE);
	MakeCode	(x=0X73EF2);
	OpStkvar	(x,	0);
	MakeCode	(x=0X73F02);
	OpStkvar	(x,	0);
	MakeCode	(x=0X73F0A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X73F10);
	OpStkvar	(x,	1);
	MakeCode	(x=0X73F16);
	OpStkvar	(x,	1);
	MakeCode	(x=0X73F30);
	OpStkvar	(x,	0);
	MakeCode	(0X73F44);
	MakeCode	(x=0X73F58);
	OpStkvar	(x,	0);
	MakeCode	(x=0X73F92);
	OpStkvar	(x,	1);
	MakeCode	(x=0X73F98);
	OpStkvar	(x,	1);
	MakeCode	(x=0X73FA8);
	OpStkvar	(x,	0);
	MakeCode	(x=0X73FB6);
	OpStkvar	(x,	0);
	MakeCode	(0X73FC2);
	MakeCode	(x=0X73FC4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X73FCA);
	OpStkvar	(x,	0);
	MakeCode	(0X73FFA);
	MakeCode	(0X7401A);
	MakeCode	(x=0X74026);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X74030);
	MakeCode	(0X74036);
	MakeCode	(0X74044);
	MakeCode	(0X74054);
	MakeCode	(0X7405C);
	MakeCode	(0X74060);
	MakeCode	(0X7406C);
	MakeCode	(x=0X74076);
	OpDecimal	(x,	0);
	MakeCode	(0X74082);
	MakeCode	(0X7408C);
	MakeCode	(0X74098);
	MakeCode	(0X740A8);
	MakeCode	(x=0X740AE);
	OpDecimal	(x,	0);
	MakeCode	(x=0X740B2);
	OpDecimal	(x,	0);
	MakeCode	(0X740B8);
	MakeCode	(0X740BE);
	MakeCode	(0X740CA);
	MakeCode	(0X740D6);
	MakeCode	(0X740DA);
	MakeCode	(x=0X740E0);
	OpSign		(x,	1);
	MakeCode	(0X740F8);
	MakeCode	(0X740FE);
	MakeCode	(x=0X74102);
	OpStkvar	(x,	1);
	MakeCode	(x=0X74132);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7413E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X74150);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X74174);
	MakeCode	(x=0X7417A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X741A4);
	MakeCode	(x=0X741AA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X741B6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X741EC);
	MakeCode	(0X74206);
	MakeCode	(x=0X7421A);
	OpStkvar	(x,	1);
	MakeCode	(0X7422C);
	MakeCode	(0X7424A);
	MakeCode	(x=0X74254);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X7425E);
	MakeCode	(x=0X74264);
	OpStkvar	(x,	1);
	MakeCode	(x=0X74276);
	OpDecimal	(x,	0);
	MakeCode	(x=0X7427A);
	OpDecimal	(x,	0);
	MakeCode	(x=0X74294);
	OpStkvar	(x,	1);
	MakeCode	(0X742A6);
	MakeCode	(x=0X742BE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X742CE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X742D4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X742E8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X74302);
	OpStkvar	(x,	1);
	MakeCode	(x=0X74310);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7434A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X74352);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X7435E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X74374);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X74386);
	OpStkvar	(x,	1);
	MakeCode	(x=0X74390);
	OpStkvar	(x,	1);
	MakeCode	(x=0X74398);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X743A4);
	OpStkvar	(x,	1);
	MakeCode	(0X743B0);
	MakeCode	(0X743C6);
	MakeCode	(0X7441A);
	MakeCode	(0X7442C);
	MakeCode	(0X74440);
	MakeCode	(x=0X74460);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X74470);
	MakeCode	(x=0X7447A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X74488);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X7449A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X744B8);
	MakeCode	(0X744CA);
	MakeCode	(0X744FA);
	MakeCode	(x=0X7453A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X74542);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X7454E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X7455C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7456E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X74578);
	OpStkvar	(x,	1);
	MakeCode	(x=0X74580);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7458C);
	OpStkvar	(x,	1);
	MakeCode	(0X745A0);
	MakeCode	(0X745B4);
	MakeCode	(0X745DE);
	MakeCode	(x=0X7461A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X74622);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X7462E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X7463C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7464E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X74658);
	OpStkvar	(x,	1);
	MakeCode	(x=0X74660);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7466C);
	OpStkvar	(x,	1);
	MakeCode	(0X7467E);
	MakeCode	(0X7468C);
	MakeCode	(x=0X746A8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X74766);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X74790);
	MakeCode	(x=0X747AA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X747C8);
	MakeCode	(0X747DE);
	MakeCode	(0X7481E);
	MakeCode	(0X7483A);
	MakeCode	(0X7485C);
	MakeCode	(0X7489C);
	MakeCode	(0X748BE);
	MakeCode	(0X748D0);
	MakeCode	(0X74900);
	MakeCode	(x=0X74930);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X7493C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X7494E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X74960);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X74992);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X7499A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X749A6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X749B8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X749CA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X749FC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X74A04);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X74A10);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X74B22);
	MakeCode	(x=0X74B28);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X74B30);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X74B40);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X74B5E);
	OpStkvar	(x,	1);
	MakeCode	(0X74B6C);
	MakeCode	(0X74B7C);
	MakeCode	(0X74BBC);
	MakeCode	(0X74BE4);
	MakeCode	(x=0X74BEE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X74BF8);
	MakeCode	(x=0X74C04);
	OpDecimal	(x,	0);
	MakeCode	(x=0X74C24);
	OpDecimal	(x,	0);
	MakeCode	(0X74C5A);
	MakeCode	(0X74C82);
	MakeCode	(0X74C8A);
	MakeCode	(0X74C92);
	MakeCode	(0X74CA0);
	MakeCode	(0X74CBE);
	MakeCode	(0X74D1E);
	MakeCode	(0X74DD0);
	MakeCode	(0X74E2A);
	MakeCode	(0X74E48);
	MakeCode	(0X74E74);
	MakeCode	(0X74EB6);
	MakeCode	(0X74EFE);
	MakeCode	(0X74F12);
	MakeCode	(0X74F2A);
	MakeCode	(0X74F58);
	MakeCode	(0X74FB6);
	MakeCode	(0X74FFE);
	MakeCode	(0X75012);
	MakeCode	(0X7502A);
	MakeCode	(0X75058);
	MakeCode	(0X75086);
	MakeCode	(0X750C8);
	MakeCode	(0X750E2);
	MakeCode	(0X75120);
	MakeCode	(0X7514E);
	MakeCode	(0X7516C);
	MakeCode	(0X75174);
	MakeCode	(0X7519C);
	MakeCode	(0X751B4);
	MakeCode	(0X751E6);
	MakeCode	(0X751F8);
	MakeCode	(0X7522A);
	MakeCode	(0X7523C);
	MakeCode	(0X7527A);
	MakeCode	(0X7529C);
	MakeCode	(0X752FC);
	MakeCode	(0X7531E);
	MakeCode	(0X75322);
	MakeCode	(0X7534E);
	MakeCode	(0X75362);
	MakeCode	(0X75370);
	MakeCode	(0X75398);
	MakeCode	(x=0X7539A);
	OpStkvar	(x,	1);
	MakeCode	(0X755FA);
	MakeCode	(x=0X75604);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X75614);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X7561E);
	MakeCode	(0X75632);
	MakeCode	(0X7563A);
	MakeCode	(0X75646);
	MakeCode	(0X75656);
	MakeCode	(0X75660);
	MakeCode	(0X75690);
	MakeCode	(0X756A2);
	MakeCode	(x=0X756B2);
	OpDecimal	(x,	0);
	MakeCode	(x=0X756BE);
	OpDecimal	(x,	0);
	MakeCode	(0X756CA);
	MakeCode	(0X756D6);
	MakeCode	(0X756E2);
	MakeCode	(0X756EC);
	MakeCode	(0X756F8);
	MakeCode	(x=0X7570A);
	OpDecimal	(x,	0);
	MakeCode	(0X75716);
	MakeCode	(0X75722);
	MakeCode	(0X7572E);
	MakeCode	(x=0X75740);
	OpDecimal	(x,	0);
	MakeCode	(0X7574A);
	MakeCode	(0X75794);
	MakeCode	(0X7579E);
	MakeCode	(0X757A8);
	MakeCode	(0X757C0);
	MakeCode	(0X757DC);
	MakeCode	(0X7580E);
	MakeCode	(0X75820);
	MakeCode	(x=0X7587C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X758A6);
	MakeCode	(x=0X758AA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X758B4);
	MakeCode	(x=0X758B6);
	OpDecimal	(x,	0);
	MakeCode	(x=0X758C6);
	OpDecimal	(x,	0);
	MakeCode	(0X758D0);
	MakeCode	(0X758D2);
	MakeCode	(0X758D8);
	MakeCode	(0X75922);
	MakeCode	(0X7592E);
	MakeCode	(0X759A4);
	MakeCode	(0X759C2);
	MakeCode	(0X759C6);
	MakeCode	(0X759DE);
	MakeCode	(0X75A2E);
	MakeCode	(0X75A54);
	MakeCode	(0X75A66);
	MakeCode	(0X75B80);
	MakeCode	(0X75BC0);
	MakeCode	(0X75C1C);
	MakeCode	(0X75C3A);
	MakeCode	(0X75C4E);
	MakeCode	(0X75C62);
	MakeCode	(0X75C6A);
	MakeCode	(0X75C8C);
	MakeCode	(0X75CAC);
	MakeCode	(0X75CD6);
	MakeCode	(0X75D18);
	MakeCode	(0X75D20);
	MakeCode	(0X75D26);
	MakeCode	(0X75D50);
	MakeCode	(0X75D92);
	MakeCode	(0X75D9A);
	MakeCode	(0X75DA0);
	MakeCode	(0X75DAE);
	MakeCode	(x=0X75DB2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X75DBC);
	MakeCode	(0X75DD6);
	MakeCode	(x=0X75DDC);
	OpSign		(x,	1);
	MakeCode	(x=0X75E72);
	OpStkvar	(x,	1);
	MakeCode	(x=0X75E78);
	OpStkvar	(x,	1);
	MakeCode	(x=0X75E82);
	OpStkvar	(x,	0);
	MakeCode	(0X75E94);
	MakeCode	(0X75EA6);
	MakeCode	(0X75EC8);
	MakeCode	(0X75EEE);
	MakeCode	(0X75F12);
	MakeCode	(0X75F38);
	MakeCode	(0X75F5A);
	MakeCode	(0X75F80);
	MakeCode	(0X75FA4);
	MakeCode	(x=0X75FCA);
	OpSign		(x,	1);
	MakeCode	(0X75FF2);
	MakeCode	(0X76042);
	MakeCode	(0X76050);
	MakeCode	(0X76080);
	MakeCode	(0X760CA);
	MakeCode	(0X760DE);
	MakeCode	(0X760F2);
	MakeCode	(0X76102);
	MakeCode	(0X7615A);
	MakeCode	(0X7616E);
	MakeCode	(0X761AA);
	MakeCode	(0X761BA);
	MakeCode	(0X761C0);
	MakeCode	(0X761CC);
	MakeCode	(0X761D4);
	MakeCode	(0X76218);
	MakeCode	(0X7622C);
	MakeCode	(0X7626C);
	MakeCode	(0X762F6);
	MakeCode	(0X76308);
	MakeCode	(0X7631E);
	MakeCode	(0X76334);
	MakeCode	(0X76344);
	MakeCode	(0X7635E);
	MakeCode	(0X76372);
	MakeCode	(0X76378);
	MakeCode	(0X76380);
	MakeCode	(0X763A8);
	MakeCode	(0X763B8);
	MakeCode	(0X763F6);
	MakeCode	(0X76440);
	MakeCode	(0X76480);
	MakeCode	(0X76486);
	MakeCode	(x=0X76490);
	OpStkvar	(x,	1);
	MakeCode	(0X7649E);
	MakeCode	(0X764CC);
	MakeCode	(0X764FA);
	MakeCode	(0X76516);
	MakeCode	(0X7652C);
	MakeCode	(0X7653C);
	MakeCode	(0X76570);
	MakeCode	(0X76594);
	MakeCode	(0X765A6);
	MakeCode	(0X765C0);
	MakeCode	(0X765CC);
	MakeCode	(0X765F2);
	MakeCode	(0X76604);
	MakeCode	(0X7661E);
	MakeCode	(0X76628);
	MakeCode	(0X76636);
	MakeCode	(0X76646);
	MakeCode	(0X766F2);
	MakeCode	(0X76702);
	MakeCode	(0X7670A);
	MakeCode	(0X7672E);
	MakeCode	(0X7673E);
	MakeCode	(0X76756);
	MakeCode	(0X76784);
	MakeCode	(0X7678A);
	MakeCode	(0X7679C);
	MakeCode	(0X767CE);
	MakeCode	(0X767E2);
	MakeCode	(0X76830);
	MakeCode	(0X76844);
	MakeCode	(x=0X768B2);
	OpStkvar	(x,	1);
	MakeCode	(0X768D0);
	MakeCode	(x=0X768D4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X768DE);
	MakeCode	(0X768FC);
	MakeCode	(0X7695E);
	MakeCode	(0X769E0);
	MakeCode	(0X769F8);
	MakeCode	(0X76A12);
	MakeCode	(x=0X76A4E);
	OpSign		(x,	1);
	MakeCode	(0X76A72);
	MakeCode	(0X76AAE);
	MakeCode	(0X76AF2);
	MakeCode	(0X76B2E);
	MakeCode	(0X76BD8);
	MakeCode	(0X76C34);
	MakeCode	(0X76C70);
	MakeCode	(0X76CE0);
	MakeCode	(0X76D2E);
	MakeCode	(0X76D66);
	MakeCode	(0X76DB6);
	MakeCode	(0X76E2A);
	MakeCode	(0X76E3A);
	MakeCode	(0X76E8E);
	MakeCode	(0X76E9A);
	MakeCode	(0X76EBA);
	MakeCode	(0X76EDE);
	MakeCode	(0X76EEE);
	MakeCode	(0X76F00);
	MakeCode	(0X76F0A);
	MakeCode	(0X76F72);
	MakeCode	(0X76F82);
	MakeCode	(0X76F9A);
	MakeCode	(0X7700C);
	MakeCode	(0X7701C);
	MakeCode	(0X7702E);
	MakeCode	(0X77100);
	MakeCode	(0X7711E);
	MakeCode	(0X7713A);
	MakeCode	(0X7714C);
	MakeCode	(0X7715E);
	MakeCode	(x=0X7716C);
	OpStkvar	(x,	1);
	MakeCode	(0X7717A);
	MakeCode	(0X77186);
	MakeCode	(0X771A2);
	MakeCode	(0X771B8);
	MakeCode	(0X771EA);
	MakeCode	(0X771F6);
	MakeCode	(0X77246);
	MakeCode	(0X77266);
	MakeCode	(0X7728C);
	MakeCode	(0X772A6);
	MakeCode	(0X772BC);
	MakeCode	(0X772EC);
	MakeCode	(0X772F4);
	MakeCode	(0X77312);
	MakeCode	(0X77358);
	MakeCode	(0X7736A);
	MakeCode	(0X7738E);
	MakeCode	(0X7739E);
	MakeCode	(0X773AE);
	MakeCode	(0X773B8);
	MakeCode	(0X773CE);
	MakeCode	(x=0X773EA);
	OpSign		(x,	1);
	MakeCode	(x=0X773F2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X773FC);
	MakeCode	(0X773FE);
	MakeCode	(0X7745A);
	MakeCode	(0X77466);
	MakeCode	(x=0X77472);
	OpSign		(x,	1);
	MakeCode	(x=0X7747E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X77486);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7748E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X77496);
	OpStkvar	(x,	1);
	MakeCode	(x=0X774BC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X774D0);
	OpStkvar	(x,	1);
	MakeCode	(0X774F6);
	MakeCode	(x=0X774FA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X77502);
	OpStkvar	(x,	1);
	MakeCode	(0X77518);
	MakeCode	(x=0X7751C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X77530);
	OpStkvar	(x,	1);
	MakeCode	(0X77536);
	MakeCode	(x=0X7753A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X77558);
	OpStkvar	(x,	1);
	MakeCode	(0X77560);
	MakeCode	(x=0X7756C);
	OpStkvar	(x,	1);
	MakeCode	(0X77582);
	MakeCode	(x=0X77586);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7759E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X775A2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X775A8);
	OpStkvar	(x,	0);
	MakeCode	(0X775AE);
	MakeCode	(x=0X775B4);
	OpStkvar	(x,	1);
	MakeCode	(0X775BC);
	MakeCode	(x=0X775C8);
	OpStkvar	(x,	1);
	MakeCode	(0X775DE);
	MakeCode	(x=0X775E2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X775F6);
	OpStkvar	(x,	1);
	MakeCode	(0X775FC);
	MakeCode	(x=0X77602);
	OpStkvar	(x,	0);
	MakeCode	(x=0X77606);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7760C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X77616);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7761C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X77626);
	OpStkvar	(x,	0);
	MakeCode	(0X7762E);
	MakeCode	(x=0X77634);
	OpStkvar	(x,	1);
	MakeCode	(0X77644);
	MakeCode	(0X77658);
	MakeCode	(0X7766A);
	MakeCode	(0X77688);
	MakeCode	(0X77696);
	MakeCode	(0X7769A);
	MakeCode	(0X776B6);
	MakeCode	(0X776C4);
	MakeCode	(x=0X776C6);
	OpSign		(x,	1);
	MakeCode	(x=0X776D0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X776D4);
	OpStkvar	(x,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X776DA);
	OpStkvar	(x,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X776E0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X776E8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X776EE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X776F2);
	OpStkvar	(x,	0);
	MakeCode	(x=0X776F8);
	OpStkvar	(x,	0);
	MakeCode	(x=0X776FC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X77700);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7770A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7771A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7771E);
	OpStkvar	(x,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X77724);
	OpStkvar	(x,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7772A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X77730);
	OpStkvar	(x,	1);
	MakeCode	(x=0X77736);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7773A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X77740);
	OpStkvar	(x,	0);
	MakeCode	(x=0X77744);
	OpStkvar	(x,	1);
	MakeCode	(x=0X77748);
	OpStkvar	(x,	1);
	MakeCode	(x=0X77752);
	OpStkvar	(x,	0);
	MakeCode	(0X7777E);
	MakeCode	(0X777B4);
	MakeCode	(0X777EA);
	MakeCode	(x=0X777F4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X77816);
	MakeCode	(x=0X77820);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X7783E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X77842);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X77860);
	OpSign		(x,	1);
	MakeCode	(x=0X77878);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X7788E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X778A2);
	MakeCode	(x=0X778A8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X778B8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X778D0);
	OpSign		(x,	1);
	MakeCode	(x=0X778DE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X778FA);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7790E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X77916);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7791E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X77922);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7792C);
	OpSign		(x,	1);
	MakeCode	(0X77964);
	MakeCode	(x=0X7796A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X77982);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7798C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X779B0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X779BA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X779C0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X779C4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X779D0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X779D8);
	OpStkvar	(x,	0);
	MakeCode	(x=0X779E8);
	OpStkvar	(x,	0);
	MakeCode	(x=0X779EC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X779FE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X77A0C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X77A18);
	OpStkvar	(x,	1);
	MakeCode	(x=0X77A1C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X77A28);
	OpStkvar	(x,	1);
	MakeCode	(x=0X77A32);
	OpStkvar	(x,	1);
	MakeCode	(x=0X77A36);
	OpStkvar	(x,	1);
	MakeCode	(x=0X77A42);
	OpStkvar	(x,	1);
	MakeCode	(x=0X77A4E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X77A52);
	OpStkvar	(x,	0);
	MakeCode	(x=0X77A60);
	OpStkvar	(x,	0);
	MakeCode	(x=0X77A6A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X77A6E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X77A7A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X77A90);
	OpStkvar	(x,	1);
	MakeCode	(x=0X77A94);
	OpStkvar	(x,	0);
	MakeCode	(x=0X77A9A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X77AA0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X77AA6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X77AB6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X77AC0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X77AD6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X77ADC);
	OpStkvar	(x,	0);
	MakeCode	(0X77AE6);
	MakeCode	(x=0X77AEC);
	OpStkvar	(x,	0);
	MakeCode	(x=0X77AF6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X77AFA);
	OpStkvar	(x,	0);
	MakeCode	(x=0X77B06);
	OpStkvar	(x,	0);
	MakeCode	(x=0X77B18);
	OpStkvar	(x,	1);
	MakeCode	(x=0X77B22);
	OpStkvar	(x,	1);
	MakeCode	(x=0X77B3E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X77B58);
	OpStkvar	(x,	0);
	MakeCode	(x=0X77B5C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X77B68);
	OpStkvar	(x,	0);
	MakeCode	(0X77B74);
	MakeCode	(x=0X77B76);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X77B96);
	MakeCode	(x=0X77B9C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X77BA0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X77BAC);
	OpStkvar	(x,	0);
	MakeCode	(x=0X77BB2);
	OpStkvar	(x,	0);
	MakeCode	(x=0X77BB6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X77BC8);
	OpStkvar	(x,	0);
	MakeCode	(x=0X77BCC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X77BDE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X77BE2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X77BF6);
	MakeCode	(x=0X77BFC);
	OpStkvar	(x,	0);
	MakeCode	(x=0X77C12);
	OpSign		(x,	1);
	MakeCode	(x=0X77C1C);
	OpStkvar	(x,	1);
	MakeCode	(0X77C34);
	MakeCode	(x=0X77C3A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X77C3E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X77C46);
	OpSign		(x,	1);
	MakeCode	(0X77C5A);
	MakeCode	(x=0X77C60);
	OpStkvar	(x,	1);
	MakeCode	(x=0X77C78);
	OpStkvar	(x,	1);
	MakeCode	(x=0X77C90);
	OpStkvar	(x,	1);
	MakeCode	(x=0X77CAC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X77CB0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X77CBC);
	OpSign		(x,	1);
	MakeCode	(x=0X77CFC);
	OpSign		(x,	1);
	MakeCode	(x=0X77D18);
	OpStkvar	(x,	0);
	MakeCode	(0X77D34);
	MakeCode	(x=0X77D3E);
	OpSign		(x,	1);
	MakeCode	(x=0X77D48);
	OpStkvar	(x,	0);
	MakeCode	(0X77D66);
	MakeCode	(0X77D78);
	MakeCode	(x=0X77D80);
	OpSign		(x,	1);
	MakeCode	(x=0X77D92);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X77D9E);
	OpStkvar	(x,	0);
	MakeCode	(0X77DB2);
	MakeCode	(x=0X77DBA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X77DD8);
	OpSign		(x,	1);
	MakeCode	(x=0X77DF2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X77DF8);
	OpStkvar	(x,	0);
	MakeCode	(0X77E04);
	MakeCode	(0X77E0E);
	MakeCode	(x=0X77E14);
	OpSign		(x,	1);
	MakeCode	(x=0X77E80);
	OpStkvar	(x,	0);
	MakeCode	(x=0X77E8C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X77EA6);
	MakeCode	(x=0X77EAA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X77EAE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X77EB2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X77ECE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X77ED4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X77F0A);
	MakeCode	(0X77F3E);
	MakeCode	(x=0X77F56);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X77F5C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X77F8E);
	MakeCode	(0X77FE4);
	MakeCode	(0X77FEA);
	MakeCode	(x=0X78002);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X78008);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X7803A);
	OpDecimal	(x,	0);
	MakeCode	(0X78090);
	MakeCode	(x=0X780AC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X780B0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X780B4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X780BA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X780F0);
	MakeCode	(x=0X780F6);
	OpDecimal	(x,	0);
	MakeCode	(0X7814A);
	MakeCode	(0X78150);
	MakeCode	(x=0X78154);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X78158);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X78174);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X7817A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X781B0);
	OpDecimal	(x,	0);
	MakeCode	(x=0X781B8);
	OpDecimal	(x,	0);
	MakeCode	(0X78214);
	MakeCode	(x=0X78220);
	OpSign		(x,	1);
	MakeCode	(x=0X78228);
	OpStkvar	(x,	0);
	MakeCode	(x=0X78232);
	OpStkvar	(x,	0);
	MakeCode	(x=0X78238);
	OpStkvar	(x,	0);
	MakeCode	(0X78242);
	MakeCode	(x=0X7824A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X78256);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X782A6);
	OpSign		(x,	1);
	MakeCode	(x=0X782B2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X782BE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X782C8);
	OpStkvar	(x,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X782CE);
	OpStkvar	(x,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X782D4);
	OpStkvar	(x,	0);
	MakeCode	(0X782E4);
	MakeCode	(x=0X78382);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X78394);
	OpSign		(x,	1);
	MakeCode	(x=0X783A8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X783B4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X783BE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X783C4);
	OpStkvar	(x,	0);
	MakeCode	(0X783CE);
	MakeCode	(0X783FE);
	MakeCode	(0X7840E);
	MakeCode	(x=0X78414);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X7841E);
	MakeCode	(x=0X78430);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X7844A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X78456);
	OpDecimal	(x,	0);
	MakeCode	(x=0X7845C);
	OpDecimal	(x,	0);
	MakeCode	(0X78472);
	MakeCode	(x=0X78474);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X78484);
	MakeCode	(x=0X784B2);
	OpSign		(x,	1);
	MakeCode	(x=0X784BC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X784C4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X784CA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X784CE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X784EC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X784F2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X784F8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X784FC);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7851A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X78520);
	OpStkvar	(x,	1);
	MakeCode	(x=0X78526);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7852A);
	OpStkvar	(x,	0);
	MakeCode	(0X785F4);
	MakeCode	(x=0X786B2);
	OpSign		(x,	1);
	MakeCode	(x=0X786BC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X786C2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X786C8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X786D2);
	OpStkvar	(x,	0);
	MakeCode	(0X786EC);
	MakeCode	(0X7877E);
	MakeCode	(0X787DA);
	MakeCode	(0X7885E);
	MakeCode	(0X7886A);
	MakeCode	(x=0X7889E);
	OpSign		(x,	1);
	MakeCode	(x=0X788AC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X788B2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X788C2);
	OpStkvar	(x,	0);
	MakeCode	(x=0X788C8);
	OpStkvar	(x,	0);
	MakeCode	(x=0X788CE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X78946);
	OpSign		(x,	1);
	MakeCode	(x=0X78954);
	OpStkvar	(x,	1);
	MakeCode	(x=0X789B6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X789BC);
	OpStkvar	(x,	0);
	MakeCode	(x=0X789D2);
	OpSign		(x,	1);
	MakeCode	(x=0X789E0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X789F0);
	OpStkvar	(x,	0);
	MakeCode	(0X78A52);
	MakeCode	(x=0X78AAC);
	OpSign		(x,	1);
	MakeCode	(x=0X78ABA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X78AC0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X78AD0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X78AD6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X78ADC);
	OpStkvar	(x,	0);
	MakeCode	(0X78B48);
	MakeCode	(0X78BBE);
	MakeCode	(0X78CDE);
	MakeCode	(0X78D2E);
	MakeCode	(0X78D3E);
	MakeCode	(0X78D62);
	MakeCode	(x=0X78D6A);
	OpSign		(x,	1);
	MakeCode	(x=0X78D7A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X78D80);
	OpStkvar	(x,	1);
	MakeCode	(x=0X78D86);
	OpStkvar	(x,	1);
	MakeCode	(x=0X78D8C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X78D98);
	OpStkvar	(x,	1);
	MakeCode	(x=0X78D9E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X78DA4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X78DB0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X78DB6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X78DBC);
	OpStkvar	(x,	0);
	MakeCode	(x=0X78DC8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X78DCE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X78DD4);
	OpStkvar	(x,	0);
	MakeCode	(0X78DDE);
	MakeCode	(0X78DFE);
	MakeCode	(x=0X78E04);
	OpSign		(x,	1);
	MakeCode	(x=0X78E08);
	OpStkvar	(x,	0);
	MakeCode	(x=0X78E0C);
	OpStkvar	(x,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X78E12);
	OpStkvar	(x,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X78E18);
	OpStkvar	(x,	1);
	MakeCode	(x=0X78E1E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X78E24);
	OpStkvar	(x,	1);
	MakeCode	(x=0X78E2A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X78E30);
	OpStkvar	(x,	0);
	MakeCode	(x=0X78E34);
	OpStkvar	(x,	1);
	MakeCode	(x=0X78E38);
	OpStkvar	(x,	1);
	MakeCode	(x=0X78E42);
	OpStkvar	(x,	0);
	MakeCode	(0X78E56);
	MakeCode	(0X79106);
	MakeCode	(x=0X79242);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X79254);
	MakeCode	(x=0X79256);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X79266);
	MakeCode	(x=0X7927A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X792AE);
	MakeCode	(x=0X792C2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X792CC);
	MakeCode	(0X792FC);
	MakeCode	(0X7932C);
	MakeCode	(0X7935C);
	MakeCode	(0X7938C);
	MakeCode	(0X793AC);
	MakeCode	(0X793DC);
	MakeCode	(0X7940C);
	MakeCode	(x=0X79412);
	OpDecimal	(x,	1);
	MakeCode	(0X7943C);
	MakeCode	(0X7945C);
	MakeCode	(0X79488);
	MakeCode	(0X794B4);
	MakeCode	(0X794E0);
	MakeCode	(x=0X794F4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X794FE);
	MakeCode	(0X7950A);
	MakeCode	(0X79524);
	MakeCode	(0X79530);
	MakeCode	(0X7954A);
	MakeCode	(x=0X7954E);
	OpDecimal	(x,	1);
	MakeCode	(0X79556);
	MakeCode	(0X79570);
	MakeCode	(0X7957C);
	MakeCode	(0X79596);
	MakeCode	(0X795A2);
	MakeCode	(0X795BC);
	MakeCode	(0X795C8);
	MakeCode	(0X795DE);
	MakeCode	(0X795EA);
	MakeCode	(0X79600);
	MakeCode	(0X7960C);
	MakeCode	(0X79622);
	MakeCode	(0X7962E);
	MakeCode	(0X79644);
	MakeCode	(0X79668);
	MakeCode	(0X79696);
	MakeCode	(0X796D8);
	MakeCode	(0X79708);
	MakeCode	(x=0X79724);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X7972E);
	OpSign		(x,	1);
	MakeCode	(x=0X79738);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7973E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X79744);
	OpStkvar	(x,	0);
	MakeCode	(x=0X79750);
	OpSign		(x,	1);
	MakeCode	(x=0X7975A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X79760);
	OpStkvar	(x,	1);
	MakeCode	(x=0X79766);
	OpStkvar	(x,	0);
	MakeCode	(x=0X79772);
	OpSign		(x,	1);
	MakeCode	(x=0X7977C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X79782);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7978E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7979C);
	OpSign		(x,	1);
	MakeCode	(x=0X797A6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X797B2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X797BA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X797C0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X797C6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X797D2);
	OpSign		(x,	1);
	MakeCode	(x=0X797DC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X797E2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X797E8);
	OpStkvar	(x,	0);
	MakeCode	(0X797F4);
	MakeCode	(0X79826);
	MakeCode	(x=0X7985C);
	OpSign		(x,	1);
	MakeCode	(x=0X7987A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X79884);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7989E);
	OpSign		(x,	1);
	MakeCode	(x=0X798D0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X798D8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X798DC);
	OpStkvar	(x,	0);
	MakeCode	(x=0X798EA);
	OpStkvar	(x,	0);
	MakeCode	(x=0X798F2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X798F6);
	OpStkvar	(x,	0);
	MakeCode	(0X7990A);
	MakeCode	(x=0X79960);
	OpSign		(x,	1);
	MakeCode	(x=0X7996A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X79970);
	OpStkvar	(x,	1);
	MakeCode	(x=0X79976);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7998E);
	OpSign		(x,	1);
	MakeCode	(x=0X799A4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X799AA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X799B0);
	OpStkvar	(x,	0);
	MakeCode	(0X799BC);
	MakeCode	(0X799D2);
}


static Bytes_15(void) {
        auto x;
#define id x

	MakeCode	(0X799E2);
	MakeCode	(0X799F2);
	MakeCode	(0X79A02);
	MakeCode	(0X79A12);
	MakeCode	(0X79A22);
	MakeCode	(0X79A28);
	MakeCode	(x=0X79A3E);
	OpSign		(x,	1);
	MakeCode	(x=0X79A4C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X79A52);
	OpStkvar	(x,	0);
	MakeCode	(x=0X79A6C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X79A72);
	OpStkvar	(x,	0);
	MakeCode	(x=0X79A8A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X79A90);
	OpStkvar	(x,	0);
	MakeCode	(0X79A9E);
	MakeCode	(0X79AB0);
	MakeCode	(0X79AF2);
	MakeCode	(x=0X79B10);
	OpSign		(x,	1);
	MakeCode	(0X79B32);
	MakeCode	(x=0X79B3C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X79B42);
	OpStkvar	(x,	1);
	MakeCode	(0X79B82);
	MakeCode	(x=0X79B92);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X79BFC);
	OpStkvar	(x,	1);
	MakeCode	(0X79C04);
	MakeCode	(x=0X79C72);
	OpStkvar	(x,	1);
	MakeCode	(x=0X79C78);
	OpStkvar	(x,	1);
	MakeCode	(x=0X79C84);
	OpStkvar	(x,	0);
	MakeCode	(0X79C90);
	MakeCode	(0X79CB8);
	MakeCode	(0X79CF0);
	MakeCode	(x=0X79D1E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X79D24);
	OpStkvar	(x,	1);
	MakeCode	(x=0X79D30);
	OpStkvar	(x,	0);
	MakeCode	(0X79D3C);
	MakeCode	(0X79D64);
	MakeCode	(x=0X79D74);
	OpStkvar	(x,	1);
	MakeCode	(x=0X79D7A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X79D86);
	OpStkvar	(x,	0);
	MakeCode	(0X79DCA);
	MakeCode	(0X79DFE);
	MakeCode	(x=0X79E02);
	OpStkvar	(x,	1);
	MakeCode	(0X79E2A);
	MakeCode	(0X79E9E);
	MakeCode	(0X79EBA);
	MakeCode	(0X79ED4);
	MakeCode	(x=0X79F04);
	OpStkvar	(x,	0);
	MakeCode	(0X79F52);
	MakeCode	(0X79F5A);
	MakeCode	(0X79FAC);
	MakeCode	(x=0X79FDE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X79FE4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X79FF0);
	OpStkvar	(x,	0);
	MakeCode	(0X79FF8);
	MakeCode	(0X7A046);
	MakeCode	(0X7A058);
	MakeCode	(x=0X7A060);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X7A07A);
	MakeCode	(0X7A0FE);
	MakeCode	(0X7A10C);
	MakeCode	(0X7A112);
	MakeCode	(0X7A12C);
	MakeCode	(0X7A13C);
	MakeCode	(0X7A142);
	MakeCode	(0X7A16A);
	MakeCode	(x=0X7A176);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X7A1C8);
	MakeCode	(0X7A1FA);
	MakeCode	(x=0X7A242);
	OpStkvar	(x,	0);
	MakeCode	(0X7A256);
	MakeCode	(0X7A2DC);
	MakeCode	(0X7A33C);
	MakeCode	(x=0X7A34C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7A352);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7A358);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7A35E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7A364);
	OpStkvar	(x,	1);
	MakeCode	(0X7A396);
	MakeCode	(x=0X7A3A0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7A3AA);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7A3B4);
	OpStkvar	(x,	0);
	MakeCode	(0X7A3C4);
	MakeCode	(0X7A3D4);
	MakeCode	(x=0X7A3DC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X7A3F4);
	MakeCode	(0X7A3FA);
	MakeCode	(0X7A410);
	MakeCode	(0X7A42E);
	MakeCode	(0X7A432);
	MakeCode	(0X7A464);
	MakeCode	(x=0X7A49A);
	OpStkvar	(x,	0);
	MakeCode	(0X7A4A8);
	MakeName	(0X7A4A8,	"GetGramsPerCylinderViaSpeedDensity");
	MakeCode	(0X7A4C0);
	MakeCode	(0X7A4CE);
	MakeCode	(0X7A4E0);
	MakeCode	(0X7A504);
	MakeCode	(x=0X7A568);
	OpSign		(x,	1);
	MakeCode	(0X7A584);
	MakeCode	(0X7A598);
	MakeCode	(0X7A5B6);
	MakeCode	(x=0X7A5D6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7A5DC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7A5E6);
	OpStkvar	(x,	0);
	MakeCode	(0X7A5FA);
	MakeCode	(0X7A60C);
	MakeCode	(0X7A61E);
	MakeCode	(0X7A62A);
	MakeCode	(x=0X7A65A);
	OpSign		(x,	1);
	MakeCode	(0X7A680);
	MakeCode	(0X7A69E);
	MakeCode	(x=0X7A6A2);
	OpStkvar	(x,	1);
	MakeCode	(0X7A6B8);
	MakeCode	(x=0X7A6C0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7A6CA);
	OpStkvar	(x,	1);
	MakeCode	(0X7A6F2);
	MakeCode	(0X7A70A);
	MakeCode	(x=0X7A722);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7A75A);
	OpStkvar	(x,	0);
	MakeCode	(0X7A782);
	MakeCode	(x=0X7A784);
	OpStkvar	(x,	0);
	MakeCode	(0X7A7A8);
	MakeCode	(x=0X7A7AA);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7A7B2);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7A7CE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7A7D4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7A812);
	OpSign		(x,	1);
	MakeCode	(x=0X7A81E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7A83E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7A86C);
	OpStkvar	(x,	0);
	MakeCode	(0X7A886);
	MakeCode	(0X7A896);
	MakeCode	(0X7A89E);
	MakeCode	(0X7A8BE);
	MakeCode	(0X7A8DC);
	MakeCode	(0X7A8E0);
	MakeCode	(0X7A910);
	MakeCode	(0X7A950);
	MakeCode	(x=0X7A95E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X7A99E);
	MakeCode	(x=0X7A9A8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X7A9B2);
	MakeCode	(x=0X7A9C4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X7A9FC);
	MakeCode	(0X7AA04);
	MakeCode	(0X7AA16);
	MakeCode	(x=0X7AA26);
	OpSign		(x,	1);
	MakeCode	(0X7AA4C);
	MakeCode	(x=0X7AA80);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7AA86);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7AA90);
	OpStkvar	(x,	0);
	MakeCode	(0X7AA9C);
	MakeCode	(0X7AAA8);
	MakeCode	(0X7AB04);
	MakeCode	(0X7AB0E);
	MakeCode	(0X7AB32);
	MakeCode	(0X7AB44);
	MakeCode	(0X7AB4C);
	MakeCode	(x=0X7AB50);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X7AB5A);
	MakeCode	(0X7ABA2);
	MakeCode	(0X7ABC6);
	MakeCode	(0X7ABD8);
	MakeCode	(0X7ABF8);
	MakeCode	(0X7AC00);
	MakeCode	(0X7AC02);
	MakeCode	(0X7AC1A);
	MakeCode	(0X7AC2C);
	MakeCode	(0X7AC34);
	MakeCode	(x=0X7AC3C);
	OpSign		(x,	1);
	MakeCode	(0X7AC80);
	MakeCode	(0X7AC84);
	MakeCode	(0X7AC8A);
	MakeCode	(0X7AC9C);
	MakeCode	(0X7ACAE);
	MakeCode	(0X7ACB4);
	MakeCode	(x=0X7ACC0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7ACC6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7ACCA);
	OpStkvar	(x,	0);
	MakeCode	(0X7ACE6);
	MakeCode	(0X7ACF8);
	MakeCode	(0X7AD24);
	MakeCode	(0X7AD46);
	MakeCode	(0X7AD58);
	MakeCode	(x=0X7AD7E);
	OpSign		(x,	1);
	MakeCode	(0X7AD94);
	MakeCode	(0X7ADBC);
	MakeCode	(x=0X7AE1A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7AE24);
	OpStkvar	(x,	0);
	MakeCode	(0X7AE4C);
	MakeCode	(0X7AE5E);
	MakeCode	(0X7AE82);
	MakeCode	(0X7AEAE);
	MakeCode	(0X7AEC6);
	MakeCode	(0X7AF08);
	MakeCode	(0X7AF2C);
	MakeCode	(0X7AF40);
	MakeCode	(0X7AF7E);
	MakeCode	(0X7AFA0);
	MakeCode	(0X7AFBE);
	MakeCode	(0X7B036);
	MakeCode	(0X7B0BA);
	MakeCode	(0X7B1B0);
	MakeCode	(0X7B248);
	MakeCode	(x=0X7B2B2);
	OpSign		(x,	1);
	MakeCode	(x=0X7B2DE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X7B2EA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7B2F4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7B31E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X7B33A);
	MakeCode	(0X7B37C);
	MakeCode	(0X7B394);
	MakeCode	(0X7B3BE);
	MakeCode	(0X7B3DC);
	MakeCode	(0X7B3EC);
	MakeCode	(0X7B40E);
	MakeCode	(0X7B430);
	MakeCode	(0X7B43A);
	MakeCode	(x=0X7B44C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X7B4AC);
	MakeCode	(0X7B4E2);
	MakeCode	(0X7B4EC);
	MakeCode	(0X7B544);
	MakeCode	(0X7B5A6);
	MakeCode	(0X7B63E);
	MakeCode	(0X7B664);
	MakeCode	(0X7B68E);
	MakeCode	(0X7B6DE);
	MakeCode	(x=0X7B6F8);
	OpSign		(x,	1);
	MakeCode	(0X7B726);
	MakeCode	(0X7B73E);
	MakeCode	(x=0X7B742);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X7B74C);
	MakeCode	(0X7B74E);
	MakeCode	(0X7B750);
	MakeCode	(x=0X7B75A);
	OpDecimal	(x,	0);
	MakeCode	(x=0X7B762);
	OpDecimal	(x,	0);
	MakeCode	(0X7B782);
	MakeCode	(0X7B784);
	MakeCode	(0X7B7B0);
	MakeCode	(0X7B7B8);
	MakeCode	(x=0X7B7C0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X7B7CA);
	MakeCode	(x=0X7B7EA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X7B808);
	MakeCode	(0X7B850);
	MakeCode	(0X7B85C);
	MakeCode	(0X7B896);
	MakeCode	(0X7B8E0);
	MakeCode	(0X7B8E2);
	MakeCode	(0X7B8EA);
	MakeCode	(0X7B8EC);
	MakeCode	(0X7B8F4);
	MakeCode	(0X7B8F6);
	MakeCode	(0X7B902);
	MakeName	(0X7B902,	"GetCoolantTemperature");
	MakeCode	(x=0X7B926);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X7B976);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X7B98E);
	MakeCode	(x=0X7B992);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X7B9B4);
	MakeCode	(0X7B9F8);
	MakeCode	(0X7BA28);
	MakeCode	(x=0X7BA2C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X7BA36);
	MakeCode	(x=0X7BA3C);
	OpDecimal	(x,	1);
	MakeCode	(0X7BA5E);
	MakeCode	(x=0X7BA62);
	OpSign		(x,	1);
	MakeCode	(0X7BA8A);
	MakeCode	(0X7BAD4);
	MakeCode	(0X7BB34);
	MakeCode	(x=0X7BB38);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X7BB54);
	MakeCode	(x=0X7BB58);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X7BB72);
	MakeCode	(x=0X7BB86);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7BB90);
	OpStkvar	(x,	0);
	MakeCode	(0X7BBC4);
	MakeCode	(x=0X7BBC8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X7BBE0);
	MakeCode	(x=0X7BBE4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X7BC0C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7BC16);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7BC34);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7BC3E);
	OpStkvar	(x,	0);
	MakeCode	(0X7BC50);
	MakeCode	(x=0X7BC70);
	OpSign		(x,	1);
	MakeCode	(x=0X7BCCA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X7BD1A);
	MakeCode	(0X7BD3C);
	MakeCode	(0X7BD64);
	MakeCode	(0X7BD78);
	MakeCode	(0X7BD8E);
	MakeCode	(0X7BDA0);
	MakeCode	(0X7BDBC);
	MakeCode	(0X7BDD4);
	MakeCode	(0X7BDD8);
	MakeCode	(0X7BE08);
	MakeCode	(0X7BE2A);
	MakeCode	(0X7BE38);
	MakeCode	(0X7BE5C);
	MakeCode	(0X7BE90);
	MakeCode	(0X7BEB0);
	MakeCode	(0X7BEC8);
	MakeCode	(0X7BEDE);
	MakeCode	(0X7BEF4);
	MakeCode	(0X7BF02);
	MakeCode	(0X7BF18);
	MakeCode	(0X7BF26);
	MakeCode	(0X7BF6A);
	MakeCode	(0X7BF8C);
	MakeCode	(0X7BFEC);
	MakeCode	(0X7C024);
	MakeCode	(0X7C050);
	MakeCode	(0X7C0DC);
	MakeCode	(0X7C0EE);
	MakeCode	(0X7C100);
	MakeCode	(x=0X7C112);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7C11E);
	OpStkvar	(x,	0);
	MakeCode	(0X7C136);
	MakeCode	(0X7C184);
	MakeCode	(0X7C190);
	MakeCode	(0X7C1D2);
	MakeCode	(0X7C1EE);
	MakeCode	(x=0X7C1F2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7C1F8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7C1FE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7C204);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7C20A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7C210);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7C216);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7C21C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7C222);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7C228);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7C22E);
	OpStkvar	(x,	1);
	MakeCode	(0X7C23C);
	MakeCode	(x=0X7C244);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X7C24E);
	MakeCode	(x=0X7C252);
	OpDecimal	(x,	0);
	MakeCode	(0X7C26A);
	MakeCode	(0X7C28E);
	MakeCode	(0X7C298);
	MakeCode	(0X7C2AE);
	MakeCode	(0X7C2C0);
	MakeCode	(0X7C2CE);
	MakeCode	(0X7C2E6);
	MakeCode	(0X7C2E8);
	MakeCode	(x=0X7C2F0);
	OpSign		(x,	1);
	MakeCode	(x=0X7C320);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7C32A);
	OpStkvar	(x,	0);
	MakeCode	(0X7C346);
	MakeCode	(x=0X7C358);
	OpSign		(x,	1);
	MakeCode	(x=0X7C360);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7C36C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7C372);
	OpStkvar	(x,	0);
	MakeCode	(0X7C3C0);
	MakeCode	(x=0X7C3D0);
	OpStkvar	(x,	0);
	MakeCode	(0X7C3E6);
	MakeCode	(0X7C3FE);
	MakeCode	(0X7C41E);
	MakeCode	(0X7C448);
	MakeCode	(0X7C44A);
	MakeCode	(x=0X7C450);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X7C470);
	MakeCode	(0X7C482);
	MakeCode	(0X7C498);
	MakeCode	(x=0X7C4D4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X7C4FC);
	OpSign		(x,	1);
	MakeCode	(0X7C51E);
	MakeCode	(0X7C53A);
	MakeCode	(x=0X7C56C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7C572);
	OpStkvar	(x,	1);
	MakeCode	(0X7C594);
	MakeCode	(x=0X7C59E);
	OpSign		(x,	1);
	MakeCode	(x=0X7C5DC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7C5E2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7C5E8);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7C5EC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7C5FC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7C606);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7C612);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7C622);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7C62A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7C646);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X7C652);
	MakeCode	(x=0X7C65C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X7C670);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X7C696);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7C69A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7C69E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X7C6A6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7C6AA);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7C6AE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7C6B4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7C6BA);
	OpStkvar	(x,	0);
	MakeCode	(0X7C6C8);
	MakeCode	(0X7C6DC);
	MakeCode	(0X7C71C);
	MakeCode	(0X7C750);
	MakeCode	(0X7C79A);
	MakeCode	(0X7C7E8);
	MakeCode	(0X7C81A);
	MakeCode	(0X7C822);
	MakeCode	(0X7C832);
	MakeCode	(x=0X7C836);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X7C840);
	MakeCode	(0X7C848);
	MakeCode	(0X7C850);
	MakeCode	(0X7C870);
	MakeCode	(0X7C88C);
	MakeCode	(0X7C892);
	MakeCode	(0X7C8A2);
	MakeCode	(0X7C8D6);
	MakeCode	(0X7C900);
	MakeCode	(0X7C91C);
	MakeCode	(0X7C93A);
	MakeCode	(0X7C940);
	MakeCode	(0X7CAB0);
	MakeCode	(0X7CAC0);
	MakeCode	(0X7CAD2);
	MakeCode	(x=0X7CAD6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X7CAE0);
	MakeCode	(x=0X7CAE2);
	OpDecimal	(x,	0);
	MakeCode	(x=0X7CAE6);
	OpDecimal	(x,	0);
	MakeCode	(0X7CAF4);
	MakeCode	(x=0X7CAF8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X7CB02);
	MakeCode	(0X7CB3E);
	MakeCode	(0X7CB44);
	MakeCode	(0X7CBC0);
	MakeCode	(0X7CBC2);
	MakeCode	(0X7CC0C);
	MakeCode	(0X7CC3A);
	MakeCode	(x=0X7CC7A);
	OpDecimal	(x,	0);
	MakeCode	(0X7CCA6);
	MakeCode	(x=0X7CCAE);
	OpDecimal	(x,	1);
	MakeCode	(0X7CCBC);
	MakeCode	(0X7CCEC);
	MakeCode	(0X7CD24);
	MakeCode	(0X7CD44);
	MakeCode	(0X7CD8E);
	MakeCode	(0X7CDA4);
	MakeCode	(0X7CDC4);
	MakeCode	(0X7CDD2);
	MakeCode	(0X7CDE0);
	MakeCode	(0X7CE2A);
	MakeCode	(0X7CE40);
	MakeCode	(0X7CE4C);
	MakeCode	(0X7CE6A);
	MakeCode	(0X7CE90);
	MakeCode	(x=0X7CEB6);
	OpSign		(x,	1);
	MakeCode	(0X7CEE6);
	MakeCode	(0X7CEF6);
	MakeCode	(0X7CF36);
	MakeCode	(0X7CF5C);
	MakeCode	(0X7CF6A);
	MakeCode	(0X7CF80);
	MakeCode	(x=0X7CFA6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7CFB0);
	OpStkvar	(x,	0);
	MakeCode	(0X7CFBE);
	MakeCode	(x=0X7CFDA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7CFE0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7CFE6);
	OpStkvar	(x,	0);
	MakeCode	(0X7CFF8);
	MakeCode	(0X7D03C);
	MakeCode	(0X7D070);
	MakeCode	(0X7D082);
	MakeCode	(0X7D0BE);
	MakeCode	(0X7D102);
	MakeCode	(x=0X7D168);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X7D178);
	MakeCode	(0X7D17E);
	MakeCode	(0X7D1B4);
	MakeCode	(0X7D1BA);
	MakeCode	(0X7D1D8);
	MakeCode	(0X7D1EA);
	MakeCode	(x=0X7D200);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X7D21A);
	MakeCode	(0X7D222);
	MakeCode	(0X7D23E);
	MakeCode	(0X7D246);
	MakeCode	(0X7D262);
	MakeCode	(0X7D2A6);
	MakeCode	(0X7D2D4);
	MakeCode	(0X7D300);
	MakeCode	(0X7D332);
	MakeCode	(0X7D368);
	MakeCode	(0X7D478);
	MakeCode	(0X7D48A);
	MakeCode	(x=0X7D490);
	OpSign		(x,	1);
	MakeCode	(x=0X7D4DC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7D4E6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7D508);
	OpSign		(x,	1);
	MakeCode	(x=0X7D54C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7D556);
	OpStkvar	(x,	0);
	MakeCode	(0X7D56A);
	MakeCode	(0X7D584);
	MakeCode	(0X7D5AC);
	MakeCode	(0X7D5C4);
	MakeCode	(0X7D5EA);
	MakeCode	(0X7D614);
	MakeCode	(0X7D624);
	MakeCode	(0X7D634);
	MakeCode	(0X7D66C);
	MakeCode	(x=0X7D670);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X7D67A);
	OpDecimal	(x,	0);
	MakeCode	(x=0X7D69A);
	OpDecimal	(x,	0);
	MakeCode	(0X7D6F4);
	MakeCode	(0X7D6F6);
	MakeStr		(0X7D71E,	0X7D736);
	MakeName	(0X7D71E,	"aB8lB8lsb8lB8lB");
	MakeCode	(0X7D736);
	MakeCode	(0X7D75A);
	MakeCode	(0X7D784);
	MakeCode	(0X7D78C);
	MakeCode	(0X7D7AA);
	MakeCode	(0X7D7DC);
	MakeCode	(0X7D85E);
	MakeCode	(0X7D888);
	MakeCode	(0X7D8BC);
	MakeCode	(0X7D8D8);
	MakeCode	(0X7D8E0);
	MakeCode	(0X7D900);
	MakeCode	(0X7D91C);
	MakeCode	(0X7D93C);
	MakeCode	(0X7D97A);
	MakeCode	(0X7D988);
	MakeCode	(0X7D996);
	MakeCode	(0X7D9AC);
	MakeCode	(0X7D9BE);
	MakeCode	(0X7DA38);
	MakeCode	(0X7DA48);
	MakeCode	(0X7DA72);
	MakeCode	(0X7DA86);
	MakeCode	(0X7DA9E);
	MakeCode	(0X7DAC8);
	MakeCode	(0X7DAD8);
	MakeCode	(x=0X7DB12);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X7DB24);
	MakeCode	(x=0X7DB64);
	OpSign		(x,	1);
	MakeCode	(x=0X7DBC6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7DBD0);
	OpStkvar	(x,	0);
	MakeCode	(0X7DBE2);
	MakeCode	(0X7DC2E);
	MakeCode	(0X7DC3E);
	MakeCode	(0X7DC5E);
	MakeCode	(x=0X7DC70);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7DC7A);
	OpStkvar	(x,	0);
	MakeCode	(0X7DC8C);
	MakeCode	(0X7DCB4);
	MakeCode	(0X7DCE8);
	MakeCode	(x=0X7DCEE);
	OpSign		(x,	1);
	MakeCode	(0X7DD04);
	MakeCode	(0X7DD18);
	MakeCode	(0X7DD46);
	MakeCode	(x=0X7DD62);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7DD6C);
	OpStkvar	(x,	0);
	MakeCode	(0X7DD80);
	MakeCode	(0X7DD88);
	MakeCode	(0X7DDAE);
	MakeCode	(0X7DDBC);
	MakeCode	(0X7DDF4);
	MakeCode	(0X7DDFA);
	MakeCode	(0X7DE1C);
	MakeCode	(0X7DE2E);
	MakeCode	(0X7DE48);
	MakeCode	(0X7DE52);
	MakeCode	(x=0X7DE88);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X7DEA2);
	MakeCode	(0X7DEAE);
	MakeCode	(0X7DEEA);
	MakeCode	(0X7DEFE);
	MakeCode	(0X7DF18);
	MakeCode	(0X7DF2E);
	MakeCode	(0X7DF42);
	MakeCode	(0X7DF6E);
	MakeCode	(x=0X7DF86);
	OpStkvar	(x,	1);
	MakeCode	(0X7DF90);
	MakeCode	(0X7DFBA);
	MakeCode	(x=0X7DFC4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X7E000);
	MakeCode	(x=0X7E010);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X7E04C);
	MakeCode	(0X7E064);
	MakeCode	(0X7E072);
	MakeCode	(0X7E078);
	MakeCode	(x=0X7E0BC);
	OpSign		(x,	1);
	MakeCode	(0X7E0D6);
	MakeCode	(0X7E0E4);
	MakeCode	(0X7E0FC);
	MakeCode	(0X7E144);
	MakeCode	(0X7E168);
	MakeCode	(0X7E174);
	MakeCode	(0X7E1A0);
	MakeCode	(0X7E1F2);
	MakeCode	(0X7E210);
	MakeCode	(0X7E21A);
	MakeCode	(x=0X7E21E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X7E23A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X7E24E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7E252);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X7E266);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X7E292);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7E296);
	OpStkvar	(x,	0);
	MakeCode	(0X7E2E2);
	MakeCode	(0X7E334);
	MakeCode	(x=0X7E342);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7E348);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7E34E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7E358);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7E35E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7E364);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7E36E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X7E382);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7E386);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X7E39A);
	OpStkvar	(x,	1);
	MakeCode	(0X7E3F6);
	MakeCode	(x=0X7E402);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7E406);
	OpStkvar	(x,	0);
	MakeCode	(0X7E416);
	MakeCode	(0X7E436);
	MakeCode	(0X7E450);
	MakeCode	(0X7E464);
	MakeCode	(0X7E46E);
	MakeCode	(0X7E488);
	MakeCode	(0X7E48C);
	MakeCode	(0X7E4B6);
	MakeCode	(0X7E4C0);
	MakeCode	(0X7E4DA);
	MakeCode	(0X7E4DE);
	MakeCode	(0X7E508);
	MakeCode	(0X7E512);
	MakeCode	(0X7E528);
	MakeCode	(0X7E52C);
	MakeCode	(0X7E582);
	MakeCode	(0X7E5A8);
	MakeCode	(0X7E5E4);
	MakeCode	(0X7E5FC);
	MakeCode	(x=0X7E638);
	OpStkvar	(x,	1);
	MakeCode	(0X7E662);
	MakeCode	(0X7E680);
	MakeCode	(0X7E6A8);
	MakeCode	(0X7E6DA);
	MakeCode	(0X7E6E8);
	MakeCode	(0X7E730);
	MakeCode	(x=0X7E776);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X7E780);
	MakeCode	(0X7E7AC);
	MakeCode	(0X7E7CA);
	MakeCode	(0X7E7E6);
	MakeCode	(0X7E800);
	MakeCode	(0X7E812);
	MakeCode	(0X7E83E);
	MakeCode	(0X7E860);
	MakeCode	(0X7E87E);
	MakeCode	(0X7E890);
	MakeCode	(0X7E89E);
	MakeCode	(0X7E8EA);
	MakeCode	(0X7E900);
	MakeCode	(0X7E914);
	MakeCode	(0X7E926);
	MakeCode	(x=0X7E936);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X7E940);
	OpDecimal	(x,	0);
	MakeCode	(x=0X7E950);
	OpDecimal	(x,	0);
	MakeCode	(0X7E994);
	MakeCode	(0X7E9A6);
	MakeCode	(0X7E9B8);
	MakeCode	(0X7E9D4);
	MakeCode	(0X7EA44);
	MakeCode	(0X7EA66);
	MakeCode	(x=0X7EACC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X7EAE4);
	OpDecimal	(x,	0);
	MakeCode	(0X7EB1C);
	MakeCode	(x=0X7EB24);
	OpDecimal	(x,	0);
	MakeCode	(0X7EB66);
	MakeCode	(0X7EBAC);
	MakeCode	(0X7EBFC);
	MakeCode	(0X7EC22);
	MakeCode	(0X7EC70);
	MakeCode	(0X7EC80);
	MakeCode	(0X7EC86);
	MakeCode	(0X7EC98);
	MakeCode	(0X7ECB4);
	MakeCode	(0X7ECF4);
	MakeCode	(0X7ED38);
	MakeCode	(0X7ED80);
	MakeCode	(0X7EDBE);
	MakeCode	(0X7EE32);
	MakeCode	(x=0X7EE36);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X7EE7E);
	MakeCode	(0X7EE9E);
	MakeCode	(0X7EEE6);
	MakeCode	(0X7EEEC);
	MakeCode	(0X7EF10);
	MakeCode	(0X7EF20);
	MakeCode	(x=0X7EF38);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X7EF56);
	MakeCode	(0X7EFB8);
	MakeCode	(0X7EFC4);
	MakeCode	(0X7EFFA);
	MakeCode	(0X7F000);
	MakeCode	(0X7F07C);
	MakeCode	(0X7F09A);
	MakeCode	(0X7F0E4);
	MakeCode	(0X7F102);
	MakeCode	(0X7F11A);
	MakeCode	(0X7F12C);
	MakeCode	(0X7F13C);
	MakeCode	(0X7F14E);
	MakeCode	(x=0X7F15A);
	OpSign		(x,	1);
	MakeCode	(x=0X7F166);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X7F170);
	MakeCode	(x=0X7F174);
	OpDecimal	(x,	0);
	MakeCode	(0X7F184);
	MakeCode	(x=0X7F1D6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X7F1F4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X7F20C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X7F220);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X7F25E);
	OpDecimal	(x,	0);
	MakeCode	(x=0X7F2C4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X7F2E2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X7F2FA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X7F30E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X7F35C);
	OpDecimal	(x,	0);
	MakeCode	(x=0X7F36C);
	OpSign		(x,	1);
	MakeCode	(0X7F39E);
	MakeCode	(0X7F3E0);
	MakeCode	(x=0X7F412);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7F416);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7F41A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7F424);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7F428);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7F438);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7F43C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7F440);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7F44A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7F44E);
	OpStkvar	(x,	0);
	MakeCode	(0X7F476);
	MakeCode	(0X7F48C);
	MakeCode	(0X7F4A2);
	MakeCode	(0X7F4CA);
	MakeCode	(x=0X7F4DA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X7F510);
	MakeCode	(x=0X7F57A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X7F596);
	MakeCode	(0X7F5AA);
	MakeCode	(x=0X7F5E2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X7F5FE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X7F616);
	MakeCode	(x=0X7F61E);
	OpSign		(x,	1);
	MakeCode	(x=0X7F66C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7F676);
	OpStkvar	(x,	0);
	MakeCode	(0X7F68C);
	MakeCode	(x=0X7F6A8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7F6B2);
	OpStkvar	(x,	0);
	MakeCode	(0X7F6C6);
	MakeCode	(x=0X7F6E8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7F6F2);
	OpStkvar	(x,	0);
	MakeCode	(0X7F6F8);
	MakeCode	(x=0X7F710);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7F71A);
	OpStkvar	(x,	0);
	MakeCode	(0X7F722);
	MakeCode	(x=0X7F732);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7F73C);
	OpStkvar	(x,	0);
	MakeCode	(0X7F744);
	MakeCode	(0X7F7A8);
	MakeCode	(0X7F7E6);
	MakeCode	(0X7F7FE);
	MakeCode	(0X7F842);
	MakeCode	(0X7F89C);
	MakeCode	(0X7F8E8);
	MakeCode	(0X7F908);
	MakeCode	(x=0X7F966);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X7F9B0);
	MakeCode	(0X7F9E4);
	MakeCode	(x=0X7FA3E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X7FA68);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X7FA78);
	MakeCode	(0X7FAB4);
	MakeCode	(0X7FAC4);
	MakeCode	(x=0X7FAE2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X7FAFE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7FB08);
	OpStkvar	(x,	0);
	MakeCode	(0X7FB26);
	MakeCode	(0X7FB54);
	MakeCode	(0X7FB94);
	MakeCode	(0X7FBA4);
	MakeCode	(x=0X7FBF8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X7FC78);
	MakeCode	(0X7FC8E);
	MakeCode	(x=0X7FC94);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X7FCBE);
	MakeCode	(0X7FCE2);
	MakeCode	(0X7FD06);
	MakeCode	(0X7FD1C);
	MakeName	(0X7FD1C,	"GetFuelLevel");
	MakeCode	(0X7FD7C);
	MakeCode	(0X7FDB0);
	MakeCode	(0X7FDF2);
	MakeCode	(0X7FE2A);
	MakeCode	(0X7FE4C);
	MakeCode	(x=0X7FE6E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X7FE8C);
	MakeCode	(0X7FEA2);
	MakeCode	(x=0X7FEC0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X7FEDC);
	MakeCode	(0X7FF46);
	MakeCode	(x=0X7FF5E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X7FF68);
	OpDecimal	(x,	0);
	MakeCode	(0X7FF92);
	MakeCode	(0X7FFB8);
	MakeCode	(0X7FFE0);
	MakeCode	(0X7FFF4);
	MakeCode	(0X7FFF6);
	MakeCode	(0X8000C);
	MakeCode	(0X80012);
	MakeCode	(0X8003E);
	MakeCode	(0X8005A);
	MakeCode	(x=0X8006A);
	OpSign		(x,	1);
	MakeCode	(x=0X8008E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X800A4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X800DA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X800F0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X80100);
	MakeCode	(x=0X8011C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X80120);
	OpStkvar	(x,	0);
	MakeCode	(x=0X80124);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8012E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X8014A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X8014E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X80152);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8015C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X8016C);
	OpSign		(x,	1);
	MakeCode	(0X8018C);
	MakeCode	(0X801BA);
	MakeCode	(x=0X801C8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X801CC);
	OpStkvar	(x,	0);
	MakeCode	(x=0X801D0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X801DA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X801DE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8020E);
	OpSign		(x,	1);
	MakeCode	(x=0X80224);
	OpStkvar	(x,	1);
	MakeCode	(x=0X80228);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8022C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X80236);
	OpStkvar	(x,	1);
	MakeCode	(x=0X8023A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X80270);
	OpStkvar	(x,	1);
	MakeCode	(x=0X80274);
	OpStkvar	(x,	0);
	MakeCode	(x=0X80278);
	OpStkvar	(x,	0);
	MakeCode	(x=0X80282);
	OpStkvar	(x,	1);
	MakeCode	(x=0X80286);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8029A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X8029E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X802A2);
	OpStkvar	(x,	0);
	MakeCode	(x=0X802AC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X802B0);
	OpStkvar	(x,	0);
	MakeCode	(0X802BE);
	MakeCode	(0X802DE);
	MakeCode	(x=0X802E4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X80302);
	MakeCode	(x=0X80318);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X80338);
	MakeCode	(0X8035A);
	MakeCode	(0X80362);
	MakeCode	(0X803A4);
	MakeCode	(0X8042E);
	MakeCode	(0X80440);
	MakeCode	(0X80462);
	MakeCode	(x=0X8047E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X80488);
	MakeCode	(0X804C0);
	MakeCode	(0X804C6);
	MakeCode	(0X804E4);
	MakeCode	(0X804F4);
	MakeCode	(0X805C4);
	MakeCode	(0X805F6);
	MakeCode	(0X805FC);
	MakeCode	(0X8061A);
	MakeCode	(0X8062A);
	MakeCode	(0X806C4);
	MakeCode	(0X80714);
	MakeCode	(0X80728);
	MakeCode	(0X8075A);
	MakeCode	(0X80770);
	MakeCode	(0X807E0);
	MakeCode	(0X8081E);
	MakeCode	(0X8087E);
	MakeCode	(0X808DC);
	MakeCode	(0X808E2);
	MakeCode	(0X8090E);
	MakeCode	(0X8093C);
	MakeCode	(0X80960);
	MakeCode	(0X80990);
	MakeCode	(0X809A6);
	MakeCode	(0X809B0);
	MakeCode	(0X809E4);
	MakeCode	(0X80A36);
	MakeCode	(0X80A68);
	MakeCode	(0X80A70);
	MakeCode	(x=0X80A78);
	OpSign		(x,	1);
	MakeCode	(x=0X80A80);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X80A84);
	OpStkvar	(x,	0);
	MakeCode	(x=0X80A90);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X80ABC);
	OpStkvar	(x,	0);
	MakeCode	(0X80ACE);
	MakeCode	(0X80AE0);
	MakeCode	(0X80B10);
	MakeCode	(x=0X80B1C);
	OpSign		(x,	1);
	MakeCode	(x=0X80B34);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X80B38);
	OpStkvar	(x,	0);
	MakeCode	(x=0X80B44);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X80B56);
	OpStkvar	(x,	0);
	MakeCode	(0X80B72);
	MakeCode	(x=0X80B94);
	OpSign		(x,	1);
	MakeCode	(x=0X80BAA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X80BC6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X80BF0);
	MakeCode	(0X80C04);
	MakeCode	(0X80C1C);
	MakeCode	(0X80C20);
	MakeCode	(x=0X80C52);
	OpStkvar	(x,	1);
	MakeCode	(x=0X80C5C);
	OpStkvar	(x,	0);
	MakeCode	(0X80C6E);
	MakeCode	(0X80C98);
	MakeCode	(0X80CF6);
	MakeCode	(0X80D12);
	MakeCode	(0X80D24);
	MakeCode	(0X80D36);
	MakeCode	(0X80D50);
	MakeCode	(0X80D54);
	MakeCode	(0X80D68);
	MakeCode	(0X80D8A);
	MakeCode	(0X80DA8);
	MakeCode	(0X80DBA);
	MakeCode	(0X80DCC);
	MakeCode	(0X80DE4);
	MakeCode	(0X80DE8);
	MakeCode	(0X80E22);
	MakeCode	(0X80E3C);
	MakeCode	(x=0X80E48);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X80E70);
	MakeCode	(0X80E8C);
	MakeCode	(0X80EA2);
	MakeCode	(0X80EDA);
	MakeCode	(0X80F00);
	MakeCode	(x=0X80F06);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X80F2C);
	MakeCode	(0X80F42);
	MakeCode	(x=0X80F7C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X80F86);
	OpStkvar	(x,	0);
	MakeCode	(0X80FDE);
	MakeCode	(0X80FEE);
	MakeCode	(0X81004);
	MakeCode	(0X8100C);
	MakeCode	(0X81030);
	MakeCode	(0X8103E);
	MakeCode	(x=0X81060);
	OpSign		(x,	1);
	MakeCode	(x=0X81066);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X81072);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X81096);
	MakeCode	(0X810B8);
	MakeCode	(0X810CA);
	MakeCode	(x=0X810E4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X810EE);
	OpStkvar	(x,	0);
	MakeCode	(0X81122);
	MakeCode	(0X8113E);
	MakeCode	(0X81146);
	MakeCode	(0X8115C);
	MakeCode	(0X8116E);
	MakeCode	(x=0X81188);
	OpStkvar	(x,	1);
	MakeCode	(x=0X81192);
	OpStkvar	(x,	0);
	MakeCode	(0X811A2);
	MakeCode	(0X811E4);
	MakeCode	(0X811FA);
	MakeCode	(0X8120A);
	MakeCode	(x=0X8120E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X81218);
	MakeCode	(0X81248);
	MakeCode	(x=0X8124C);
	OpDecimal	(x,	0);
	MakeCode	(x=0X812CA);
	OpDecimal	(x,	0);
	MakeCode	(x=0X812CE);
	OpDecimal	(x,	0);
	MakeCode	(0X81344);
	MakeCode	(x=0X8134C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X81356);
	MakeCode	(0X813BE);
	MakeCode	(0X813CE);
	MakeCode	(0X813E8);
	MakeCode	(x=0X813EA);
	OpDecimal	(x,	0);
	MakeCode	(0X8141C);
	MakeCode	(x=0X81470);
	OpSign		(x,	1);
	MakeCode	(x=0X8147A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X81480);
	OpStkvar	(x,	0);
	MakeCode	(x=0X814A6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X814BA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X814CA);
	OpStkvar	(x,	0);
	MakeCode	(x=0X814E0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8151A);
	OpStkvar	(x,	1);
	MakeCode	(0X8152A);
	MakeCode	(x=0X8153E);
	OpStkvar	(x,	1);
	MakeCode	(0X8156C);
	MakeCode	(0X81572);
	MakeCode	(x=0X815F6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X815FE);
	OpStkvar	(x,	0);
	MakeCode	(0X81612);
	MakeCode	(x=0X81650);
	OpStkvar	(x,	1);
	MakeCode	(0X81676);
	MakeCode	(0X81686);
	MakeCode	(x=0X8168E);
	OpStkvar	(x,	1);
	MakeCode	(0X81696);
	MakeCode	(x=0X81698);
	OpStkvar	(x,	0);
	MakeCode	(x=0X816AA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X816B6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X816BC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X816D0);
	OpSign		(x,	1);
	MakeCode	(x=0X816FA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X81700);
	OpStkvar	(x,	1);
	MakeCode	(x=0X81706);
	OpStkvar	(x,	1);
	MakeCode	(x=0X8170C);
	OpStkvar	(x,	1);
	MakeCode	(0X81726);
	MakeCode	(x=0X8173A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X8173E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X81742);
	OpStkvar	(x,	1);
	MakeCode	(x=0X81746);
	OpStkvar	(x,	1);
	MakeCode	(0X81752);
	MakeCode	(x=0X81756);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8175A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X81768);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8177A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8178C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8179E);
	OpStkvar	(x,	0);
	MakeCode	(0X817BC);
	MakeCode	(x=0X81826);
	OpStkvar	(x,	1);
	MakeCode	(0X81836);
	MakeCode	(x=0X8184A);
	OpStkvar	(x,	1);
	MakeCode	(0X8187C);
	MakeCode	(0X8189A);
	MakeCode	(0X818AA);
	MakeCode	(x=0X818AE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X818C8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X818F0);
	MakeCode	(0X81924);
	MakeCode	(0X8196A);
	MakeCode	(x=0X8197E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X8198A);
	OpStkvar	(x,	1);
	MakeCode	(0X819C2);
	MakeCode	(0X81A14);
	MakeCode	(0X81A56);
	MakeCode	(0X81A88);
	MakeCode	(0X81AAC);
	MakeCode	(0X81AD0);
	MakeCode	(0X81AF4);
	MakeCode	(0X81AFA);
	MakeCode	(0X81B3C);
	MakeCode	(0X81B72);
	MakeCode	(0X81B7A);
	MakeCode	(0X81B86);
	MakeCode	(0X81B8E);
	MakeCode	(0X81B9A);
	MakeCode	(0X81BA2);
	MakeCode	(0X81BAE);
	MakeCode	(0X81BBA);
	MakeCode	(0X81BC0);
	MakeCode	(x=0X81BC2);
	OpSign		(x,	1);
	MakeCode	(0X81C76);
	MakeCode	(x=0X81CFC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X81D04);
	OpStkvar	(x,	0);
	MakeCode	(x=0X81D1A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X81D1E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X81D24);
	OpStkvar	(x,	1);
	MakeCode	(x=0X81D2A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X81D34);
	OpStkvar	(x,	0);
	MakeCode	(x=0X81D4A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X81D4E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X81D54);
	OpStkvar	(x,	1);
	MakeCode	(x=0X81D5A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X81D60);
	OpStkvar	(x,	1);
	MakeCode	(x=0X81D66);
	OpStkvar	(x,	0);
	MakeCode	(x=0X81D6C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X81D72);
	OpStkvar	(x,	0);
	MakeCode	(x=0X81E20);
	OpSign		(x,	1);
	MakeCode	(x=0X81E28);
	OpStkvar	(x,	0);
	MakeCode	(x=0X81E36);
	OpStkvar	(x,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X81E3C);
	OpStkvar	(x,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X81E42);
	OpStkvar	(x,	1);
	MakeCode	(x=0X81E48);
	OpStkvar	(x,	1);
	MakeCode	(x=0X81E4E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X81E54);
	OpStkvar	(x,	0);
	MakeCode	(x=0X81E62);
	OpStkvar	(x,	1);
	MakeCode	(x=0X81E68);
	OpStkvar	(x,	1);
	MakeCode	(x=0X81E6C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X81E74);
	OpStkvar	(x,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X81E7A);
	OpStkvar	(x,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X81E80);
	OpStkvar	(x,	1);
	MakeCode	(x=0X81E86);
	OpStkvar	(x,	1);
	MakeCode	(x=0X81E8C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X81E96);
	OpStkvar	(x,	0);
	MakeCode	(x=0X81EA2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X81EA8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X81EAC);
	OpStkvar	(x,	0);
	MakeCode	(x=0X81EB2);
	OpStkvar	(x,	0);
	MakeCode	(x=0X81EB6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X81EBA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X81EC4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X81ED0);
	OpStkvar	(x,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X81ED6);
	OpStkvar	(x,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X81EDC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X81EE2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X81EE8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X81EEE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X81F00);
	OpStkvar	(x,	1);
	MakeCode	(x=0X81F06);
	OpStkvar	(x,	1);
	MakeCode	(x=0X81F0A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X81F12);
	OpStkvar	(x,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X81F18);
	OpStkvar	(x,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X81F1E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X81F24);
	OpStkvar	(x,	1);
	MakeCode	(x=0X81F2A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X81F34);
	OpStkvar	(x,	0);
	MakeCode	(x=0X81F44);
	OpStkvar	(x,	1);
	MakeCode	(x=0X81F4A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X81F4E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X81F54);
	OpStkvar	(x,	0);
	MakeCode	(x=0X81F58);
	OpStkvar	(x,	1);
	MakeCode	(x=0X81F5C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X81F66);
	OpStkvar	(x,	0);
	MakeCode	(0X81F74);
	MakeCode	(x=0X81FA6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X81FAE);
	MakeCode	(0X81FB4);
	MakeCode	(0X81FBC);
	MakeCode	(0X81FCE);
	MakeCode	(0X82002);
	MakeCode	(x=0X8200A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X82012);
	MakeCode	(0X82018);
	MakeCode	(0X8201A);
	MakeCode	(0X82046);
	MakeCode	(0X82072);
	MakeCode	(0X8207A);
	MakeCode	(0X82082);
	MakeCode	(0X82088);
	MakeCode	(x=0X8208A);
	OpSign		(x,	1);
	MakeCode	(x=0X82094);
	OpStkvar	(x,	0);
	MakeCode	(x=0X820A2);
	OpStkvar	(x,	0);
	MakeCode	(x=0X820AA);
	OpStkvar	(x,	0);
	MakeCode	(x=0X820B4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X820BE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X820CE);
	OpSign		(x,	1);
	MakeCode	(x=0X820D8);
	OpStkvar	(x,	0);
	MakeCode	(x=0X820DE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X820EC);
	OpStkvar	(x,	0);
	MakeCode	(0X8211E);
	MakeCode	(x=0X8212A);
	OpSign		(x,	1);
	MakeCode	(x=0X82134);
	OpStkvar	(x,	0);
	MakeCode	(x=0X82140);
	OpStkvar	(x,	0);
	MakeCode	(x=0X82154);
	OpStkvar	(x,	0);
	MakeCode	(0X8216E);
	MakeCode	(x=0X82178);
	OpSign		(x,	1);
	MakeCode	(x=0X82186);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8218A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X82192);
	OpStkvar	(x,	1);
	MakeCode	(x=0X82196);
	OpStkvar	(x,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X821A0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X821A4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X821AA);
	OpStkvar	(x,	0);
	MakeCode	(x=0X821B2);
	OpStkvar	(x,	0);
	MakeCode	(x=0X821C4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X821D8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X821DC);
	OpStkvar	(x,	0);
	MakeCode	(x=0X821E0);
	OpStkvar	(x,	0);
	MakeCode	(0X82202);
	MakeCode	(x=0X8220C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X82210);
	OpStkvar	(x,	0);
	MakeCode	(x=0X82220);
	OpStkvar	(x,	0);
	MakeCode	(x=0X82230);
	OpStkvar	(x,	0);
	MakeCode	(x=0X82234);
	OpStkvar	(x,	1);
	MakeCode	(x=0X8223A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X8223E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X82242);
	OpStkvar	(x,	1);
	MakeCode	(x=0X82248);
	OpStkvar	(x,	1);
	MakeCode	(x=0X8224E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X82252);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8225E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X82262);
	OpStkvar	(x,	0);
	MakeCode	(x=0X82266);
	OpStkvar	(x,	0);
	MakeCode	(x=0X82272);
	OpStkvar	(x,	1);
	MakeCode	(x=0X82276);
	OpStkvar	(x,	0);
	MakeCode	(x=0X82284);
	OpStkvar	(x,	0);
	MakeCode	(x=0X82288);
	OpStkvar	(x,	1);
	MakeCode	(x=0X8228E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X82294);
	OpStkvar	(x,	0);
	MakeCode	(x=0X82298);
	OpStkvar	(x,	1);
	MakeCode	(x=0X8229E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X822A2);
	OpStkvar	(x,	0);
	MakeCode	(x=0X822A6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X822B2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X822B6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X822BA);
	OpStkvar	(x,	0);
	MakeCode	(x=0X822C6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X822D0);
	OpStkvar	(x,	0);
	MakeCode	(0X822DA);
	MakeCode	(x=0X822DC);
	OpStkvar	(x,	0);
	MakeCode	(x=0X822F0);
	OpSign		(x,	1);
	MakeCode	(x=0X82304);
	OpStkvar	(x,	0);
	MakeCode	(x=0X82310);
	OpStkvar	(x,	0);
	MakeCode	(x=0X82318);
	OpStkvar	(x,	0);
	MakeCode	(x=0X82322);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8232C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8233A);
	OpSign		(x,	1);
	MakeCode	(x=0X82350);
	OpStkvar	(x,	1);
	MakeCode	(x=0X82356);
	OpStkvar	(x,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X8235C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X82362);
	OpStkvar	(x,	0);
	MakeCode	(x=0X82366);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8236E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X82372);
	OpStkvar	(x,	0);
	MakeCode	(x=0X82380);
	OpStkvar	(x,	1);
	MakeCode	(x=0X82386);
	OpStkvar	(x,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X8238C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X82392);
	OpStkvar	(x,	0);
	MakeCode	(x=0X82396);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8239E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X823A2);
	OpStkvar	(x,	0);
	MakeCode	(0X823B6);
	MakeCode	(0X823BC);
	MakeCode	(x=0X823CE);
	OpSign		(x,	1);
	MakeCode	(x=0X823EE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X82402);
	OpStkvar	(x,	1);
	MakeCode	(x=0X82406);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8240A);
	OpStkvar	(x,	0);
	MakeCode	(0X82438);
	MakeCode	(x=0X82442);
	OpSign		(x,	1);
	MakeCode	(x=0X824AA);
	OpStkvar	(x,	0);
	MakeCode	(0X824CC);
	MakeCode	(0X824D2);
	MakeCode	(0X824D8);
	MakeCode	(0X824DE);
	MakeCode	(x=0X824E6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X824EC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X824F6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X824FC);
	OpStkvar	(x,	1);
	MakeCode	(0X82516);
	MakeCode	(0X8251E);
	MakeCode	(0X82526);
	MakeCode	(x=0X82534);
	OpSign		(x,	1);
	MakeCode	(x=0X82584);
	OpStkvar	(x,	1);
	MakeCode	(x=0X82588);
	OpStkvar	(x,	1);
	MakeCode	(x=0X8259C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X825A6);
	MakeCode	(x=0X825AA);
	OpDecimal	(x,	0);
	MakeCode	(x=0X825BC);
	OpStkvar	(x,	0);
	MakeCode	(0X825C4);
	MakeCode	(x=0X825C8);
	OpDecimal	(x,	0);
	MakeCode	(x=0X825DA);
	OpStkvar	(x,	0);
	MakeCode	(x=0X825E2);
	OpDecimal	(x,	0);
	MakeCode	(x=0X825F8);
	OpStkvar	(x,	0);
	MakeCode	(0X82600);
	MakeCode	(0X82606);
	MakeCode	(x=0X8260C);
	OpSign		(x,	1);
	MakeCode	(0X82636);
	MakeCode	(0X8264A);
	MakeCode	(x=0X8266A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8267E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X82688);
	MakeCode	(0X82692);
	MakeCode	(0X8269C);
	MakeCode	(0X826A6);
	MakeCode	(0X826B0);
	MakeCode	(x=0X826BA);
	OpDecimal	(x,	1);
	MakeCode	(x=0X826BE);
	OpDecimal	(x,	1);
	MakeCode	(x=0X826C4);
	OpDecimal	(x,	1);
	MakeCode	(x=0X826C8);
	OpDecimal	(x,	1);
	MakeCode	(0X826CE);
	MakeCode	(0X826D8);
	MakeCode	(0X826E2);
	MakeCode	(0X826EC);
	MakeCode	(0X826F6);
	MakeCode	(x=0X82706);
	OpSign		(x,	1);
	MakeCode	(x=0X82736);
	OpStkvar	(x,	1);
	MakeCode	(x=0X8273C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X82742);
	OpStkvar	(x,	0);
	MakeCode	(x=0X82766);
	OpSign		(x,	1);
	MakeCode	(x=0X82786);
	OpStkvar	(x,	1);
	MakeCode	(x=0X82790);
	OpStkvar	(x,	0);
	MakeCode	(0X827DC);
	MakeCode	(x=0X827EE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X8280C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X82812);
	OpStkvar	(x,	1);
	MakeCode	(x=0X82818);
	OpStkvar	(x,	0);
	MakeCode	(0X8282E);
	MakeCode	(0X82844);
	MakeCode	(0X8284E);
	MakeCode	(x=0X82854);
	OpStkvar	(x,	1);
	MakeCode	(0X828BA);
	MakeCode	(0X8291C);
	MakeCode	(0X8294C);
	MakeCode	(0X82954);
	MakeCode	(0X82980);
	MakeCode	(0X829D6);
	MakeCode	(0X829EC);
	MakeCode	(0X829FA);
	MakeCode	(0X82A14);
	MakeCode	(0X82A30);
	MakeCode	(0X82A40);
	MakeCode	(x=0X82A52);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X82A74);
	MakeCode	(0X82A90);
	MakeCode	(0X82AA4);
	MakeCode	(0X82B1E);
	MakeCode	(0X82B3A);
	MakeCode	(0X82B66);
	MakeCode	(0X82B90);
	MakeCode	(0X82BBA);
	MakeCode	(0X82BE4);
	MakeCode	(0X82C0A);
	MakeCode	(0X82C44);
	MakeCode	(0X82CB4);
	MakeCode	(0X82CCA);
	MakeCode	(0X82D1C);
	MakeCode	(0X82D32);
	MakeCode	(0X82D84);
	MakeCode	(0X82D94);
	MakeCode	(0X82DD6);
	MakeCode	(0X82E12);
	MakeCode	(0X82E4A);
	MakeCode	(0X82E7A);
	MakeCode	(0X82EEA);
	MakeCode	(0X82F00);
	MakeCode	(0X82F52);
	MakeCode	(0X82F68);
	MakeCode	(0X82FBA);
	MakeCode	(0X82FCA);
	MakeCode	(0X8300C);
	MakeCode	(0X8304E);
	MakeCode	(0X83066);
	MakeCode	(0X830AC);
	MakeCode	(0X830CE);
	MakeCode	(0X830E6);
	MakeCode	(0X830F4);
	MakeCode	(0X83110);
	MakeCode	(0X83144);
	MakeCode	(0X8315E);
	MakeCode	(x=0X83162);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X8316C);
	MakeCode	(0X8316E);
	MakeCode	(0X831B4);
	MakeCode	(0X831B6);
	MakeCode	(x=0X831BA);
	OpSign		(x,	1);
	MakeCode	(0X831D4);
	MakeCode	(0X831F2);
	MakeCode	(x=0X8321A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X83224);
	OpStkvar	(x,	0);
	MakeCode	(x=0X83234);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X83246);
	MakeCode	(x=0X83252);
	OpStkvar	(x,	1);
	MakeCode	(x=0X8325C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X83266);
	OpStkvar	(x,	1);
	MakeCode	(x=0X83270);
	OpStkvar	(x,	0);
	MakeCode	(x=0X832BE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X832C8);
	OpStkvar	(x,	0);
	MakeCode	(x=0X832D8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X832E2);
	OpStkvar	(x,	0);
	MakeCode	(0X832F8);
	MakeCode	(x=0X8332E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X83338);
	OpStkvar	(x,	0);
	MakeCode	(0X83356);
	MakeCode	(x=0X8336E);
	OpSign		(x,	1);
	MakeCode	(x=0X83384);
	OpStkvar	(x,	1);
	MakeCode	(x=0X8338E);
	OpStkvar	(x,	0);
	MakeCode	(0X833A0);
	MakeCode	(0X833A8);
	MakeCode	(0X833C4);
	MakeCode	(0X833D4);
	MakeCode	(x=0X833EC);
	OpSign		(x,	1);
	MakeCode	(0X83416);
	MakeCode	(0X83432);
	MakeCode	(x=0X83438);
	OpStkvar	(x,	1);
	MakeCode	(x=0X83442);
	OpStkvar	(x,	0);
	MakeCode	(0X83454);
	MakeCode	(0X8345E);
	MakeCode	(x=0X83462);
	OpDecimal	(x,	0);
	MakeCode	(x=0X8346E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X8347E);
	MakeCode	(0X8349C);
	MakeCode	(x=0X834A0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X834AA);
	MakeCode	(x=0X83516);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X83536);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X83552);
	OpDecimal	(x,	0);
	MakeCode	(0X83562);
	MakeCode	(x=0X83566);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X83570);
	MakeCode	(x=0X835B2);
	OpSign		(x,	1);
	MakeCode	(0X8363C);
	MakeCode	(0X8365A);
	MakeCode	(x=0X836A2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X836AC);
	OpStkvar	(x,	0);
	MakeCode	(0X836C0);
	MakeCode	(0X836CE);
	MakeCode	(x=0X836EE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X836FA);
	OpStkvar	(x,	0);
	MakeCode	(x=0X83706);
	OpStkvar	(x,	1);
	MakeCode	(x=0X8370C);
	OpStkvar	(x,	0);
	MakeCode	(0X8372C);
	MakeCode	(0X83736);
	MakeCode	(x=0X8373C);
	OpStkvar	(x,	1);
	MakeCode	(0X83754);
	MakeCode	(0X83792);
	MakeCode	(0X837DA);
	MakeCode	(0X83812);
	MakeCode	(0X8386E);
	MakeCode	(0X83888);
	MakeCode	(0X838BA);
	MakeCode	(0X838CA);
	MakeCode	(0X838E0);
	MakeCode	(0X838EC);
	MakeCode	(x=0X838FE);
	OpSign		(x,	1);
	MakeCode	(0X8393A);
	MakeCode	(0X83978);
	MakeCode	(x=0X83986);
	OpSign		(x,	1);
	MakeCode	(x=0X839AA);
	OpStkvar	(x,	1);
	MakeCode	(0X839B8);
	MakeCode	(0X839C6);
	MakeCode	(x=0X83A0E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X83A2A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X83A4C);
	MakeCode	(x=0X83A62);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X83A80);
	MakeCode	(0X83A98);
	MakeCode	(0X83AB4);
	MakeCode	(0X83AC2);
	MakeCode	(0X83AD0);
	MakeCode	(x=0X83B66);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X83B86);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X83BA4);
	MakeCode	(x=0X83BBA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X83BD4);
	MakeCode	(0X83C00);
	MakeCode	(0X83C06);
	MakeCode	(0X83C22);
	MakeCode	(x=0X83C48);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X83C7C);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(0X83C86);
	MakeCode	(x=0X83C94);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X83CB4);
	MakeCode	(x=0X83CC8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X83CE8);
	OpStkvar	(x,	1);
	MakeCode	(0X83CF6);
	MakeCode	(0X83D0A);
	MakeCode	(0X83D14);
	MakeCode	(0X83D32);
	MakeCode	(0X83D38);
	MakeCode	(0X83D52);
	MakeCode	(0X83D56);
	MakeCode	(x=0X83D88);
	OpStkvar	(x,	1);
	MakeCode	(0X83D96);
	MakeCode	(0X83DA2);
	MakeCode	(x=0X83DA8);
	OpStkvar	(x,	1);
	MakeCode	(0X83DB6);
	MakeCode	(0X83DC8);
	MakeCode	(x=0X83DCC);
	OpStkvar	(x,	0);
	MakeCode	(x=0X83DD8);
	OpStkvar	(x,	0);
	MakeCode	(x=0X83DE8);
	OpStkvar	(x,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X83DEE);
	OpStkvar	(x,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X83DF4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X83DFA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X83E02);
	OpStkvar	(x,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X83E08);
	OpStkvar	(x,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X83E0E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X83E14);
	OpStkvar	(x,	1);
	MakeCode	(x=0X83E1A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X83E1E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X83E2A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X83E2E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X83E32);
	OpStkvar	(x,	0);
	MakeCode	(x=0X83E3E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X83E42);
	OpStkvar	(x,	0);
	MakeCode	(x=0X83E46);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X83E52);
	OpStkvar	(x,	0);
	MakeCode	(x=0X83E56);
	OpStkvar	(x,	0);
	MakeCode	(x=0X83E64);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X83E7A);
	MakeCode	(0X83E82);
	MakeCode	(0X83EA4);
	MakeCode	(0X83F00);
	MakeCode	(x=0X83F08);
	OpStkvar	(x,	1);
	MakeCode	(0X83F16);
	MakeCode	(0X83F42);
	MakeCode	(x=0X83F4A);
	OpStkvar	(x,	1);
	MakeCode	(0X83F58);
	MakeCode	(0X83F9A);
	MakeCode	(0X83FAA);
	MakeCode	(x=0X83FC4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X83FCE);
	OpStkvar	(x,	0);
	MakeCode	(0X83FDE);
	MakeCode	(0X83FF8);
	MakeCode	(x=0X84012);
	OpStkvar	(x,	1);
	MakeCode	(x=0X8401C);
	OpStkvar	(x,	0);
	MakeCode	(0X8403A);
	MakeCode	(0X84060);
	MakeCode	(0X84086);
	MakeCode	(0X84096);
	MakeCode	(x=0X840B4);
	OpSign		(x,	1);
	MakeCode	(0X840F4);
	MakeCode	(x=0X840FA);
	OpStkvar	(x,	1);
	MakeCode	(0X84108);
	MakeCode	(0X84114);
	MakeCode	(0X84122);
	MakeCode	(0X84126);
	MakeCode	(0X8412E);
	MakeCode	(0X84138);
	MakeCode	(0X84146);
	MakeCode	(x=0X84164);
	OpStkvar	(x,	1);
	MakeCode	(x=0X8416E);
	OpStkvar	(x,	0);
	MakeCode	(0X84178);
	MakeCode	(0X841D2);
	MakeCode	(0X841EA);
	MakeCode	(0X84202);
	MakeCode	(0X8421A);
	MakeCode	(0X84232);
	MakeCode	(0X8424A);
	MakeCode	(0X84252);
	MakeCode	(0X84270);
	MakeCode	(0X84292);
	MakeCode	(0X842B2);
	MakeCode	(0X842CC);
	MakeCode	(0X842E2);
	MakeCode	(0X842FC);
	MakeCode	(0X84314);
	MakeCode	(0X8431A);
	MakeCode	(0X8433E);
	MakeCode	(0X84356);
	MakeCode	(0X8437E);
	MakeCode	(x=0X84382);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X8439A);
	MakeCode	(0X843B4);
	MakeCode	(x=0X843B8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X843D2);
	MakeCode	(x=0X843D6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X84412);
	MakeCode	(x=0X8443E);
	OpSign		(x,	1);
	MakeCode	(0X8445C);
	MakeCode	(0X8448A);
	MakeCode	(x=0X844B6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X844C2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X844CC);
	OpStkvar	(x,	0);
	MakeCode	(0X844E4);
	MakeCode	(0X8450E);
	MakeCode	(0X84526);
	MakeCode	(0X8454E);
	MakeCode	(0X8457A);
	MakeCode	(0X845A4);
	MakeCode	(0X845FE);
	MakeCode	(0X84608);
	MakeCode	(0X84628);
	MakeCode	(0X8465C);
	MakeCode	(0X84678);
	MakeCode	(0X8468A);
	MakeCode	(0X84692);
	MakeCode	(x=0X8469A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X846A4);
	MakeCode	(0X846C2);
	MakeCode	(0X84720);
	MakeCode	(0X8473E);
	MakeCode	(0X8479C);
	MakeCode	(x=0X847A0);
	OpDecimal	(x,	0);
	MakeCode	(x=0X847A4);
	OpDecimal	(x,	0);
	MakeCode	(0X847D2);
	MakeCode	(x=0X8480A);
	OpDecimal	(x,	0);
	MakeCode	(x=0X84854);
	OpSign		(x,	1);
	MakeCode	(0X8486E);
	MakeCode	(0X8488C);
	MakeCode	(x=0X848A8);
	OpSign		(x,	1);
	MakeCode	(x=0X848B0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X848B6);
	OpStkvar	(x,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X848BC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X848C2);
	OpStkvar	(x,	0);
	MakeCode	(x=0X848C6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X848CC);
	OpStkvar	(x,	0);
	MakeCode	(x=0X848EE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X848F8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X84922);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X84940);
	MakeCode	(0X84946);
	MakeCode	(0X849A8);
	MakeCode	(0X849D0);
	MakeCode	(x=0X849E2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X84A32);
	MakeCode	(0X84A9E);
	MakeCode	(x=0X84AB0);
	OpSign		(x,	1);
	MakeCode	(0X84ACA);
	MakeCode	(x=0X84B3A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X84B5C);
	MakeCode	(0X84B66);
	MakeCode	(0X84B7C);
	MakeCode	(x=0X84BBE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X84BFC);
	MakeCode	(x=0X84C3A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X84CCE);
	MakeCode	(x=0X84CD6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X84CDA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X84CE0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X84CEE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X84D4A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X84D58);
	OpStkvar	(x,	0);
	MakeCode	(x=0X84D76);
	OpStkvar	(x,	1);
	MakeCode	(0X84DD8);
	MakeCode	(x=0X84DEC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X84E2C);
	MakeCode	(0X84E46);
	MakeCode	(0X84E5A);
	MakeCode	(x=0X84E68);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X84EA8);
	MakeCode	(0X84EBC);
	MakeCode	(x=0X84ECC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X84ED6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X84EFA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X84F04);
	OpStkvar	(x,	0);
	MakeCode	(0X84F56);
	MakeCode	(x=0X84F5E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X84F62);
	OpStkvar	(x,	0);
	MakeCode	(x=0X84F66);
	OpStkvar	(x,	1);
	MakeCode	(x=0X84F6C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X84F7A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X84F80);
	OpStkvar	(x,	0);
	MakeCode	(x=0X84F86);
	OpStkvar	(x,	1);
	MakeCode	(x=0X84F8E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X84F98);
	OpStkvar	(x,	0);
	MakeCode	(0X84FE2);
	MakeCode	(0X84FFC);
	MakeCode	(x=0X85002);
	OpStkvar	(x,	0);
	MakeCode	(x=0X85006);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8500A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X85010);
	OpStkvar	(x,	1);
	MakeCode	(x=0X8501E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8502A);
	OpStkvar	(x,	0);
	MakeCode	(0X85058);
	MakeCode	(0X85068);
	MakeCode	(x=0X85070);
	OpStkvar	(x,	0);
	MakeCode	(x=0X85074);
	OpStkvar	(x,	1);
	MakeCode	(x=0X8507A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X8508A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X850B4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X850BA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X850CA);
	OpStkvar	(x,	0);
	MakeCode	(0X85112);
	MakeCode	(0X8513C);
	MakeCode	(0X8515E);
	MakeCode	(0X851E8);
	MakeCode	(0X8522E);
	MakeCode	(0X8523A);
	MakeCode	(0X85276);
	MakeCode	(0X85290);
	MakeCode	(0X852B4);
	MakeCode	(0X852E0);
	MakeCode	(0X8530C);
	MakeCode	(0X85316);
	MakeCode	(0X85326);
	MakeCode	(0X85342);
	MakeCode	(0X853A2);
	MakeCode	(0X853BC);
	MakeCode	(0X853E2);
	MakeCode	(0X85408);
	MakeCode	(0X8542E);
	MakeCode	(0X854A0);
	MakeCode	(0X854DA);
	MakeCode	(0X854F2);
	MakeCode	(0X85500);
	MakeCode	(0X8552C);
	MakeCode	(0X855A0);
	MakeCode	(0X855AA);
	MakeCode	(0X855C6);
	MakeCode	(0X8561C);
	MakeCode	(0X85678);
	MakeCode	(0X856B0);
	MakeCode	(0X85762);
	MakeCode	(0X8578A);
	MakeCode	(0X8579C);
	MakeCode	(x=0X857A0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X857B8);
	MakeCode	(0X8580A);
	MakeCode	(0X8581C);
	MakeCode	(x=0X85820);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X85852);
	MakeCode	(0X8585C);
	MakeCode	(0X85924);
	MakeCode	(0X8593C);
	MakeCode	(0X8594A);
	MakeCode	(0X85958);
	MakeCode	(0X8596A);
	MakeCode	(0X8598A);
	MakeCode	(0X859A2);
	MakeCode	(x=0X859CC);
	OpSign		(x,	1);
	MakeCode	(0X859E4);
	MakeCode	(x=0X85A0A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X85A10);
	OpStkvar	(x,	1);
	MakeCode	(x=0X85A1A);
	OpStkvar	(x,	0);
	MakeCode	(0X85A3A);
	MakeCode	(0X85A5E);
	MakeCode	(0X85A8C);
	MakeCode	(0X85AA0);
	MakeCode	(0X85AAC);
	MakeCode	(0X85AFA);
	MakeCode	(0X85B0C);
	MakeCode	(0X85B1A);
	MakeCode	(0X85B26);
	MakeCode	(0X85B64);
	MakeCode	(0X85B76);
	MakeCode	(0X85B84);
	MakeCode	(0X85B90);
	MakeCode	(0X85BC6);
	MakeCode	(0X85BEC);
	MakeCode	(0X85BFC);
	MakeCode	(0X85C28);
	MakeCode	(0X85C50);
	MakeCode	(0X85C56);
	MakeCode	(0X85C5E);
	MakeCode	(0X85C7A);
	MakeCode	(0X85C8A);
	MakeCode	(0X85CA8);
	MakeCode	(0X85CDC);
	MakeCode	(0X85D3E);
	MakeCode	(0X85D5A);
	MakeCode	(0X85D6E);
	MakeCode	(0X85E3E);
	MakeCode	(0X85E66);
	MakeCode	(x=0X85E96);
	OpStkvar	(x,	1);
	MakeCode	(0X85EB6);
	MakeCode	(0X85EC2);
	MakeCode	(x=0X85EE6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X85F12);
	MakeCode	(0X85F20);
	MakeCode	(0X85F4A);
	MakeCode	(0X85F88);
	MakeCode	(0X85F90);
	MakeCode	(0X85FF6);
	MakeCode	(0X8600A);
	MakeCode	(0X8607C);
	MakeCode	(0X860A4);
	MakeCode	(0X860CC);
	MakeCode	(0X860E2);
	MakeCode	(0X86106);
	MakeCode	(0X8612E);
	MakeCode	(0X86156);
	MakeCode	(0X8617A);
	MakeCode	(0X861BE);
	MakeCode	(0X861C4);
	MakeCode	(0X861D6);
	MakeCode	(0X8620A);
	MakeCode	(0X8621E);
	MakeCode	(x=0X86230);
	OpSign		(x,	1);
	MakeCode	(x=0X86276);
	OpStkvar	(x,	1);
	MakeCode	(x=0X8627C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8628E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X86294);
	OpStkvar	(x,	1);
	MakeCode	(x=0X86298);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8629E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X862A2);
	OpStkvar	(x,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X862A8);
	OpStkvar	(x,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X862AE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X862B4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X862BA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X862C0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X862C6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X862CA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X862CE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X862D8);
	OpStkvar	(x,	0);
	MakeCode	(x=0X862DE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X862E4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X862EA);
	OpStkvar	(x,	0);
	MakeCode	(x=0X862F0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X862F6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X862FA);
	OpStkvar	(x,	0);
	MakeCode	(0X863B8);
	MakeCode	(x=0X863D0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X863D6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X863DA);
	OpStkvar	(x,	0);
	MakeCode	(x=0X863E6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X863EC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X863F0);
	OpStkvar	(x,	0);
	MakeCode	(0X86400);
	MakeCode	(0X8640C);
	MakeCode	(0X86438);
	MakeCode	(0X86452);
	MakeCode	(0X86464);
	MakeCode	(x=0X86468);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X864A8);
	MakeCode	(0X864B0);
	MakeCode	(0X864E2);
	MakeCode	(0X864F4);
	MakeCode	(x=0X864F8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X86506);
	MakeCode	(0X8651E);
	MakeCode	(0X86558);
	MakeCode	(0X86562);
	MakeCode	(0X86590);
	MakeCode	(0X865A6);
	MakeCode	(0X865D4);
	MakeCode	(0X865E8);
	MakeCode	(0X86600);
	MakeCode	(0X8665A);
	MakeCode	(x=0X8671C);
	OpSign		(x,	1);
	MakeCode	(0X86754);
	MakeCode	(0X86764);
	MakeCode	(0X867AA);
	MakeCode	(0X867D8);
	MakeCode	(0X86804);
	MakeCode	(0X86830);
	MakeCode	(x=0X86836);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X86842);
	OpStkvar	(x,	1);
	MakeCode	(x=0X8684C);
	OpStkvar	(x,	0);
	MakeCode	(0X86864);
	MakeCode	(0X86872);
	MakeCode	(0X86880);
	MakeCode	(x=0X8688E);
	OpSign		(x,	1);
	MakeCode	(x=0X86898);
	OpStkvar	(x,	1);
	MakeCode	(x=0X868A0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X868A8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X868C6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X868E0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X868E6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X868EE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X868FA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X8691A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8691E);
	OpStkvar	(x,	1);
	MakeCode	(0X86926);
	MakeCode	(x=0X86932);
	OpStkvar	(x,	1);
	MakeCode	(x=0X8693E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X8695A);
	OpStkvar	(x,	1);
	MakeCode	(0X86960);
	MakeCode	(x=0X86966);
	OpStkvar	(x,	1);
	MakeCode	(x=0X8696E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X86972);
	OpStkvar	(x,	1);
	MakeCode	(x=0X86978);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8697E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X86984);
	OpStkvar	(x,	0);
	MakeCode	(0X8698C);
	MakeCode	(0X8699A);
	MakeCode	(0X869AE);
	MakeCode	(x=0X869C0);
	OpSign		(x,	1);
	MakeCode	(x=0X869EE);
	OpStkvar	(x,	1);
	MakeCode	(0X869FC);
	MakeCode	(0X86A0C);
	MakeCode	(x=0X86A3C);
	OpStkvar	(x,	1);
	MakeCode	(0X86A4A);
	MakeCode	(0X86A5A);
	MakeCode	(x=0X86A80);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X86A8C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X86A94);
	OpStkvar	(x,	1);
	MakeCode	(x=0X86AA4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X86AAA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X86AC4);
	MakeCode	(0X86B3A);
	MakeCode	(0X86B50);
	MakeCode	(0X86BC4);
	MakeCode	(x=0X86BDA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X86BE4);
	OpDecimal	(x,	0);
	MakeCode	(0X86C66);
	MakeCode	(0X86C78);
	MakeCode	(0X86C90);
	MakeCode	(0X86CBE);
	MakeCode	(0X86CD6);
	MakeCode	(0X86CEE);
	MakeCode	(x=0X86D08);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X86D14);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X86D40);
	MakeCode	(0X86D54);
	MakeCode	(0X86D68);
	MakeCode	(0X86D7C);
	MakeCode	(0X86D90);
	MakeCode	(x=0X86D9C);
	OpSign		(x,	1);
	MakeCode	(0X86DCC);
	MakeCode	(x=0X86DD2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X86DDC);
	OpStkvar	(x,	0);
	MakeCode	(x=0X86DE8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X86DEE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X86DF4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X86DFC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X86E04);
	OpStkvar	(x,	1);
	MakeCode	(x=0X86E0A);
	OpStkvar	(x,	0);
	MakeCode	(0X86E58);
	MakeCode	(x=0X86ED4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X86EDE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X86F04);
	MakeCode	(0X86F0A);
	MakeCode	(0X86F1C);
	MakeCode	(0X86F4A);
	MakeCode	(0X86F68);
	MakeCode	(0X86F86);
	MakeCode	(0X86FAA);
	MakeCode	(0X86FDE);
	MakeCode	(0X86FEC);
	MakeCode	(0X87000);
	MakeCode	(0X8701C);
	MakeCode	(0X8703E);
	MakeCode	(0X8704A);
	MakeCode	(0X8708C);
	MakeCode	(x=0X870A8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X870CE);
	MakeCode	(0X870D8);
	MakeCode	(x=0X870DC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X870E6);
	MakeCode	(0X870E8);
	MakeCode	(0X870EA);
	MakeCode	(0X8712E);
	MakeCode	(x=0X87166);
	OpSign		(x,	1);
	MakeCode	(x=0X87184);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X8719C);
	MakeCode	(x=0X871B6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X871BC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X871C2);
	OpStkvar	(x,	0);
	MakeCode	(x=0X871CA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X871D2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X871D8);
	OpStkvar	(x,	0);
	MakeCode	(0X871EC);
	MakeCode	(0X87220);
	MakeCode	(0X8724E);
	MakeCode	(x=0X87270);
	OpSign		(x,	1);
	MakeCode	(x=0X8728A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X87290);
	OpStkvar	(x,	1);
	MakeCode	(x=0X87296);
	OpStkvar	(x,	1);
	MakeCode	(x=0X8729C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X872A2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X872A8);
	OpStkvar	(x,	0);
	MakeCode	(x=0X872AE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X872B2);
	OpStkvar	(x,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X872B8);
	OpStkvar	(x,	0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X872BE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X872C4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X872CA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X872D0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X872D6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X872DA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X872DE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X872E8);
	OpStkvar	(x,	0);
	MakeCode	(0X872F2);
	MakeCode	(x=0X872F4);
	OpDecimal	(x,	0);
	MakeCode	(x=0X8730A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X87346);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X87374);
	MakeCode	(0X87384);
	MakeCode	(0X87394);
	MakeCode	(0X873D4);
	MakeCode	(0X873E4);
	MakeCode	(0X873EA);
	MakeCode	(0X8745E);
	MakeCode	(x=0X87486);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X87498);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	OpStkvar	(x,	1);
	MakeCode	(0X874C0);
	MakeCode	(0X874F8);
	MakeCode	(0X8751A);
	MakeCode	(0X8756A);
	MakeCode	(x=0X8756E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X87578);
	MakeCode	(x=0X8757A);
	OpDecimal	(x,	0);
	MakeCode	(0X875BA);
	MakeCode	(0X87606);
	MakeCode	(0X87622);
	MakeCode	(0X87650);
	MakeCode	(0X87698);
	MakeCode	(x=0X876AA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X876D6);
	MakeCode	(0X87710);
	MakeCode	(0X8774A);
	MakeCode	(0X87784);
	MakeCode	(0X877BE);
	MakeCode	(0X877F8);
	MakeCode	(0X87832);
	MakeCode	(0X87868);
	MakeCode	(x=0X8789E);
	OpSign		(x,	1);
	MakeCode	(0X878CE);
	MakeCode	(0X878FA);
	MakeCode	(0X8791E);
	MakeCode	(0X87940);
	MakeCode	(0X87962);
	MakeCode	(0X8797C);
	MakeCode	(0X87992);
	MakeCode	(x=0X87998);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X879A8);
	MakeCode	(0X879B4);
	MakeByte	(0X879BC);
	MakeByte	(0X879BD);
	MakeDword	(0X879BE);
	MakeDword	(0X879C4);
	MakeDword	(0X879C8);
	MakeDword	(x=0X879CC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(0X879D0);
	MakeDword	(0X879D4);
	MakeDword	(x=0X879D8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(0X879DC);
	MakeDword	(0X879E0);
	MakeDword	(0X879E4);
	MakeCode	(0X879E8);
	MakeCode	(x=0X87AC8);
	OpDecimal	(x,	0);
	MakeCode	(0X87AD0);
	MakeByte	(0X87B60);
	MakeByte	(0X87C26);
	MakeByte	(0X87C27);
	MakeByte	(0X87C28);
	MakeByte	(0X87C32);
	MakeByte	(0X87C3C);
	MakeName	(0X87C3C,	"CurveTable_22_Rows_Supported_physical_OBD_message_modes");
	MakeDword	(x=0X87C52);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X87C88);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X87D16);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeByte	(0X87D1B);
	MakeByte	(0X87D1C);
	MakeByte	(0X87D1D);
	MakeDword	(x=0X87D1E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X87DFE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeByte	(0X87E03);
	MakeByte	(0X87E05);
	MakeDword	(x=0X87E06);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X87E26);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeByte	(0X87E2B);
	MakeByte	(0X87E2C);
	MakeDword	(x=0X87E2D);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X87EE0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeByte	(0X87EE5);
	MakeByte	(0X87EE6);
	MakeByte	(0X87EE7);
	MakeDword	(x=0X87EE8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X87F18);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeByte	(0X87F1D);
	MakeByte	(0X87F1E);
	MakeByte	(0X87F1F);
	MakeDword	(x=0X87F20);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X87F44);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeByte	(0X87F49);
	MakeByte	(0X87F4B);
	MakeDword	(x=0X87F4C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeByte	(0X87F51);
	MakeByte	(0X87F52);
	MakeByte	(0X87F54);
	MakeByte	(0X87F65);
	MakeByte	(0X87F66);
	MakeByte	(0X87F67);
	MakeByte	(0X87F68);
	MakeByte	(0X87F69);
	MakeByte	(0X87F6A);
	MakeByte	(0X87F6B);
	MakeByte	(0X87F6C);
	MakeByte	(0X87F6D);
	MakeByte	(0X87F6E);
	MakeByte	(0X87F6F);
	MakeWord	(0X87F70);
	MakeByte	(0X87F72);
	MakeByte	(0X87F73);
	MakeWord	(0X88064);
	MakeByte	(0X884BC);
	MakeWord	(0X884C2);
	MakeByte	(0X884C4);
	MakeDword	(x=0X884C6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X884CA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X884CE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X884D2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X884D6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X884DA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X884DE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X884E2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X884E6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X884EA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X884EE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X884F2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X884F6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(0X88612);
	MakeWord	(0X88812);
	MakeDword	(x=0X88814);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88818);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8881C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88820);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88824);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88828);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8882C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88830);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(0X88BF8);
	MakeDword	(x=0X88D92);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88D96);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88D9A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88D9E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88DA2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88DA6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88DAA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88DAE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88DB2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88DB6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88DBA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88DBE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88DC2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88DC6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88DCA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88DCE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88DD2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88DD6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88DDA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88DDE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88DE2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88DE6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88DEA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88DEE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88DF2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88DF6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88DFA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88DFE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88E02);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88E06);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88E0A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88E0E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88E12);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88E16);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88E1A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88E1E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88E22);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88E26);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88E2A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88E2E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88E32);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88E36);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88E3A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88E3E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88E42);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88E46);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88E4A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88E4E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88E52);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88E56);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88E5A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88E5E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88E62);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88E66);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88E6A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88E6E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88E72);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88E76);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88E7A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88E7E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88E82);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88E86);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88E8A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88E8E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88E92);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88E96);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88E9A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88E9E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88EA2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88EA6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88EAA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88EAE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88EB2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88EB6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88EBA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88EBE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88EC2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88EC6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88ECA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88ECE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88ED2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88ED6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88EDA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88EDE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88EE2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88EE6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88EEA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88EEE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88EF2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88EF6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88EFA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88EFE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88F02);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88F06);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88F0A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88F0E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88F12);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88F16);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88F1A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88F1E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88F22);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88F26);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88F2A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88F2E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88F32);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88F36);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88F3A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88F3E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88F42);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88F46);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88F4A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88F4E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88F52);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88F56);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88F5A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88F5E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88F62);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88F66);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88F6A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88F6E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88F72);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88F76);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88F7A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88F7E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88F82);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88F86);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88F8A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88F8E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88F92);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88F96);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88F9A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88F9E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88FA2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88FA6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88FAA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88FAE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88FB2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88FB6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88FBA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88FBE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88FC2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88FC6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88FCA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88FCE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88FD2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88FD6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88FDA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88FDE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88FE2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88FE6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88FEA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88FEE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88FF2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88FF6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88FFA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X88FFE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89002);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89006);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8900A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8900E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89012);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89016);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8901A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8901E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89022);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89026);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8902A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8902E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89032);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89036);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8903A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8903E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(0X89042);
	MakeWord	(0X89044);
	MakeByte	(0X89046);
	MakeArray	(0X89046,	0XA);
	MakeWord	(0X89050);
	MakeDword	(x=0X89052);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89056);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8905A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(0X89098);
	MakeWord	(0X890A0);
	MakeDword	(x=0X890A2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X890A6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(0X890AE);
	MakeDword	(0X89186);
	MakeDword	(x=0X8918A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8918E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89192);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89196);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8919A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8919E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X891A2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X891A6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X891AA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X891AE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X891B2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X891B6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X891BA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X891BE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X891C2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X891C6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X891CA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X891CE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X891D2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X891D6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X891DA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X891DE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X891E2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X891E6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X891EA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X891EE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X891F2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X891F6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X891FA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X891FE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89202);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89206);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8920A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8920E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89212);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89216);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8921A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8921E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89222);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89226);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8922A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8922E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89232);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89236);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8923A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8923E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89242);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89246);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8924A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8924E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89252);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89256);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8925A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8925E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89262);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89266);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8926A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8926E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89272);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89276);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8927A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8927E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89282);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89286);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8928A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8928E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89292);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89296);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8929A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8929E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X892A2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X892A6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X892AA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X892AE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X892B2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X892B6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X892BA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X892BE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X892C2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X892C6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X892CA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X892CE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X892D2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X892D6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X892DA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(0X892DE);
	MakeDword	(x=0X892E0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(0X892FC);
	MakeDword	(x=0X892FE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8935E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89362);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89366);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8936A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8936E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89372);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89376);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8937A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8937E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89382);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89386);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8938A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8938E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89392);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89396);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8939A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8939E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X893A2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X893A6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X893AA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X893AE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X893B2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X893B6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X893BA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X893BE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X893C2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X893C6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X893CA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X893CE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X893D2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X893D6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X893DA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X893DE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X893E2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X893E6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X893EA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X893EE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X893F2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X893F6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X893FA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X893FE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89402);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89406);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8940A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8940E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89412);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89416);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8941A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8941E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89422);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89426);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8942A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8942E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89432);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89436);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8943A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8943E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89442);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89446);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8944A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8944E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89452);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89456);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8945A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8945E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89462);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89466);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8946A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8946E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89472);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89476);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8947A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8947E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89482);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89486);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8948A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8948E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89492);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89496);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8949A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8949E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X894A2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X894A6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X894AA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X894AE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X894B2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X894B6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X894BA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X894BE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X894C2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X894C6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X894CA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X894CE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X894D2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X894D6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X894DA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X894DE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X894E2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X894E6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X894EA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X894EE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X894F2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X894F6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X894FA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X894FE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89502);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89506);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8950A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8950E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89512);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89516);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8951A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8951E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89522);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89526);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeByte	(0X895EE);
	MakeByte	(0X89606);
	MakeWord	(0X8961E);
	MakeByte	(0X8964E);
	MakeDword	(x=0X89666);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8966A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8966E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89672);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89676);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8967A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8967E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89682);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89686);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8968A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8968E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89692);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89696);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8969A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8969E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X896A2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X896A6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X896AA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X896AE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X896B2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X896B6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X896BA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X896BE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X896C2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X896C6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X896CA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X896CE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X896D2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X896D6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X896DA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(0X896DE);
	MakeByte	(0X8974B);
	MakeByte	(0X8974D);
	MakeByte	(0X8974E);
	MakeByte	(0X8974F);
	MakeByte	(0X89750);
	MakeByte	(0X89751);
	MakeByte	(0X89752);
	MakeWord	(0X89758);
	MakeWord	(0X89764);
	MakeWord	(0X89770);
	MakeWord	(0X8977C);
	MakeDword	(x=0X8977E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeByte	(0X89782);
	MakeArray	(0X89782,	0X6);
	MakeWord	(0X89788);
	MakeDword	(x=0X8978A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(0X89794);
	MakeWord	(0X897A0);
	MakeDword	(x=0X897A2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeByte	(0X897AB);
	MakeDword	(x=0X897AC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(0X897B2);
	MakeWord	(0X89802);
	MakeWord	(0X89804);
	MakeWord	(0X89806);
	MakeWord	(0X89808);
	MakeWord	(0X8980A);
	MakeWord	(0X8980E);
	MakeWord	(0X89810);
	MakeWord	(0X89814);
	MakeDword	(x=0X89816);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8981A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8981E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89822);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89826);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8982A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8982E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89832);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89836);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8983A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8983E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89842);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89846);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8984A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8984E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89852);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89856);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8985A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8985E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89862);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89866);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8986A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8986E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89872);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89876);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8987A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8987E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89882);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89886);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8988A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8988E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89892);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89896);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8989A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8989E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X898A2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X898A6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X898AA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X898AE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X898B2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X898B6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X898BA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X898BE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X898C2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X898C6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X898CA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X898CE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X898D2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X898D6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X898DA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X898DE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X898E2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X898E6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X898EA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X898EE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X898F2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X898F6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X898FA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X898FE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89902);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89906);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8990A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8990E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89912);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89916);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8991A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8991E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89922);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89926);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8992A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8992E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89932);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89936);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8993A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8993E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89942);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89946);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8994A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8994E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89952);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89956);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8995A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8995E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89962);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89966);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8996A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8996E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89972);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89976);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8997A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8997E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89982);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89986);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8998A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8998E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89992);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89996);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8999A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8999E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X899A2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X899A6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X899AA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X899AE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X899B2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X899B6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X899BA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X899BE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X899C2,	"SurfaceTable_2x17_Coolant_temperature_sensor_calibration");
	MakeName	(0X89A06,	"SurfaceTable_2x17_Temperature_sensor_calibration_2");
	MakeDword	(0X89A46);
	MakeDword	(x=0X89A4A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89A4E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89A52);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89A56);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89A5A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89A5E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89A62);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89A66);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89A6A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89A6E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89A72);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89A76);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89A7A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89A7E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89A82);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89A86);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89A8A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89A8E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89A92);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89A96);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89A9A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89A9E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89AA2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89AA6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89AAA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89AAE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89AB2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89AB6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89ABA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89B26);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89B2A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89B2E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89B32);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89B36);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89B3A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89B3E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89B42);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89B46);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89B4A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89B4E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89B52);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89B56);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89B5A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89B5E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89B62);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89B66);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89B6A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89B6E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89B72);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89B76);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89B7A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89B7E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89B82);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89B86);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89B8A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89B8E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89B92);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89B96);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89B9A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89B9E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89BA2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89BA6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89BAA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89BAE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89BB2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89BB6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(0X89BBA);
	MakeByte	(0X89BD4);
	MakeDword	(x=0X89BE4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89BE8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89BEC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89BF0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89BF4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89BF8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89BFC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89C00);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89C04);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89C08);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89C0C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89C10);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89C14);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89C18);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89C1C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89C20);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89C24);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89C28);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89C2C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89C30);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89C34);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89C38);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89C3C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89C40);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89C44);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89C48);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89C4C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89C50);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89C54);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89C58);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89C5C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89C60);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89C64);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89C68);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89C6C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89C70);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89C74);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89C78);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89C7C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89C80);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89C84);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89C88);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89C8C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89C90);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89C94);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89C98);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89C9C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89CA0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89CA4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89CA8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89CAC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89CB0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89CB4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89CB8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89CBC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89CC0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89CC4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89CC8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89CCC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89CD0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89CD4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89CD8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89CDC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89CE0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89CE4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89CE8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89CEC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89CF0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89CF4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89CF8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89CFC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89D00);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89D04);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89D08);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89D0C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89D10);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89D14);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89D18);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89D1C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89D20);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89D24);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89D28);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89D2C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89D30);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89D34);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89D38);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89D3C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89D40);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89D44);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89D48);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89D4C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89D50);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89D54);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89D58);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89D5C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89D60);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89D64);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89D68);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89D6C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89D70);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89D74);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89D78);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89D7C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89D80);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89D84);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89D88);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89D8C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89D90);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89D94);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89D98);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89D9C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89DA0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89DA4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89DA8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89DAC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89DB0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89DB4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89DB8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89DBC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89DC0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89DC4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89DC8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89DCC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89DD0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89DD4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89DD8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89DDC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89DE0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89DE4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89DE8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89DEC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89DF0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89DF4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89DF8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89DFC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89E00);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89E04);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89E08);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89E0C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89E10);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89E14);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89E18);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89E1C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89E20);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89E24);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89E28);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89E2C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89E30);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89E34);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89E38);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89E3C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89E40);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89E44);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89E48);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89E4C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89E50);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89E54);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89E58);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89E5C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89E60);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89E64);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89E68);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89E6C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89E70);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89E74);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89E78);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89E7C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89E80);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89E84);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89E88);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89E8C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89E90);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89E94);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89E98);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89E9C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89EA0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89EA4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89EA8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89EAC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89EB0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89EB4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89EB8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89EBC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89EC0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89EC4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89EC8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89ECC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89ED0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89ED4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89ED8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89EDC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89EE0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89EE4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89EE8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89EEC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89EF0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89EF4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89EF8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89EFC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89F00);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89F04);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89F08);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89F0C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89F10);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89F14);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89F18);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89F1C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89F20);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89F24);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89F28);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89F2C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89F30);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89F34);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89F38);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89F3C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89F40);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89F44);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89F48);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89F4C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89F50);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89F54);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89F58);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89F5C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89F60);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89F64);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89F68);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89F6C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89F70);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89F74);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89F78);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89F7C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89F80);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89F84);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89F88);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89F8C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89F90);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89F94);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89F98);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89F9C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89FA0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89FA4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89FA8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89FAC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89FB0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89FB4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89FB8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89FBC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89FC0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89FC4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89FC8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89FCC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89FD0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89FD4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89FD8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89FDC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89FE0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89FE4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89FE8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89FEC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89FF0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89FF4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89FF8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X89FFC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A000);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A004);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A008);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A00C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A010);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A014);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A018);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A01C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A020);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A024);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A028);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A02C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A030);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A034);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A038);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A03C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A040);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A044);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A048);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A04C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A050);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A054);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A058);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A05C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A060);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A064);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A068);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A06C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A070);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A074);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A078);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A07C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A080);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A084);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A088);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A08C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A090);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A094);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A098);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A09C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A0A0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A0A4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A0A8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A0AC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A0B0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A0B4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A0B8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A0BC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A0C0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A0C4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A0C8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A0CC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A0D0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A0D4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A0D8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A0DC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A0E0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A0E4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A0E8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A0EC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A0F0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A0F4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
}


static Bytes_16(void) {
        auto x;
#define id x

	MakeDword	(x=0X8A0F8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A0FC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A100);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A104);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A108);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A10C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A110);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A114);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A118);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A11C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A120);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A124);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A128);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A12C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A130);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A134);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A138);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A13C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A140);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A144);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A148);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A14C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A150);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A154);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A158);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A15C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A160);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A164);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A168);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A16C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A170);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A174);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A178);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A17C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A180);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A184);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A188);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A18C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A190);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A194);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A198);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A19C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A1A0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A1A4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A1A8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A1AC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A1B0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A1B4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A1B8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A1BC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A1C0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A1C4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A1C8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A1CC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A1D0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A1D4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A1D8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A1DC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A1E0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A1E4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A1E8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A1EC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A1F0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A1F4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A1F8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A1FC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A200);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A204);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A208);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A20C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A210);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A214);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A218);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A21C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A220);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A224);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A228);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A22C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A230);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A234);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A238);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A23C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A240);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A244);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A248);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A24C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A250);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A254);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A258);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A25C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A260);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A264);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A268);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A26C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A270);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A274);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A278);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A27C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A280);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A284);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A288);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A28C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A290);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A294);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A298);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A29C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A2A0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A2A4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A2A8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A2AC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A2B0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A2B4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A2B8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A2BC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A2C0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A2C4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A2C8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A2CC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A2D0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A2D4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A2D8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A2DC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A2E0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A2E4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A2E8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A2EC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A2F0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A2F4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A2F8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A2FC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A300);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A304);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A308);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A30C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A310);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A314);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A318);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A31C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A320);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A324);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A328);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A32C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A330);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A334);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A338);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A33C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A340);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A344);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A348);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A34C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A350);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A354);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A358);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A35C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A360);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A364);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A368);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A36C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A370);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A374);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A378);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A37C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A380);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A384);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A388);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A38C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A390);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A394);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A398);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A39C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A3A0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A3A4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A3A8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A3AC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A3B0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A3B4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A3B8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A3BC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A3C0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A3C4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A3C8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A3CC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A3D0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A3D4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A3D8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A3DC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A3E0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A3E4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A3E8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A3EC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A3F0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A3F4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A3F8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A3FC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A400);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A404);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A408);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A40C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A410);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A414);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A418);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A41C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A420);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A424);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A428);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A42C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A430);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A434);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A438);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A43C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A440);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A444);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A448);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A44C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A450);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A454);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A458);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A45C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A460);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A464);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A468);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A46C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A470);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A474);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A478);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A47C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A480);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A484);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A488);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A48C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A490);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A494);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A498);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A49C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A4A0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A4A4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A4A8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A4AC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A4B0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A4B4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A4B8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A4BC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A4C0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A4C4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A4C8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A4CC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A4D0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A4D4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(0X8A4D8);
	MakeWord	(0X8A4F0);
	MakeDword	(0X8A4F2);
	MakeDword	(0X8A4F6);
	MakeByte	(0X8A4FA);
	MakeByte	(0X8A504);
	MakeByte	(0X8A50C);
	MakeByte	(0X8A514);
	MakeDword	(x=0X8A51C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A520);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A524);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A528);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A52C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A530);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A534);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A538);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A53C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A540);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A544);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A548);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A54C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A550);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A554);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A558);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A55C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A560);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A564);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A568);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A56C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A570);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A574);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A578);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A57C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A580);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A584);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A588);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A58C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A590);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A594);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A598);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(0X8A59C);
	MakeWord	(0X8A59E);
	MakeByte	(0X8A5A0);
	MakeByte	(0X8A5A1);
	MakeByte	(0X8A5A2);
	MakeByte	(0X8A5A3);
	MakeByte	(0X8A5A4);
	MakeWord	(0X8A5A6);
	MakeWord	(0X8A5A8);
	MakeWord	(0X8A5AA);
	MakeByte	(0X8A5AC);
	MakeByte	(0X8A5AD);
	MakeByte	(0X8A5AE);
	MakeByte	(0X8A5AF);
	MakeByte	(0X8A5B0);
	MakeByte	(0X8A5B1);
	MakeByte	(0X8A5B2);
	MakeByte	(0X8A5B3);
	MakeWord	(0X8A5B4);
	MakeWord	(0X8A5B6);
	MakeByte	(0X8A5B8);
	MakeByte	(0X8A5B9);
	MakeWord	(0X8A5BA);
	MakeDword	(x=0X8A5BC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A5C0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A5C4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A5C8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A5CC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A5D0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A5D4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A5D8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A5DC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A5E0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A5E4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A5E8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A5EC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A5F0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A5F4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A5F8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A5FC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A600);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A604);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A608);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A60C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A610);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A614);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A618);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A61C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A620);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A624);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A628);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A62C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A630);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A634);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A638);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A63C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A640);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A644);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A648);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A64C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A650);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A654);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A658);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A65C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A660);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A664);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A668);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A66C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A670);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A674);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A678);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A67C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A680);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A684);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A688);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A68C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A690);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A694);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A698);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A69C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A6A0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A6A4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(0X8A6B4);
	MakeDword	(0X8A6B8);
	MakeDword	(0X8A6BC);
	MakeDword	(0X8A6C0);
	MakeDword	(x=0X8A6C4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A6C8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A6CC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A6D0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A6D4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A6D8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A6DC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A6E0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A6E4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A6E8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A6EC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A6F0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A6F4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A6F8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A6FC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A700);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A704);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A708);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A70C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A710);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A714);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A718);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A71C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A720);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A724);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeByte	(0X8A728);
	MakeByte	(0X8A730);
	MakeDword	(x=0X8A740);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A744);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A748);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A74C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A750);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(0X8A75A);
	MakeDword	(x=0X8A75C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A768);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A76C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A770);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A774);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A778);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A77C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A780);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A784);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A788);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A78C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A790);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A794);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A798);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A79C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A7A0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A7A4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A7A8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A7AC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeDword	(x=0X8A7B0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeByte	(0X8A7B4);
	MakeByte	(0X8A7B5);
	MakeByte	(0X8A7B6);
	MakeByte	(0X8A7B7);
	MakeByte	(0X8A7B9);
	MakeWord	(0X8A7BC);
	MakeStr		(0X8A7C8,	0X8A7D1);
	MakeName	(0X8A7C8,	"a12587603");
	MakeByte	(0X8A7D1);
	MakeArray	(0X8A7D1,	0X7);
	MakeWord	(0X8A7D8);
	MakeDword	(0X8A7DA);
	MakeWord	(0X8A7DE);
	MakeDword	(0X8A7E0);
	MakeByte	(0X8A7E5);
	MakeByte	(0X8A7E8);
	MakeByte	(0X8A7F0);
	MakeWord	(0X8A7F6);
	MakeWord	(0X8A7FA);
	MakeWord	(0X8A7FC);
	MakeByte	(0X8A7FE);
	MakeArray	(0X8A7FE,	0X2);
	MakeWord	(0X8A800);
	MakeWord	(0X8A804);
	MakeWord	(0X8A80A);
	MakeWord	(0X8A80E);
	MakeWord	(0X8A810);
	MakeWord	(0X8A812);
	MakeWord	(0X8A814);
	MakeWord	(0X8A816);
	MakeWord	(0X8A818);
	MakeWord	(0X8A81A);
	MakeWord	(0X8A81C);
	MakeWord	(0X8A81E);
	MakeDword	(0X8A820);
	MakeByte	(0X8A824);
	MakeDword	(x=0X8A826);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeByte	(0X8A82A);
	MakeByte	(0X8A82B);
	MakeByte	(0X8A82C);
	MakeByte	(0X8A82E);
	MakeByte	(0X8A82F);
	MakeWord	(0X8A830);
	MakeWord	(0X8A832);
	MakeWord	(0X8A834);
	MakeByte	(0X8A836);
	MakeByte	(0X8A837);
	MakeWord	(0X8A83A);
	MakeWord	(0X8A83C);
	MakeByte	(0XFF614D);
	MakeDword	(0XFF614E);
	MakeByte	(0XFF82B1);
	MakeByte	(0XFF82EC);
	MakeDword	(0XFF869E);
	MakeByte	(0XFF86A2);
	MakeByte	(0XFF86A3);
	MakeByte	(0XFF86A4);
	MakeByte	(0XFF86A5);
	MakeDword	(0XFF86A6);
	MakeByte	(0XFF86AA);
	MakeWord	(0XFF86AC);
	MakeWord	(0XFF86AE);
	MakeByte	(0XFF86B0);
	MakeByte	(0XFF86B1);
	MakeByte	(0XFF86B2);
	MakeByte	(0XFF86B3);
	MakeWord	(0XFF86B4);
	MakeWord	(0XFF86B6);
	MakeByte	(0XFF86B8);
	MakeWord	(0XFF8D5C);
	MakeByte	(0XFF8D5E);
	MakeByte	(0XFF8D5F);
	MakeByte	(0XFF8D60);
	MakeByte	(0XFF8D61);
	MakeWord	(0XFF8D62);
	MakeDword	(0XFF8D64);
	MakeWord	(0XFF8D68);
	MakeWord	(0XFF8D6A);
	MakeWord	(0XFF8D6C);
	MakeWord	(0XFF8D6E);
	MakeWord	(0XFF8D70);
	MakeWord	(0XFF8D72);
	MakeWord	(0XFF8D74);
	MakeWord	(0XFF8D76);
	MakeWord	(0XFF8D78);
	MakeWord	(0XFF8D7A);
	MakeWord	(0XFF8D7C);
	MakeWord	(0XFF8D7E);
	MakeWord	(0XFF8D80);
	MakeWord	(0XFF8D82);
	MakeWord	(0XFF8D84);
	MakeWord	(0XFF8D86);
	MakeWord	(0XFF8D88);
	MakeWord	(0XFF8D8A);
	MakeWord	(0XFF8D8C);
	MakeWord	(0XFF8D8E);
	MakeWord	(0XFF8D90);
	MakeByte	(0XFF8D92);
	MakeByte	(0XFF8D93);
	MakeWord	(0XFF8D94);
	MakeWord	(0XFF8D96);
	MakeWord	(0XFF8D98);
	MakeWord	(0XFF8D9A);
	MakeWord	(0XFF8D9C);
	MakeWord	(0XFF8D9E);
	MakeWord	(0XFF8DA0);
	MakeWord	(0XFF8DA2);
	MakeWord	(0XFF8DA6);
	MakeByte	(0XFFA007);
	MakeWord	(0XFFA014);
	MakeByte	(0XFFA050);
	MakeByte	(0XFFA051);
	MakeArray	(0XFFA051,	0X7);
	MakeWord	(0XFFB5E8);
	MakeWord	(0XFFFF8000);
	MakeWord	(0XFFFF8002);
	MakeWord	(0XFFFF8032);
	MakeDword	(0XFFFF8034);
	MakeDword	(0XFFFF8038);
	MakeByte	(0XFFFF803C);
	MakeByte	(0XFFFF803D);
	MakeDword	(0XFFFF803E);
	MakeDword	(0XFFFF8042);
	MakeWord	(0XFFFF8046);
	MakeWord	(0XFFFF8048);
	MakeWord	(0XFFFF804A);
	MakeByte	(0XFFFF804C);
	MakeByte	(0XFFFF804D);
	MakeByte	(0XFFFF804E);
	MakeByte	(0XFFFF804F);
	MakeWord	(0XFFFF8056);
	MakeWord	(0XFFFF8058);
	MakeWord	(0XFFFF805C);
	MakeWord	(0XFFFF805E);
	MakeDword	(0XFFFF8088);
	MakeWord	(0XFFFF808C);
	MakeDword	(0XFFFF808E);
	MakeDword	(0XFFFF8092);
	MakeByte	(0XFFFF80DE);
	MakeByte	(0XFFFF80DF);
	MakeWord	(0XFFFF814C);
	MakeWord	(0XFFFF8178);
	MakeName	(0XFFFF8178,	"IdleTrimWithAC");
	MakeWord	(0XFFFF817A);
	MakeName	(0XFFFF817A,	"IdleTrimDrive");
	MakeWord	(0XFFFF817C);
	MakeName	(0XFFFF817C,	"IdleTrimParkNeutral");
	MakeWord	(0XFFFF817E);
	MakeName	(0XFFFF817E,	"IdleTrimDriveWithAC");
	MakeWord	(0XFFFF8180);
	MakeName	(0XFFFF8180,	"IdleTrimParkNeutralWithAC");
	MakeWord	(0XFFFF8182);
	MakeDword	(0XFFFF8184);
	MakeDword	(0XFFFF8188);
	MakeDword	(0XFFFF818C);
	MakeDword	(0XFFFF8190);
	MakeWord	(0XFFFF8194);
	MakeWord	(0XFFFF8196);
	MakeWord	(0XFFFF8198);
	MakeWord	(0XFFFF819A);
	MakeByte	(0XFFFF819C);
	MakeByte	(0XFFFF819D);
	MakeByte	(0XFFFF81B8);
	MakeByte	(0XFFFF81B9);
	MakeDword	(0XFFFF81BA);
	MakeDword	(0XFFFF81BE);
	MakeDword	(0XFFFF81C2);
	MakeDword	(0XFFFF81C6);
	MakeDword	(0XFFFF81CA);
	MakeDword	(0XFFFF81D2);
	MakeDword	(0XFFFF81D6);
	MakeDword	(0XFFFF81DA);
	MakeDword	(0XFFFF81DE);
	MakeDword	(0XFFFF81E2);
	MakeDword	(0XFFFF81E6);
	MakeDword	(0XFFFF81EA);
	MakeDword	(0XFFFF81EE);
	MakeDword	(0XFFFF81F2);
	MakeDword	(0XFFFF81F6);
	MakeDword	(0XFFFF81FA);
	MakeDword	(0XFFFF81FE);
	MakeByte	(0XFFFF8202);
	MakeByte	(0XFFFF8203);
	MakeByte	(0XFFFF8204);
	MakeByte	(0XFFFF8205);
	MakeByte	(0XFFFF8206);
	MakeByte	(0XFFFF8207);
	MakeByte	(0XFFFF8208);
	MakeByte	(0XFFFF8209);
	MakeByte	(0XFFFF820A);
	MakeByte	(0XFFFF820B);
	MakeByte	(0XFFFF820C);
	MakeByte	(0XFFFF820D);
	MakeByte	(0XFFFF820E);
	MakeWord	(0XFFFF8210);
	MakeWord	(0XFFFF8212);
	MakeDword	(0XFFFF8214);
	MakeWord	(0XFFFF822C);
	MakeWord	(0XFFFF822E);
	MakeWord	(0XFFFF8230);
	MakeWord	(0XFFFF8232);
	MakeByte	(0XFFFF8234);
	MakeByte	(0XFFFF8235);
	MakeByte	(0XFFFF8236);
	MakeByte	(0XFFFF8237);
	MakeWord	(0XFFFF8238);
	MakeWord	(0XFFFF823A);
	MakeWord	(0XFFFF823C);
	MakeByte	(0XFFFF823E);
	MakeByte	(0XFFFF823F);
	MakeWord	(0XFFFF8240);
	MakeWord	(0XFFFF8242);
	MakeByte	(0XFFFF8244);
	MakeWord	(0XFFFF8246);
	MakeWord	(0XFFFF8248);
	MakeByte	(0XFFFF824A);
	MakeWord	(0XFFFF824C);
	MakeWord	(0XFFFF824E);
	MakeWord	(0XFFFF8250);
	MakeByte	(0XFFFF8252);
	MakeByte	(0XFFFF8253);
	MakeByte	(0XFFFF8254);
	MakeByte	(0XFFFF8255);
	MakeByte	(0XFFFF8256);
	MakeDword	(0XFFFF8258);
	MakeDword	(0XFFFF825C);
	MakeWord	(0XFFFF8260);
	MakeDword	(0XFFFF8262);
	MakeDword	(0XFFFF8266);
	MakeByte	(0XFFFF826A);
	MakeWord	(0XFFFF826C);
	MakeWord	(0XFFFF826E);
	MakeByte	(0XFFFF8270);
	MakeWord	(0XFFFF8272);
	MakeDword	(0XFFFF8274);
	MakeDword	(0XFFFF8278);
	MakeByte	(0XFFFF827C);
	MakeByte	(0XFFFF827D);
	MakeWord	(0XFFFF827E);
	MakeWord	(0XFFFF8280);
	MakeWord	(0XFFFF8282);
	MakeByte	(0XFFFF8284);
	MakeByte	(0XFFFF8285);
	MakeByte	(0XFFFF8286);
	MakeByte	(0XFFFF8287);
	MakeByte	(0XFFFF8288);
	MakeDword	(0XFFFF828A);
	MakeWord	(0XFFFF828E);
	MakeByte	(0XFFFF8290);
	MakeByte	(0XFFFF8291);
	MakeByte	(0XFFFF8292);
	MakeByte	(0XFFFF8293);
	MakeByte	(0XFFFF8294);
	MakeByte	(0XFFFF8295);
	MakeByte	(0XFFFF8296);
	MakeByte	(0XFFFF8297);
	MakeByte	(0XFFFF8298);
	MakeByte	(0XFFFF8299);
	MakeByte	(0XFFFF829A);
	MakeByte	(0XFFFF829B);
	MakeByte	(0XFFFF829C);
	MakeByte	(0XFFFF829D);
	MakeByte	(0XFFFF829E);
	MakeByte	(0XFFFF829F);
	MakeByte	(0XFFFF82A0);
	MakeByte	(0XFFFF82A4);
	MakeByte	(0XFFFF82A6);
	MakeDword	(0XFFFF82A8);
	MakeByte	(0XFFFF82AC);
	MakeByte	(0XFFFF82AE);
	MakeByte	(0XFFFF82AF);
	MakeByte	(0XFFFF82B0);
	MakeWord	(0XFFFF82B2);
	MakeByte	(0XFFFF82B4);
	MakeByte	(0XFFFF82B5);
	MakeByte	(0XFFFF82B6);
	MakeDword	(0XFFFF82B8);
	MakeByte	(0XFFFF82BC);
	MakeByte	(0XFFFF82BE);
	MakeByte	(0XFFFF82BF);
	MakeByte	(0XFFFF82C0);
	MakeByte	(0XFFFF82C1);
	MakeWord	(0XFFFF82C2);
	MakeByte	(0XFFFF82C4);
	MakeByte	(0XFFFF82C5);
	MakeWord	(0XFFFF82C6);
	MakeWord	(0XFFFF82C8);
	MakeWord	(0XFFFF82CA);
	MakeWord	(0XFFFF82CC);
	MakeByte	(0XFFFF82CE);
	MakeByte	(0XFFFF82CF);
	MakeByte	(0XFFFF82D0);
	MakeByte	(0XFFFF82D1);
	MakeWord	(0XFFFF82D2);
	MakeByte	(0XFFFF82D4);
	MakeWord	(0XFFFF82D6);
	MakeWord	(0XFFFF82D8);
	MakeWord	(0XFFFF82DA);
	MakeName	(0XFFFF82DA,	"IgnitionAdvanceMultiplier");
	MakeByte	(0XFFFF82DC);
	MakeByte	(0XFFFF82DD);
	MakeWord	(0XFFFF82DE);
	MakeWord	(0XFFFF82E0);
	MakeWord	(0XFFFF82E2);
	MakeWord	(0XFFFF82E4);
	MakeWord	(0XFFFF82E6);
	MakeWord	(0XFFFF82E8);
	MakeWord	(0XFFFF82EA);
	MakeWord	(0XFFFF86B4);
	MakeWord	(0XFFFF86B6);
	MakeWord	(0XFFFF86BC);
	MakeByte	(0XFFFF86BE);
	MakeByte	(0XFFFF86BF);
	MakeByte	(0XFFFF86C0);
	MakeByte	(0XFFFF86C1);
	MakeByte	(0XFFFF86C2);
	MakeWord	(0XFFFF86C4);
	MakeWord	(0XFFFF86C6);
	MakeWord	(0XFFFF86C8);
	MakeByte	(0XFFFF88C0);
	MakeByte	(0XFFFF88C4);
	MakeByte	(0XFFFF88C6);
	MakeByte	(0XFFFF88C8);
	MakeByte	(0XFFFF88CA);
	MakeByte	(0XFFFF88CC);
	MakeByte	(0XFFFF88CE);
	MakeByte	(0XFFFF88D0);
	MakeByte	(0XFFFF88D2);
	MakeByte	(0XFFFF88D4);
	MakeByte	(0XFFFF88D6);
	MakeByte	(0XFFFF88D8);
	MakeByte	(0XFFFF88DA);
	MakeByte	(0XFFFF88DC);
	MakeByte	(0XFFFF88DE);
	MakeByte	(0XFFFF88E0);
	MakeByte	(0XFFFF88E2);
	MakeByte	(0XFFFF88E4);
	MakeByte	(0XFFFF88E6);
	MakeByte	(0XFFFF88EA);
	MakeByte	(0XFFFF88EC);
	MakeByte	(0XFFFF88EE);
	MakeByte	(0XFFFF88F0);
	MakeByte	(0XFFFF88F2);
	MakeByte	(0XFFFF88F6);
	MakeByte	(0XFFFF88F8);
	MakeByte	(0XFFFF88FA);
	MakeByte	(0XFFFF88FC);
	MakeByte	(0XFFFF8900);
	MakeByte	(0XFFFF8902);
	MakeByte	(0XFFFF8904);
	MakeByte	(0XFFFF8906);
	MakeByte	(0XFFFF8908);
	MakeByte	(0XFFFF890C);
	MakeByte	(0XFFFF890E);
	MakeByte	(0XFFFF8910);
	MakeByte	(0XFFFF8912);
	MakeByte	(0XFFFF8916);
	MakeByte	(0XFFFF891A);
	MakeByte	(0XFFFF891C);
	MakeByte	(0XFFFF8920);
	MakeByte	(0XFFFF8922);
	MakeByte	(0XFFFF8924);
	MakeByte	(0XFFFF8926);
	MakeByte	(0XFFFF8928);
	MakeByte	(0XFFFF892A);
	MakeByte	(0XFFFF892C);
	MakeByte	(0XFFFF892E);
	MakeByte	(0XFFFF8930);
	MakeByte	(0XFFFF8932);
	MakeByte	(0XFFFF8934);
	MakeByte	(0XFFFF893A);
	MakeByte	(0XFFFF893C);
	MakeByte	(0XFFFF8944);
	MakeByte	(0XFFFF8946);
	MakeByte	(0XFFFF8948);
	MakeByte	(0XFFFF894A);
	MakeByte	(0XFFFF894C);
	MakeByte	(0XFFFF894E);
	MakeByte	(0XFFFF8950);
	MakeByte	(0XFFFF8952);
	MakeByte	(0XFFFF8954);
	MakeByte	(0XFFFF8956);
	MakeByte	(0XFFFF8958);
	MakeByte	(0XFFFF895A);
	MakeByte	(0XFFFF895C);
	MakeByte	(0XFFFF8960);
	MakeByte	(0XFFFF8964);
	MakeByte	(0XFFFF8966);
	MakeByte	(0XFFFF8974);
	MakeByte	(0XFFFF8976);
	MakeByte	(0XFFFF8978);
	MakeByte	(0XFFFF897A);
	MakeByte	(0XFFFF897C);
	MakeByte	(0XFFFF897E);
	MakeByte	(0XFFFF8980);
	MakeByte	(0XFFFF8982);
	MakeByte	(0XFFFF8984);
	MakeByte	(0XFFFF8986);
	MakeByte	(0XFFFF8988);
	MakeByte	(0XFFFF8996);
	MakeByte	(0XFFFF8998);
	MakeByte	(0XFFFF899A);
	MakeByte	(0XFFFF899C);
	MakeByte	(0XFFFF899E);
	MakeByte	(0XFFFF89A0);
	MakeByte	(0XFFFF89A2);
	MakeByte	(0XFFFF89A4);
	MakeByte	(0XFFFF89A6);
	MakeByte	(0XFFFF89A8);
	MakeByte	(0XFFFF89AA);
	MakeByte	(0XFFFF89B2);
	MakeByte	(0XFFFF89B4);
	MakeByte	(0XFFFF89B6);
	MakeByte	(0XFFFF89B8);
	MakeByte	(0XFFFF89BA);
	MakeByte	(0XFFFF89C8);
	MakeByte	(0XFFFF89CA);
	MakeByte	(0XFFFF89CC);
	MakeByte	(0XFFFF89D0);
	MakeByte	(0XFFFF89D6);
	MakeByte	(0XFFFF89D8);
	MakeByte	(0XFFFF89DA);
	MakeByte	(0XFFFF89DC);
	MakeByte	(0XFFFF89DE);
	MakeByte	(0XFFFF89E0);
	MakeByte	(0XFFFF89E2);
	MakeByte	(0XFFFF89E4);
	MakeByte	(0XFFFF89E6);
	MakeByte	(0XFFFF89E8);
	MakeByte	(0XFFFF89EA);
	MakeByte	(0XFFFF89EC);
	MakeByte	(0XFFFF89EE);
	MakeByte	(0XFFFF89F0);
	MakeByte	(0XFFFF89F2);
	MakeByte	(0XFFFF89F4);
	MakeByte	(0XFFFF89F6);
	MakeByte	(0XFFFF89F8);
	MakeByte	(0XFFFF89FA);
	MakeByte	(0XFFFF89FC);
	MakeByte	(0XFFFF89FE);
	MakeByte	(0XFFFF8A02);
	MakeByte	(0XFFFF8A08);
	MakeByte	(0XFFFF8A0C);
	MakeByte	(0XFFFF8A0E);
	MakeByte	(0XFFFF8A10);
	MakeByte	(0XFFFF8A12);
	MakeByte	(0XFFFF8A14);
	MakeByte	(0XFFFF8A16);
	MakeByte	(0XFFFF8A1C);
	MakeByte	(0XFFFF8A1E);
	MakeByte	(0XFFFF8A20);
	MakeByte	(0XFFFF8A22);
	MakeByte	(0XFFFF8A24);
	MakeByte	(0XFFFF8A2A);
	MakeByte	(0XFFFF8A3A);
	MakeByte	(0XFFFF8A3E);
	MakeByte	(0XFFFF8A40);
	MakeByte	(0XFFFF8A42);
	MakeByte	(0XFFFF8A44);
	MakeByte	(0XFFFF8A46);
	MakeByte	(0XFFFF8A48);
	MakeByte	(0XFFFF8A4C);
	MakeByte	(0XFFFF8A4E);
	MakeByte	(0XFFFF8A58);
	MakeByte	(0XFFFF8A6E);
	MakeByte	(0XFFFF8A70);
	MakeByte	(0XFFFF8A7C);
	MakeByte	(0XFFFF8A80);
	MakeByte	(0XFFFF8A82);
	MakeByte	(0XFFFF8A84);
	MakeByte	(0XFFFF8A8C);
	MakeByte	(0XFFFF8A8E);
	MakeByte	(0XFFFF8A90);
	MakeByte	(0XFFFF8A92);
	MakeByte	(0XFFFF8A94);
	MakeByte	(0XFFFF8A96);
	MakeByte	(0XFFFF8A98);
	MakeByte	(0XFFFF8A9A);
	MakeByte	(0XFFFF8A9C);
	MakeByte	(0XFFFF8A9E);
	MakeByte	(0XFFFF8AA2);
	MakeByte	(0XFFFF8AA4);
	MakeByte	(0XFFFF8AA6);
	MakeByte	(0XFFFF8AA8);
	MakeByte	(0XFFFF8AAA);
	MakeByte	(0XFFFF8AC6);
	MakeByte	(0XFFFF8AC8);
	MakeByte	(0XFFFF8ACA);
	MakeByte	(0XFFFF8ACB);
	MakeByte	(0XFFFF8ACC);
	MakeByte	(0XFFFF8ACD);
	MakeByte	(0XFFFF8ACE);
	MakeByte	(0XFFFF8ACF);
	MakeWord	(0XFFFF8AD0);
	MakeWord	(0XFFFF8AD2);
	MakeWord	(0XFFFF8AD4);
	MakeWord	(0XFFFF8AD6);
	MakeWord	(0XFFFF8AD8);
	MakeWord	(0XFFFF8ADA);
	MakeWord	(0XFFFF8ADC);
	MakeWord	(0XFFFF8ADE);
	MakeWord	(0XFFFF8AE0);
	MakeWord	(0XFFFF8AE2);
	MakeWord	(0XFFFF8AE4);
	MakeWord	(0XFFFF8AE6);
	MakeDword	(0XFFFF8AE8);
	MakeDword	(0XFFFF8AEC);
	MakeDword	(0XFFFF8AF0);
	MakeDword	(0XFFFF8AF4);
	MakeDword	(0XFFFF8AF8);
	MakeDword	(0XFFFF8AFC);
	MakeDword	(0XFFFF8B00);
	MakeDword	(0XFFFF8B04);
	MakeDword	(0XFFFF8B08);
	MakeDword	(0XFFFF8B0C);
	MakeDword	(0XFFFF8B10);
	MakeDword	(0XFFFF8B14);
	MakeDword	(0XFFFF8B18);
	MakeDword	(0XFFFF8B1C);
	MakeDword	(0XFFFF8B20);
	MakeDword	(0XFFFF8B24);
	MakeDword	(0XFFFF8B28);
	MakeDword	(0XFFFF8B2C);
	MakeDword	(0XFFFF8B30);
	MakeDword	(0XFFFF8B34);
	MakeDword	(0XFFFF8B40);
	MakeDword	(0XFFFF8B44);
	MakeWord	(0XFFFF8B48);
	MakeWord	(0XFFFF8B4E);
	MakeWord	(0XFFFF8B50);
	MakeDword	(0XFFFF8B52);
	MakeWord	(0XFFFF8B56);
	MakeWord	(0XFFFF8B58);
	MakeWord	(0XFFFF8B5A);
	MakeWord	(0XFFFF8B5C);
	MakeWord	(0XFFFF8B5E);
	MakeWord	(0XFFFF8B60);
	MakeDword	(0XFFFF8B62);
	MakeDword	(0XFFFF8B66);
	MakeWord	(0XFFFF8B6A);
	MakeWord	(0XFFFF8B6C);
	MakeWord	(0XFFFF8B6E);
	MakeWord	(0XFFFF8B70);
	MakeWord	(0XFFFF8B72);
	MakeWord	(0XFFFF8B74);
	MakeWord	(0XFFFF8B76);
	MakeWord	(0XFFFF8B78);
	MakeDword	(0XFFFF8B7A);
	MakeDword	(0XFFFF8B7E);
	MakeWord	(0XFFFF8B82);
	MakeWord	(0XFFFF8B84);
	MakeWord	(0XFFFF8B86);
	MakeWord	(0XFFFF8B88);
	MakeWord	(0XFFFF8B8A);
	MakeWord	(0XFFFF8B8C);
	MakeByte	(0XFFFF8B8E);
	MakeByte	(0XFFFF8B8F);
	MakeByte	(0XFFFF8B90);
	MakeByte	(0XFFFF8B91);
	MakeWord	(0XFFFF8B92);
	MakeWord	(0XFFFF8B94);
	MakeWord	(0XFFFF8BCC);
	MakeWord	(0XFFFF8BF2);
	MakeByte	(0XFFFF8BF4);
	MakeByte	(0XFFFF8BF5);
	MakeWord	(0XFFFF8BF6);
	MakeWord	(0XFFFF8BF8);
	MakeWord	(0XFFFF8C0A);
	MakeWord	(0XFFFF8C0C);
	MakeWord	(0XFFFF8C0E);
	MakeWord	(0XFFFF8C10);
	MakeWord	(0XFFFF8C12);
	MakeWord	(0XFFFF8C14);
	MakeWord	(0XFFFF8C16);
	MakeByte	(0XFFFF8C18);
	MakeWord	(0XFFFF8C4E);
	MakeWord	(0XFFFF8C60);
	MakeWord	(0XFFFF8C62);
	MakeWord	(0XFFFF8C64);
	MakeWord	(0XFFFF8C66);
	MakeWord	(0XFFFF8C68);
	MakeWord	(0XFFFF8C6A);
	MakeWord	(0XFFFF8C6C);
	MakeByte	(0XFFFF8C6E);
	MakeByte	(0XFFFF8C6F);
	MakeWord	(0XFFFF8C70);
	MakeWord	(0XFFFF8C72);
	MakeWord	(0XFFFF8C74);
	MakeWord	(0XFFFF8C76);
	MakeWord	(0XFFFF8C78);
	MakeWord	(0XFFFF8C7A);
	MakeWord	(0XFFFF8C7C);
	MakeWord	(0XFFFF8C7E);
	MakeWord	(0XFFFF8C80);
	MakeWord	(0XFFFF8C82);
	MakeWord	(0XFFFF8C84);
	MakeWord	(0XFFFF8C86);
	MakeWord	(0XFFFF8C88);
	MakeWord	(0XFFFF8C8A);
	MakeWord	(0XFFFF8C8C);
	MakeDword	(0XFFFF8C8E);
	MakeDword	(0XFFFF8C92);
	MakeWord	(0XFFFF8C96);
	MakeDword	(0XFFFF8C98);
	MakeDword	(0XFFFF8C9C);
	MakeByte	(0XFFFF8CA0);
	MakeDword	(0XFFFF8CA2);
	MakeDword	(0XFFFF8CA6);
	MakeByte	(0XFFFF8CAA);
	MakeWord	(0XFFFF8CAC);
	MakeWord	(0XFFFF8CAE);
	MakeWord	(0XFFFF8CB2);
	MakeWord	(0XFFFF8CB4);
	MakeWord	(0XFFFF8CC4);
	MakeByte	(0XFFFF8CC6);
	MakeDword	(0XFFFF8CD6);
	MakeDword	(0XFFFF8CDA);
	MakeDword	(0XFFFF8CDE);
	MakeDword	(0XFFFF8CE2);
	MakeWord	(0XFFFF8CE6);
	MakeWord	(0XFFFF8CE8);
	MakeWord	(0XFFFF8CEA);
	MakeWord	(0XFFFF8CEC);
	MakeWord	(0XFFFF8CEE);
	MakeWord	(0XFFFF8CF0);
	MakeWord	(0XFFFF8CF2);
	MakeWord	(0XFFFF8CF4);
	MakeByte	(0XFFFF8CF6);
	MakeByte	(0XFFFF8CF7);
	MakeByte	(0XFFFF8CF8);
	MakeByte	(0XFFFF8CF9);
	MakeByte	(0XFFFF8CFA);
	MakeByte	(0XFFFF8CFB);
	MakeWord	(0XFFFF8CFC);
	MakeWord	(0XFFFF8CFE);
	MakeWord	(0XFFFF8D00);
	MakeWord	(0XFFFF8D02);
	MakeWord	(0XFFFF8D04);
	MakeWord	(0XFFFF8D06);
	MakeWord	(0XFFFF8D08);
	MakeWord	(0XFFFF8D0A);
	MakeWord	(0XFFFF8D0C);
	MakeWord	(0XFFFF8D0E);
	MakeWord	(0XFFFF8D10);
	MakeWord	(0XFFFF8D12);
	MakeWord	(0XFFFF8D14);
	MakeByte	(0XFFFF8D16);
	MakeByte	(0XFFFF8D17);
	MakeByte	(0XFFFF8D18);
	MakeByte	(0XFFFF8D19);
	MakeByte	(0XFFFF8D1A);
	MakeByte	(0XFFFF8D1B);
	MakeByte	(0XFFFF8D1C);
	MakeWord	(0XFFFF8D1E);
	MakeByte	(0XFFFF8D20);
	MakeDword	(0XFFFF8D22);
	MakeDword	(0XFFFF8D26);
	MakeWord	(0XFFFF8D2A);
	MakeWord	(0XFFFF8D2C);
	MakeWord	(0XFFFF8D2E);
	MakeWord	(0XFFFF8D30);
	MakeWord	(0XFFFF8D32);
	MakeWord	(0XFFFF8D34);
	MakeWord	(0XFFFF8D36);
	MakeWord	(0XFFFF8D38);
	MakeByte	(0XFFFF8D3A);
	MakeByte	(0XFFFF8D3B);
	MakeByte	(0XFFFF8D3C);
	MakeWord	(0XFFFF8D3E);
	MakeDword	(0XFFFF8D40);
	MakeWord	(0XFFFF8D44);
	MakeWord	(0XFFFF8D46);
	MakeWord	(0XFFFF8D48);
	MakeByte	(0XFFFF8D4A);
	MakeByte	(0XFFFF8D4B);
	MakeWord	(0XFFFF8D4C);
	MakeWord	(0XFFFF8D4E);
	MakeWord	(0XFFFF8D54);
	MakeByte	(0XFFFF8D56);
	MakeWord	(0XFFFF8D58);
	MakeWord	(0XFFFF8D5A);
	MakeByte	(0XFFFF8DAC);
	MakeByte	(0XFFFF8DAD);
	MakeWord	(0XFFFF8FF0);
	MakeDword	(0XFFFF8FF2);
	MakeWord	(0XFFFF8FF6);
	MakeDword	(0XFFFF8FF8);
	MakeWord	(0XFFFF9000);
	MakeByte	(0XFFFF9002);
	MakeByte	(0XFFFF9003);
	MakeByte	(0XFFFF9004);
	MakeByte	(0XFFFF9005);
	MakeWord	(0XFFFF9006);
	MakeWord	(0XFFFF9008);
	MakeWord	(0XFFFF900A);
	MakeWord	(0XFFFF900C);
	MakeByte	(0XFFFF900E);
	MakeByte	(0XFFFF900F);
	MakeByte	(0XFFFF9010);
	MakeWord	(0XFFFF9012);
	MakeWord	(0XFFFF9014);
	MakeWord	(0XFFFF9016);
	MakeWord	(0XFFFF9018);
	MakeWord	(0XFFFF901A);
	MakeWord	(0XFFFF901C);
	MakeWord	(0XFFFF901E);
	MakeWord	(0XFFFF9020);
	MakeByte	(0XFFFF9022);
	MakeByte	(0XFFFF9023);
	MakeByte	(0XFFFF9024);
	MakeByte	(0XFFFF9025);
	MakeByte	(0XFFFF9026);
	MakeByte	(0XFFFF9027);
	MakeByte	(0XFFFF9028);
	MakeWord	(0XFFFF902A);
	MakeWord	(0XFFFF902C);
	MakeWord	(0XFFFF902E);
	MakeWord	(0XFFFF9030);
	MakeWord	(0XFFFF9032);
	MakeByte	(0XFFFF9034);
	MakeByte	(0XFFFF9035);
	MakeWord	(0XFFFF9036);
	MakeByte	(0XFFFF9038);
	MakeByte	(0XFFFF9039);
	MakeWord	(0XFFFF903A);
	MakeWord	(0XFFFF903C);
	MakeByte	(0XFFFF903E);
	MakeWord	(0XFFFF9040);
	MakeWord	(0XFFFF9042);
	MakeWord	(0XFFFF9044);
	MakeWord	(0XFFFF9046);
	MakeWord	(0XFFFF9048);
	MakeWord	(0XFFFF904A);
	MakeByte	(0XFFFF904C);
	MakeByte	(0XFFFF904D);
	MakeByte	(0XFFFF904E);
	MakeByte	(0XFFFF904F);
	MakeWord	(0XFFFF9050);
	MakeWord	(0XFFFF9052);
	MakeName	(0XFFFF9052,	"ThrottleArea2");
	MakeWord	(0XFFFF9054);
	MakeName	(0XFFFF9054,	"ThrottleArea3");
	MakeWord	(0XFFFF9056);
	MakeName	(0XFFFF9056,	"ThrottleArea1");
	MakeWord	(0XFFFF9058);
	MakeName	(0XFFFF9058,	"DBW_Desired_Throttle_Area?__OrThrottleMode?");
	MakeWord	(0XFFFF905A);
	MakeWord	(0XFFFF905C);
	MakeByte	(0XFFFF905E);
	MakeByte	(0XFFFF905F);
	MakeName	(0XFFFF905F,	"DBW_Mode?_1");
	MakeByte	(0XFFFF9060);
	MakeByte	(0XFFFF9061);
	MakeByte	(0XFFFF9062);
	MakeByte	(0XFFFF9063);
	MakeByte	(0XFFFF9064);
	MakeName	(0XFFFF9064,	"Dbw_Model?_2");
	MakeWord	(0XFFFF9066);
	MakeWord	(0XFFFF9068);
	MakeWord	(0XFFFF906A);
	MakeWord	(0XFFFF906C);
	MakeWord	(0XFFFF906E);
	MakeWord	(0XFFFF9070);
	MakeWord	(0XFFFF9072);
	MakeWord	(0XFFFF9074);
	MakeWord	(0XFFFF9076);
	MakeWord	(0XFFFF9078);
	MakeWord	(0XFFFF907A);
	MakeWord	(0XFFFF907C);
	MakeWord	(0XFFFF907E);
	MakeWord	(0XFFFF9080);
	MakeByte	(0XFFFF9082);
	MakeByte	(0XFFFF9083);
	MakeByte	(0XFFFF9084);
	MakeByte	(0XFFFF9085);
	MakeWord	(0XFFFF9086);
	MakeName	(0XFFFF9086,	"IdleLearningAmount?");
	MakeWord	(0XFFFF9088);
	MakeName	(0XFFFF9088,	"DBW_Idle_OpeningPercent");
	MakeWord	(0XFFFF908A);
	MakeWord	(0XFFFF908C);
	MakeWord	(0XFFFF908E);
	MakeWord	(0XFFFF9090);
	MakeWord	(0XFFFF9092);
	MakeWord	(0XFFFF9094);
	MakeWord	(0XFFFF9096);
	MakeWord	(0XFFFF9098);
	MakeWord	(0XFFFF909A);
	MakeWord	(0XFFFF909C);
	MakeWord	(0XFFFF909E);
	MakeWord	(0XFFFF90A0);
	MakeByte	(0XFFFF90A2);
	MakeByte	(0XFFFF90A3);
	MakeByte	(0XFFFF90A4);
	MakeByte	(0XFFFF90A5);
	MakeWord	(0XFFFF90A6);
	MakeName	(0XFFFF90A6,	"ThrottleArea_MainVar?");
	MakeDword	(0XFFFF90A8);
	MakeDword	(0XFFFF90AC);
	MakeDword	(0XFFFF90B0);
	MakeDword	(0XFFFF90B4);
	MakeDword	(0XFFFF90B8);
	MakeByte	(0XFFFF90BC);
	MakeByte	(0XFFFF90BD);
	MakeWord	(0XFFFF90BE);
	MakeByte	(0XFFFF90C0);
	MakeByte	(0XFFFF90C1);
	MakeWord	(0XFFFF90C2);
	MakeWord	(0XFFFF90C4);
	MakeByte	(0XFFFF90C6);
	MakeByte	(0XFFFF90C7);
	MakeByte	(0XFFFF90C8);
	MakeByte	(0XFFFF90C9);
	MakeByte	(0XFFFF90CA);
	MakeByte	(0XFFFF90CB);
	MakeByte	(0XFFFF90CC);
	MakeByte	(0XFFFF90CD);
	MakeByte	(0XFFFF90CE);
	MakeByte	(0XFFFF90CF);
	MakeByte	(0XFFFF90D0);
	MakeByte	(0XFFFF90D1);
	MakeByte	(0XFFFF90D2);
	MakeByte	(0XFFFF90D3);
	MakeByte	(0XFFFF90D4);
	MakeByte	(0XFFFF90D5);
	MakeByte	(0XFFFF90D6);
	MakeByte	(0XFFFF90D7);
	MakeByte	(0XFFFF90D8);
	MakeByte	(0XFFFF90D9);
	MakeByte	(0XFFFF90DA);
	MakeByte	(0XFFFF90DB);
	MakeByte	(0XFFFF90DC);
	MakeByte	(0XFFFF90DD);
	MakeByte	(0XFFFF90DE);
	MakeByte	(0XFFFF90DF);
	MakeByte	(0XFFFF90E0);
	MakeByte	(0XFFFF90E1);
	MakeByte	(0XFFFF90E2);
	MakeByte	(0XFFFF90E3);
	MakeByte	(0XFFFF90E5);
	MakeByte	(0XFFFF90E6);
	MakeByte	(0XFFFF90E7);
	MakeByte	(0XFFFF90E8);
	MakeWord	(0XFFFF90EA);
	MakeWord	(0XFFFF90EC);
	MakeByte	(0XFFFF90EE);
	MakeByte	(0XFFFF90EF);
	MakeByte	(0XFFFF90F0);
	MakeWord	(0XFFFF90F2);
	MakeByte	(0XFFFF90F4);
	MakeByte	(0XFFFF90F5);
	MakeByte	(0XFFFF90F6);
	MakeByte	(0XFFFF90F7);
	MakeByte	(0XFFFF90F8);
	MakeByte	(0XFFFF90F9);
	MakeByte	(0XFFFF90FA);
	MakeByte	(0XFFFF90FB);
	MakeWord	(0XFFFF90FC);
	MakeByte	(0XFFFF90FE);
	MakeByte	(0XFFFF90FF);
	MakeByte	(0XFFFF9100);
	MakeByte	(0XFFFF9101);
	MakeByte	(0XFFFF9102);
	MakeByte	(0XFFFF9103);
	MakeByte	(0XFFFF9104);
	MakeByte	(0XFFFF9105);
	MakeByte	(0XFFFF9106);
	MakeByte	(0XFFFF9107);
	MakeByte	(0XFFFF9108);
	MakeWord	(0XFFFF910A);
	MakeByte	(0XFFFF910C);
	MakeWord	(0XFFFF910E);
	MakeByte	(0XFFFF9110);
	MakeByte	(0XFFFF9111);
	MakeByte	(0XFFFF9112);
	MakeByte	(0XFFFF9113);
	MakeWord	(0XFFFF9114);
	MakeDword	(0XFFFF9116);
	MakeByte	(0XFFFF911A);
	MakeWord	(0XFFFF911C);
	MakeByte	(0XFFFF911E);
	MakeByte	(0XFFFF911F);
	MakeByte	(0XFFFF9120);
	MakeByte	(0XFFFF9121);
	MakeByte	(0XFFFF9122);
	MakeByte	(0XFFFF9123);
	MakeByte	(0XFFFF9124);
	MakeByte	(0XFFFF9125);
	MakeByte	(0XFFFF9126);
	MakeByte	(0XFFFF9127);
	MakeByte	(0XFFFF9128);
	MakeByte	(0XFFFF9129);
	MakeByte	(0XFFFF912A);
	MakeWord	(0XFFFF912C);
	MakeByte	(0XFFFF912E);
	MakeByte	(0XFFFF912F);
	MakeByte	(0XFFFF9130);
	MakeByte	(0XFFFF9131);
	MakeByte	(0XFFFF9132);
	MakeByte	(0XFFFF9133);
	MakeByte	(0XFFFF9134);
	MakeByte	(0XFFFF9135);
	MakeByte	(0XFFFF9136);
	MakeByte	(0XFFFF9137);
	MakeByte	(0XFFFF9138);
	MakeByte	(0XFFFF9139);
	MakeByte	(0XFFFF913A);
	MakeByte	(0XFFFF913B);
	MakeByte	(0XFFFF913C);
	MakeByte	(0XFFFF913D);
	MakeByte	(0XFFFF913E);
	MakeByte	(0XFFFF913F);
	MakeByte	(0XFFFF9140);
	MakeByte	(0XFFFF9141);
	MakeByte	(0XFFFF9142);
	MakeByte	(0XFFFF9143);
	MakeByte	(0XFFFF9144);
	MakeByte	(0XFFFF9145);
	MakeByte	(0XFFFF9146);
	MakeByte	(0XFFFF9147);
	MakeByte	(0XFFFF9148);
	MakeByte	(0XFFFF9149);
	MakeByte	(0XFFFF914A);
	MakeByte	(0XFFFF914B);
	MakeByte	(0XFFFF914C);
	MakeByte	(0XFFFF914D);
	MakeByte	(0XFFFF914E);
	MakeByte	(0XFFFF914F);
	MakeByte	(0XFFFF9150);
	MakeByte	(0XFFFF9151);
	MakeByte	(0XFFFF9152);
	MakeByte	(0XFFFF9153);
	MakeByte	(0XFFFF9154);
	MakeByte	(0XFFFF9155);
	MakeByte	(0XFFFF9156);
	MakeByte	(0XFFFF9157);
	MakeByte	(0XFFFF9158);
	MakeByte	(0XFFFF9159);
	MakeByte	(0XFFFF915A);
	MakeByte	(0XFFFF915B);
	MakeByte	(0XFFFF915C);
	MakeByte	(0XFFFF915D);
	MakeByte	(0XFFFF915E);
	MakeByte	(0XFFFF915F);
	MakeByte	(0XFFFF9160);
	MakeByte	(0XFFFF9161);
	MakeByte	(0XFFFF9162);
	MakeByte	(0XFFFF9163);
	MakeByte	(0XFFFF9164);
	MakeByte	(0XFFFF9165);
	MakeByte	(0XFFFF9166);
	MakeByte	(0XFFFF9167);
	MakeWord	(0XFFFF9168);
	MakeWord	(0XFFFF916A);
	MakeWord	(0XFFFF916C);
	MakeWord	(0XFFFF916E);
	MakeWord	(0XFFFF9170);
	MakeWord	(0XFFFF9172);
	MakeWord	(0XFFFF9174);
	MakeByte	(0XFFFF9176);
	MakeByte	(0XFFFF9177);
	MakeByte	(0XFFFF9178);
	MakeByte	(0XFFFF9179);
	MakeWord	(0XFFFF917A);
	MakeWord	(0XFFFF917C);
	MakeWord	(0XFFFF917E);
	MakeWord	(0XFFFF9180);
	MakeWord	(0XFFFF9182);
	MakeWord	(0XFFFF9184);
	MakeWord	(0XFFFF9186);
	MakeWord	(0XFFFF9188);
	MakeWord	(0XFFFF918A);
	MakeWord	(0XFFFF918C);
	MakeWord	(0XFFFF918E);
	MakeWord	(0XFFFF9190);
	MakeWord	(0XFFFF9192);
	MakeWord	(0XFFFF9194);
	MakeWord	(0XFFFF9196);
	MakeWord	(0XFFFF9198);
	MakeWord	(0XFFFF919A);
	MakeWord	(0XFFFF919C);
	MakeWord	(0XFFFF919E);
	MakeWord	(0XFFFF91A0);
	MakeWord	(0XFFFF91A2);
	MakeWord	(0XFFFF91A4);
	MakeWord	(0XFFFF91A6);
	MakeWord	(0XFFFF91A8);
	MakeWord	(0XFFFF91AA);
	MakeWord	(0XFFFF91AC);
	MakeWord	(0XFFFF91AE);
	MakeWord	(0XFFFF91B0);
	MakeWord	(0XFFFF91B2);
	MakeWord	(0XFFFF91B4);
	MakeWord	(0XFFFF91B6);
	MakeWord	(0XFFFF91B8);
	MakeByte	(0XFFFF91BA);
	MakeWord	(0XFFFF91BC);
	MakeDword	(0XFFFF91BE);
	MakeWord	(0XFFFF91C2);
	MakeWord	(0XFFFF91C4);
	MakeWord	(0XFFFF91C6);
	MakeWord	(0XFFFF91C8);
	MakeWord	(0XFFFF91CA);
	MakeByte	(0XFFFF91CC);
	MakeByte	(0XFFFF91CD);
	MakeWord	(0XFFFF91CE);
	MakeByte	(0XFFFF91D0);
	MakeByte	(0XFFFF91D1);
	MakeByte	(0XFFFF91D2);
	MakeByte	(0XFFFF91D3);
	MakeByte	(0XFFFF91D4);
	MakeByte	(0XFFFF91D5);
	MakeDword	(0XFFFF91D6);
	MakeByte	(0XFFFF91DA);
	MakeByte	(0XFFFF91DB);
	MakeByte	(0XFFFF91DC);
	MakeByte	(0XFFFF91DD);
	MakeByte	(0XFFFF91DE);
	MakeByte	(0XFFFF91DF);
	MakeByte	(0XFFFF91E0);
	MakeByte	(0XFFFF91E1);
	MakeByte	(0XFFFF91E2);
	MakeByte	(0XFFFF91E3);
	MakeByte	(0XFFFF91E4);
	MakeByte	(0XFFFF91E5);
	MakeByte	(0XFFFF91E6);
	MakeByte	(0XFFFF91E7);
	MakeByte	(0XFFFF91E8);
	MakeWord	(0XFFFF91EA);
	MakeWord	(0XFFFF91EC);
	MakeByte	(0XFFFF91EE);
	MakeByte	(0XFFFF91EF);
	MakeByte	(0XFFFF91F0);
	MakeByte	(0XFFFF91F1);
	MakeByte	(0XFFFF91F2);
	MakeByte	(0XFFFF91F3);
	MakeWord	(0XFFFF91F4);
	MakeWord	(0XFFFF91F6);
	MakeWord	(0XFFFF9250);
	MakeWord	(0XFFFF9252);
	MakeDword	(0XFFFF9288);
	MakeDword	(0XFFFF92C8);
	MakeByte	(0XFFFF92CC);
	MakeByte	(0XFFFF92CD);
	MakeByte	(0XFFFF92CE);
	MakeWord	(0XFFFF92D0);
	MakeWord	(0XFFFF92D2);
	MakeDword	(0XFFFF92D4);
	MakeByte	(0XFFFF92D8);
	MakeByte	(0XFFFF92D9);
	MakeWord	(0XFFFF92DA);
	MakeDword	(0XFFFF92DC);
	MakeWord	(0XFFFF92E0);
	MakeByte	(0XFFFF92E2);
	MakeByte	(0XFFFF92E3);
	MakeByte	(0XFFFF92E4);
	MakeDword	(0XFFFF92E6);
	MakeByte	(0XFFFF92EA);
	MakeDword	(0XFFFF92EC);
	MakeByte	(0XFFFF92F0);
	MakeByte	(0XFFFF92F1);
	MakeDword	(0XFFFF92F2);
	MakeByte	(0XFFFF92FA);
	MakeByte	(0XFFFF92FC);
	MakeByte	(0XFFFF9302);
	MakeByte	(0XFFFF9303);
	MakeByte	(0XFFFF9304);
	MakeByte	(0XFFFF9305);
	MakeByte	(0XFFFF9306);
	MakeByte	(0XFFFF9307);
	MakeByte	(0XFFFF9308);
	MakeWord	(0XFFFF930A);
	MakeByte	(0XFFFF9320);
	MakeByte	(0XFFFF9321);
	MakeWord	(0XFFFF9322);
	MakeDword	(0XFFFF9334);
	MakeWord	(0XFFFF93BE);
	MakeByte	(0XFFFF93C0);
	MakeByte	(0XFFFF93C1);
	MakeWord	(0XFFFF93C2);
	MakeByte	(0XFFFF93C4);
	MakeByte	(0XFFFF93C5);
	MakeDword	(0XFFFF93C6);
	MakeWord	(0XFFFF93CA);
	MakeWord	(0XFFFF93CC);
	MakeWord	(0XFFFF93CE);
	MakeWord	(0XFFFF93D0);
	MakeWord	(0XFFFF93D2);
	MakeDword	(0XFFFF93D4);
	MakeWord	(0XFFFF93D8);
	MakeWord	(0XFFFF93DA);
	MakeByte	(0XFFFF93DC);
	MakeByte	(0XFFFF93DD);
	MakeByte	(0XFFFF93DE);
	MakeByte	(0XFFFF93DF);
	MakeWord	(0XFFFF93E0);
	MakeWord	(0XFFFF93E2);
	MakeByte	(0XFFFF93E4);
	MakeByte	(0XFFFF93E5);
	MakeByte	(0XFFFF93E6);
	MakeByte	(0XFFFF93E7);
	MakeByte	(0XFFFF93E8);
	MakeByte	(0XFFFF93E9);
	MakeByte	(0XFFFF93EA);
	MakeByte	(0XFFFF93EB);
	MakeWord	(0XFFFF93EE);
	MakeByte	(0XFFFF93F0);
	MakeByte	(0XFFFF93F1);
	MakeByte	(0XFFFF93F2);
	MakeByte	(0XFFFF93F3);
	MakeByte	(0XFFFF93F4);
	MakeByte	(0XFFFF93F5);
	MakeByte	(0XFFFF93F6);
	MakeByte	(0XFFFF93F7);
	MakeByte	(0XFFFF93F8);
	MakeByte	(0XFFFF93F9);
	MakeWord	(0XFFFF93FA);
	MakeWord	(0XFFFF93FC);
	MakeWord	(0XFFFF93FE);
	MakeWord	(0XFFFF9400);
	MakeWord	(0XFFFF9402);
	MakeWord	(0XFFFF9404);
	MakeByte	(0XFFFF9406);
	MakeWord	(0XFFFF9408);
	MakeByte	(0XFFFF940A);
	MakeWord	(0XFFFF940C);
	MakeWord	(0XFFFF940E);
	MakeWord	(0XFFFF9410);
	MakeWord	(0XFFFF9412);
	MakeWord	(0XFFFF9414);
	MakeByte	(0XFFFF9416);
	MakeWord	(0XFFFF9418);
	MakeByte	(0XFFFF941A);
	MakeWord	(0XFFFF941C);
	MakeWord	(0XFFFF941E);
	MakeWord	(0XFFFF9420);
	MakeWord	(0XFFFF9422);
	MakeWord	(0XFFFF9424);
	MakeWord	(0XFFFF9426);
	MakeWord	(0XFFFF9428);
	MakeWord	(0XFFFF942A);
	MakeWord	(0XFFFF942C);
	MakeWord	(0XFFFF942E);
	MakeWord	(0XFFFF9430);
	MakeWord	(0XFFFF9432);
	MakeDword	(0XFFFF9434);
	MakeDword	(0XFFFF9438);
	MakeDword	(0XFFFF943C);
	MakeDword	(0XFFFF9440);
	MakeDword	(0XFFFF9444);
	MakeDword	(0XFFFF9448);
	MakeWord	(0XFFFF944C);
	MakeWord	(0XFFFF944E);
	MakeDword	(0XFFFF9450);
	MakeWord	(0XFFFF9454);
	MakeByte	(0XFFFF9476);
	MakeByte	(0XFFFF9477);
	MakeWord	(0XFFFF9478);
	MakeWord	(0XFFFF947A);
	MakeByte	(0XFFFF947C);
	MakeByte	(0XFFFF947D);
	MakeByte	(0XFFFF947E);
	MakeByte	(0XFFFF947F);
	MakeWord	(0XFFFF9480);
	MakeWord	(0XFFFF9482);
	MakeWord	(0XFFFF9484);
	MakeByte	(0XFFFF9486);
	MakeWord	(0XFFFF9488);
	MakeByte	(0XFFFF948A);
	MakeByte	(0XFFFF948B);
	MakeByte	(0XFFFF948C);
	MakeByte	(0XFFFF948D);
	MakeWord	(0XFFFF948E);
	MakeByte	(0XFFFF9490);
	MakeWord	(0XFFFF9492);
	MakeWord	(0XFFFF9494);
	MakeWord	(0XFFFF9496);
	MakeWord	(0XFFFF9498);
	MakeByte	(0XFFFF949A);
	MakeWord	(0XFFFF949C);
	MakeWord	(0XFFFF949E);
	MakeWord	(0XFFFF94A0);
	MakeWord	(0XFFFF94A2);
	MakeWord	(0XFFFF94A4);
	MakeByte	(0XFFFF94A6);
	MakeWord	(0XFFFF94A8);
	MakeWord	(0XFFFF94AA);
	MakeWord	(0XFFFF94AC);
	MakeByte	(0XFFFF94AE);
	MakeWord	(0XFFFF94B0);
	MakeByte	(0XFFFF94B2);
	MakeWord	(0XFFFF94B4);
	MakeWord	(0XFFFF94B6);
	MakeWord	(0XFFFF94B8);
	MakeWord	(0XFFFF94BA);
	MakeWord	(0XFFFF94BC);
	MakeWord	(0XFFFF94BE);
	MakeWord	(0XFFFF94C0);
	MakeWord	(0XFFFF94C2);
	MakeWord	(0XFFFF94C4);
	MakeDword	(0XFFFF94C6);
	MakeName	(0XFFFF94C6,	"IdleBaseAirflow?");
	MakeByte	(0XFFFF94CA);
	MakeByte	(0XFFFF94CB);
	MakeWord	(0XFFFF94CC);
	MakeName	(0XFFFF94CC,	"DesiredIdleThrottleArea");
	MakeWord	(0XFFFF94CE);
	MakeName	(0XFFFF94CE,	"DBW_Idle_Percentage_NotClamped");
	MakeByte	(0XFFFF94D0);
	MakeByte	(0XFFFF94D1);
	MakeName	(0XFFFF94D1,	"IdleControlMode_DriveNeutral_AcOrNot");
	MakeWord	(0XFFFF94D2);
	MakeWord	(0XFFFF94D4);
	MakeName	(0XFFFF94D4,	"ThrottleCrackerPlusFollower");
	MakeWord	(0XFFFF94D6);
	MakeName	(0XFFFF94D6,	"StartupAirflowNonZero");
	MakeWord	(0XFFFF94D8);
	MakeWord	(0XFFFF94DA);
	MakeWord	(0XFFFF94DC);
	MakeName	(0XFFFF94DC,	"IdleIntegralTerm_Clamped?");
	MakeWord	(0XFFFF94DE);
	MakeName	(0XFFFF94DE,	"IdleIntegralAccumulator_TBD2");
	MakeWord	(0XFFFF94E0);
	MakeWord	(0XFFFF94E2);
	MakeByte	(0XFFFF94E4);
	MakeByte	(0XFFFF94E5);
	MakeByte	(0XFFFF94E6);
	MakeByte	(0XFFFF94E7);
	MakeByte	(0XFFFF94E8);
	MakeByte	(0XFFFF94E9);
	MakeByte	(0XFFFF94EA);
	MakeByte	(0XFFFF94EB);
	MakeByte	(0XFFFF94EC);
	MakeByte	(0XFFFF94ED);
	MakeByte	(0XFFFF94EE);
	MakeByte	(0XFFFF94EF);
	MakeByte	(0XFFFF94F0);
	MakeByte	(0XFFFF94F1);
	MakeByte	(0XFFFF94F2);
	MakeByte	(0XFFFF94F3);
	MakeByte	(0XFFFF94F4);
	MakeByte	(0XFFFF94F5);
	MakeByte	(0XFFFF94F6);
	MakeByte	(0XFFFF94F7);
	MakeByte	(0XFFFF94F8);
	MakeByte	(0XFFFF94F9);
	MakeName	(0XFFFF94F9,	"ThrottleFollowerDelayTimerActive");
	MakeByte	(0XFFFF94FA);
	MakeByte	(0XFFFF94FB);
	MakeByte	(0XFFFF94FC);
	MakeByte	(0XFFFF94FD);
	MakeByte	(0XFFFF94FE);
	MakeByte	(0XFFFF94FF);
	MakeWord	(0XFFFF9500);
	MakeWord	(0XFFFF9502);
	MakeWord	(0XFFFF9504);
	MakeWord	(0XFFFF9506);
	MakeWord	(0XFFFF9508);
	MakeName	(0XFFFF9508,	"IdleBaseAirflow_Candidate?");
	MakeWord	(0XFFFF950A);
	MakeWord	(0XFFFF950C);
	MakeWord	(0XFFFF950E);
	MakeWord	(0XFFFF9510);
	MakeWord	(0XFFFF9512);
	MakeWord	(0XFFFF9514);
	MakeWord	(0XFFFF9516);
	MakeWord	(0XFFFF9518);
	MakeWord	(0XFFFF951A);
	MakeWord	(0XFFFF951C);
	MakeWord	(0XFFFF951E);
	MakeName	(0XFFFF951E,	"ThrottleCrackerAirflow");
	MakeWord	(0XFFFF9520);
	MakeName	(0XFFFF9520,	"IacParkedAirflow");
	MakeWord	(0XFFFF9522);
	MakeWord	(0XFFFF9524);
	MakeWord	(0XFFFF9526);
	MakeWord	(0XFFFF9528);
	MakeWord	(0XFFFF952A);
	MakeWord	(0XFFFF952C);
	MakeWord	(0XFFFF952E);
	MakeWord	(0XFFFF9530);
	MakeWord	(0XFFFF9532);
	MakeWord	(0XFFFF9534);
	MakeWord	(0XFFFF9536);
	MakeName	(0XFFFF9536,	"ThrottleFollowerAirflow");
	MakeWord	(0XFFFF9538);
	MakeName	(0XFFFF9538,	"ThrottleFollowerDecayRate");
	MakeWord	(0XFFFF953A);
	MakeWord	(0XFFFF953C);
	MakeWord	(0XFFFF953E);
	MakeWord	(0XFFFF9540);
	MakeWord	(0XFFFF9542);
	MakeWord	(0XFFFF9544);
	MakeName	(0XFFFF9544,	"DesiredAirflow");
	MakeWord	(0XFFFF9546);
	MakeWord	(0XFFFF9548);
	MakeWord	(0XFFFF954A);
	MakeByte	(0XFFFF954C);
	MakeWord	(0XFFFF954E);
	MakeByte	(0XFFFF9550);
	MakeByte	(0XFFFF9551);
	MakeWord	(0XFFFF9552);
	MakeWord	(0XFFFF9554);
	MakeDword	(0XFFFF9556);
	MakeWord	(0XFFFF955A);
	MakeWord	(0XFFFF955C);
	MakeWord	(0XFFFF955E);
	MakeWord	(0XFFFF9560);
	MakeWord	(0XFFFF9562);
	MakeDword	(0XFFFF9564);
	MakeWord	(0XFFFF9568);
	MakeWord	(0XFFFF956A);
	MakeByte	(0XFFFF956C);
	MakeWord	(0XFFFF956E);
	MakeWord	(0XFFFF9570);
	MakeWord	(0XFFFF9572);
	MakeDword	(0XFFFF9574);
	MakeWord	(0XFFFF9578);
	MakeWord	(0XFFFF957A);
	MakeDword	(0XFFFF957C);
	MakeWord	(0XFFFF9580);
	MakeWord	(0XFFFF9582);
	MakeWord	(0XFFFF9584);
	MakeWord	(0XFFFF9586);
	MakeWord	(0XFFFF9588);
	MakeByte	(0XFFFF958A);
	MakeWord	(0XFFFF958C);
	MakeByte	(0XFFFF958E);
	MakeByte	(0XFFFF958F);
	MakeWord	(0XFFFF9590);
	MakeWord	(0XFFFF9592);
	MakeWord	(0XFFFF9594);
	MakeWord	(0XFFFF9596);
	MakeByte	(0XFFFF9598);
	MakeByte	(0XFFFF9599);
	MakeWord	(0XFFFF959A);
	MakeByte	(0XFFFF959C);
	MakeByte	(0XFFFF959D);
	MakeWord	(0XFFFF959E);
	MakeWord	(0XFFFF95A0);
	MakeWord	(0XFFFF95A2);
	MakeWord	(0XFFFF95A4);
	MakeWord	(0XFFFF95A6);
	MakeWord	(0XFFFF95A8);
	MakeWord	(0XFFFF95AA);
	MakeWord	(0XFFFF95AC);
	MakeWord	(0XFFFF95AE);
	MakeWord	(0XFFFF95B0);
	MakeWord	(0XFFFF95B2);
	MakeWord	(0XFFFF95B4);
	MakeWord	(0XFFFF95B6);
	MakeWord	(0XFFFF95B8);
	MakeWord	(0XFFFF95BA);
	MakeWord	(0XFFFF95BC);
	MakeWord	(0XFFFF95BE);
	MakeWord	(0XFFFF95C0);
	MakeWord	(0XFFFF95C2);
	MakeWord	(0XFFFF95C4);
	MakeWord	(0XFFFF95C6);
	MakeWord	(0XFFFF95C8);
	MakeWord	(0XFFFF95CA);
	MakeWord	(0XFFFF95CC);
	MakeWord	(0XFFFF95CE);
	MakeWord	(0XFFFF95D0);
	MakeWord	(0XFFFF95D2);
	MakeWord	(0XFFFF95D4);
	MakeWord	(0XFFFF95D6);
	MakeWord	(0XFFFF95D8);
	MakeWord	(0XFFFF95DA);
	MakeByte	(0XFFFF95DC);
	MakeByte	(0XFFFF95DD);
	MakeByte	(0XFFFF95DE);
	MakeByte	(0XFFFF95DF);
	MakeWord	(0XFFFF95E0);
	MakeByte	(0XFFFF95E2);
	MakeByte	(0XFFFF95E3);
	MakeByte	(0XFFFF95E4);
	MakeByte	(0XFFFF95E5);
	MakeByte	(0XFFFF95E6);
	MakeByte	(0XFFFF95E7);
	MakeByte	(0XFFFF95E8);
	MakeByte	(0XFFFF95E9);
	MakeByte	(0XFFFF95EA);
	MakeByte	(0XFFFF95EB);
	MakeByte	(0XFFFF95EC);
	MakeByte	(0XFFFF95ED);
	MakeByte	(0XFFFF95F0);
	MakeByte	(0XFFFF95F1);
	MakeByte	(0XFFFF95F2);
	MakeByte	(0XFFFF95F3);
	MakeByte	(0XFFFF95F4);
	MakeWord	(0XFFFF95F6);
	MakeWord	(0XFFFF95F8);
	MakeWord	(0XFFFF95FA);
	MakeByte	(0XFFFF95FC);
	MakeByte	(0XFFFF95FD);
	MakeByte	(0XFFFF95FE);
	MakeByte	(0XFFFF95FF);
	MakeWord	(0XFFFF9600);
	MakeByte	(0XFFFF9602);
	MakeByte	(0XFFFF9603);
	MakeWord	(0XFFFF9604);
	MakeByte	(0XFFFF9606);
	MakeByte	(0XFFFF9607);
	MakeByte	(0XFFFF9608);
	MakeByte	(0XFFFF9609);
	MakeByte	(0XFFFF960A);
	MakeByte	(0XFFFF960C);
	MakeWord	(0XFFFF960E);
	MakeByte	(0XFFFF9610);
	MakeWord	(0XFFFF9612);
	MakeWord	(0XFFFF9614);
	MakeWord	(0XFFFF9616);
	MakeWord	(0XFFFF9618);
	MakeWord	(0XFFFF961A);
	MakeWord	(0XFFFF961C);
	MakeWord	(0XFFFF961E);
	MakeWord	(0XFFFF9620);
	MakeWord	(0XFFFF9622);
	MakeWord	(0XFFFF9624);
	MakeWord	(0XFFFF9626);
	MakeWord	(0XFFFF9628);
	MakeWord	(0XFFFF962A);
	MakeWord	(0XFFFF962C);
	MakeWord	(0XFFFF962E);
	MakeByte	(0XFFFF9630);
	MakeWord	(0XFFFF9632);
	MakeWord	(0XFFFF9634);
	MakeByte	(0XFFFF9636);
	MakeByte	(0XFFFF9637);
	MakeByte	(0XFFFF9638);
	MakeDword	(0XFFFF963A);
	MakeDword	(0XFFFF963E);
	MakeDword	(0XFFFF9642);
	MakeDword	(0XFFFF9646);
	MakeByte	(0XFFFF964A);
	MakeByte	(0XFFFF964B);
	MakeByte	(0XFFFF964C);
	MakeByte	(0XFFFF964D);
	MakeByte	(0XFFFF964E);
	MakeByte	(0XFFFF964F);
	MakeByte	(0XFFFF9650);
	MakeByte	(0XFFFF9651);
	MakeByte	(0XFFFF9652);
	MakeWord	(0XFFFF9654);
	MakeWord	(0XFFFF9656);
	MakeDword	(0XFFFF9658);
	MakeDword	(0XFFFF96DC);
	MakeDword	(0XFFFF96E0);
	MakeWord	(0XFFFF96E4);
	MakeWord	(0XFFFF96E6);
	MakeWord	(0XFFFF96E8);
	MakeWord	(0XFFFF96EC);
	MakeWord	(0XFFFF96EE);
	MakeWord	(0XFFFF96F0);
	MakeWord	(0XFFFF96F4);
	MakeByte	(0XFFFF9776);
	MakeByte	(0XFFFF9777);
	MakeByte	(0XFFFF9778);
	MakeByte	(0XFFFF9779);
	MakeWord	(0XFFFF977A);
	MakeWord	(0XFFFF977C);
	MakeWord	(0XFFFF977E);
	MakeWord	(0XFFFF9780);
	MakeWord	(0XFFFF9782);
	MakeDword	(0XFFFF978C);
	MakeDword	(0XFFFF9790);
	MakeByte	(0XFFFF9794);
	MakeDword	(0XFFFF979A);
	MakeDword	(0XFFFF979E);
	MakeDword	(0XFFFF97A2);
	MakeDword	(0XFFFF97A6);
	MakeDword	(0XFFFF97AA);
	MakeDword	(0XFFFF97AE);
	MakeDword	(0XFFFF97B2);
	MakeDword	(0XFFFF97B6);
	MakeDword	(0XFFFF97BA);
	MakeDword	(0XFFFF97BE);
	MakeDword	(0XFFFF97C2);
	MakeDword	(0XFFFF97C6);
	MakeDword	(0XFFFF97CA);
	MakeDword	(0XFFFF97CE);
	MakeDword	(0XFFFF97D2);
	MakeWord	(0XFFFF97D6);
	MakeWord	(0XFFFF97D8);
	MakeDword	(0XFFFF97DA);
	MakeDword	(0XFFFF97DE);
	MakeDword	(0XFFFF97E2);
	MakeDword	(0XFFFF97E6);
	MakeDword	(0XFFFF97EA);
	MakeDword	(0XFFFF97EE);
	MakeDword	(0XFFFF97F2);
	MakeDword	(0XFFFF97F6);
	MakeWord	(0XFFFF97FE);
	MakeWord	(0XFFFF9800);
	MakeDword	(0XFFFF9802);
	MakeDword	(0XFFFF9806);
	MakeDword	(0XFFFF980A);
	MakeDword	(0XFFFF980E);
	MakeDword	(0XFFFF9812);
	MakeDword	(0XFFFF9816);
	MakeDword	(0XFFFF981A);
	MakeDword	(0XFFFF981E);
	MakeDword	(0XFFFF9822);
	MakeDword	(0XFFFF9826);
	MakeWord	(0XFFFF982E);
	MakeDword	(0XFFFF9830);
	MakeWord	(0XFFFF9834);
	MakeWord	(0XFFFF9836);
	MakeWord	(0XFFFF9838);
	MakeWord	(0XFFFF983A);
	MakeWord	(0XFFFF983C);
	MakeWord	(0XFFFF983E);
	MakeWord	(0XFFFF9840);
	MakeWord	(0XFFFF9842);
	MakeWord	(0XFFFF9844);
	MakeWord	(0XFFFF9846);
	MakeWord	(0XFFFF9848);
	MakeWord	(0XFFFF984A);
	MakeWord	(0XFFFF984C);
	MakeByte	(0XFFFF984E);
	MakeByte	(0XFFFF984F);
	MakeByte	(0XFFFF9850);
	MakeByte	(0XFFFF9851);
	MakeByte	(0XFFFF9852);
	MakeByte	(0XFFFF9853);
	MakeByte	(0XFFFF9854);
	MakeWord	(0XFFFF9856);
	MakeWord	(0XFFFF9858);
	MakeWord	(0XFFFF985A);
	MakeWord	(0XFFFF985C);
	MakeWord	(0XFFFF985E);
	MakeWord	(0XFFFF9860);
	MakeWord	(0XFFFF9862);
	MakeWord	(0XFFFF9864);
	MakeWord	(0XFFFF9866);
	MakeWord	(0XFFFF9868);
	MakeWord	(0XFFFF986A);
	MakeByte	(0XFFFF986C);
	MakeByte	(0XFFFF986D);
	MakeByte	(0XFFFF986E);
	MakeByte	(0XFFFF986F);
	MakeWord	(0XFFFF9870);
	MakeWord	(0XFFFF9872);
	MakeWord	(0XFFFF9874);
	MakeWord	(0XFFFF9876);
	MakeByte	(0XFFFF9878);
	MakeWord	(0XFFFF987A);
	MakeWord	(0XFFFF987C);
	MakeByte	(0XFFFF987E);
	MakeWord	(0XFFFF9880);
	MakeWord	(0XFFFF9882);
	MakeWord	(0XFFFF9884);
	MakeWord	(0XFFFF9886);
	MakeWord	(0XFFFF9888);
	MakeWord	(0XFFFF988A);
	MakeWord	(0XFFFF988C);
	MakeWord	(0XFFFF988E);
	MakeWord	(0XFFFF9890);
	MakeWord	(0XFFFF9892);
	MakeWord	(0XFFFF9894);
	MakeWord	(0XFFFF9896);
	MakeWord	(0XFFFF9898);
	MakeWord	(0XFFFF989A);
	MakeName	(0XFFFF989A,	"OctaneScalerCoolantMultiplier");
	MakeByte	(0XFFFF989C);
	MakeWord	(0XFFFF989E);
	MakeWord	(0XFFFF98A0);
	MakeWord	(0XFFFF98B8);
	MakeWord	(0XFFFF98BA);
	MakeWord	(0XFFFF98BC);
	MakeWord	(0XFFFF98BE);
	MakeWord	(0XFFFF98C0);
	MakeWord	(0XFFFF98C2);
	MakeWord	(0XFFFF98C4);
	MakeWord	(0XFFFF98C6);
	MakeWord	(0XFFFF98C8);
	MakeByte	(0XFFFF98CA);
	MakeByte	(0XFFFF98CB);
	MakeByte	(0XFFFF98CC);
	MakeByte	(0XFFFF98CD);
	MakeByte	(0XFFFF98CE);
	MakeByte	(0XFFFF98CF);
	MakeByte	(0XFFFF98D0);
	MakeByte	(0XFFFF98D1);
	MakeByte	(0XFFFF98D2);
	MakeByte	(0XFFFF98D3);
	MakeByte	(0XFFFF98D4);
	MakeByte	(0XFFFF98D5);
	MakeByte	(0XFFFF98D6);
	MakeByte	(0XFFFF98D7);
	MakeByte	(0XFFFF98D8);
	MakeByte	(0XFFFF98D9);
	MakeByte	(0XFFFF98DA);
	MakeByte	(0XFFFF98DB);
	MakeWord	(0XFFFF98DC);
	MakeWord	(0XFFFF98DE);
	MakeByte	(0XFFFF98E0);
	MakeWord	(0XFFFF98E2);
	MakeWord	(0XFFFF98E4);
	MakeByte	(0XFFFF9942);
	MakeByte	(0XFFFF9943);
	MakeWord	(0XFFFF9944);
	MakeWord	(0XFFFF9946);
	MakeByte	(0XFFFF9954);
	MakeWord	(0XFFFF9956);
	MakeWord	(0XFFFF9958);
	MakeByte	(0XFFFF995A);
	MakeByte	(0XFFFF995B);
	MakeByte	(0XFFFF995C);
	MakeWord	(0XFFFF995E);
	MakeWord	(0XFFFF9960);
	MakeWord	(0XFFFF9962);
	MakeWord	(0XFFFF9968);
	MakeByte	(0XFFFF996A);
	MakeWord	(0XFFFF996C);
	MakeWord	(0XFFFF996E);
	MakeWord	(0XFFFF9970);
	MakeWord	(0XFFFF9972);
	MakeWord	(0XFFFF9974);
	MakeWord	(0XFFFF9978);
	MakeWord	(0XFFFF997A);
	MakeDword	(0XFFFF997C);
	MakeWord	(0XFFFF9980);
	MakeByte	(0XFFFF9A16);
	MakeByte	(0XFFFF9A28);
	MakeByte	(0XFFFF9A29);
	MakeByte	(0XFFFF9A2A);
	MakeByte	(0XFFFF9A2B);
	MakeByte	(0XFFFF9A2C);
	MakeByte	(0XFFFF9A2D);
	MakeByte	(0XFFFF9A34);
	MakeByte	(0XFFFF9A35);
	MakeByte	(0XFFFF9A36);
	MakeByte	(0XFFFF9A37);
	MakeByte	(0XFFFF9A38);
	MakeByte	(0XFFFF9A39);
	MakeByte	(0XFFFF9A3A);
	MakeByte	(0XFFFF9A3B);
	MakeByte	(0XFFFF9A3C);
	MakeByte	(0XFFFF9A3D);
	MakeByte	(0XFFFF9A3E);
	MakeByte	(0XFFFF9A40);
	MakeByte	(0XFFFF9A41);
	MakeByte	(0XFFFF9A42);
	MakeByte	(0XFFFF9A43);
	MakeByte	(0XFFFF9A44);
	MakeByte	(0XFFFF9A45);
	MakeByte	(0XFFFF9A46);
	MakeByte	(0XFFFF9A47);
	MakeWord	(0XFFFF9A48);
	MakeByte	(0XFFFF9A4A);
	MakeByte	(0XFFFF9A4B);
	MakeByte	(0XFFFF9A4C);
	MakeWord	(0XFFFF9A4E);
	MakeByte	(0XFFFF9A50);
	MakeWord	(0XFFFF9A52);
	MakeWord	(0XFFFF9A54);
	MakeByte	(0XFFFF9A56);
	MakeByte	(0XFFFF9A57);
	MakeByte	(0XFFFF9A58);
	MakeWord	(0XFFFF9A5A);
	MakeDword	(0XFFFF9A5C);
	MakeWord	(0XFFFF9A60);
	MakeByte	(0XFFFF9A62);
	MakeByte	(0XFFFF9A63);
	MakeByte	(0XFFFF9A64);
	MakeByte	(0XFFFF9A65);
	MakeByte	(0XFFFF9A66);
	MakeWord	(0XFFFF9A68);
	MakeByte	(0XFFFF9A76);
	MakeByte	(0XFFFF9A7E);
	MakeByte	(0XFFFF9A85);
	MakeByte	(0XFFFF9A86);
	MakeByte	(0XFFFF9A88);
	MakeByte	(0XFFFF9A89);
	MakeByte	(0XFFFF9A90);
	MakeByte	(0XFFFF9A91);
	MakeByte	(0XFFFF9A92);
	MakeByte	(0XFFFF9A93);
	MakeByte	(0XFFFF9A94);
	MakeByte	(0XFFFF9A95);
	MakeByte	(0XFFFF9A96);
	MakeDword	(0XFFFF9A98);
	MakeWord	(0XFFFF9A9C);
	MakeByte	(0XFFFF9A9E);
	MakeByte	(0XFFFF9A9F);
	MakeByte	(0XFFFF9AA0);
	MakeByte	(0XFFFF9AA1);
	MakeByte	(0XFFFF9AA2);
	MakeByte	(0XFFFF9AA3);
	MakeByte	(0XFFFF9AA4);
	MakeByte	(0XFFFF9AA7);
	MakeByte	(0XFFFF9AA8);
	MakeByte	(0XFFFF9AA9);
	MakeByte	(0XFFFF9AAA);
	MakeByte	(0XFFFF9AAB);
	MakeByte	(0XFFFF9AAC);
	MakeByte	(0XFFFF9AAD);
	MakeByte	(0XFFFF9AAE);
	MakeByte	(0XFFFF9AAF);
	MakeByte	(0XFFFF9AB0);
	MakeByte	(0XFFFF9AB1);
	MakeByte	(0XFFFF9AB2);
	MakeByte	(0XFFFF9AB3);
	MakeByte	(0XFFFF9AB4);
	MakeByte	(0XFFFF9AB5);
	MakeByte	(0XFFFF9AB6);
	MakeByte	(0XFFFF9AB7);
	MakeByte	(0XFFFF9AB8);
	MakeByte	(0XFFFF9AB9);
	MakeByte	(0XFFFF9ABA);
	MakeByte	(0XFFFF9ABB);
	MakeByte	(0XFFFF9ABC);
	MakeByte	(0XFFFF9ABD);
	MakeByte	(0XFFFF9ABE);
	MakeByte	(0XFFFF9ABF);
	MakeByte	(0XFFFF9AC0);
	MakeByte	(0XFFFF9AC1);
	MakeByte	(0XFFFF9AC2);
	MakeByte	(0XFFFF9AC3);
	MakeByte	(0XFFFF9AC4);
	MakeByte	(0XFFFF9AC5);
	MakeByte	(0XFFFF9AC6);
	MakeByte	(0XFFFF9AC7);
	MakeByte	(0XFFFF9AC8);
	MakeByte	(0XFFFF9AC9);
	MakeByte	(0XFFFF9ACA);
	MakeByte	(0XFFFF9ACB);
	MakeByte	(0XFFFF9ACC);
	MakeByte	(0XFFFF9ACD);
	MakeByte	(0XFFFF9AD0);
	MakeByte	(0XFFFF9AD3);
	MakeByte	(0XFFFF9AD4);
	MakeByte	(0XFFFF9B1C);
	MakeByte	(0XFFFF9B1D);
	MakeDword	(0XFFFF9B1E);
	MakeDword	(0XFFFF9B22);
	MakeDword	(0XFFFF9B26);
	MakeByte	(0XFFFF9B2A);
	MakeByte	(0XFFFF9B2B);
	MakeWord	(0XFFFF9B2C);
	MakeByte	(0XFFFF9B2E);
	MakeDword	(0XFFFF9B30);
	MakeDword	(0XFFFF9B34);
	MakeDword	(0XFFFF9B38);
	MakeDword	(0XFFFF9B3C);
	MakeDword	(0XFFFF9B40);
	MakeDword	(0XFFFF9B44);
	MakeWord	(0XFFFF9B48);
	MakeWord	(0XFFFF9B4A);
	MakeWord	(0XFFFF9B4C);
	MakeWord	(0XFFFF9B4E);
	MakeWord	(0XFFFF9B50);
	MakeWord	(0XFFFF9B52);
	MakeByte	(0XFFFF9B54);
	MakeWord	(0XFFFF9B56);
	MakeByte	(0XFFFF9B58);
	MakeWord	(0XFFFF9B5A);
	MakeByte	(0XFFFF9B5C);
	MakeByte	(0XFFFF9B5D);
	MakeByte	(0XFFFF9B5E);
	MakeByte	(0XFFFF9B5F);
	MakeByte	(0XFFFF9B60);
	MakeByte	(0XFFFF9B61);
	MakeByte	(0XFFFF9B62);
	MakeWord	(0XFFFF9B64);
	MakeByte	(0XFFFF9B66);
	MakeByte	(0XFFFF9B67);
	MakeWord	(0XFFFF9B68);
	MakeByte	(0XFFFF9B6A);
	MakeByte	(0XFFFF9B6B);
	MakeByte	(0XFFFF9B6C);
	MakeWord	(0XFFFF9B6E);
	MakeByte	(0XFFFF9B70);
	MakeByte	(0XFFFF9B71);
	MakeDword	(0XFFFF9B72);
	MakeWord	(0XFFFF9B76);
	MakeWord	(0XFFFF9B78);
	MakeWord	(0XFFFF9B7A);
	MakeWord	(0XFFFF9B7C);
	MakeWord	(0XFFFF9B7E);
	MakeWord	(0XFFFF9B80);
	MakeWord	(0XFFFF9B82);
	MakeWord	(0XFFFF9B84);
	MakeWord	(0XFFFF9B86);
	MakeWord	(0XFFFF9B88);
	MakeDword	(0XFFFF9B8A);
	MakeDword	(0XFFFF9B8E);
	MakeByte	(0XFFFF9B92);
	MakeWord	(0XFFFF9B94);
	MakeWord	(0XFFFF9B96);
	MakeWord	(0XFFFF9B98);
	MakeWord	(0XFFFF9B9E);
	MakeWord	(0XFFFF9BA0);
	MakeWord	(0XFFFF9BA2);
	MakeWord	(0XFFFF9BA4);
	MakeWord	(0XFFFF9BA6);
	MakeByte	(0XFFFF9BA8);
	MakeByte	(0XFFFF9BA9);
	MakeWord	(0XFFFF9BAA);
	MakeWord	(0XFFFF9BAC);
	MakeWord	(0XFFFF9BAE);
	MakeWord	(0XFFFF9BB0);
	MakeByte	(0XFFFF9BB2);
	MakeByte	(0XFFFF9BB3);
	MakeWord	(0XFFFF9BB4);
	MakeWord	(0XFFFF9BB6);
	MakeByte	(0XFFFF9BB8);
	MakeByte	(0XFFFF9BB9);
	MakeByte	(0XFFFF9BBA);
	MakeByte	(0XFFFF9BBB);
	MakeByte	(0XFFFF9BBC);
	MakeByte	(0XFFFF9BBD);
	MakeWord	(0XFFFF9BBE);
	MakeWord	(0XFFFF9BC0);
	MakeWord	(0XFFFF9BC2);
	MakeWord	(0XFFFF9BC4);
	MakeByte	(0XFFFF9BC6);
	MakeWord	(0XFFFF9BC8);
	MakeWord	(0XFFFF9BCA);
	MakeWord	(0XFFFF9BCC);
	MakeWord	(0XFFFF9BCE);
	MakeWord	(0XFFFF9BD0);
	MakeWord	(0XFFFF9BD2);
	MakeWord	(0XFFFF9BD4);
	MakeWord	(0XFFFF9BD6);
	MakeWord	(0XFFFF9BD8);
	MakeWord	(0XFFFF9BDA);
	MakeWord	(0XFFFF9BDC);
	MakeWord	(0XFFFF9BDE);
	MakeWord	(0XFFFF9BE0);
	MakeWord	(0XFFFF9BE2);
	MakeWord	(0XFFFF9BE4);
	MakeWord	(0XFFFF9BE6);
	MakeWord	(0XFFFF9BE8);
	MakeWord	(0XFFFF9BEA);
	MakeWord	(0XFFFF9BEC);
	MakeWord	(0XFFFF9BEE);
	MakeWord	(0XFFFF9BF0);
	MakeWord	(0XFFFF9BF2);
	MakeWord	(0XFFFF9BF4);
	MakeWord	(0XFFFF9BF6);
	MakeWord	(0XFFFF9BF8);
	MakeWord	(0XFFFF9BFA);
	MakeWord	(0XFFFF9BFC);
	MakeWord	(0XFFFF9BFE);
	MakeDword	(0XFFFF9C00);
	MakeDword	(0XFFFF9C04);
	MakeByte	(0XFFFF9C08);
	MakeByte	(0XFFFF9C09);
	MakeWord	(0XFFFF9C0A);
	MakeWord	(0XFFFF9C0C);
	MakeWord	(0XFFFF9C0E);
	MakeWord	(0XFFFF9C10);
	MakeWord	(0XFFFF9C12);
	MakeWord	(0XFFFF9C14);
	MakeWord	(0XFFFF9C1A);
	MakeByte	(0XFFFF9C1C);
	MakeWord	(0XFFFF9C1E);
	MakeByte	(0XFFFF9C20);
	MakeByte	(0XFFFF9C21);
	MakeWord	(0XFFFF9C22);
	MakeWord	(0XFFFF9C24);
	MakeWord	(0XFFFF9C26);
	MakeWord	(0XFFFF9C28);
	MakeDword	(0XFFFF9C2A);
	MakeWord	(0XFFFF9C2E);
	MakeWord	(0XFFFF9C30);
	MakeWord	(0XFFFF9C32);
	MakeWord	(0XFFFF9C34);
	MakeByte	(0XFFFF9C36);
	MakeByte	(0XFFFF9C37);
	MakeByte	(0XFFFF9C38);
	MakeByte	(0XFFFF9C39);
	MakeByte	(0XFFFF9C3A);
	MakeDword	(0XFFFF9C40);
	MakeDword	(0XFFFF9C44);
	MakeByte	(0XFFFF9C58);
	MakeByte	(0XFFFF9C59);
	MakeWord	(0XFFFF9C7A);
	MakeWord	(0XFFFF9C7C);
	MakeDword	(0XFFFF9C7E);
	MakeByte	(0XFFFF9C82);
	MakeDword	(0XFFFF9C84);
	MakeDword	(0XFFFF9C90);
	MakeDword	(0XFFFF9C94);
	MakeDword	(0XFFFF9C98);
	MakeDword	(0XFFFF9C9C);
	MakeWord	(0XFFFF9CA0);
	MakeByte	(0XFFFF9CA2);
	MakeByte	(0XFFFF9CA3);
	MakeByte	(0XFFFF9CA4);
	MakeWord	(0XFFFF9CA6);
	MakeWord	(0XFFFF9CA8);
	MakeWord	(0XFFFF9CAA);
	MakeWord	(0XFFFF9CAC);
	MakeWord	(0XFFFF9CAE);
	MakeDword	(0XFFFF9CB0);
	MakeDword	(0XFFFF9CB4);
	MakeDword	(0XFFFF9CFA);
	MakeByte	(0XFFFF9D06);
	MakeByte	(0XFFFF9D22);
	MakeByte	(0XFFFF9D23);
	MakeByte	(0XFFFF9D24);
	MakeWord	(0XFFFF9D26);
	MakeByte	(0XFFFF9D28);
	MakeByte	(0XFFFF9D29);
	MakeByte	(0XFFFF9D2A);
	MakeByte	(0XFFFF9D2B);
	MakeByte	(0XFFFF9D2C);
	MakeByte	(0XFFFF9D2D);
	MakeByte	(0XFFFF9D2E);
	MakeWord	(0XFFFF9D30);
	MakeName	(0XFFFF9D30,	"KnockRetardFast");
	MakeByte	(0XFFFF9D32);
	MakeWord	(0XFFFF9D34);
	MakeWord	(0XFFFF9D46);
	MakeName	(0XFFFF9D46,	"KnockSmoothedNoise");
	MakeWord	(0XFFFF9D48);
	MakeWord	(0XFFFF9D4A);
	MakeWord	(0XFFFF9D4C);
	MakeWord	(0XFFFF9D4E);
	MakeWord	(0XFFFF9D50);
	MakeWord	(0XFFFF9D52);
	MakeWord	(0XFFFF9D54);
	MakeWord	(0XFFFF9D68);
	MakeDword	(0XFFFF9D6A);
	MakeDword	(0XFFFF9D6E);
	MakeWord	(0XFFFF9D72);
	MakeWord	(0XFFFF9D74);
	MakeWord	(0XFFFF9D76);
	MakeWord	(0XFFFF9D78);
	MakeWord	(0XFFFF9D7A);
	MakeWord	(0XFFFF9D7C);
	MakeWord	(0XFFFF9D7E);
	MakeWord	(0XFFFF9D80);
	MakeWord	(0XFFFF9D82);
	MakeWord	(0XFFFF9D84);
	MakeWord	(0XFFFF9D86);
	MakeWord	(0XFFFF9D88);
	MakeWord	(0XFFFF9D8A);
	MakeByte	(0XFFFF9D8C);
	MakeByte	(0XFFFF9D8D);
	MakeByte	(0XFFFF9D8E);
	MakeByte	(0XFFFF9D8F);
	MakeByte	(0XFFFF9D90);
	MakeByte	(0XFFFF9D91);
	MakeWord	(0XFFFF9D92);
	MakeByte	(0XFFFF9D94);
	MakeByte	(0XFFFF9D95);
	MakeByte	(0XFFFF9D96);
	MakeByte	(0XFFFF9D97);
	MakeByte	(0XFFFF9D98);
	MakeByte	(0XFFFF9D99);
	MakeByte	(0XFFFF9D9A);
	MakeByte	(0XFFFF9D9B);
	MakeByte	(0XFFFF9D9C);
	MakeByte	(0XFFFF9D9D);
	MakeByte	(0XFFFF9D9E);
	MakeByte	(0XFFFF9D9F);
	MakeByte	(0XFFFF9DA0);
	MakeByte	(0XFFFF9DA1);
	MakeByte	(0XFFFF9DA2);
	MakeByte	(0XFFFF9DA3);
	MakeByte	(0XFFFF9DA4);
	MakeByte	(0XFFFF9DA5);
	MakeByte	(0XFFFF9DA6);
	MakeByte	(0XFFFF9DA7);
	MakeByte	(0XFFFF9DA8);
	MakeWord	(0XFFFF9DAA);
	MakeWord	(0XFFFF9DAC);
	MakeWord	(0XFFFF9DAE);
	MakeWord	(0XFFFF9DB0);
	MakeWord	(0XFFFF9DB2);
	MakeWord	(0XFFFF9DB4);
	MakeWord	(0XFFFF9DB6);
	MakeWord	(0XFFFF9DB8);
	MakeWord	(0XFFFF9DBA);
	MakeWord	(0XFFFF9DBC);
	MakeWord	(0XFFFF9DBE);
	MakeWord	(0XFFFF9DC0);
	MakeWord	(0XFFFF9DC2);
	MakeWord	(0XFFFF9DC4);
	MakeByte	(0XFFFF9DC6);
	MakeWord	(0XFFFF9DC8);
	MakeWord	(0XFFFF9DCA);
	MakeWord	(0XFFFF9DCC);
	MakeWord	(0XFFFF9DCE);
	MakeWord	(0XFFFF9DD0);
	MakeDword	(0XFFFF9DE6);
	MakeDword	(0XFFFF9DEE);
	MakeWord	(0XFFFF9DF2);
	MakeWord	(0XFFFF9DF4);
	MakeWord	(0XFFFF9DF6);
	MakeWord	(0XFFFF9DF8);
	MakeWord	(0XFFFF9DFA);
	MakeWord	(0XFFFF9DFC);
	MakeWord	(0XFFFF9DFE);
	MakeWord	(0XFFFF9E00);
	MakeWord	(0XFFFF9E02);
	MakeWord	(0XFFFF9E04);
	MakeWord	(0XFFFF9E06);
	MakeWord	(0XFFFF9E08);
	MakeByte	(0XFFFF9E0A);
	MakeByte	(0XFFFF9E0B);
	MakeByte	(0XFFFF9E0C);
	MakeByte	(0XFFFF9E0D);
	MakeByte	(0XFFFF9E0E);
	MakeByte	(0XFFFF9E0F);
	MakeWord	(0XFFFF9E10);
	MakeWord	(0XFFFF9E12);
	MakeWord	(0XFFFF9E14);
	MakeWord	(0XFFFF9E16);
	MakeWord	(0XFFFF9E18);
	MakeWord	(0XFFFF9E1A);
	MakeByte	(0XFFFF9E1C);
	MakeWord	(0XFFFF9E1E);
	MakeWord	(0XFFFF9E20);
	MakeWord	(0XFFFF9E22);
	MakeWord	(0XFFFF9E24);
	MakeWord	(0XFFFF9E26);
	MakeWord	(0XFFFF9E28);
	MakeWord	(0XFFFF9E2A);
	MakeWord	(0XFFFF9E2C);
	MakeWord	(0XFFFF9E2E);
	MakeWord	(0XFFFF9E30);
	MakeWord	(0XFFFF9E32);
	MakeWord	(0XFFFF9E34);
	MakeWord	(0XFFFF9E36);
	MakeByte	(0XFFFF9E38);
	MakeByte	(0XFFFF9E39);
	MakeWord	(0XFFFF9E3A);
	MakeWord	(0XFFFF9E3C);
	MakeWord	(0XFFFF9E3E);
	MakeWord	(0XFFFF9E40);
	MakeWord	(0XFFFF9E42);
	MakeWord	(0XFFFF9E44);
	MakeWord	(0XFFFF9E46);
	MakeWord	(0XFFFF9E48);
	MakeWord	(0XFFFF9E4A);
	MakeWord	(0XFFFF9E4C);
	MakeWord	(0XFFFF9E4E);
	MakeWord	(0XFFFF9E50);
	MakeWord	(0XFFFF9E52);
	MakeWord	(0XFFFF9E54);
	MakeWord	(0XFFFF9E56);
	MakeWord	(0XFFFF9E58);
	MakeWord	(0XFFFF9E5A);
	MakeWord	(0XFFFF9E5C);
	MakeByte	(0XFFFF9E5E);
	MakeByte	(0XFFFF9E5F);
	MakeByte	(0XFFFF9E60);
	MakeWord	(0XFFFF9E62);
	MakeWord	(0XFFFF9E64);
	MakeWord	(0XFFFF9E66);
	MakeWord	(0XFFFF9E68);
	MakeWord	(0XFFFF9E6A);
	MakeWord	(0XFFFF9E6C);
	MakeWord	(0XFFFF9E6E);
	MakeByte	(0XFFFF9E70);
	MakeWord	(0XFFFF9E72);
	MakeWord	(0XFFFF9E74);
	MakeWord	(0XFFFF9E76);
	MakeWord	(0XFFFF9E78);
	MakeWord	(0XFFFF9E7A);
	MakeWord	(0XFFFF9E7C);
	MakeByte	(0XFFFF9E7E);
	MakeByte	(0XFFFF9E7F);
	MakeWord	(0XFFFF9E80);
	MakeWord	(0XFFFF9E82);
	MakeWord	(0XFFFF9E84);
	MakeWord	(0XFFFF9E86);
	MakeWord	(0XFFFF9E88);
	MakeWord	(0XFFFF9E8A);
	MakeByte	(0XFFFF9E8C);
	MakeByte	(0XFFFF9E8E);
	MakeByte	(0XFFFF9E8F);
	MakeByte	(0XFFFF9E90);
	MakeByte	(0XFFFF9E91);
	MakeByte	(0XFFFF9E92);
	MakeByte	(0XFFFF9E93);
	MakeByte	(0XFFFF9E94);
	MakeByte	(0XFFFF9E95);
	MakeByte	(0XFFFF9E96);
	MakeByte	(0XFFFF9E97);
	MakeByte	(0XFFFF9E98);
	MakeByte	(0XFFFF9E99);
	MakeByte	(0XFFFF9E9A);
	MakeByte	(0XFFFF9E9B);
	MakeByte	(0XFFFF9E9C);
	MakeByte	(0XFFFF9E9D);
	MakeWord	(0XFFFF9E9E);
	MakeWord	(0XFFFF9EA0);
	MakeWord	(0XFFFF9EA2);
	MakeDword	(0XFFFF9EA4);
	MakeWord	(0XFFFF9EA8);
	MakeWord	(0XFFFF9EAA);
	MakeWord	(0XFFFF9EAC);
	MakeWord	(0XFFFF9EAE);
	MakeWord	(0XFFFF9EB0);
	MakeWord	(0XFFFF9EB2);
	MakeWord	(0XFFFF9EB4);
	MakeWord	(0XFFFF9EB6);
	MakeWord	(0XFFFF9EB8);
	MakeWord	(0XFFFF9EBA);
	MakeWord	(0XFFFF9EBC);
	MakeWord	(0XFFFF9EBE);
	MakeWord	(0XFFFF9EC0);
	MakeWord	(0XFFFF9EC2);
	MakeWord	(0XFFFF9EC4);
	MakeWord	(0XFFFF9EC6);
	MakeDword	(0XFFFF9EC8);
	MakeWord	(0XFFFF9ECC);
	MakeWord	(0XFFFF9ECE);
	MakeWord	(0XFFFF9ED0);
	MakeWord	(0XFFFF9ED2);
	MakeWord	(0XFFFF9ED4);
	MakeWord	(0XFFFF9ED6);
	MakeWord	(0XFFFF9ED8);
	MakeWord	(0XFFFF9EDA);
	MakeWord	(0XFFFF9EDC);
	MakeDword	(0XFFFF9EDE);
	MakeWord	(0XFFFF9EE2);
	MakeWord	(0XFFFF9EE4);
	MakeWord	(0XFFFF9EE6);
	MakeWord	(0XFFFF9EE8);
	MakeWord	(0XFFFF9EEA);
	MakeWord	(0XFFFF9EEC);
	MakeWord	(0XFFFF9EEE);
	MakeWord	(0XFFFF9EF0);
	MakeByte	(0XFFFF9EF2);
	MakeByte	(0XFFFF9EF4);
	MakeByte	(0XFFFF9EF6);
	MakeWord	(0XFFFF9F00);
	MakeWord	(0XFFFF9F02);
	MakeWord	(0XFFFF9F06);
	MakeWord	(0XFFFF9F08);
	MakeByte	(0XFFFF9F0C);
	MakeByte	(0XFFFF9F0D);
	MakeByte	(0XFFFF9F0E);
	MakeByte	(0XFFFF9F0F);
	MakeByte	(0XFFFF9F10);
	MakeWord	(0XFFFF9F12);
	MakeWord	(0XFFFF9F34);
	MakeWord	(0XFFFF9F36);
	MakeWord	(0XFFFF9F38);
	MakeWord	(0XFFFF9F3A);
	MakeWord	(0XFFFF9F48);
	MakeWord	(0XFFFF9F4A);
	MakeWord	(0XFFFF9F4C);
	MakeWord	(0XFFFF9F4E);
	MakeWord	(0XFFFF9F50);
	MakeByte	(0XFFFF9F52);
	MakeByte	(0XFFFF9F53);
	MakeByte	(0XFFFF9F54);
	MakeByte	(0XFFFF9F55);
	MakeWord	(0XFFFF9F56);
	MakeWord	(0XFFFF9F58);
	MakeByte	(0XFFFF9F5A);
	MakeByte	(0XFFFF9F5B);
	MakeByte	(0XFFFF9F5C);
	MakeByte	(0XFFFF9F5D);
	MakeByte	(0XFFFF9F5E);
	MakeWord	(0XFFFF9F60);
	MakeWord	(0XFFFF9F62);
	MakeByte	(0XFFFF9F64);
	MakeByte	(0XFFFF9F65);
	MakeByte	(0XFFFF9F68);
	MakeByte	(0XFFFF9F69);
	MakeByte	(0XFFFF9F6A);
	MakeByte	(0XFFFF9F6B);
	MakeWord	(0XFFFF9F70);
	MakeWord	(0XFFFF9F72);
	MakeWord	(0XFFFF9F74);
	MakeWord	(0XFFFF9F76);
	MakeWord	(0XFFFF9F78);
	MakeWord	(0XFFFF9F7A);
	MakeWord	(0XFFFF9F7C);
	MakeWord	(0XFFFF9F7E);
	MakeWord	(0XFFFF9F80);
	MakeWord	(0XFFFF9F82);
	MakeWord	(0XFFFF9F84);
	MakeWord	(0XFFFF9F86);
	MakeWord	(0XFFFF9FB4);
	MakeWord	(0XFFFF9FB6);
	MakeByte	(0XFFFF9FB8);
	MakeByte	(0XFFFF9FB9);
	MakeByte	(0XFFFF9FBA);
	MakeWord	(0XFFFF9FBC);
	MakeWord	(0XFFFF9FBE);
	MakeWord	(0XFFFF9FC0);
	MakeWord	(0XFFFF9FC2);
	MakeWord	(0XFFFF9FC4);
	MakeWord	(0XFFFF9FC6);
	MakeWord	(0XFFFF9FC8);
	MakeWord	(0XFFFF9FCA);
	MakeWord	(0XFFFF9FCC);
	MakeWord	(0XFFFF9FCE);
	MakeWord	(0XFFFF9FD0);
	MakeWord	(0XFFFF9FD2);
	MakeWord	(0XFFFF9FD4);
	MakeWord	(0XFFFF9FD6);
	MakeWord	(0XFFFF9FD8);
	MakeByte	(0XFFFF9FDA);
	MakeDword	(0XFFFF9FE4);
	MakeDword	(0XFFFF9FF0);
	MakeDword	(0XFFFF9FF4);
	MakeDword	(0XFFFF9FF8);
	MakeWord	(0XFFFF9FFC);
	MakeWord	(0XFFFF9FFE);
	MakeWord	(0XFFFFA000);
	MakeByte	(0XFFFFA004);
	MakeByte	(0XFFFFA005);
	MakeByte	(0XFFFFA006);
	MakeByte	(0XFFFFA007);
	MakeDword	(0XFFFFA008);
	MakeWord	(0XFFFFA00C);
	MakeWord	(0XFFFFA00E);
	MakeWord	(0XFFFFA010);
	MakeWord	(0XFFFFA012);
	MakeWord	(0XFFFFA014);
	MakeWord	(0XFFFFA016);
	MakeByte	(0XFFFFA018);
	MakeByte	(0XFFFFA019);
	MakeWord	(0XFFFFA01A);
	MakeWord	(0XFFFFA01C);
	MakeWord	(0XFFFFA01E);
	MakeByte	(0XFFFFA020);
	MakeByte	(0XFFFFA021);
	MakeByte	(0XFFFFA022);
	MakeByte	(0XFFFFA023);
	MakeWord	(0XFFFFA026);
	MakeDword	(0XFFFFA028);
	MakeWord	(0XFFFFA02C);
	MakeWord	(0XFFFFA02E);
	MakeWord	(0XFFFFA030);
	MakeWord	(0XFFFFA032);
	MakeWord	(0XFFFFA034);
	MakeWord	(0XFFFFA036);
	MakeWord	(0XFFFFA038);
	MakeWord	(0XFFFFA03A);
	MakeWord	(0XFFFFA03C);
	MakeWord	(0XFFFFA03E);
	MakeWord	(0XFFFFA040);
	MakeWord	(0XFFFFA042);
	MakeWord	(0XFFFFA044);
	MakeWord	(0XFFFFA046);
	MakeWord	(0XFFFFA048);
	MakeWord	(0XFFFFA04A);
	MakeWord	(0XFFFFA04C);
	MakeWord	(0XFFFFA04E);
	MakeByte	(0XFFFFA050);
	MakeByte	(0XFFFFA051);
	MakeByte	(0XFFFFA052);
	MakeWord	(0XFFFFA054);
	MakeByte	(0XFFFFA056);
	MakeWord	(0XFFFFA05A);
	MakeByte	(0XFFFFA05E);
	MakeByte	(0XFFFFA05F);
	MakeByte	(0XFFFFA060);
	MakeByte	(0XFFFFA061);
	MakeWord	(0XFFFFA062);
	MakeWord	(0XFFFFA064);
	MakeWord	(0XFFFFA066);
	MakeByte	(0XFFFFA068);
	MakeByte	(0XFFFFA069);
	MakeByte	(0XFFFFA06A);
	MakeWord	(0XFFFFA06C);
	MakeWord	(0XFFFFA06E);
	MakeWord	(0XFFFFA070);
	MakeWord	(0XFFFFA072);
	MakeWord	(0XFFFFA074);
	MakeByte	(0XFFFFA082);
	MakeWord	(0XFFFFA084);
	MakeWord	(0XFFFFA086);
	MakeWord	(0XFFFFA088);
	MakeWord	(0XFFFFA08A);
	MakeWord	(0XFFFFA0BC);
	MakeWord	(0XFFFFA0BE);
	MakeByte	(0XFFFFA0C0);
	MakeByte	(0XFFFFA0C1);
	MakeWord	(0XFFFFA0C2);
	MakeWord	(0XFFFFA0C4);
	MakeWord	(0XFFFFA0C6);
	MakeWord	(0XFFFFA0C8);
	MakeWord	(0XFFFFA0CA);
	MakeWord	(0XFFFFA0CC);
	MakeWord	(0XFFFFA0CE);
	MakeWord	(0XFFFFA0D0);
	MakeWord	(0XFFFFA0D2);
	MakeByte	(0XFFFFA0D4);
	MakeWord	(0XFFFFA0D6);
	MakeWord	(0XFFFFA0D8);
	MakeWord	(0XFFFFA0DA);
	MakeWord	(0XFFFFA0DC);
	MakeWord	(0XFFFFA0DE);
	MakeWord	(0XFFFFA0E0);
	MakeName	(0XFFFFA0E0,	"Airflow_SD");
	MakeWord	(0XFFFFA0E2);
	MakeWord	(0XFFFFA0E4);
	MakeWord	(0XFFFFA0E6);
	MakeWord	(0XFFFFA0E8);
	MakeWord	(0XFFFFA0EA);
	MakeName	(0XFFFFA0EA,	"MaybeLoad");
	MakeWord	(0XFFFFA0EC);
	MakeWord	(0XFFFFA0EE);
	MakeWord	(0XFFFFA0F0);
	MakeWord	(0XFFFFA0F2);
	MakeWord	(0XFFFFA0F4);
	MakeWord	(0XFFFFA0F6);
	MakeByte	(0XFFFFA0F8);
	MakeByte	(0XFFFFA0F9);
	MakeWord	(0XFFFFA0FA);
	MakeWord	(0XFFFFA0FC);
	MakeWord	(0XFFFFA0FE);
	MakeWord	(0XFFFFA100);
	MakeWord	(0XFFFFA102);
	MakeWord	(0XFFFFA104);
	MakeWord	(0XFFFFA106);
	MakeWord	(0XFFFFA108);
	MakeName	(0XFFFFA108,	"CrankingToRunningTransition");
	MakeByte	(0XFFFFA10A);
	MakeWord	(0XFFFFA10C);
	MakeWord	(0XFFFFA10E);
	MakeWord	(0XFFFFA110);
	MakeWord	(0XFFFFA112);
	MakeWord	(0XFFFFA114);
	MakeWord	(0XFFFFA116);
	MakeWord	(0XFFFFA118);
	MakeWord	(0XFFFFA11A);
	MakeWord	(0XFFFFA11C);
	MakeWord	(0XFFFFA11E);
	MakeByte	(0XFFFFA120);
	MakeByte	(0XFFFFA121);
	MakeByte	(0XFFFFA122);
	MakeByte	(0XFFFFA123);
	MakeByte	(0XFFFFA124);
	MakeByte	(0XFFFFA125);
	MakeWord	(0XFFFFA126);
	MakeWord	(0XFFFFA128);
	MakeWord	(0XFFFFA13C);
	MakeWord	(0XFFFFA13E);
	MakeWord	(0XFFFFA140);
	MakeByte	(0XFFFFA142);
	MakeByte	(0XFFFFA143);
	MakeWord	(0XFFFFA144);
	MakeWord	(0XFFFFA146);
	MakeWord	(0XFFFFA148);
	MakeWord	(0XFFFFA14A);
	MakeWord	(0XFFFFA14C);
	MakeWord	(0XFFFFA14E);
	MakeWord	(0XFFFFA150);
	MakeWord	(0XFFFFA152);
	MakeWord	(0XFFFFA178);
	MakeWord	(0XFFFFA17A);
	MakeByte	(0XFFFFA17C);
	MakeWord	(0XFFFFA17E);
	MakeByte	(0XFFFFA180);
	MakeWord	(0XFFFFA182);
	MakeWord	(0XFFFFA184);
	MakeWord	(0XFFFFA186);
	MakeWord	(0XFFFFA188);
	MakeWord	(0XFFFFA18A);
	MakeByte	(0XFFFFA18C);
	MakeByte	(0XFFFFA18E);
	MakeByte	(0XFFFFA18F);
	MakeByte	(0XFFFFA190);
	MakeByte	(0XFFFFA191);
	MakeByte	(0XFFFFA192);
	MakeByte	(0XFFFFA193);
	MakeByte	(0XFFFFA194);
	MakeByte	(0XFFFFA195);
	MakeByte	(0XFFFFA196);
	MakeByte	(0XFFFFA198);
	MakeByte	(0XFFFFA19A);
	MakeByte	(0XFFFFA19B);
	MakeByte	(0XFFFFA19C);
	MakeByte	(0XFFFFA19D);
	MakeByte	(0XFFFFA19E);
	MakeByte	(0XFFFFA19F);
	MakeByte	(0XFFFFA1A0);
	MakeByte	(0XFFFFA1A1);
	MakeByte	(0XFFFFA1A2);
	MakeByte	(0XFFFFA1A3);
	MakeByte	(0XFFFFA1A4);
	MakeByte	(0XFFFFA1A5);
	MakeByte	(0XFFFFA1A6);
	MakeByte	(0XFFFFA1A7);
	MakeByte	(0XFFFFA1A8);
	MakeByte	(0XFFFFA1A9);
	MakeByte	(0XFFFFA1AA);
	MakeByte	(0XFFFFA1AB);
	MakeByte	(0XFFFFA1AC);
	MakeByte	(0XFFFFA1AF);
	MakeByte	(0XFFFFA1B0);
	MakeByte	(0XFFFFA1B1);
	MakeByte	(0XFFFFA1B2);
	MakeByte	(0XFFFFA1B3);
	MakeByte	(0XFFFFA1B4);
	MakeByte	(0XFFFFA1B5);
	MakeByte	(0XFFFFA1B7);
	MakeByte	(0XFFFFA1B8);
	MakeByte	(0XFFFFA1B9);
	MakeByte	(0XFFFFA1BA);
	MakeByte	(0XFFFFA1BB);
	MakeByte	(0XFFFFA1BC);
	MakeByte	(0XFFFFA1BD);
	MakeByte	(0XFFFFA1BE);
	MakeByte	(0XFFFFA1BF);
	MakeByte	(0XFFFFA1C0);
	MakeByte	(0XFFFFA1C1);
	MakeByte	(0XFFFFA1C2);
	MakeByte	(0XFFFFA1C3);
	MakeByte	(0XFFFFA1C4);
	MakeByte	(0XFFFFA1C5);
	MakeByte	(0XFFFFA1C6);
	MakeByte	(0XFFFFA1C7);
	MakeByte	(0XFFFFA1C8);
	MakeByte	(0XFFFFA1C9);
	MakeByte	(0XFFFFA1CA);
	MakeByte	(0XFFFFA1CB);
	MakeByte	(0XFFFFA1CC);
	MakeByte	(0XFFFFA1CD);
	MakeByte	(0XFFFFA1CE);
	MakeByte	(0XFFFFA1CF);
	MakeByte	(0XFFFFA1D0);
	MakeByte	(0XFFFFA1D1);
	MakeByte	(0XFFFFA1D2);
	MakeByte	(0XFFFFA1D3);
	MakeByte	(0XFFFFA1D4);
	MakeByte	(0XFFFFA1D5);
	MakeByte	(0XFFFFA1D6);
	MakeByte	(0XFFFFA1D7);
	MakeByte	(0XFFFFA1D8);
	MakeByte	(0XFFFFA1D9);
	MakeByte	(0XFFFFA1DA);
	MakeByte	(0XFFFFA1DB);
	MakeByte	(0XFFFFA1DC);
	MakeByte	(0XFFFFA1DD);
	MakeByte	(0XFFFFA1DE);
	MakeByte	(0XFFFFA1DF);
	MakeByte	(0XFFFFA1E0);
	MakeByte	(0XFFFFA1E1);
	MakeWord	(0XFFFFA1E2);
	MakeWord	(0XFFFFA1E4);
	MakeByte	(0XFFFFA1E6);
	MakeByte	(0XFFFFA1E7);
	MakeWord	(0XFFFFA1E8);
	MakeByte	(0XFFFFA1EA);
	MakeWord	(0XFFFFA1EC);
	MakeWord	(0XFFFFA1EE);
	MakeWord	(0XFFFFA1F0);
	MakeWord	(0XFFFFA1F2);
	MakeByte	(0XFFFFA1F4);
	MakeByte	(0XFFFFA1F5);
	MakeByte	(0XFFFFA1F6);
	MakeWord	(0XFFFFA1F8);
	MakeWord	(0XFFFFA1FA);
	MakeByte	(0XFFFFA1FC);
	MakeWord	(0XFFFFA1FE);
	MakeByte	(0XFFFFA200);
	MakeWord	(0XFFFFA202);
	MakeByte	(0XFFFFA204);
	MakeByte	(0XFFFFA205);
	MakeWord	(0XFFFFA206);
	MakeByte	(0XFFFFA208);
	MakeByte	(0XFFFFA209);
	MakeWord	(0XFFFFA20A);
	MakeWord	(0XFFFFA20C);
	MakeByte	(0XFFFFA20E);
	MakeWord	(0XFFFFA210);
	MakeWord	(0XFFFFA212);
	MakeByte	(0XFFFFA214);
	MakeByte	(0XFFFFA215);
	MakeByte	(0XFFFFA216);
	MakeByte	(0XFFFFA217);
	MakeByte	(0XFFFFA218);
	MakeByte	(0XFFFFA219);
	MakeWord	(0XFFFFA21A);
	MakeByte	(0XFFFFA21C);
	MakeWord	(0XFFFFA21E);
	MakeByte	(0XFFFFA220);
	MakeByte	(0XFFFFA221);
	MakeByte	(0XFFFFA222);
	MakeByte	(0XFFFFA223);
	MakeWord	(0XFFFFA224);
	MakeByte	(0XFFFFA226);
	MakeByte	(0XFFFFA227);
	MakeWord	(0XFFFFA228);
	MakeWord	(0XFFFFA22A);
	MakeWord	(0XFFFFA22C);
	MakeWord	(0XFFFFA22E);
	MakeWord	(0XFFFFA230);
	MakeWord	(0XFFFFA232);
	MakeWord	(0XFFFFA234);
	MakeWord	(0XFFFFA236);
	MakeWord	(0XFFFFA238);
	MakeWord	(0XFFFFA23A);
	MakeWord	(0XFFFFA23C);
	MakeWord	(0XFFFFA23E);
	MakeWord	(0XFFFFA240);
	MakeWord	(0XFFFFA242);
	MakeWord	(0XFFFFA244);
	MakeByte	(0XFFFFA246);
	MakeByte	(0XFFFFA247);
	MakeWord	(0XFFFFA248);
	MakeWord	(0XFFFFA24A);
	MakeWord	(0XFFFFA24C);
	MakeByte	(0XFFFFA24E);
	MakeByte	(0XFFFFA24F);
	MakeWord	(0XFFFFA250);
	MakeWord	(0XFFFFA252);
	MakeWord	(0XFFFFA254);
	MakeWord	(0XFFFFA256);
	MakeWord	(0XFFFFA258);
	MakeWord	(0XFFFFA25A);
	MakeWord	(0XFFFFA25C);
	MakeWord	(0XFFFFA25E);
	MakeWord	(0XFFFFA260);
	MakeWord	(0XFFFFA262);
	MakeByte	(0XFFFFA264);
	MakeWord	(0XFFFFA266);
	MakeWord	(0XFFFFA268);
	MakeWord	(0XFFFFA26A);
	MakeWord	(0XFFFFA26C);
	MakeWord	(0XFFFFA26E);
	MakeWord	(0XFFFFA270);
	MakeWord	(0XFFFFA272);
	MakeWord	(0XFFFFA274);
	MakeWord	(0XFFFFA276);
	MakeWord	(0XFFFFA278);
	MakeWord	(0XFFFFA27A);
	MakeWord	(0XFFFFA27C);
	MakeWord	(0XFFFFA27E);
	MakeByte	(0XFFFFA280);
	MakeByte	(0XFFFFA281);
	MakeByte	(0XFFFFA282);
	MakeByte	(0XFFFFA283);
	MakeByte	(0XFFFFA284);
	MakeByte	(0XFFFFA285);
	MakeByte	(0XFFFFA286);
	MakeByte	(0XFFFFA287);
	MakeByte	(0XFFFFA288);
	MakeByte	(0XFFFFA289);
	MakeByte	(0XFFFFA28A);
	MakeWord	(0XFFFFA28C);
	MakeWord	(0XFFFFA28E);
	MakeWord	(0XFFFFA290);
	MakeWord	(0XFFFFA292);
	MakeWord	(0XFFFFA294);
	MakeWord	(0XFFFFA296);
	MakeDword	(0XFFFFA298);
	MakeByte	(0XFFFFA29C);
	MakeByte	(0XFFFFA29D);
	MakeByte	(0XFFFFA29E);
	MakeByte	(0XFFFFA29F);
	MakeByte	(0XFFFFA2A0);
	MakeByte	(0XFFFFA2A1);
	MakeWord	(0XFFFFA2A2);
	MakeByte	(0XFFFFA2BC);
	MakeWord	(0XFFFFA2C6);
	MakeWord	(0XFFFFA2CE);
	MakeByte	(0XFFFFA2DA);
	MakeWord	(0XFFFFA2DC);
	MakeWord	(0XFFFFA2DE);
	MakeWord	(0XFFFFA2E0);
	MakeWord	(0XFFFFA2E2);
	MakeWord	(0XFFFFA2E4);
	MakeWord	(0XFFFFA2E6);
	MakeWord	(0XFFFFA2F4);
	MakeByte	(0XFFFFA2F6);
	MakeByte	(0XFFFFA2F8);
	MakeWord	(0XFFFFA2FA);
	MakeWord	(0XFFFFA2FC);
	MakeByte	(0XFFFFA2FE);
	MakeByte	(0XFFFFA2FF);
	MakeByte	(0XFFFFA300);
	MakeByte	(0XFFFFA301);
	MakeByte	(0XFFFFA302);
	MakeByte	(0XFFFFA303);
	MakeWord	(0XFFFFA304);
	MakeWord	(0XFFFFA306);
	MakeWord	(0XFFFFA308);
	MakeWord	(0XFFFFA30A);
	MakeWord	(0XFFFFA30C);
	MakeWord	(0XFFFFA30E);
	MakeWord	(0XFFFFA310);
	MakeWord	(0XFFFFA312);
	MakeDword	(0XFFFFA314);
	MakeDword	(0XFFFFA318);
	MakeDword	(0XFFFFA31C);
	MakeDword	(0XFFFFA320);
	MakeDword	(0XFFFFA324);
	MakeDword	(0XFFFFA328);
	MakeWord	(0XFFFFA32C);
	MakeWord	(0XFFFFA32E);
	MakeWord	(0XFFFFA330);
	MakeWord	(0XFFFFA332);
	MakeWord	(0XFFFFA334);
	MakeWord	(0XFFFFA336);
	MakeWord	(0XFFFFA338);
	MakeByte	(0XFFFFA33B);
	MakeByte	(0XFFFFA33C);
	MakeByte	(0XFFFFA33D);
	MakeByte	(0XFFFFA33E);
	MakeByte	(0XFFFFA33F);
	MakeByte	(0XFFFFA340);
	MakeByte	(0XFFFFA341);
	MakeByte	(0XFFFFA342);
	MakeByte	(0XFFFFA343);
	MakeByte	(0XFFFFA344);
	MakeByte	(0XFFFFA345);
	MakeByte	(0XFFFFA346);
	MakeByte	(0XFFFFA347);
	MakeByte	(0XFFFFA348);
	MakeByte	(0XFFFFA349);
	MakeByte	(0XFFFFA34A);
	MakeByte	(0XFFFFA34B);
	MakeByte	(0XFFFFA34C);
	MakeByte	(0XFFFFA34D);
	MakeByte	(0XFFFFA34E);
	MakeByte	(0XFFFFA34F);
	MakeByte	(0XFFFFA350);
	MakeByte	(0XFFFFA351);
	MakeByte	(0XFFFFA352);
	MakeByte	(0XFFFFA354);
	MakeByte	(0XFFFFA356);
	MakeByte	(0XFFFFA357);
	MakeWord	(0XFFFFA358);
	MakeByte	(0XFFFFA35A);
	MakeByte	(0XFFFFA35B);
	MakeByte	(0XFFFFA35C);
	MakeByte	(0XFFFFA362);
	MakeByte	(0XFFFFA363);
	MakeByte	(0XFFFFA364);
	MakeByte	(0XFFFFA365);
	MakeByte	(0XFFFFA366);
	MakeWord	(0XFFFFA368);
	MakeWord	(0XFFFFA36A);
	MakeByte	(0XFFFFA372);
	MakeByte	(0XFFFFA373);
	MakeWord	(0XFFFFA374);
	MakeWord	(0XFFFFA378);
	MakeWord	(0XFFFFA37A);
	MakeWord	(0XFFFFA37C);
	MakeWord	(0XFFFFA37E);
	MakeWord	(0XFFFFA380);
	MakeWord	(0XFFFFA382);
	MakeWord	(0XFFFFA384);
	MakeWord	(0XFFFFA386);
	MakeWord	(0XFFFFA388);
	MakeByte	(0XFFFFA38A);
	MakeWord	(0XFFFFA390);
	MakeWord	(0XFFFFA392);
	MakeWord	(0XFFFFA394);
	MakeByte	(0XFFFFA396);
	MakeByte	(0XFFFFA397);
	MakeWord	(0XFFFFA398);
	MakeWord	(0XFFFFA39A);
	MakeDword	(0XFFFFA39C);
	MakeByte	(0XFFFFA3A0);
	MakeByte	(0XFFFFA3A1);
	MakeWord	(0XFFFFA3A2);
	MakeWord	(0XFFFFA3A4);
	MakeByte	(0XFFFFA3AA);
	MakeByte	(0XFFFFA3AB);
	MakeByte	(0XFFFFA3AC);
	MakeByte	(0XFFFFA3AD);
	MakeByte	(0XFFFFA3AE);
	MakeByte	(0XFFFFA3AF);
	MakeByte	(0XFFFFA3B0);
	MakeByte	(0XFFFFA3B1);
	MakeByte	(0XFFFFA3B2);
	MakeByte	(0XFFFFA3B3);
	MakeByte	(0XFFFFA3B4);
	MakeByte	(0XFFFFA3B5);
	MakeByte	(0XFFFFA3B6);
	MakeByte	(0XFFFFA3B7);
	MakeByte	(0XFFFFA3B8);
	MakeByte	(0XFFFFA3B9);
	MakeByte	(0XFFFFA3BA);
	MakeByte	(0XFFFFA3BB);
	MakeWord	(0XFFFFA3BC);
	MakeWord	(0XFFFFA3BE);
	MakeWord	(0XFFFFA3C0);
	MakeWord	(0XFFFFA3C2);
	MakeByte	(0XFFFFA3C4);
	MakeByte	(0XFFFFA3C5);
	MakeByte	(0XFFFFA3C6);
	MakeByte	(0XFFFFA3C7);
	MakeByte	(0XFFFFA3C8);
	MakeByte	(0XFFFFA3C9);
	MakeByte	(0XFFFFA3CA);
	MakeByte	(0XFFFFA3CB);
	MakeByte	(0XFFFFA3CC);
	MakeByte	(0XFFFFA3CD);
	MakeByte	(0XFFFFA3CE);
	MakeByte	(0XFFFFA3CF);
	MakeByte	(0XFFFFA3D0);
	MakeByte	(0XFFFFA3D1);
	MakeByte	(0XFFFFA3D2);
	MakeByte	(0XFFFFA3D3);
	MakeByte	(0XFFFFA3D4);
	MakeWord	(0XFFFFA3D6);
	MakeWord	(0XFFFFA3D8);
	MakeWord	(0XFFFFA3DA);
	MakeWord	(0XFFFFA3DC);
	MakeWord	(0XFFFFA3DE);
	MakeWord	(0XFFFFA3E0);
	MakeWord	(0XFFFFA3E2);
	MakeWord	(0XFFFFA3E4);
	MakeWord	(0XFFFFA3E6);
	MakeWord	(0XFFFFA3E8);
	MakeWord	(0XFFFFA3EA);
	MakeDword	(0XFFFFA3EC);
	MakeDword	(0XFFFFA3F0);
	MakeDword	(0XFFFFA3F4);
	MakeDword	(0XFFFFA3F8);
	MakeByte	(0XFFFFA3FC);
	MakeByte	(0XFFFFA3FD);
	MakeByte	(0XFFFFA3FE);
	MakeByte	(0XFFFFA3FF);
	MakeByte	(0XFFFFA400);
	MakeByte	(0XFFFFA401);
	MakeByte	(0XFFFFA402);
	MakeWord	(0XFFFFA404);
	MakeWord	(0XFFFFA406);
	MakeWord	(0XFFFFA408);
	MakeWord	(0XFFFFA40A);
	MakeWord	(0XFFFFA40C);
	MakeByte	(0XFFFFA40E);
	MakeByte	(0XFFFFA40F);
	MakeWord	(0XFFFFA410);
	MakeWord	(0XFFFFA412);
	MakeWord	(0XFFFFA414);
	MakeWord	(0XFFFFA416);
	MakeWord	(0XFFFFA418);
	MakeWord	(0XFFFFA41A);
	MakeWord	(0XFFFFA41C);
	MakeWord	(0XFFFFA41E);
	MakeWord	(0XFFFFA420);
	MakeWord	(0XFFFFA422);
	MakeWord	(0XFFFFA424);
	MakeWord	(0XFFFFA426);
	MakeWord	(0XFFFFA428);
	MakeWord	(0XFFFFA42A);
	MakeWord	(0XFFFFA42C);
	MakeWord	(0XFFFFA42E);
	MakeWord	(0XFFFFA430);
	MakeWord	(0XFFFFA432);
	MakeWord	(0XFFFFA434);
	MakeWord	(0XFFFFA436);
	MakeByte	(0XFFFFA438);
	MakeWord	(0XFFFFA43A);
	MakeWord	(0XFFFFA43C);
	MakeByte	(0XFFFFA43E);
	MakeByte	(0XFFFFA43F);
	MakeByte	(0XFFFFA440);
	MakeByte	(0XFFFFA441);
	MakeWord	(0XFFFFA442);
	MakeWord	(0XFFFFA444);
	MakeWord	(0XFFFFA446);
	MakeWord	(0XFFFFA448);
	MakeWord	(0XFFFFA44A);
	MakeWord	(0XFFFFA44C);
	MakeWord	(0XFFFFA44E);
	MakeWord	(0XFFFFA450);
	MakeWord	(0XFFFFA452);
	MakeByte	(0XFFFFA454);
	MakeByte	(0XFFFFA456);
	MakeByte	(0XFFFFA457);
	MakeWord	(0XFFFFA458);
	MakeByte	(0XFFFFA45A);
	MakeByte	(0XFFFFA45B);
	MakeWord	(0XFFFFA45C);
	MakeByte	(0XFFFFA45E);
	MakeByte	(0XFFFFA45F);
	MakeWord	(0XFFFFA460);
	MakeByte	(0XFFFFA462);
	MakeByte	(0XFFFFA463);
	MakeWord	(0XFFFFA464);
	MakeByte	(0XFFFFA466);
	MakeByte	(0XFFFFA467);
	MakeWord	(0XFFFFA468);
	MakeByte	(0XFFFFA46A);
	MakeByte	(0XFFFFA46B);
	MakeWord	(0XFFFFA46C);
	MakeWord	(0XFFFFA46E);
	MakeByte	(0XFFFFA470);
	MakeByte	(0XFFFFA471);
	MakeWord	(0XFFFFA472);
	MakeByte	(0XFFFFA474);
	MakeByte	(0XFFFFA475);
	MakeWord	(0XFFFFA476);
	MakeByte	(0XFFFFA478);
	MakeByte	(0XFFFFA479);
	MakeWord	(0XFFFFA47A);
	MakeByte	(0XFFFFA47C);
	MakeByte	(0XFFFFA47D);
	MakeByte	(0XFFFFA47E);
	MakeWord	(0XFFFFA480);
	MakeByte	(0XFFFFA482);
	MakeByte	(0XFFFFA484);
	MakeByte	(0XFFFFA485);
	MakeByte	(0XFFFFA486);
	MakeByte	(0XFFFFA488);
	MakeByte	(0XFFFFA489);
	MakeWord	(0XFFFFA48A);
	MakeWord	(0XFFFFA48C);
	MakeByte	(0XFFFFA48E);
	MakeByte	(0XFFFFA490);
	MakeByte	(0XFFFFA491);
	MakeWord	(0XFFFFA492);
	MakeByte	(0XFFFFA494);
	MakeByte	(0XFFFFA495);
	MakeWord	(0XFFFFA496);
	MakeWord	(0XFFFFA498);
	MakeWord	(0XFFFFA49A);
	MakeByte	(0XFFFFA4AA);
	MakeWord	(0XFFFFA4AC);
	MakeWord	(0XFFFFA4AE);
	MakeWord	(0XFFFFA4B0);
	MakeByte	(0XFFFFA4B2);
	MakeWord	(0XFFFFA4B4);
	MakeWord	(0XFFFFA4B6);
	MakeByte	(0XFFFFA4B8);
	MakeByte	(0XFFFFA4B9);
	MakeWord	(0XFFFFA4BA);
	MakeWord	(0XFFFFA4BC);
	MakeWord	(0XFFFFA4BE);
	MakeDword	(0XFFFFA4C0);
	MakeWord	(0XFFFFA4C4);
	MakeWord	(0XFFFFA4C6);
	MakeByte	(0XFFFFA4C8);
	MakeWord	(0XFFFFA4CA);
	MakeWord	(0XFFFFA4CC);
	MakeByte	(0XFFFFA4CE);
	MakeWord	(0XFFFFA4D0);
	MakeWord	(0XFFFFA4D2);
	MakeWord	(0XFFFFA4D4);
	MakeWord	(0XFFFFA4D6);
	MakeWord	(0XFFFFA4D8);
	MakeWord	(0XFFFFA4DA);
	MakeWord	(0XFFFFA4DC);
	MakeWord	(0XFFFFA4DE);
	MakeWord	(0XFFFFA4E0);
	MakeWord	(0XFFFFA4E2);
	MakeWord	(0XFFFFA4E4);
	MakeByte	(0XFFFFA4E6);
	MakeByte	(0XFFFFA4E7);
	MakeByte	(0XFFFFA4E8);
	MakeWord	(0XFFFFA4EA);
	MakeWord	(0XFFFFA4EC);
	MakeWord	(0XFFFFA4EE);
	MakeWord	(0XFFFFA4F0);
	MakeWord	(0XFFFFA4F2);
	MakeWord	(0XFFFFA4F4);
	MakeByte	(0XFFFFA4F6);
	MakeByte	(0XFFFFA4F7);
	MakeByte	(0XFFFFA4F8);
	MakeByte	(0XFFFFA4F9);
	MakeByte	(0XFFFFA4FA);
	MakeByte	(0XFFFFA4FC);
	MakeByte	(0XFFFFA4FD);
	MakeWord	(0XFFFFA4FE);
	MakeWord	(0XFFFFA500);
	MakeWord	(0XFFFFA504);
	MakeWord	(0XFFFFA506);
	MakeWord	(0XFFFFA508);
	MakeWord	(0XFFFFA50A);
	MakeWord	(0XFFFFA50C);
	MakeWord	(0XFFFFA50E);
	MakeWord	(0XFFFFA510);
	MakeWord	(0XFFFFA512);
	MakeWord	(0XFFFFA514);
	MakeByte	(0XFFFFA516);
	MakeWord	(0XFFFFA518);
	MakeWord	(0XFFFFA51A);
	MakeWord	(0XFFFFA51C);
	MakeWord	(0XFFFFA51E);
	MakeWord	(0XFFFFA556);
	MakeDword	(0XFFFFA558);
	MakeByte	(0XFFFFA55C);
	MakeWord	(0XFFFFA55E);
	MakeWord	(0XFFFFA560);
	MakeWord	(0XFFFFA562);
	MakeName	(0XFFFFA562,	"EngineRPM_PID_000C___");
	MakeByte	(0XFFFFA564);
	MakeByte	(0XFFFFA565);
	MakeByte	(0XFFFFA588);
	MakeWord	(0XFFFFA58A);
	MakeWord	(0XFFFFA58C);
	MakeWord	(0XFFFFA58E);
	MakeWord	(0XFFFFA590);
	MakeByte	(0XFFFFA592);
	MakeByte	(0XFFFFA593);
	MakeWord	(0XFFFFA594);
	MakeWord	(0XFFFFA598);
	MakeWord	(0XFFFFA59A);
	MakeByte	(0XFFFFA59C);
	MakeByte	(0XFFFFA59D);
	MakeByte	(0XFFFFA59E);
	MakeByte	(0XFFFFA59F);
	MakeByte	(0XFFFFA5A0);
	MakeByte	(0XFFFFA5A1);
	MakeByte	(0XFFFFA5A2);
	MakeWord	(0XFFFFA5A4);
	MakeByte	(0XFFFFA5A6);
	MakeWord	(0XFFFFA5A8);
	MakeByte	(0XFFFFA5AA);
	MakeByte	(0XFFFFA5AB);
	MakeWord	(0XFFFFA5AC);
	MakeWord	(0XFFFFA5B0);
	MakeByte	(0XFFFFA5B2);
	MakeByte	(0XFFFFA5B3);
	MakeWord	(0XFFFFA5B4);
	MakeWord	(0XFFFFA5B6);
	MakeWord	(0XFFFFA5B8);
	MakeWord	(0XFFFFA5BA);
	MakeWord	(0XFFFFA5BC);
	MakeWord	(0XFFFFA5C0);
	MakeWord	(0XFFFFA5C2);
	MakeByte	(0XFFFFA5C4);
	MakeByte	(0XFFFFA5C5);
	MakeByte	(0XFFFFA5C6);
	MakeByte	(0XFFFFA5C7);
	MakeByte	(0XFFFFA5C8);
	MakeByte	(0XFFFFA5C9);
	MakeByte	(0XFFFFA5CA);
	MakeByte	(0XFFFFA5CB);
	MakeByte	(0XFFFFA5CC);
	MakeByte	(0XFFFFA5CD);
	MakeByte	(0XFFFFA5CE);
	MakeByte	(0XFFFFA5CF);
	MakeByte	(0XFFFFA5D0);
	MakeByte	(0XFFFFA5D1);
	MakeByte	(0XFFFFA5D2);
	MakeByte	(0XFFFFA5D3);
	MakeByte	(0XFFFFA5D4);
	MakeByte	(0XFFFFA5D5);
	MakeByte	(0XFFFFA5D6);
	MakeByte	(0XFFFFA5D7);
	MakeByte	(0XFFFFA5D8);
	MakeByte	(0XFFFFA5D9);
	MakeByte	(0XFFFFA60A);
	MakeByte	(0XFFFFA60C);
	MakeByte	(0XFFFFA60D);
	MakeByte	(0XFFFFA60E);
	MakeByte	(0XFFFFA610);
	MakeByte	(0XFFFFA612);
	MakeByte	(0XFFFFA613);
	MakeByte	(0XFFFFA614);
	MakeWord	(0XFFFFA616);
	MakeByte	(0XFFFFA618);
	MakeWord	(0XFFFFA61A);
	MakeByte	(0XFFFFA61C);
	MakeByte	(0XFFFFA61D);
	MakeByte	(0XFFFFA61E);
	MakeByte	(0XFFFFA620);
	MakeByte	(0XFFFFA621);
	MakeByte	(0XFFFFA622);
	MakeByte	(0XFFFFA623);
	MakeWord	(0XFFFFA624);
	MakeWord	(0XFFFFA626);
	MakeWord	(0XFFFFA628);
	MakeWord	(0XFFFFA62A);
	MakeWord	(0XFFFFA62C);
	MakeWord	(0XFFFFA62E);
	MakeWord	(0XFFFFA630);
	MakeByte	(0XFFFFA632);
	MakeByte	(0XFFFFA633);
	MakeByte	(0XFFFFA634);
	MakeByte	(0XFFFFA635);
	MakeByte	(0XFFFFA636);
	MakeByte	(0XFFFFA637);
	MakeByte	(0XFFFFA638);
	MakeWord	(0XFFFFA63A);
	MakeWord	(0XFFFFA63C);
	MakeWord	(0XFFFFA63E);
	MakeWord	(0XFFFFA640);
	MakeWord	(0XFFFFA642);
	MakeWord	(0XFFFFA644);
	MakeWord	(0XFFFFA646);
	MakeWord	(0XFFFFA648);
	MakeWord	(0XFFFFA64A);
	MakeWord	(0XFFFFA64C);
	MakeDword	(0XFFFFA64E);
	MakeByte	(0XFFFFA652);
	MakeByte	(0XFFFFA653);
	MakeWord	(0XFFFFA654);
	MakeWord	(0XFFFFA656);
	MakeByte	(0XFFFFA658);
	MakeWord	(0XFFFFA65A);
	MakeDword	(0XFFFFA65C);
	MakeByte	(0XFFFFA660);
	MakeWord	(0XFFFFA662);
	MakeByte	(0XFFFFA664);
	MakeByte	(0XFFFFA665);
	MakeByte	(0XFFFFA666);
	MakeByte	(0XFFFFA667);
	MakeWord	(0XFFFFA668);
	MakeWord	(0XFFFFA66A);
	MakeWord	(0XFFFFA674);
	MakeByte	(0XFFFFA676);
	MakeWord	(0XFFFFA678);
	MakeWord	(0XFFFFA67A);
	MakeByte	(0XFFFFA67D);
	MakeByte	(0XFFFFA67E);
	MakeByte	(0XFFFFA67F);
	MakeByte	(0XFFFFA680);
	MakeWord	(0XFFFFA682);
	MakeWord	(0XFFFFA684);
	MakeByte	(0XFFFFA686);
	MakeByte	(0XFFFFA687);
	MakeByte	(0XFFFFA688);
	MakeByte	(0XFFFFA689);
	MakeByte	(0XFFFFA68A);
	MakeByte	(0XFFFFA68C);
	MakeByte	(0XFFFFA68D);
	MakeByte	(0XFFFFA68E);
	MakeByte	(0XFFFFA68F);
	MakeByte	(0XFFFFA690);
	MakeByte	(0XFFFFA69D);
	MakeByte	(0XFFFFA69E);
	MakeWord	(0XFFFFA6A0);
	MakeWord	(0XFFFFA6A2);
	MakeWord	(0XFFFFA6A4);
	MakeDword	(0XFFFFA6B6);
	MakeDword	(0XFFFFA6BA);
	MakeByte	(0XFFFFA6BE);
	MakeByte	(0XFFFFA6BF);
	MakeByte	(0XFFFFA6C0);
	MakeByte	(0XFFFFA6C1);
	MakeByte	(0XFFFFA6C2);
	MakeWord	(0XFFFFA6C4);
	MakeWord	(0XFFFFA6E6);
	MakeWord	(0XFFFFA6E8);
	MakeWord	(0XFFFFA6EA);
	MakeWord	(0XFFFFA6EC);
	MakeName	(0XFFFFA6EC,	"DesiredIdleAirflow_IncludingFeedback_Clamped");
	MakeWord	(0XFFFFA6EE);
	MakeName	(0XFFFFA6EE,	"EngineRpmError");
	MakeWord	(0XFFFFA6F0);
	MakeWord	(0XFFFFA6F2);
	MakeName	(0XFFFFA6F2,	"IdleIntegralAccumulator_FINAL");
	MakeByte	(0XFFFFA6F4);
	MakeName	(0XFFFFA6F4,	"IdleSpeedErrorSmall?");
	MakeByte	(0XFFFFA6F5);
	MakeName	(0XFFFFA6F5,	"StallSaverActiveFlag");
	MakeByte	(0XFFFFA6F6);
	MakeByte	(0XFFFFA6F7);
	MakeName	(0XFFFFA6F7,	"IdleControlMode");
	MakeByte	(0XFFFFA6F8);
	MakeName	(0XFFFFA6F8,	"IdleModeChangeFlag");
	MakeByte	(0XFFFFA6F9);
	MakeByte	(0XFFFFA6FA);
	MakeName	(0XFFFFA6FA,	"StartupToPidModeFlag?");
	MakeByte	(0XFFFFA6FB);
	MakeWord	(0XFFFFA6FC);
	MakeName	(0XFFFFA6FC,	"IdleIntegral_Something_Maybe_Accumulator?");
	MakeWord	(0XFFFFA6FE);
	MakeName	(0XFFFFA6FE,	"IdleDerivativeTerm");
	MakeWord	(0XFFFFA700);
	MakeWord	(0XFFFFA702);
	MakeName	(0XFFFFA702,	"EngineSpeedHeavilyFiltered");
	MakeWord	(0XFFFFA704);
	MakeName	(0XFFFFA704,	"EngineSpeedLightlyFiltered");
	MakeWord	(0XFFFFA706);
	MakeName	(0XFFFFA706,	"IdleIntegralAccumulator_DriveAC?");
	MakeWord	(0XFFFFA708);
	MakeName	(0XFFFFA708,	"IdleIntegralAccumulator_????");
	MakeWord	(0XFFFFA70A);
	MakeName	(0XFFFFA70A,	"IdleIntegralAccumulator_PN");
	MakeWord	(0XFFFFA70C);
	MakeName	(0XFFFFA70C,	"IdleIntegralAccumulator_TBD1");
	MakeWord	(0XFFFFA70E);
	MakeName	(0XFFFFA70E,	"IdleIntegralAccumulator_1");
	MakeWord	(0XFFFFA710);
	MakeName	(0XFFFFA710,	"IdleIntegralAccumulator_2");
	MakeWord	(0XFFFFA712);
	MakeName	(0XFFFFA712,	"IdleIntegralDelta");
	MakeWord	(0XFFFFA714);
	MakeWord	(0XFFFFA716);
	MakeName	(0XFFFFA716,	"IdleProportionalTerm");
	MakeWord	(0XFFFFA718);
	MakeName	(0XFFFFA718,	"IdleTotal_Including_Feedback");
	MakeWord	(0XFFFFA71A);
	MakeByte	(0XFFFFA71C);
	MakeByte	(0XFFFFA71D);
	MakeByte	(0XFFFFA71E);
	MakeByte	(0XFFFFA71F);
	MakeName	(0XFFFFA71F,	"IdleSpeedErrorTimer?");
	MakeWord	(0XFFFFA720);
	MakeName	(0XFFFFA720,	"StallSaverAmount_ForSure");
	MakeByte	(0XFFFFA722);
	MakeName	(0XFFFFA722,	"SomethingAboutDerivativeAndStallSaver");
	MakeByte	(0XFFFFA723);
	MakeName	(0XFFFFA723,	"PidFlags");
	MakeByte	(0XFFFFA724);
	MakeDword	(0XFFFFA726);
	MakeDword	(0XFFFFA72A);
	MakeWord	(0XFFFFA72E);
	MakeWord	(0XFFFFA730);
	MakeByte	(0XFFFFA732);
	MakeByte	(0XFFFFA733);
	MakeWord	(0XFFFFA734);
	MakeWord	(0XFFFFA736);
	MakeWord	(0XFFFFA738);
	MakeWord	(0XFFFFA73A);
	MakeDword	(0XFFFFA73C);
	MakeDword	(0XFFFFA740);
	MakeWord	(0XFFFFA744);
	MakeWord	(0XFFFFA746);
	MakeWord	(0XFFFFA748);
	MakeWord	(0XFFFFA74A);
	MakeDword	(0XFFFFA74C);
	MakeDword	(0XFFFFA750);
	MakeByte	(0XFFFFA754);
	MakeByte	(0XFFFFA755);
	MakeByte	(0XFFFFA756);
	MakeByte	(0XFFFFA757);
	MakeByte	(0XFFFFA758);
	MakeByte	(0XFFFFA759);
	MakeByte	(0XFFFFA75A);
	MakeByte	(0XFFFFA75B);
	MakeWord	(0XFFFFA75C);
	MakeWord	(0XFFFFA75E);
	MakeDword	(0XFFFFA760);
	MakeWord	(0XFFFFA764);
	MakeWord	(0XFFFFA766);
	MakeWord	(0XFFFFA768);
	MakeWord	(0XFFFFA76A);
	MakeWord	(0XFFFFA76C);
	MakeWord	(0XFFFFA76E);
	MakeWord	(0XFFFFA770);
	MakeWord	(0XFFFFA772);
	MakeWord	(0XFFFFA774);
	MakeWord	(0XFFFFA776);
	MakeWord	(0XFFFFA778);
	MakeWord	(0XFFFFA77A);
	MakeWord	(0XFFFFA77C);
	MakeWord	(0XFFFFA77E);
	MakeWord	(0XFFFFA780);
	MakeWord	(0XFFFFA782);
	MakeWord	(0XFFFFA784);
	MakeWord	(0XFFFFA786);
	MakeWord	(0XFFFFA788);
	MakeWord	(0XFFFFA78A);
	MakeWord	(0XFFFFA78C);
	MakeWord	(0XFFFFA78E);
	MakeWord	(0XFFFFA790);
	MakeWord	(0XFFFFA792);
	MakeWord	(0XFFFFA794);
	MakeWord	(0XFFFFA796);
	MakeWord	(0XFFFFA798);
	MakeWord	(0XFFFFA79A);
	MakeWord	(0XFFFFA79C);
	MakeWord	(0XFFFFA79E);
	MakeByte	(0XFFFFA7A0);
	MakeByte	(0XFFFFA7A1);
	MakeWord	(0XFFFFA7A2);
	MakeWord	(0XFFFFA7A4);
	MakeWord	(0XFFFFA7A6);
	MakeWord	(0XFFFFA7A8);
	MakeWord	(0XFFFFA7AA);
	MakeWord	(0XFFFFA7AC);
	MakeWord	(0XFFFFA7AE);
	MakeWord	(0XFFFFA7B0);
	MakeByte	(0XFFFFA7B2);
	MakeByte	(0XFFFFA7B3);
	MakeByte	(0XFFFFA7B4);
	MakeWord	(0XFFFFA7B6);
	MakeWord	(0XFFFFA7B8);
	MakeWord	(0XFFFFA7BA);
	MakeWord	(0XFFFFA7BC);
	MakeWord	(0XFFFFA7BE);
	MakeWord	(0XFFFFA7C0);
	MakeWord	(0XFFFFA7C2);
	MakeWord	(0XFFFFA7C4);
	MakeWord	(0XFFFFA7C6);
	MakeWord	(0XFFFFA7C8);
	MakeByte	(0XFFFFA7CA);
	MakeByte	(0XFFFFA7CC);
	MakeByte	(0XFFFFA7CD);
	MakeWord	(0XFFFFA7CE);
	MakeWord	(0XFFFFA7D0);
	MakeWord	(0XFFFFA7D2);
	MakeWord	(0XFFFFA7D4);
	MakeWord	(0XFFFFA7D6);
	MakeWord	(0XFFFFA7D8);
	MakeWord	(0XFFFFA7DA);
	MakeWord	(0XFFFFA7DC);
	MakeByte	(0XFFFFA7DE);
	MakeByte	(0XFFFFA7DF);
	MakeByte	(0XFFFFA7E0);
	MakeByte	(0XFFFFA7E1);
	MakeWord	(0XFFFFA7E2);
	MakeByte	(0XFFFFA7E4);
	MakeWord	(0XFFFFA7E6);
	MakeByte	(0XFFFFA7E8);
	MakeByte	(0XFFFFA7E9);
	MakeByte	(0XFFFFA7EA);
	MakeWord	(0XFFFFA7EC);
	MakeWord	(0XFFFFA7EE);
	MakeWord	(0XFFFFA7F0);
	MakeByte	(0XFFFFA7F2);
	MakeByte	(0XFFFFA7F3);
	MakeByte	(0XFFFFA7F4);
	MakeByte	(0XFFFFA7F5);
	MakeByte	(0XFFFFA7F6);
	MakeByte	(0XFFFFA7F7);
	MakeByte	(0XFFFFA7F8);
	MakeByte	(0XFFFFA7F9);
	MakeWord	(0XFFFFA7FA);
	MakeByte	(0XFFFFA7FC);
	MakeByte	(0XFFFFA7FD);
	MakeByte	(0XFFFFA7FE);
	MakeByte	(0XFFFFA7FF);
	MakeByte	(0XFFFFA800);
	MakeByte	(0XFFFFA801);
	MakeByte	(0XFFFFA802);
	MakeByte	(0XFFFFA803);
	MakeByte	(0XFFFFA804);
	MakeByte	(0XFFFFA805);
	MakeByte	(0XFFFFA806);
	MakeByte	(0XFFFFA807);
	MakeByte	(0XFFFFA808);
	MakeByte	(0XFFFFA809);
	MakeByte	(0XFFFFA80A);
	MakeByte	(0XFFFFA80B);
	MakeByte	(0XFFFFA80C);
	MakeByte	(0XFFFFA80D);
	MakeByte	(0XFFFFA80E);
	MakeByte	(0XFFFFA80F);
	MakeWord	(0XFFFFA810);
	MakeByte	(0XFFFFA812);
	MakeWord	(0XFFFFA814);
	MakeByte	(0XFFFFA816);
	MakeWord	(0XFFFFA818);
	MakeWord	(0XFFFFA81A);
	MakeWord	(0XFFFFA81C);
	MakeWord	(0XFFFFA81E);
	MakeWord	(0XFFFFA820);
	MakeWord	(0XFFFFA822);
	MakeWord	(0XFFFFA824);
	MakeWord	(0XFFFFA826);
	MakeWord	(0XFFFFA828);
	MakeWord	(0XFFFFA82A);
	MakeWord	(0XFFFFA82C);
	MakeWord	(0XFFFFA82E);
	MakeWord	(0XFFFFA830);
	MakeWord	(0XFFFFA832);
	MakeWord	(0XFFFFA834);
	MakeWord	(0XFFFFA836);
	MakeWord	(0XFFFFA838);
	MakeWord	(0XFFFFA83A);
	MakeByte	(0XFFFFA83C);
	MakeWord	(0XFFFFA83E);
	MakeWord	(0XFFFFA840);
	MakeWord	(0XFFFFA842);
	MakeDword	(0XFFFFA844);
	MakeWord	(0XFFFFA848);
	MakeWord	(0XFFFFA84A);
	MakeWord	(0XFFFFA84C);
	MakeByte	(0XFFFFA84E);
	MakeByte	(0XFFFFA84F);
	MakeByte	(0XFFFFA850);
	MakeByte	(0XFFFFA851);
	MakeWord	(0XFFFFA852);
	MakeWord	(0XFFFFA854);
	MakeByte	(0XFFFFA856);
	MakeByte	(0XFFFFA857);
	MakeByte	(0XFFFFA858);
	MakeByte	(0XFFFFA859);
	MakeByte	(0XFFFFA85A);
	MakeByte	(0XFFFFA85B);
	MakeByte	(0XFFFFA85C);
	MakeByte	(0XFFFFA85D);
	MakeByte	(0XFFFFA85E);
	MakeWord	(0XFFFFA864);
	MakeWord	(0XFFFFA886);
	MakeByte	(0XFFFFA888);
	MakeByte	(0XFFFFA889);
	MakeByte	(0XFFFFA88A);
	MakeByte	(0XFFFFA88B);
	MakeWord	(0XFFFFA88C);
	MakeWord	(0XFFFFA88E);
	MakeByte	(0XFFFFA890);
	MakeWord	(0XFFFFA892);
	MakeByte	(0XFFFFA894);
	MakeByte	(0XFFFFA896);
	MakeByte	(0XFFFFA897);
	MakeByte	(0XFFFFA898);
	MakeByte	(0XFFFFA899);
	MakeByte	(0XFFFFA89A);
	MakeByte	(0XFFFFA89B);
	MakeByte	(0XFFFFA89C);
	MakeByte	(0XFFFFA89D);
	MakeWord	(0XFFFFA89E);
	MakeWord	(0XFFFFA8A0);
	MakeWord	(0XFFFFA8A2);
	MakeWord	(0XFFFFA8A4);
	MakeWord	(0XFFFFA8A6);
	MakeWord	(0XFFFFA8A8);
	MakeWord	(0XFFFFA8AA);
	MakeWord	(0XFFFFA8AC);
	MakeWord	(0XFFFFA8AE);
	MakeWord	(0XFFFFA8B0);
	MakeWord	(0XFFFFA8B2);
	MakeWord	(0XFFFFA8B4);
	MakeWord	(0XFFFFA8B6);
	MakeWord	(0XFFFFA8B8);
	MakeWord	(0XFFFFA8BA);
	MakeWord	(0XFFFFA8BC);
	MakeWord	(0XFFFFA8BE);
	MakeByte	(0XFFFFA8C0);
	MakeByte	(0XFFFFA8C1);
	MakeByte	(0XFFFFA8C2);
	MakeByte	(0XFFFFA8C3);
	MakeByte	(0XFFFFA8C4);
	MakeByte	(0XFFFFA8C5);
	MakeByte	(0XFFFFA8C6);
	MakeByte	(0XFFFFA8C7);
	MakeByte	(0XFFFFA8C8);
	MakeByte	(0XFFFFA8E1);
	MakeDword	(0XFFFFA8E2);
	MakeByte	(0XFFFFA8FE);
	MakeByte	(0XFFFFA8FF);
	MakeByte	(0XFFFFA900);
	MakeWord	(0XFFFFA902);
	MakeWord	(0XFFFFA904);
	MakeWord	(0XFFFFA906);
	MakeWord	(0XFFFFA908);
	MakeWord	(0XFFFFA90A);
	MakeWord	(0XFFFFA90C);
	MakeWord	(0XFFFFA90E);
	MakeByte	(0XFFFFA910);
	MakeWord	(0XFFFFA912);
	MakeWord	(0XFFFFA914);
	MakeWord	(0XFFFFA916);
	MakeWord	(0XFFFFA918);
	MakeWord	(0XFFFFA91A);
	MakeByte	(0XFFFFA91C);
	MakeByte	(0XFFFFA92A);
	MakeWord	(0XFFFFA92C);
	MakeWord	(0XFFFFA92E);
	MakeWord	(0XFFFFA930);
	MakeWord	(0XFFFFA932);
	MakeWord	(0XFFFFA934);
	MakeByte	(0XFFFFA936);
	MakeByte	(0XFFFFA937);
	MakeByte	(0XFFFFA938);
	MakeByte	(0XFFFFA939);
	MakeByte	(0XFFFFA93A);
	MakeByte	(0XFFFFA93B);
	MakeByte	(0XFFFFA93C);
	MakeByte	(0XFFFFA93D);
	MakeByte	(0XFFFFA93E);
	MakeWord	(0XFFFFA940);
	MakeWord	(0XFFFFA942);
	MakeWord	(0XFFFFA944);
	MakeWord	(0XFFFFA946);
	MakeWord	(0XFFFFA948);
	MakeWord	(0XFFFFA94A);
	MakeWord	(0XFFFFA94C);
	MakeWord	(0XFFFFA94E);
	MakeWord	(0XFFFFA950);
	MakeWord	(0XFFFFA952);
	MakeWord	(0XFFFFA954);
	MakeWord	(0XFFFFA956);
	MakeWord	(0XFFFFA958);
	MakeWord	(0XFFFFA95A);
	MakeWord	(0XFFFFA95C);
	MakeWord	(0XFFFFA95E);
	MakeWord	(0XFFFFA960);
	MakeByte	(0XFFFFA962);
	MakeByte	(0XFFFFA963);
	MakeByte	(0XFFFFA964);
	MakeByte	(0XFFFFA965);
	MakeByte	(0XFFFFA966);
	MakeByte	(0XFFFFA967);
	MakeByte	(0XFFFFA968);
	MakeByte	(0XFFFFA969);
	MakeByte	(0XFFFFA96A);
	MakeByte	(0XFFFFA96B);
	MakeByte	(0XFFFFA96C);
	MakeByte	(0XFFFFA96D);
	MakeByte	(0XFFFFA96E);
	MakeByte	(0XFFFFA96F);
	MakeWord	(0XFFFFA970);
	MakeWord	(0XFFFFA972);
	MakeWord	(0XFFFFA974);
	MakeWord	(0XFFFFA976);
	MakeWord	(0XFFFFA978);
	MakeWord	(0XFFFFA97A);
	MakeWord	(0XFFFFA97C);
	MakeWord	(0XFFFFA97E);
	MakeWord	(0XFFFFA980);
	MakeWord	(0XFFFFA982);
	MakeWord	(0XFFFFA984);
	MakeWord	(0XFFFFA986);
	MakeWord	(0XFFFFA988);
	MakeWord	(0XFFFFA98A);
	MakeWord	(0XFFFFA98C);
	MakeWord	(0XFFFFA98E);
	MakeByte	(0XFFFFA990);
	MakeByte	(0XFFFFA991);
	MakeByte	(0XFFFFA992);
	MakeByte	(0XFFFFA993);
	MakeByte	(0XFFFFA994);
	MakeByte	(0XFFFFA995);
	MakeByte	(0XFFFFA996);
	MakeByte	(0XFFFFA997);
	MakeByte	(0XFFFFA998);
	MakeByte	(0XFFFFA999);
	MakeByte	(0XFFFFA99A);
	MakeByte	(0XFFFFA99B);
	MakeByte	(0XFFFFA99C);
	MakeByte	(0XFFFFA99D);
	MakeByte	(0XFFFFA99E);
	MakeByte	(0XFFFFA99F);
	MakeByte	(0XFFFFA9A0);
	MakeWord	(0XFFFFA9A2);
	MakeWord	(0XFFFFA9A4);
	MakeWord	(0XFFFFA9A6);
	MakeWord	(0XFFFFA9A8);
	MakeByte	(0XFFFFA9AA);
	MakeByte	(0XFFFFA9AB);
	MakeWord	(0XFFFFA9AC);
	MakeWord	(0XFFFFA9AE);
	MakeWord	(0XFFFFA9B0);
	MakeWord	(0XFFFFA9B2);
	MakeByte	(0XFFFFA9B4);
	MakeByte	(0XFFFFA9B5);
	MakeWord	(0XFFFFA9B6);
	MakeByte	(0XFFFFA9B8);
	MakeByte	(0XFFFFA9B9);
	MakeByte	(0XFFFFA9BA);
	MakeByte	(0XFFFFA9BB);
	MakeByte	(0XFFFFA9BC);
	MakeByte	(0XFFFFA9BD);
	MakeWord	(0XFFFFA9BE);
	MakeDword	(0XFFFFA9C0);
	MakeDword	(0XFFFFA9C4);
	MakeDword	(0XFFFFA9C8);
	MakeByte	(0XFFFFA9CC);
	MakeByte	(0XFFFFA9CD);
	MakeByte	(0XFFFFA9CE);
	MakeByte	(0XFFFFA9CF);
	MakeByte	(0XFFFFA9D0);
	MakeByte	(0XFFFFA9D1);
	MakeWord	(0XFFFFA9D2);
	MakeByte	(0XFFFFA9D4);
	MakeByte	(0XFFFFA9D6);
	MakeByte	(0XFFFFA9D7);
	MakeWord	(0XFFFFA9D8);
	MakeByte	(0XFFFFA9DA);
	MakeByte	(0XFFFFA9DB);
	MakeWord	(0XFFFFA9DC);
	MakeWord	(0XFFFFA9DE);
	MakeByte	(0XFFFFA9E0);
	MakeWord	(0XFFFFA9E2);
	MakeWord	(0XFFFFA9E4);
	MakeWord	(0XFFFFA9E6);
	MakeWord	(0XFFFFA9E8);
	MakeWord	(0XFFFFA9EA);
	MakeWord	(0XFFFFA9EC);
	MakeDword	(0XFFFFA9EE);
	MakeDword	(0XFFFFA9F2);
	MakeWord	(0XFFFFA9F6);
	MakeWord	(0XFFFFA9F8);
	MakeWord	(0XFFFFA9FA);
	MakeWord	(0XFFFFA9FC);
	MakeWord	(0XFFFFA9FE);
	MakeWord	(0XFFFFAA00);
	MakeByte	(0XFFFFAA02);
	MakeByte	(0XFFFFAA03);
	MakeByte	(0XFFFFAA04);
	MakeByte	(0XFFFFAA05);
	MakeByte	(0XFFFFAA06);
	MakeByte	(0XFFFFAA07);
	MakeByte	(0XFFFFAA08);
	MakeByte	(0XFFFFAA09);
	MakeByte	(0XFFFFAA0A);
	MakeByte	(0XFFFFAA0B);
	MakeByte	(0XFFFFAA0C);
	MakeByte	(0XFFFFAA0D);
	MakeByte	(0XFFFFAA0E);
	MakeByte	(0XFFFFAA0F);
	MakeByte	(0XFFFFAA10);
	MakeByte	(0XFFFFAA11);
	MakeByte	(0XFFFFAA12);
	MakeWord	(0XFFFFAA14);
	MakeWord	(0XFFFFAA16);
	MakeWord	(0XFFFFAA18);
	MakeWord	(0XFFFFAA1A);
	MakeWord	(0XFFFFAA1C);
	MakeWord	(0XFFFFAA1E);
	MakeWord	(0XFFFFAA20);
	MakeWord	(0XFFFFAA22);
	MakeWord	(0XFFFFAA24);
	MakeWord	(0XFFFFAA26);
	MakeWord	(0XFFFFAA28);
	MakeWord	(0XFFFFAA2A);
	MakeWord	(0XFFFFAA2C);
	MakeWord	(0XFFFFAA2E);
	MakeWord	(0XFFFFAA30);
	MakeWord	(0XFFFFAA32);
	MakeWord	(0XFFFFAA34);
	MakeWord	(0XFFFFAA36);
	MakeByte	(0XFFFFAA38);
	MakeWord	(0XFFFFAA3A);
	MakeByte	(0XFFFFAA3C);
	MakeByte	(0XFFFFAA3D);
	MakeByte	(0XFFFFAA3E);
	MakeByte	(0XFFFFAA3F);
	MakeByte	(0XFFFFAA40);
	MakeByte	(0XFFFFAA41);
	MakeByte	(0XFFFFAA42);
	MakeByte	(0XFFFFAA43);
	MakeByte	(0XFFFFAA44);
	MakeByte	(0XFFFFAA45);
	MakeByte	(0XFFFFAA46);
	MakeByte	(0XFFFFAA47);
	MakeByte	(0XFFFFAA48);
	MakeByte	(0XFFFFAA49);
	MakeByte	(0XFFFFAA4A);
	MakeWord	(0XFFFFAA4C);
	MakeWord	(0XFFFFAA52);
	MakeWord	(0XFFFFAA54);
	MakeWord	(0XFFFFAA56);
	MakeDword	(0XFFFFAA58);
	MakeWord	(0XFFFFAA5C);
	MakeDword	(0XFFFFAA5E);
	MakeWord	(0XFFFFAA66);
	MakeWord	(0XFFFFAA68);
	MakeWord	(0XFFFFAA6A);
	MakeWord	(0XFFFFAA6C);
	MakeWord	(0XFFFFAA6E);
	MakeWord	(0XFFFFAA70);
	MakeWord	(0XFFFFAA72);
	MakeWord	(0XFFFFAA74);
	MakeWord	(0XFFFFAA76);
	MakeWord	(0XFFFFAA7A);
	MakeDword	(0XFFFFAA7C);
	MakeDword	(0XFFFFAA80);
	MakeWord	(0XFFFFAA84);
	MakeWord	(0XFFFFAA86);
	MakeWord	(0XFFFFAA88);
	MakeWord	(0XFFFFAA8A);
	MakeWord	(0XFFFFAA8C);
	MakeWord	(0XFFFFAA8E);
	MakeWord	(0XFFFFAA90);
	MakeByte	(0XFFFFAA92);
	MakeByte	(0XFFFFAA93);
	MakeWord	(0XFFFFAA94);
	MakeWord	(0XFFFFAA96);
	MakeByte	(0XFFFFAA98);
	MakeWord	(0XFFFFAA9A);
	MakeWord	(0XFFFFAA9C);
	MakeWord	(0XFFFFAA9E);
	MakeWord	(0XFFFFAAA0);
	MakeWord	(0XFFFFAAA2);
	MakeWord	(0XFFFFAABA);
	MakeWord	(0XFFFFAAC2);
	MakeByte	(0XFFFFAAC6);
	MakeDword	(0XFFFFAAC8);
	MakeWord	(0XFFFFAACC);
	MakeWord	(0XFFFFAACE);
	MakeByte	(0XFFFFAAD0);
	MakeByte	(0XFFFFAAF2);
	MakeWord	(0XFFFFAAF4);
	MakeWord	(0XFFFFAAF6);
	MakeWord	(0XFFFFAAF8);
	MakeWord	(0XFFFFAAFA);
	MakeWord	(0XFFFFAAFC);
	MakeWord	(0XFFFFAAFE);
	MakeWord	(0XFFFFAB00);
	MakeWord	(0XFFFFAB02);
	MakeWord	(0XFFFFAB04);
	MakeWord	(0XFFFFAB06);
	MakeWord	(0XFFFFAB1C);
	MakeWord	(0XFFFFAB1E);
	MakeWord	(0XFFFFAB20);
	MakeWord	(0XFFFFAB22);
	MakeByte	(0XFFFFAB24);
	MakeByte	(0XFFFFAB2C);
	MakeByte	(0XFFFFAB2D);
	MakeByte	(0XFFFFAB2E);
	MakeByte	(0XFFFFAB2F);
	MakeWord	(0XFFFFAB30);
	MakeByte	(0XFFFFAB32);
	MakeWord	(0XFFFFAB34);
	MakeWord	(0XFFFFAB36);
	MakeWord	(0XFFFFAB38);
	MakeWord	(0XFFFFAB42);
	MakeByte	(0XFFFFAB44);
	MakeByte	(0XFFFFAB50);
	MakeWord	(0XFFFFAB52);
	MakeWord	(0XFFFFAB54);
	MakeWord	(0XFFFFAB5A);
	MakeWord	(0XFFFFAB60);
	MakeWord	(0XFFFFAB62);
	MakeWord	(0XFFFFAB64);
	MakeWord	(0XFFFFAB66);
	MakeWord	(0XFFFFAB68);
	MakeByte	(0XFFFFAB6A);
	MakeWord	(0XFFFFAB6C);
	MakeWord	(0XFFFFAB6E);
	MakeWord	(0XFFFFAB70);
	MakeWord	(0XFFFFAB72);
	MakeWord	(0XFFFFAB74);
	MakeWord	(0XFFFFAB76);
	MakeWord	(0XFFFFAB78);
	MakeByte	(0XFFFFAB7A);
	MakeByte	(0XFFFFAB7B);
	MakeByte	(0XFFFFAB7C);
	MakeByte	(0XFFFFAB7D);
	MakeByte	(0XFFFFAB7E);
	MakeByte	(0XFFFFAB7F);
	MakeByte	(0XFFFFAB80);
	MakeWord	(0XFFFFAB82);
	MakeByte	(0XFFFFAB84);
	MakeByte	(0XFFFFAB85);
	MakeByte	(0XFFFFAB86);
	MakeByte	(0XFFFFAB87);
	MakeByte	(0XFFFFAB88);
	MakeByte	(0XFFFFAB89);
	MakeByte	(0XFFFFAB8B);
	MakeByte	(0XFFFFAB8C);
	MakeByte	(0XFFFFAB8D);
	MakeByte	(0XFFFFAB8E);
	MakeByte	(0XFFFFAB8F);
	MakeByte	(0XFFFFAB90);
	MakeByte	(0XFFFFAB91);
	MakeByte	(0XFFFFAB92);
	MakeWord	(0XFFFFAB94);
	MakeWord	(0XFFFFAB96);
	MakeWord	(0XFFFFAB98);
	MakeWord	(0XFFFFAB9A);
	MakeWord	(0XFFFFAB9C);
	MakeWord	(0XFFFFAB9E);
	MakeWord	(0XFFFFABA2);
	MakeWord	(0XFFFFABA4);
	MakeWord	(0XFFFFABA6);
	MakeWord	(0XFFFFABA8);
	MakeByte	(0XFFFFABAA);
	MakeWord	(0XFFFFABAC);
	MakeWord	(0XFFFFABAE);
	MakeWord	(0XFFFFABB0);
	MakeWord	(0XFFFFABB2);
	MakeWord	(0XFFFFABB4);
	MakeWord	(0XFFFFABB6);
	MakeWord	(0XFFFFABB8);
	MakeWord	(0XFFFFABBA);
	MakeWord	(0XFFFFABBC);
	MakeWord	(0XFFFFABBE);
	MakeWord	(0XFFFFABC0);
	MakeByte	(0XFFFFABC2);
	MakeByte	(0XFFFFABC3);
	MakeByte	(0XFFFFABC4);
	MakeByte	(0XFFFFABC5);
	MakeByte	(0XFFFFABC6);
	MakeByte	(0XFFFFABC7);
	MakeByte	(0XFFFFABC8);
	MakeByte	(0XFFFFABC9);
	MakeByte	(0XFFFFABCA);
	MakeByte	(0XFFFFABCB);
	MakeByte	(0XFFFFABCC);
	MakeByte	(0XFFFFABCD);
	MakeByte	(0XFFFFABCE);
	MakeByte	(0XFFFFABCF);
	MakeByte	(0XFFFFABD0);
	MakeByte	(0XFFFFABD1);
	MakeByte	(0XFFFFABD2);
	MakeByte	(0XFFFFABD3);
	MakeWord	(0XFFFFABD4);
	MakeByte	(0XFFFFABD6);
	MakeByte	(0XFFFFABD7);
	MakeWord	(0XFFFFABD8);
	MakeByte	(0XFFFFABDA);
	MakeByte	(0XFFFFABDB);
	MakeByte	(0XFFFFABDC);
	MakeByte	(0XFFFFABDD);
	MakeByte	(0XFFFFABDE);
	MakeByte	(0XFFFFABDF);
	MakeByte	(0XFFFFABE0);
	MakeWord	(0XFFFFABE2);
	MakeByte	(0XFFFFABE4);
	MakeByte	(0XFFFFABE5);
	MakeWord	(0XFFFFABE6);
	MakeByte	(0XFFFFABE8);
	MakeWord	(0XFFFFABEA);
	MakeByte	(0XFFFFABEC);
	MakeWord	(0XFFFFABEE);
	MakeByte	(0XFFFFABF0);
	MakeByte	(0XFFFFABF1);
	MakeWord	(0XFFFFABF2);
	MakeByte	(0XFFFFABF4);
	MakeByte	(0XFFFFABF5);
	MakeWord	(0XFFFFABF6);
	MakeWord	(0XFFFFABF8);
	MakeWord	(0XFFFFABFA);
	MakeWord	(0XFFFFABFC);
	MakeByte	(0XFFFFABFE);
	MakeByte	(0XFFFFABFF);
	MakeByte	(0XFFFFAC00);
	MakeByte	(0XFFFFAC01);
	MakeWord	(0XFFFFAC02);
	MakeWord	(0XFFFFAC04);
	MakeByte	(0XFFFFAC06);
	MakeByte	(0XFFFFAC07);
	MakeByte	(0XFFFFAC08);
	MakeByte	(0XFFFFAC0A);
	MakeByte	(0XFFFFAC0B);
	MakeWord	(0XFFFFAC0C);
	MakeWord	(0XFFFFAC0E);
	MakeWord	(0XFFFFAC10);
	MakeByte	(0XFFFFAC12);
	MakeDword	(0XFFFFAC14);
	MakeWord	(0XFFFFAC18);
	MakeWord	(0XFFFFAC1A);
	MakeByte	(0XFFFFAC1C);
	MakeWord	(0XFFFFAC1E);
	MakeWord	(0XFFFFAC20);
	MakeWord	(0XFFFFAC22);
	MakeWord	(0XFFFFAC24);
	MakeByte	(0XFFFFAC26);
	MakeByte	(0XFFFFAC27);
	MakeByte	(0XFFFFAC28);
	MakeWord	(0XFFFFAC2A);
	MakeWord	(0XFFFFAC2C);
	MakeWord	(0XFFFFAC2E);
	MakeWord	(0XFFFFAC30);
	MakeWord	(0XFFFFAC32);
	MakeWord	(0XFFFFAC34);
	MakeWord	(0XFFFFAC36);
	MakeWord	(0XFFFFAC38);
	MakeWord	(0XFFFFAC3A);
	MakeWord	(0XFFFFAC3C);
	MakeWord	(0XFFFFAC3E);
	MakeWord	(0XFFFFAC40);
	MakeByte	(0XFFFFAC42);
	MakeByte	(0XFFFFAC43);
	MakeByte	(0XFFFFAC44);
	MakeByte	(0XFFFFAC45);
	MakeByte	(0XFFFFAC46);
	MakeByte	(0XFFFFAC47);
	MakeByte	(0XFFFFAC48);
	MakeByte	(0XFFFFAC49);
	MakeByte	(0XFFFFAC4A);
	MakeWord	(0XFFFFAC4C);
	MakeByte	(0XFFFFAC4E);
	MakeWord	(0XFFFFAC50);
	MakeByte	(0XFFFFAC52);
	MakeWord	(0XFFFFAC54);
	MakeByte	(0XFFFFAC56);
	MakeByte	(0XFFFFAC57);
	MakeByte	(0XFFFFAC58);
	MakeByte	(0XFFFFAC59);
	MakeByte	(0XFFFFAC5A);
	MakeByte	(0XFFFFAC5B);
	MakeByte	(0XFFFFAC5C);
	MakeByte	(0XFFFFAC5D);
	MakeByte	(0XFFFFAC5E);
	MakeByte	(0XFFFFAC5F);
	MakeByte	(0XFFFFAC60);
	MakeByte	(0XFFFFAC61);
	MakeByte	(0XFFFFAC62);
	MakeByte	(0XFFFFAC63);
	MakeByte	(0XFFFFAC64);
	MakeByte	(0XFFFFAC65);
	MakeByte	(0XFFFFAC66);
	MakeByte	(0XFFFFAC67);
	MakeByte	(0XFFFFAC68);
	MakeByte	(0XFFFFAC69);
	MakeByte	(0XFFFFAC6A);
	MakeByte	(0XFFFFAC6B);
	MakeByte	(0XFFFFAC6C);
	MakeByte	(0XFFFFAC6D);
	MakeByte	(0XFFFFAC6E);
	MakeByte	(0XFFFFAC6F);
	MakeByte	(0XFFFFAC70);
	MakeByte	(0XFFFFAC71);
	MakeByte	(0XFFFFAC72);
	MakeByte	(0XFFFFAC73);
	MakeByte	(0XFFFFAC74);
	MakeByte	(0XFFFFAC75);
	MakeByte	(0XFFFFAC76);
	MakeByte	(0XFFFFAC77);
	MakeByte	(0XFFFFAC78);
	MakeByte	(0XFFFFAC79);
	MakeByte	(0XFFFFAC7A);
	MakeByte	(0XFFFFAC7B);
	MakeByte	(0XFFFFAC7C);
	MakeByte	(0XFFFFAC7D);
	MakeByte	(0XFFFFAC7E);
	MakeByte	(0XFFFFAC7F);
	MakeByte	(0XFFFFAC80);
	MakeWord	(0XFFFFAC82);
	MakeWord	(0XFFFFAC84);
	MakeWord	(0XFFFFAC86);
	MakeWord	(0XFFFFAC88);
	MakeByte	(0XFFFFACAA);
	MakeWord	(0XFFFFACAC);
	MakeWord	(0XFFFFACAE);
	MakeWord	(0XFFFFACB0);
	MakeWord	(0XFFFFACB2);
	MakeWord	(0XFFFFACB4);
	MakeWord	(0XFFFFACB6);
	MakeWord	(0XFFFFACB8);
	MakeWord	(0XFFFFACBA);
	MakeWord	(0XFFFFACBC);
	MakeWord	(0XFFFFACBE);
	MakeByte	(0XFFFFACC0);
	MakeWord	(0XFFFFACC2);
	MakeWord	(0XFFFFACC4);
	MakeWord	(0XFFFFACC6);
	MakeWord	(0XFFFFACC8);
	MakeDword	(0XFFFFACCA);
	MakeByte	(0XFFFFACCE);
	MakeByte	(0XFFFFACCF);
	MakeByte	(0XFFFFACD0);
	MakeWord	(0XFFFFACD2);
	MakeWord	(0XFFFFACD4);
	MakeByte	(0XFFFFACD6);
	MakeByte	(0XFFFFACD7);
	MakeWord	(0XFFFFACD8);
	MakeWord	(0XFFFFACDA);
	MakeWord	(0XFFFFACDC);
	MakeWord	(0XFFFFACDE);
	MakeWord	(0XFFFFACE0);
	MakeWord	(0XFFFFACE2);
	MakeDword	(0XFFFFACE4);
	MakeWord	(0XFFFFACE8);
	MakeWord	(0XFFFFACEA);
	MakeWord	(0XFFFFACEC);
	MakeWord	(0XFFFFACEE);
	MakeWord	(0XFFFFACF0);
	MakeWord	(0XFFFFACF2);
	MakeByte	(0XFFFFACF4);
	MakeByte	(0XFFFFACF5);
	MakeWord	(0XFFFFACF6);
	MakeWord	(0XFFFFACF8);
	MakeByte	(0XFFFFACFA);
	MakeWord	(0XFFFFACFC);
	MakeByte	(0XFFFFACFE);
	MakeWord	(0XFFFFAD00);
	MakeWord	(0XFFFFAD02);
	MakeWord	(0XFFFFAD0A);
	MakeByte	(0XFFFFAD0C);
	MakeByte	(0XFFFFAD0D);
	MakeWord	(0XFFFFAD0E);
	MakeWord	(0XFFFFAD10);
	MakeWord	(0XFFFFAD12);
	MakeByte	(0XFFFFAD14);
	MakeWord	(0XFFFFAD16);
	MakeWord	(0XFFFFAD18);
	MakeWord	(0XFFFFAD1A);
	MakeByte	(0XFFFFAD1C);
	MakeDword	(0XFFFFAD1E);
	MakeName	(0XFFFFAD1E,	"EngineRunTime");
	MakeByte	(0XFFFFAD22);
	MakeByte	(0XFFFFAD23);
	MakeName	(0XFFFFAD23,	"ThrottleControlMode2?");
	MakeDword	(0XFFFFAD24);
	MakeDword	(0XFFFFAD28);
	MakeDword	(0XFFFFAD2C);
	MakeDword	(0XFFFFAD30);
	MakeDword	(0XFFFFAD34);
	MakeWord	(0XFFFFAD38);
	MakeWord	(0XFFFFAD3A);
	MakeDword	(0XFFFFAD3C);
	MakeWord	(0XFFFFAD40);
	MakeWord	(0XFFFFAD42);
	MakeWord	(0XFFFFAD44);
	MakeByte	(0XFFFFAD46);
	MakeByte	(0XFFFFAD47);
	MakeWord	(0XFFFFAD48);
	MakeWord	(0XFFFFAD4A);
	MakeWord	(0XFFFFAD4C);
	MakeWord	(0XFFFFAD4E);
	MakeWord	(0XFFFFAD50);
	MakeWord	(0XFFFFAD52);
	MakeByte	(0XFFFFAD54);
	MakeWord	(0XFFFFAD56);
	MakeWord	(0XFFFFAD58);
	MakeWord	(0XFFFFAD5A);
	MakeWord	(0XFFFFAD5C);
	MakeByte	(0XFFFFAD5E);
	MakeWord	(0XFFFFAD60);
	MakeWord	(0XFFFFAD62);
	MakeWord	(0XFFFFAD64);
	MakeWord	(0XFFFFAD66);
	MakeWord	(0XFFFFAD68);
	MakeWord	(0XFFFFAD6A);
	MakeWord	(0XFFFFAD6C);
	MakeWord	(0XFFFFAD6E);
	MakeWord	(0XFFFFAD70);
	MakeWord	(0XFFFFAD72);
	MakeWord	(0XFFFFAD74);
	MakeWord	(0XFFFFAD76);
	MakeWord	(0XFFFFAD78);
	MakeWord	(0XFFFFAD7A);
	MakeWord	(0XFFFFAD7C);
	MakeByte	(0XFFFFAD7E);
	MakeByte	(0XFFFFAD7F);
	MakeByte	(0XFFFFAD80);
	MakeWord	(0XFFFFAD82);
	MakeDword	(0XFFFFAD84);
	MakeByte	(0XFFFFAD88);
	MakeByte	(0XFFFFAD89);
	MakeByte	(0XFFFFAD8A);
	MakeByte	(0XFFFFAD8B);
	MakeByte	(0XFFFFAD8C);
	MakeByte	(0XFFFFAD8D);
	MakeWord	(0XFFFFAD8E);
	MakeWord	(0XFFFFAD90);
	MakeByte	(0XFFFFAD92);
	MakeWord	(0XFFFFAD94);
	MakeWord	(0XFFFFAD96);
	MakeWord	(0XFFFFAD98);
	MakeWord	(0XFFFFAD9A);
	MakeWord	(0XFFFFAD9C);
	MakeWord	(0XFFFFAD9E);
	MakeWord	(0XFFFFADA0);
	MakeWord	(0XFFFFADA2);
	MakeWord	(0XFFFFADA4);
	MakeWord	(0XFFFFADA6);
	MakeWord	(0XFFFFADA8);
	MakeWord	(0XFFFFADAA);
	MakeByte	(0XFFFFADAC);
	MakeWord	(0XFFFFADAE);
	MakeWord	(0XFFFFADB0);
	MakeName	(0XFFFFADB0,	"CoolantTemperatureOrDefault");
	MakeWord	(0XFFFFADB2);
	MakeWord	(0XFFFFADB4);
	MakeWord	(0XFFFFADB6);
	MakeWord	(0XFFFFADB8);
	MakeName	(0XFFFFADB8,	"Pid_0005_CoolantTemperature");
	MakeByte	(0XFFFFADBA);
	MakeByte	(0XFFFFADBB);
	MakeByte	(0XFFFFADBC);
	MakeWord	(0XFFFFADBE);
	MakeByte	(0XFFFFADC0);
	MakeWord	(0XFFFFADC2);
	MakeWord	(0XFFFFADC4);
	MakeWord	(0XFFFFADC6);
	MakeWord	(0XFFFFADC8);
	MakeByte	(0XFFFFADCA);
	MakeWord	(0XFFFFADCC);
	MakeByte	(0XFFFFADCE);
	MakeByte	(0XFFFFADCF);
	MakeByte	(0XFFFFADD0);
	MakeByte	(0XFFFFADD1);
	MakeByte	(0XFFFFADD2);
	MakeByte	(0XFFFFADD3);
	MakeByte	(0XFFFFADD4);
	MakeByte	(0XFFFFADD5);
	MakeWord	(0XFFFFADD6);
	MakeWord	(0XFFFFADD8);
	MakeByte	(0XFFFFADDA);
	MakeByte	(0XFFFFADDB);
	MakeByte	(0XFFFFADDC);
	MakeByte	(0XFFFFADDD);
	MakeByte	(0XFFFFADDE);
	MakeByte	(0XFFFFADDF);
	MakeWord	(0XFFFFADE0);
	MakeByte	(0XFFFFADE2);
	MakeByte	(0XFFFFADE3);
	MakeWord	(0XFFFFADE4);
	MakeWord	(0XFFFFADE6);
	MakeByte	(0XFFFFADE8);
	MakeWord	(0XFFFFADEA);
	MakeWord	(0XFFFFADEC);
	MakeWord	(0XFFFFADEE);
	MakeWord	(0XFFFFADF0);
	MakeByte	(0XFFFFADF2);
	MakeWord	(0XFFFFADF4);
	MakeWord	(0XFFFFADF6);
	MakeByte	(0XFFFFADF8);
	MakeWord	(0XFFFFADFA);
	MakeWord	(0XFFFFADFC);
	MakeWord	(0XFFFFADFE);
	MakeWord	(0XFFFFAE00);
	MakeWord	(0XFFFFAE02);
	MakeWord	(0XFFFFAE04);
	MakeWord	(0XFFFFAE06);
	MakeWord	(0XFFFFAE08);
	MakeByte	(0XFFFFAE0A);
	MakeByte	(0XFFFFAE0B);
	MakeByte	(0XFFFFAE0C);
	MakeByte	(0XFFFFAE0D);
	MakeByte	(0XFFFFAE0E);
	MakeByte	(0XFFFFAE0F);
	MakeByte	(0XFFFFAE10);
	MakeByte	(0XFFFFAE11);
	MakeWord	(0XFFFFAE12);
	MakeByte	(0XFFFFAE14);
	MakeWord	(0XFFFFAE16);
	MakeWord	(0XFFFFAE18);
	MakeWord	(0XFFFFAE1A);
	MakeWord	(0XFFFFAE1C);
	MakeWord	(0XFFFFAE1E);
	MakeByte	(0XFFFFAE20);
	MakeByte	(0XFFFFAE21);
	MakeByte	(0XFFFFAE22);
	MakeByte	(0XFFFFAE23);
	MakeWord	(0XFFFFAE24);
	MakeWord	(0XFFFFAE26);
	MakeWord	(0XFFFFAE28);
	MakeWord	(0XFFFFAE2A);
	MakeWord	(0XFFFFAE2C);
	MakeWord	(0XFFFFAE2E);
	MakeWord	(0XFFFFAE30);
	MakeWord	(0XFFFFAE32);
	MakeWord	(0XFFFFAE34);
	MakeWord	(0XFFFFAE36);
	MakeWord	(0XFFFFAE38);
	MakeWord	(0XFFFFAE3A);
	MakeName	(0XFFFFAE3A,	"DesiredIdleSpeed");
	MakeByte	(0XFFFFAE3C);
	MakeByte	(0XFFFFAE3D);
	MakeDword	(0XFFFFAE3E);
	MakeWord	(0XFFFFAE42);
	MakeWord	(0XFFFFAE44);
	MakeByte	(0XFFFFAE46);
	MakeWord	(0XFFFFAE48);
	MakeWord	(0XFFFFAE4A);
	MakeWord	(0XFFFFAE4C);
	MakeWord	(0XFFFFAE4E);
	MakeWord	(0XFFFFAE50);
	MakeWord	(0XFFFFAE52);
	MakeWord	(0XFFFFAE54);
	MakeByte	(0XFFFFAE56);
	MakeByte	(0XFFFFAE57);
	MakeWord	(0XFFFFAE58);
	MakeByte	(0XFFFFAE5A);
	MakeByte	(0XFFFFAE5B);
	MakeWord	(0XFFFFAE5C);
	MakeWord	(0XFFFFAE5E);
	MakeByte	(0XFFFFAE60);
	MakeByte	(0XFFFFAE61);
	MakeByte	(0XFFFFAE62);
	MakeByte	(0XFFFFAE63);
	MakeByte	(0XFFFFAE64);
	MakeByte	(0XFFFFAE65);
	MakeWord	(0XFFFFAE66);
	MakeByte	(0XFFFFAE68);
	MakeByte	(0XFFFFAE69);
	MakeWord	(0XFFFFAE6A);
	MakeWord	(0XFFFFAE6C);
	MakeWord	(0XFFFFAE6E);
	MakeWord	(0XFFFFAE70);
	MakeWord	(0XFFFFAE72);
	MakeWord	(0XFFFFAE74);
	MakeByte	(0XFFFFAE76);
	MakeByte	(0XFFFFAE77);
	MakeByte	(0XFFFFAE78);
	MakeByte	(0XFFFFAE7A);
	MakeWord	(0XFFFFAE7C);
	MakeByte	(0XFFFFAE7E);
	MakeByte	(0XFFFFAE7F);
	MakeWord	(0XFFFFAE80);
	MakeByte	(0XFFFFAE82);
	MakeByte	(0XFFFFAE83);
	MakeDword	(0XFFFFAE84);
	MakeByte	(0XFFFFAE88);
	MakeByte	(0XFFFFAE89);
	MakeWord	(0XFFFFAE8A);
	MakeByte	(0XFFFFAE8C);
	MakeDword	(0XFFFFAE92);
	MakeDword	(0XFFFFAE96);
	MakeWord	(0XFFFFAE9A);
	MakeWord	(0XFFFFAE9C);
	MakeWord	(0XFFFFAE9E);
	MakeWord	(0XFFFFAEA0);
	MakeWord	(0XFFFFAEA2);
	MakeWord	(0XFFFFAEA4);
	MakeWord	(0XFFFFAEA6);
	MakeByte	(0XFFFFAEA8);
	MakeByte	(0XFFFFAEA9);
	MakeByte	(0XFFFFAEAA);
	MakeByte	(0XFFFFAEAB);
	MakeByte	(0XFFFFAEAC);
	MakeByte	(0XFFFFAEAD);
	MakeByte	(0XFFFFAEAE);
	MakeByte	(0XFFFFAEAF);
	MakeWord	(0XFFFFAEB0);
	MakeWord	(0XFFFFAEB2);
	MakeWord	(0XFFFFAEB4);
	MakeByte	(0XFFFFAEB6);
	MakeByte	(0XFFFFAEB7);
	MakeByte	(0XFFFFAEB8);
	MakeByte	(0XFFFFAEB9);
	MakeWord	(0XFFFFAEBA);
	MakeWord	(0XFFFFAEBC);
	MakeWord	(0XFFFFAEBE);
	MakeWord	(0XFFFFAEC0);
	MakeByte	(0XFFFFAEC2);
	MakeWord	(0XFFFFAEC4);
	MakeWord	(0XFFFFAEC6);
	MakeWord	(0XFFFFAEC8);
	MakeWord	(0XFFFFAECA);
	MakeByte	(0XFFFFAECC);
	MakeByte	(0XFFFFAECD);
	MakeDword	(0XFFFFAECE);
	MakeDword	(0XFFFFAED2);
	MakeDword	(0XFFFFAED6);
	MakeWord	(0XFFFFAEDA);
	MakeName	(0XFFFFAEDA,	"DefinitelyEngineLoad");
	MakeWord	(0XFFFFAEDC);
	MakeName	(0XFFFFAEDC,	"DefinitelyRpm");
	MakeWord	(0XFFFFAEDE);
	MakeName	(0XFFFFAEDE,	"CoolantTemp");
	MakeWord	(0XFFFFAEE0);
	MakeWord	(0XFFFFAEE2);
	MakeWord	(0XFFFFAEE4);
	MakeWord	(0XFFFFAEE6);
	MakeName	(0XFFFFAEE6,	"AnotherRpmValue");
	MakeWord	(0XFFFFAEE8);
	MakeWord	(0XFFFFAEEA);
	MakeName	(0XFFFFAEEA,	"ManifoldPressure");
	MakeWord	(0XFFFFAEEC);
	MakeWord	(0XFFFFAEEE);
	MakeWord	(0XFFFFAEF0);
	MakeWord	(0XFFFFAEF2);
	MakeWord	(0XFFFFAEF4);
	MakeWord	(0XFFFFAEF6);
	MakeWord	(0XFFFFAEF8);
	MakeByte	(0XFFFFAEFA);
	MakeByte	(0XFFFFAEFB);
	MakeByte	(0XFFFFAEFC);
	MakeWord	(0XFFFFAEFE);
	MakeWord	(0XFFFFAF00);
	MakeWord	(0XFFFFAF02);
	MakeWord	(0XFFFFAF04);
	MakeWord	(0XFFFFAF06);
	MakeWord	(0XFFFFAF08);
	MakeByte	(0XFFFFAF0A);
	MakeByte	(0XFFFFAF0B);
	MakeWord	(0XFFFFAF12);
	MakeWord	(0XFFFFAF14);
	MakeByte	(0XFFFFAF16);
	MakeByte	(0XFFFFAF17);
	MakeByte	(0XFFFFAF18);
	MakeByte	(0XFFFFAF19);
	MakeWord	(0XFFFFAF1A);
	MakeDword	(0XFFFFAF1C);
	MakeDword	(0XFFFFAF20);
	MakeDword	(0XFFFFAF24);
	MakeWord	(0XFFFFAF28);
	MakeWord	(0XFFFFAF2A);
	MakeWord	(0XFFFFAF2C);
	MakeWord	(0XFFFFAF2E);
	MakeByte	(0XFFFFAF30);
	MakeWord	(0XFFFFAF32);
	MakeWord	(0XFFFFAF34);
	MakeByte	(0XFFFFAF36);
	MakeByte	(0XFFFFAF37);
	MakeWord	(0XFFFFAF38);
	MakeByte	(0XFFFFAF3A);
	MakeByte	(0XFFFFAF3B);
	MakeByte	(0XFFFFAF3C);
	MakeByte	(0XFFFFAF3D);
	MakeByte	(0XFFFFAF3E);
	MakeByte	(0XFFFFAF3F);
	MakeByte	(0XFFFFAF40);
	MakeByte	(0XFFFFAF41);
	MakeByte	(0XFFFFAF42);
	MakeByte	(0XFFFFAF43);
	MakeByte	(0XFFFFAF44);
	MakeByte	(0XFFFFAF45);
	MakeByte	(0XFFFFAF46);
	MakeByte	(0XFFFFAF47);
	MakeByte	(0XFFFFAF48);
	MakeByte	(0XFFFFAF49);
	MakeWord	(0XFFFFAF4A);
	MakeWord	(0XFFFFAF4C);
	MakeWord	(0XFFFFAF4E);
	MakeWord	(0XFFFFAF50);
	MakeWord	(0XFFFFAF52);
	MakeWord	(0XFFFFAF54);
	MakeWord	(0XFFFFAF56);
	MakeByte	(0XFFFFAF58);
	MakeByte	(0XFFFFAF76);
	MakeByte	(0XFFFFAF77);
	MakeByte	(0XFFFFAF78);
	MakeByte	(0XFFFFAF7A);
	MakeWord	(0XFFFFAF7C);
	MakeWord	(0XFFFFAF7E);
	MakeWord	(0XFFFFAF80);
	MakeWord	(0XFFFFAF82);
	MakeWord	(0XFFFFAF84);
	MakeWord	(0XFFFFAF86);
	MakeByte	(0XFFFFAF88);
	MakeWord	(0XFFFFAF8A);
	MakeWord	(0XFFFFAF8C);
	MakeWord	(0XFFFFAF8E);
	MakeWord	(0XFFFFAF90);
	MakeWord	(0XFFFFAF92);
	MakeWord	(0XFFFFAF94);
	MakeWord	(0XFFFFAF96);
	MakeByte	(0XFFFFAF98);
	MakeByte	(0XFFFFAF99);
	MakeWord	(0XFFFFAF9A);
	MakeWord	(0XFFFFAF9C);
	MakeWord	(0XFFFFAF9E);
	MakeWord	(0XFFFFAFA0);
	MakeWord	(0XFFFFAFA2);
	MakeWord	(0XFFFFAFA4);
	MakeWord	(0XFFFFAFA8);
	MakeWord	(0XFFFFAFAA);
	MakeByte	(0XFFFFAFAC);
	MakeByte	(0XFFFFAFAD);
	MakeWord	(0XFFFFAFAE);
	MakeDword	(0XFFFFAFB0);
	MakeWord	(0XFFFFAFB4);
	MakeByte	(0XFFFFAFB6);
	MakeWord	(0XFFFFAFB8);
	MakeByte	(0XFFFFAFCA);
	MakeWord	(0XFFFFAFCC);
	MakeByte	(0XFFFFAFCE);
	MakeWord	(0XFFFFAFD0);
	MakeByte	(0XFFFFAFD2);
	MakeByte	(0XFFFFAFD4);
	MakeByte	(0XFFFFAFD5);
	MakeWord	(0XFFFFAFD6);
	MakeWord	(0XFFFFAFD8);
	MakeWord	(0XFFFFAFDA);
	MakeWord	(0XFFFFAFDC);
	MakeWord	(0XFFFFAFDE);
	MakeWord	(0XFFFFAFE0);
	MakeByte	(0XFFFFAFE2);
	MakeByte	(0XFFFFAFE3);
	MakeByte	(0XFFFFAFE4);
	MakeWord	(0XFFFFAFE6);
	MakeWord	(0XFFFFAFE8);
	MakeWord	(0XFFFFAFEA);
	MakeWord	(0XFFFFAFEC);
	MakeWord	(0XFFFFAFEE);
	MakeByte	(0XFFFFAFF0);
	MakeWord	(0XFFFFAFF2);
	MakeByte	(0XFFFFAFF4);
	MakeWord	(0XFFFFAFF6);
	MakeWord	(0XFFFFAFF8);
	MakeWord	(0XFFFFAFFA);
	MakeWord	(0XFFFFAFFC);
	MakeByte	(0XFFFFAFFE);
	MakeByte	(0XFFFFAFFF);
	MakeByte	(0XFFFFB000);
	MakeByte	(0XFFFFB001);
	MakeByte	(0XFFFFB002);
	MakeByte	(0XFFFFB003);
	MakeWord	(0XFFFFB004);
	MakeWord	(0XFFFFB006);
	MakeByte	(0XFFFFB008);
	MakeByte	(0XFFFFB009);
	MakeByte	(0XFFFFB00A);
	MakeByte	(0XFFFFB00B);
	MakeWord	(0XFFFFB00C);
	MakeWord	(0XFFFFB00E);
	MakeByte	(0XFFFFB010);
	MakeByte	(0XFFFFB011);
	MakeWord	(0XFFFFB012);
	MakeWord	(0XFFFFB014);
	MakeWord	(0XFFFFB016);
	MakeWord	(0XFFFFB018);
	MakeByte	(0XFFFFB01A);
	MakeByte	(0XFFFFB01B);
	MakeWord	(0XFFFFB01C);
	MakeWord	(0XFFFFB01E);
	MakeWord	(0XFFFFB020);
	MakeWord	(0XFFFFB022);
	MakeByte	(0XFFFFB024);
	MakeWord	(0XFFFFB026);
	MakeWord	(0XFFFFB028);
	MakeByte	(0XFFFFB02A);
	MakeByte	(0XFFFFB02B);
	MakeWord	(0XFFFFB02C);
	MakeWord	(0XFFFFB02E);
	MakeWord	(0XFFFFB030);
	MakeWord	(0XFFFFB032);
	MakeWord	(0XFFFFB034);
	MakeWord	(0XFFFFB036);
	MakeDword	(0XFFFFB038);
	MakeByte	(0XFFFFB03C);
	MakeByte	(0XFFFFB03D);
	MakeByte	(0XFFFFB03E);
	MakeByte	(0XFFFFB03F);
	MakeByte	(0XFFFFB040);
	MakeByte	(0XFFFFB041);
	MakeByte	(0XFFFFB042);
	MakeByte	(0XFFFFB043);
	MakeByte	(0XFFFFB044);
	MakeByte	(0XFFFFB045);
	MakeByte	(0XFFFFB046);
	MakeByte	(0XFFFFB047);
	MakeByte	(0XFFFFB048);
	MakeByte	(0XFFFFB049);
	MakeByte	(0XFFFFB04A);
	MakeWord	(0XFFFFB04C);
	MakeWord	(0XFFFFB04E);
	MakeWord	(0XFFFFB050);
	MakeWord	(0XFFFFB052);
	MakeWord	(0XFFFFB054);
	MakeByte	(0XFFFFB056);
	MakeWord	(0XFFFFB058);
	MakeWord	(0XFFFFB05A);
	MakeWord	(0XFFFFB05C);
	MakeWord	(0XFFFFB05E);
	MakeByte	(0XFFFFB060);
	MakeWord	(0XFFFFB062);
	MakeByte	(0XFFFFB064);
	MakeByte	(0XFFFFB06E);
	MakeByte	(0XFFFFB06F);
	MakeByte	(0XFFFFB070);
	MakeByte	(0XFFFFB071);
	MakeWord	(0XFFFFB072);
	MakeWord	(0XFFFFB074);
	MakeByte	(0XFFFFB076);
	MakeWord	(0XFFFFB078);
	MakeByte	(0XFFFFB07A);
	MakeByte	(0XFFFFB07B);
	MakeByte	(0XFFFFB07C);
	MakeByte	(0XFFFFB07D);
	MakeByte	(0XFFFFB07E);
	MakeByte	(0XFFFFB07F);
	MakeByte	(0XFFFFB080);
	MakeWord	(0XFFFFB082);
	MakeWord	(0XFFFFB084);
	MakeByte	(0XFFFFB086);
	MakeWord	(0XFFFFB088);
	MakeWord	(0XFFFFB08A);
	MakeWord	(0XFFFFB08C);
	MakeByte	(0XFFFFB08E);
	MakeWord	(0XFFFFB090);
	MakeWord	(0XFFFFB092);
	MakeWord	(0XFFFFB094);
	MakeByte	(0XFFFFB096);
	MakeByte	(0XFFFFB097);
	MakeByte	(0XFFFFB098);
	MakeByte	(0XFFFFB099);
	MakeByte	(0XFFFFB09A);
	MakeByte	(0XFFFFB09B);
	MakeByte	(0XFFFFB09C);
	MakeByte	(0XFFFFB09D);
	MakeByte	(0XFFFFB0AE);
	MakeWord	(0XFFFFB0B0);
	MakeWord	(0XFFFFB0B2);
	MakeWord	(0XFFFFB0B4);
	MakeWord	(0XFFFFB0B6);
	MakeWord	(0XFFFFB0B8);
	MakeWord	(0XFFFFB0BA);
	MakeWord	(0XFFFFB0BC);
	MakeWord	(0XFFFFB0BE);
	MakeByte	(0XFFFFB0C0);
	MakeWord	(0XFFFFB0C2);
	MakeWord	(0XFFFFB0C4);
	MakeByte	(0XFFFFB0C6);
	MakeByte	(0XFFFFB0C7);
	MakeByte	(0XFFFFB0C8);
	MakeByte	(0XFFFFB0C9);
	MakeWord	(0XFFFFB0CA);
	MakeWord	(0XFFFFB0CC);
	MakeWord	(0XFFFFB0CE);
	MakeByte	(0XFFFFB0D0);
	MakeDword	(0XFFFFB0D2);
	MakeDword	(0XFFFFB0D6);
	MakeByte	(0XFFFFB0DE);
	MakeByte	(0XFFFFB0DF);
	MakeWord	(0XFFFFB0E0);
	MakeWord	(0XFFFFB0E2);
	MakeWord	(0XFFFFB0E4);
	MakeWord	(0XFFFFB0E6);
	MakeWord	(0XFFFFB0E8);
	MakeWord	(0XFFFFB0EA);
	MakeWord	(0XFFFFB0EC);
	MakeWord	(0XFFFFB0F0);
	MakeWord	(0XFFFFB0F2);
	MakeWord	(0XFFFFB0F4);
	MakeByte	(0XFFFFB0F6);
	MakeWord	(0XFFFFB0F8);
	MakeName	(0XFFFFB0F8,	"Airflow_Rationality_FilteredMAF");
	MakeWord	(0XFFFFB0FA);
	MakeName	(0XFFFFB0FA,	"Airflow_Rationality_SD");
	MakeWord	(0XFFFFB0FC);
	MakeByte	(0XFFFFB0FE);
	MakeWord	(0XFFFFB100);
	MakeWord	(0XFFFFB102);
	MakeWord	(0XFFFFB104);
	MakeWord	(0XFFFFB106);
	MakeByte	(0XFFFFB108);
	MakeByte	(0XFFFFB109);
	MakeByte	(0XFFFFB10A);
	MakeByte	(0XFFFFB10B);
	MakeByte	(0XFFFFB10C);
	MakeDword	(0XFFFFB10E);
	MakeDword	(0XFFFFB112);
	MakeByte	(0XFFFFB116);
	MakeWord	(0XFFFFB118);
	MakeWord	(0XFFFFB11A);
	MakeWord	(0XFFFFB11C);
	MakeWord	(0XFFFFB11E);
	MakeByte	(0XFFFFB120);
	MakeByte	(0XFFFFB121);
	MakeByte	(0XFFFFB122);
	MakeByte	(0XFFFFB123);
	MakeByte	(0XFFFFB124);
	MakeByte	(0XFFFFB126);
	MakeByte	(0XFFFFB127);
	MakeByte	(0XFFFFB128);
	MakeByte	(0XFFFFB129);
	MakeByte	(0XFFFFB12A);
	MakeByte	(0XFFFFB12B);
	MakeByte	(0XFFFFB12C);
	MakeByte	(0XFFFFB12D);
	MakeByte	(0XFFFFB12E);
	MakeByte	(0XFFFFB12F);
	MakeByte	(0XFFFFB130);
	MakeByte	(0XFFFFB131);
	MakeByte	(0XFFFFB132);
	MakeByte	(0XFFFFB133);
	MakeByte	(0XFFFFB134);
	MakeByte	(0XFFFFB135);
	MakeByte	(0XFFFFB136);
	MakeByte	(0XFFFFB137);
	MakeByte	(0XFFFFB138);
	MakeByte	(0XFFFFB139);
	MakeByte	(0XFFFFB13A);
	MakeByte	(0XFFFFB13B);
	MakeByte	(0XFFFFB13C);
	MakeWord	(0XFFFFB13E);
	MakeByte	(0XFFFFB140);
	MakeByte	(0XFFFFB141);
	MakeByte	(0XFFFFB142);
	MakeWord	(0XFFFFB144);
	MakeWord	(0XFFFFB146);
	MakeWord	(0XFFFFB148);
	MakeWord	(0XFFFFB14A);
	MakeWord	(0XFFFFB14C);
	MakeByte	(0XFFFFB14E);
	MakeByte	(0XFFFFB14F);
	MakeByte	(0XFFFFB150);
	MakeWord	(0XFFFFB152);
	MakeWord	(0XFFFFB154);
	MakeByte	(0XFFFFB156);
	MakeByte	(0XFFFFB157);
	MakeByte	(0XFFFFB158);
	MakeByte	(0XFFFFB159);
	MakeByte	(0XFFFFB15A);
	MakeByte	(0XFFFFB15B);
	MakeByte	(0XFFFFB15C);
	MakeByte	(0XFFFFB15D);
	MakeByte	(0XFFFFB15E);
	MakeWord	(0XFFFFB160);
	MakeDword	(0XFFFFB162);
	MakeDword	(0XFFFFB166);
	MakeWord	(0XFFFFB16A);
	MakeWord	(0XFFFFB16C);
	MakeWord	(0XFFFFB16E);
	MakeWord	(0XFFFFB170);
	MakeWord	(0XFFFFB172);
	MakeWord	(0XFFFFB174);
	MakeByte	(0XFFFFB176);
	MakeWord	(0XFFFFB178);
	MakeByte	(0XFFFFB17A);
	MakeWord	(0XFFFFB17C);
	MakeByte	(0XFFFFB17E);
	MakeByte	(0XFFFFB17F);
	MakeWord	(0XFFFFB180);
	MakeWord	(0XFFFFB188);
	MakeWord	(0XFFFFB18A);
	MakeWord	(0XFFFFB18C);
	MakeWord	(0XFFFFB18E);
	MakeWord	(0XFFFFB190);
	MakeWord	(0XFFFFB192);
	MakeByte	(0XFFFFB194);
	MakeByte	(0XFFFFB195);
	MakeByte	(0XFFFFB196);
	MakeWord	(0XFFFFB198);
	MakeWord	(0XFFFFB19A);
	MakeWord	(0XFFFFB19C);
	MakeWord	(0XFFFFB19E);
	MakeWord	(0XFFFFB1A0);
	MakeWord	(0XFFFFB1A2);
	MakeWord	(0XFFFFB1A4);
	MakeWord	(0XFFFFB1A6);
	MakeWord	(0XFFFFB1A8);
	MakeWord	(0XFFFFB1AA);
	MakeWord	(0XFFFFB1AC);
	MakeWord	(0XFFFFB1AE);
	MakeWord	(0XFFFFB1B0);
	MakeWord	(0XFFFFB1BC);
	MakeDword	(0XFFFFB1BE);
	MakeByte	(0XFFFFB1C2);
	MakeWord	(0XFFFFB1C4);
	MakeWord	(0XFFFFB1C6);
	MakeWord	(0XFFFFB1C8);
	MakeWord	(0XFFFFB1CA);
	MakeWord	(0XFFFFB1CC);
	MakeWord	(0XFFFFB1CE);
	MakeWord	(0XFFFFB1D0);
	MakeWord	(0XFFFFB1D2);
	MakeWord	(0XFFFFB1D4);
	MakeWord	(0XFFFFB1D6);
	MakeWord	(0XFFFFB1D8);
	MakeByte	(0XFFFFB1DA);
	MakeByte	(0XFFFFB1DB);
	MakeWord	(0XFFFFB1DC);
	MakeWord	(0XFFFFB1DE);
	MakeByte	(0XFFFFB1E0);
	MakeWord	(0XFFFFB1E2);
	MakeWord	(0XFFFFB1E4);
	MakeWord	(0XFFFFB1E6);
	MakeWord	(0XFFFFB1E8);
	MakeWord	(0XFFFFB1EA);
	MakeWord	(0XFFFFB1EC);
	MakeByte	(0XFFFFB1EE);
	MakeWord	(0XFFFFB1F0);
	MakeWord	(0XFFFFB1F2);
	MakeWord	(0XFFFFB1F4);
	MakeWord	(0XFFFFB1F6);
	MakeWord	(0XFFFFB1F8);
	MakeByte	(0XFFFFB1FA);
	MakeByte	(0XFFFFB1FB);
	MakeByte	(0XFFFFB1FC);
	MakeByte	(0XFFFFB1FD);
	MakeByte	(0XFFFFB1FE);
	MakeByte	(0XFFFFB200);
	MakeWord	(0XFFFFB202);
	MakeWord	(0XFFFFB204);
	MakeWord	(0XFFFFB206);
	MakeWord	(0XFFFFB208);
	MakeWord	(0XFFFFB20A);
	MakeWord	(0XFFFFB20C);
	MakeWord	(0XFFFFB20E);
	MakeWord	(0XFFFFB210);
	MakeByte	(0XFFFFB212);
	MakeByte	(0XFFFFB213);
	MakeByte	(0XFFFFB214);
	MakeByte	(0XFFFFB215);
	MakeByte	(0XFFFFB216);
	MakeWord	(0XFFFFB218);
	MakeWord	(0XFFFFB21A);
	MakeWord	(0XFFFFB21C);
	MakeWord	(0XFFFFB21E);
	MakeByte	(0XFFFFB220);
	MakeWord	(0XFFFFB222);
	MakeByte	(0XFFFFB224);
	MakeWord	(0XFFFFB226);
	MakeWord	(0XFFFFB228);
	MakeWord	(0XFFFFB22A);
	MakeWord	(0XFFFFB22C);
	MakeWord	(0XFFFFB22E);
	MakeWord	(0XFFFFB230);
	MakeWord	(0XFFFFB232);
	MakeWord	(0XFFFFB234);
	MakeByte	(0XFFFFB236);
	MakeWord	(0XFFFFB238);
	MakeWord	(0XFFFFB23A);
	MakeWord	(0XFFFFB23C);
	MakeWord	(0XFFFFB23E);
	MakeWord	(0XFFFFB240);
	MakeWord	(0XFFFFB242);
	MakeWord	(0XFFFFB244);
	MakeWord	(0XFFFFB246);
	MakeWord	(0XFFFFB248);
	MakeWord	(0XFFFFB24A);
	MakeByte	(0XFFFFB24C);
	MakeByte	(0XFFFFB24D);
	MakeByte	(0XFFFFB24E);
	MakeByte	(0XFFFFB24F);
	MakeByte	(0XFFFFB250);
	MakeByte	(0XFFFFB251);
	MakeByte	(0XFFFFB252);
	MakeWord	(0XFFFFB254);
	MakeWord	(0XFFFFB256);
	MakeWord	(0XFFFFB258);
	MakeWord	(0XFFFFB25A);
	MakeByte	(0XFFFFB25C);
	MakeByte	(0XFFFFB25D);
	MakeWord	(0XFFFFB25E);
	MakeWord	(0XFFFFB260);
	MakeByte	(0XFFFFB262);
	MakeByte	(0XFFFFB263);
	MakeWord	(0XFFFFB264);
	MakeWord	(0XFFFFB266);
	MakeByte	(0XFFFFB268);
	MakeByte	(0XFFFFB269);
	MakeWord	(0XFFFFB26A);
	MakeByte	(0XFFFFB26C);
	MakeWord	(0XFFFFB26E);
	MakeWord	(0XFFFFB270);
	MakeByte	(0XFFFFB272);
	MakeWord	(0XFFFFB274);
	MakeByte	(0XFFFFB276);
	MakeWord	(0XFFFFB278);
	MakeByte	(0XFFFFB27A);
	MakeByte	(0XFFFFB27B);
	MakeByte	(0XFFFFB27C);
	MakeByte	(0XFFFFB27E);
	MakeByte	(0XFFFFB27F);
	MakeByte	(0XFFFFB280);
	MakeByte	(0XFFFFB281);
	MakeByte	(0XFFFFB282);
	MakeWord	(0XFFFFB284);
	MakeWord	(0XFFFFB286);
	MakeWord	(0XFFFFB288);
	MakeWord	(0XFFFFB28A);
	MakeWord	(0XFFFFB28C);
	MakeWord	(0XFFFFB28E);
	MakeWord	(0XFFFFB290);
	MakeWord	(0XFFFFB292);
	MakeWord	(0XFFFFB294);
	MakeWord	(0XFFFFB296);
	MakeWord	(0XFFFFB298);
	MakeWord	(0XFFFFB29A);
	MakeWord	(0XFFFFB29C);
	MakeByte	(0XFFFFB29E);
	MakeByte	(0XFFFFB29F);
	MakeWord	(0XFFFFB2A0);
	MakeByte	(0XFFFFB2AE);
	MakeByte	(0XFFFFB2AF);
	MakeByte	(0XFFFFB2B0);
	MakeByte	(0XFFFFB2B1);
	MakeByte	(0XFFFFB2B2);
	MakeWord	(0XFFFFB2B4);
	MakeWord	(0XFFFFB2B6);
	MakeWord	(0XFFFFB2B8);
	MakeWord	(0XFFFFB2BA);
	MakeWord	(0XFFFFB2BC);
	MakeByte	(0XFFFFB2BE);
	MakeWord	(0XFFFFB2C0);
	MakeWord	(0XFFFFB2C2);
	MakeWord	(0XFFFFB2C4);
	MakeWord	(0XFFFFB2C6);
	MakeWord	(0XFFFFB2C8);
	MakeWord	(0XFFFFB2CA);
	MakeWord	(0XFFFFB2CC);
	MakeByte	(0XFFFFB2CE);
	MakeByte	(0XFFFFB2CF);
	MakeByte	(0XFFFFB2D0);
	MakeWord	(0XFFFFB2D2);
	MakeWord	(0XFFFFB2D4);
	MakeWord	(0XFFFFB2D6);
	MakeByte	(0XFFFFB2D8);
	MakeByte	(0XFFFFB2D9);
	MakeByte	(0XFFFFB2DA);
	MakeByte	(0XFFFFB2DB);
	MakeByte	(0XFFFFB2DC);
	MakeByte	(0XFFFFB2DE);
	MakeByte	(0XFFFFB2E0);
	MakeWord	(0XFFFFB2E2);
	MakeByte	(0XFFFFB2E4);
	MakeByte	(0XFFFFB2E5);
	MakeWord	(0XFFFFB2E6);
	MakeByte	(0XFFFFB2E8);
}


static Bytes_17(void) {
        auto x;
#define id x

	MakeByte	(0XFFFFB2E9);
	MakeByte	(0XFFFFB2EA);
	MakeByte	(0XFFFFB2EB);
	MakeByte	(0XFFFFB2EC);
	MakeByte	(0XFFFFB2EE);
	MakeByte	(0XFFFFB2EF);
	MakeByte	(0XFFFFB2F0);
	MakeByte	(0XFFFFB2F1);
	MakeByte	(0XFFFFB2F2);
	MakeByte	(0XFFFFB2F3);
	MakeWord	(0XFFFFB2F4);
	MakeWord	(0XFFFFB2F6);
	MakeByte	(0XFFFFB2F8);
	MakeByte	(0XFFFFB2FA);
	MakeByte	(0XFFFFB2FB);
	MakeByte	(0XFFFFB2FC);
	MakeWord	(0XFFFFB2FE);
	MakeWord	(0XFFFFB300);
	MakeWord	(0XFFFFB302);
	MakeWord	(0XFFFFB304);
	MakeWord	(0XFFFFB306);
	MakeByte	(0XFFFFB309);
	MakeByte	(0XFFFFB30A);
	MakeByte	(0XFFFFB30B);
	MakeWord	(0XFFFFB30C);
	MakeWord	(0XFFFFB30E);
	MakeWord	(0XFFFFB310);
	MakeByte	(0XFFFFB312);
	MakeWord	(0XFFFFB31A);
	MakeWord	(0XFFFFB31C);
	MakeWord	(0XFFFFB31E);
	MakeWord	(0XFFFFB320);
	MakeWord	(0XFFFFB322);
	MakeWord	(0XFFFFB324);
	MakeWord	(0XFFFFB326);
	MakeDword	(0XFFFFB328);
	MakeWord	(0XFFFFB330);
	MakeByte	(0XFFFFB332);
	MakeByte	(0XFFFFB333);
	MakeByte	(0XFFFFB334);
	MakeByte	(0XFFFFB335);
	MakeByte	(0XFFFFB336);
	MakeWord	(0XFFFFB338);
	MakeWord	(0XFFFFB33A);
	MakeByte	(0XFFFFB33C);
	MakeWord	(0XFFFFB33E);
	MakeWord	(0XFFFFB340);
	MakeWord	(0XFFFFB342);
	MakeByte	(0XFFFFB344);
	MakeWord	(0XFFFFB346);
	MakeWord	(0XFFFFB348);
	MakeWord	(0XFFFFB34A);
	MakeWord	(0XFFFFB34C);
	MakeByte	(0XFFFFB34E);
	MakeWord	(0XFFFFB350);
	MakeByte	(0XFFFFB352);
	MakeWord	(0XFFFFB354);
	MakeByte	(0XFFFFB356);
	MakeByte	(0XFFFFB357);
	MakeWord	(0XFFFFB358);
	MakeWord	(0XFFFFB35A);
	MakeByte	(0XFFFFB35C);
	MakeByte	(0XFFFFB35D);
	MakeByte	(0XFFFFB35E);
	MakeWord	(0XFFFFB360);
	MakeWord	(0XFFFFB362);
	MakeWord	(0XFFFFB364);
	MakeWord	(0XFFFFB366);
	MakeWord	(0XFFFFB368);
	MakeWord	(0XFFFFB36A);
	MakeByte	(0XFFFFB36C);
	MakeWord	(0XFFFFB36E);
	MakeByte	(0XFFFFB370);
	MakeByte	(0XFFFFB371);
	MakeByte	(0XFFFFB372);
	MakeByte	(0XFFFFB373);
	MakeByte	(0XFFFFB374);
	MakeByte	(0XFFFFB375);
	MakeByte	(0XFFFFB376);
	MakeByte	(0XFFFFB377);
	MakeByte	(0XFFFFB378);
	MakeByte	(0XFFFFB379);
	MakeByte	(0XFFFFB37A);
	MakeByte	(0XFFFFB37C);
	MakeWord	(0XFFFFB37E);
	MakeByte	(0XFFFFB380);
	MakeByte	(0XFFFFB381);
	MakeByte	(0XFFFFB382);
	MakeWord	(0XFFFFB384);
	MakeWord	(0XFFFFB386);
	MakeByte	(0XFFFFB388);
	MakeWord	(0XFFFFB38A);
	MakeByte	(0XFFFFB38C);
	MakeWord	(0XFFFFB38E);
	MakeWord	(0XFFFFB390);
	MakeWord	(0XFFFFB392);
	MakeByte	(0XFFFFB394);
	MakeByte	(0XFFFFB395);
	MakeByte	(0XFFFFB396);
	MakeWord	(0XFFFFB398);
	MakeWord	(0XFFFFB39A);
	MakeWord	(0XFFFFB39C);
	MakeWord	(0XFFFFB39E);
	MakeWord	(0XFFFFB3A0);
	MakeWord	(0XFFFFB3A2);
	MakeByte	(0XFFFFB3A4);
	MakeWord	(0XFFFFB3A6);
	MakeWord	(0XFFFFB3A8);
	MakeWord	(0XFFFFB3B0);
	MakeByte	(0XFFFFB3B2);
	MakeWord	(0XFFFFB3B4);
	MakeWord	(0XFFFFB3B6);
	MakeWord	(0XFFFFB3B8);
	MakeWord	(0XFFFFB3BA);
	MakeWord	(0XFFFFB3BC);
	MakeWord	(0XFFFFB3BE);
	MakeByte	(0XFFFFB3C0);
	MakeByte	(0XFFFFB3C2);
	MakeWord	(0XFFFFB3C4);
	MakeWord	(0XFFFFB3C6);
	MakeWord	(0XFFFFB3C8);
	MakeWord	(0XFFFFB3CA);
	MakeByte	(0XFFFFB3CC);
	MakeByte	(0XFFFFB3CD);
	MakeByte	(0XFFFFB3CE);
	MakeWord	(0XFFFFB3D0);
	MakeWord	(0XFFFFB3D2);
	MakeWord	(0XFFFFB3D4);
	MakeWord	(0XFFFFB3D6);
	MakeWord	(0XFFFFB3D8);
	MakeWord	(0XFFFFB3DA);
	MakeWord	(0XFFFFB3DC);
	MakeWord	(0XFFFFB3DE);
	MakeWord	(0XFFFFB3E0);
	MakeWord	(0XFFFFB3E2);
	MakeWord	(0XFFFFB3E4);
	MakeWord	(0XFFFFB3E6);
	MakeWord	(0XFFFFB3E8);
	MakeWord	(0XFFFFB3EA);
	MakeWord	(0XFFFFB3EC);
	MakeWord	(0XFFFFB3EE);
	MakeWord	(0XFFFFB3F0);
	MakeByte	(0XFFFFB3F2);
	MakeByte	(0XFFFFB3F3);
	MakeByte	(0XFFFFB3F4);
	MakeByte	(0XFFFFB3F5);
	MakeByte	(0XFFFFB3F6);
	MakeByte	(0XFFFFB3F7);
	MakeByte	(0XFFFFB3F8);
	MakeByte	(0XFFFFB3F9);
	MakeByte	(0XFFFFB3FA);
	MakeWord	(0XFFFFB3FC);
	MakeWord	(0XFFFFB3FE);
	MakeWord	(0XFFFFB400);
	MakeWord	(0XFFFFB402);
	MakeWord	(0XFFFFB404);
	MakeWord	(0XFFFFB406);
	MakeWord	(0XFFFFB408);
	MakeWord	(0XFFFFB412);
	MakeByte	(0XFFFFB414);
	MakeWord	(0XFFFFB416);
	MakeDword	(0XFFFFB418);
	MakeDword	(0XFFFFB41C);
	MakeWord	(0XFFFFB420);
	MakeByte	(0XFFFFB422);
	MakeByte	(0XFFFFB423);
	MakeByte	(0XFFFFB424);
	MakeByte	(0XFFFFB425);
	MakeByte	(0XFFFFB426);
	MakeByte	(0XFFFFB427);
	MakeWord	(0XFFFFB428);
	MakeByte	(0XFFFFB42A);
	MakeByte	(0XFFFFB42B);
	MakeWord	(0XFFFFB42C);
	MakeWord	(0XFFFFB42E);
	MakeWord	(0XFFFFB430);
	MakeWord	(0XFFFFB432);
	MakeByte	(0XFFFFB434);
	MakeByte	(0XFFFFB435);
	MakeByte	(0XFFFFB436);
	MakeByte	(0XFFFFB437);
	MakeByte	(0XFFFFB438);
	MakeByte	(0XFFFFB439);
	MakeByte	(0XFFFFB43A);
	MakeWord	(0XFFFFB43C);
	MakeByte	(0XFFFFB43E);
	MakeByte	(0XFFFFB43F);
	MakeByte	(0XFFFFB440);
	MakeByte	(0XFFFFB441);
	MakeByte	(0XFFFFB442);
	MakeByte	(0XFFFFB443);
	MakeWord	(0XFFFFB444);
	MakeWord	(0XFFFFB446);
	MakeByte	(0XFFFFB448);
	MakeWord	(0XFFFFB44A);
	MakeWord	(0XFFFFB44C);
	MakeWord	(0XFFFFB44E);
	MakeWord	(0XFFFFB450);
	MakeWord	(0XFFFFB452);
	MakeByte	(0XFFFFB454);
	MakeWord	(0XFFFFB456);
	MakeWord	(0XFFFFB458);
	MakeWord	(0XFFFFB45A);
	MakeWord	(0XFFFFB45C);
	MakeWord	(0XFFFFB45E);
	MakeByte	(0XFFFFB460);
	MakeByte	(0XFFFFB461);
	MakeByte	(0XFFFFB462);
	MakeByte	(0XFFFFB463);
	MakeWord	(0XFFFFB466);
	MakeWord	(0XFFFFB468);
	MakeByte	(0XFFFFB46A);
	MakeByte	(0XFFFFB46B);
	MakeWord	(0XFFFFB46C);
	MakeWord	(0XFFFFB46E);
	MakeByte	(0XFFFFB472);
	MakeByte	(0XFFFFB473);
	MakeByte	(0XFFFFB47A);
	MakeByte	(0XFFFFB47B);
	MakeByte	(0XFFFFB47C);
	MakeByte	(0XFFFFB47D);
	MakeByte	(0XFFFFB47E);
	MakeByte	(0XFFFFB47F);
	MakeWord	(0XFFFFB480);
	MakeByte	(0XFFFFB482);
	MakeByte	(0XFFFFB484);
	MakeByte	(0XFFFFB485);
	MakeByte	(0XFFFFB486);
	MakeByte	(0XFFFFB487);
	MakeByte	(0XFFFFB488);
	MakeByte	(0XFFFFB489);
	MakeByte	(0XFFFFB48A);
	MakeByte	(0XFFFFB48B);
	MakeByte	(0XFFFFB48C);
	MakeByte	(0XFFFFB48E);
	MakeByte	(0XFFFFB48F);
	MakeWord	(0XFFFFB490);
	MakeByte	(0XFFFFB492);
	MakeByte	(0XFFFFB493);
	MakeByte	(0XFFFFB494);
	MakeByte	(0XFFFFB495);
	MakeByte	(0XFFFFB496);
	MakeByte	(0XFFFFB498);
	MakeWord	(0XFFFFB49A);
	MakeByte	(0XFFFFB49C);
	MakeByte	(0XFFFFB49D);
	MakeByte	(0XFFFFB49E);
	MakeByte	(0XFFFFB49F);
	MakeByte	(0XFFFFB4A0);
	MakeWord	(0XFFFFB4A2);
	MakeByte	(0XFFFFB4A4);
	MakeWord	(0XFFFFB4A6);
	MakeWord	(0XFFFFB4A8);
	MakeByte	(0XFFFFB4AA);
	MakeWord	(0XFFFFB4AC);
	MakeWord	(0XFFFFB4AE);
	MakeByte	(0XFFFFB4B0);
	MakeByte	(0XFFFFB4B1);
	MakeByte	(0XFFFFB4B2);
	MakeByte	(0XFFFFB4B3);
	MakeWord	(0XFFFFB4B4);
	MakeWord	(0XFFFFB4B6);
	MakeWord	(0XFFFFB4B8);
	MakeWord	(0XFFFFB4BA);
	MakeWord	(0XFFFFB4BC);
	MakeWord	(0XFFFFB4BE);
	MakeByte	(0XFFFFB4C0);
	MakeByte	(0XFFFFB4C2);
	MakeByte	(0XFFFFB4C4);
	MakeByte	(0XFFFFB4C5);
	MakeWord	(0XFFFFB4C6);
	MakeWord	(0XFFFFB4C8);
	MakeWord	(0XFFFFB4CA);
	MakeWord	(0XFFFFB4CC);
	MakeWord	(0XFFFFB4CE);
	MakeByte	(0XFFFFB4D0);
	MakeByte	(0XFFFFB4D1);
	MakeWord	(0XFFFFB4D2);
	MakeWord	(0XFFFFB4D4);
	MakeByte	(0XFFFFB4D6);
	MakeByte	(0XFFFFB4D8);
	MakeByte	(0XFFFFB4D9);
	MakeByte	(0XFFFFB4DA);
	MakeByte	(0XFFFFB4DB);
	MakeByte	(0XFFFFB4DC);
	MakeByte	(0XFFFFB4DD);
	MakeByte	(0XFFFFB4DE);
	MakeByte	(0XFFFFB4E0);
	MakeByte	(0XFFFFB4E1);
	MakeDword	(0XFFFFB4E2);
	MakeByte	(0XFFFFB4E6);
	MakeByte	(0XFFFFB4E8);
	MakeByte	(0XFFFFB4E9);
	MakeWord	(0XFFFFB4EA);
	MakeWord	(0XFFFFB4EC);
	MakeWord	(0XFFFFB4EE);
	MakeWord	(0XFFFFB4F0);
	MakeWord	(0XFFFFB4F2);
	MakeByte	(0XFFFFB4F4);
	MakeWord	(0XFFFFB4F6);
	MakeWord	(0XFFFFB4F8);
	MakeByte	(0XFFFFB4FA);
	MakeByte	(0XFFFFB4FB);
	MakeByte	(0XFFFFB4FC);
	MakeWord	(0XFFFFB4FE);
	MakeByte	(0XFFFFB500);
	MakeByte	(0XFFFFB501);
	MakeByte	(0XFFFFB502);
	MakeWord	(0XFFFFB504);
	MakeByte	(0XFFFFB506);
	MakeByte	(0XFFFFB507);
	MakeByte	(0XFFFFB508);
	MakeWord	(0XFFFFB50A);
	MakeWord	(0XFFFFB50C);
	MakeWord	(0XFFFFB50E);
	MakeByte	(0XFFFFB510);
	MakeByte	(0XFFFFB511);
	MakeByte	(0XFFFFB518);
	MakeWord	(0XFFFFB51A);
	MakeName	(0XFFFFB51A,	"FuelPrimingTimestamp");
	MakeWord	(0XFFFFB51C);
	MakeWord	(0XFFFFB51E);
	MakeByte	(0XFFFFB520);
	MakeWord	(0XFFFFB522);
	MakeByte	(0XFFFFB524);
	MakeByte	(0XFFFFB525);
	MakeWord	(0XFFFFB526);
	MakeWord	(0XFFFFB528);
	MakeByte	(0XFFFFB52A);
	MakeByte	(0XFFFFB52B);
	MakeByte	(0XFFFFB52C);
	MakeByte	(0XFFFFB52D);
	MakeByte	(0XFFFFB52E);
	MakeByte	(0XFFFFB530);
	MakeByte	(0XFFFFB531);
	MakeByte	(0XFFFFB532);
	MakeByte	(0XFFFFB533);
	MakeByte	(0XFFFFB534);
	MakeWord	(0XFFFFB536);
	MakeByte	(0XFFFFB538);
	MakeByte	(0XFFFFB539);
	MakeByte	(0XFFFFB53A);
	MakeWord	(0XFFFFB53C);
	MakeByte	(0XFFFFB53E);
	MakeWord	(0XFFFFB540);
	MakeWord	(0XFFFFB544);
	MakeName	(0XFFFFB544,	"GlobalClock");
	MakeByte	(0XFFFFB546);
	MakeByte	(0XFFFFB547);
	MakeByte	(0XFFFFB548);
	MakeByte	(0XFFFFB549);
	MakeByte	(0XFFFFB54A);
	MakeByte	(0XFFFFB54B);
	MakeByte	(0XFFFFB54C);
	MakeByte	(0XFFFFB54D);
	MakeWord	(0XFFFFB54E);
	MakeWord	(0XFFFFB550);
	MakeWord	(0XFFFFB552);
	MakeByte	(0XFFFFB556);
	MakeByte	(0XFFFFB557);
	MakeWord	(0XFFFFB558);
	MakeDword	(0XFFFFB5D2);
	MakeDword	(0XFFFFB5D6);
	MakeDword	(0XFFFFB5DA);
	MakeDword	(0XFFFFB5DE);
	MakeByte	(0XFFFFB5E6);
	MakeByte	(0XFFFFBE5C);
	MakeByte	(0XFFFFBE5D);
	MakeByte	(0XFFFFBE5E);
	MakeByte	(0XFFFFBE5F);
	MakeByte	(0XFFFFBE60);
	MakeByte	(0XFFFFBE61);
	MakeByte	(0XFFFFBE62);
	MakeByte	(0XFFFFBE63);
	MakeByte	(0XFFFFBE64);
	MakeByte	(0XFFFFBE65);
	MakeByte	(0XFFFFBE66);
	MakeByte	(0XFFFFBE67);
	MakeByte	(0XFFFFBE68);
	MakeByte	(0XFFFFBE6A);
	MakeByte	(0XFFFFBE6B);
	MakeByte	(0XFFFFBE6C);
	MakeByte	(0XFFFFBE6D);
	MakeByte	(0XFFFFBE6E);
	MakeByte	(0XFFFFBE6F);
	MakeByte	(0XFFFFBE70);
	MakeByte	(0XFFFFBE71);
	MakeWord	(0XFFFFBE72);
	MakeWord	(0XFFFFBE74);
	MakeByte	(0XFFFFBE76);
	MakeByte	(0XFFFFBE78);
	MakeByte	(0XFFFFBE79);
	MakeByte	(0XFFFFBE7A);
	MakeByte	(0XFFFFBE7C);
	MakeWord	(0XFFFFBE7E);
	MakeByte	(0XFFFFBEF0);
	MakeByte	(0XFFFFBEF1);
	MakeWord	(0XFFFFBEF2);
	MakeWord	(0XFFFFBEF4);
	MakeByte	(0XFFFFBEF6);
	MakeByte	(0XFFFFBEF7);
	MakeByte	(0XFFFFBEF8);
	MakeByte	(0XFFFFBEF9);
	MakeByte	(0XFFFFBEFA);
	MakeByte	(0XFFFFBEFB);
	MakeByte	(0XFFFFBEFC);
	MakeWord	(0XFFFFBEFE);
	MakeDword	(0XFFFFBF00);
	MakeWord	(0XFFFFBF04);
	MakeByte	(0XFFFFBF08);
	MakeByte	(0XFFFFBF09);
	MakeByte	(0XFFFFBF0A);
	MakeByte	(0XFFFFBF0B);
	MakeWord	(0XFFFFBF0C);
	MakeWord	(0XFFFFBF10);
	MakeDword	(0XFFFFBF12);
	MakeByte	(0XFFFFBF16);
	MakeWord	(0XFFFFBF18);
	MakeWord	(0XFFFFBF1A);
	MakeWord	(0XFFFFBF1C);
	MakeWord	(0XFFFFBF1E);
	MakeWord	(0XFFFFBF20);
	MakeByte	(0XFFFFBF22);
	MakeWord	(0XFFFFBF24);
	MakeDword	(0XFFFFBF26);
	MakeByte	(0XFFFFBF2A);
	MakeByte	(0XFFFFBF2B);
	MakeByte	(0XFFFFBF2C);
	MakeByte	(0XFFFFBF2D);
	MakeByte	(0XFFFFBF2E);
	MakeByte	(0XFFFFBF30);
	MakeByte	(0XFFFFBF31);
	MakeByte	(0XFFFFBF32);
	MakeByte	(0XFFFFBF33);
	MakeByte	(0XFFFFBF34);
	MakeByte	(0XFFFFBF35);
	MakeByte	(0XFFFFBF36);
	MakeByte	(0XFFFFBF37);
	MakeByte	(0XFFFFBF38);
	MakeByte	(0XFFFFBF39);
	MakeByte	(0XFFFFBF3A);
	MakeByte	(0XFFFFBF40);
	MakeByte	(0XFFFFBF41);
	MakeByte	(0XFFFFBF42);
	MakeByte	(0XFFFFBF44);
	MakeByte	(0XFFFFBF45);
	MakeByte	(0XFFFFBF46);
	MakeByte	(0XFFFFBF48);
	MakeByte	(0XFFFFBF49);
	MakeByte	(0XFFFFBF4A);
	MakeByte	(0XFFFFBF4C);
	MakeByte	(0XFFFFBF4D);
	MakeByte	(0XFFFFBF4E);
	MakeByte	(0XFFFFBF50);
	MakeByte	(0XFFFFBF51);
	MakeByte	(0XFFFFBF52);
	MakeWord	(0XFFFFBF54);
	MakeDword	(0XFFFFBF56);
	MakeWord	(0XFFFFBF5E);
	MakeDword	(0XFFFFBF62);
	MakeWord	(0XFFFFBF66);
	MakeDword	(0XFFFFBF68);
	MakeWord	(0XFFFFBF6C);
	MakeDword	(0XFFFFBF6E);
	MakeWord	(0XFFFFBF72);
	MakeDword	(0XFFFFBF74);
	MakeWord	(0XFFFFBF78);
	MakeDword	(0XFFFFBF7A);
	MakeWord	(0XFFFFBF7E);
	MakeDword	(0XFFFFBF80);
	MakeWord	(0XFFFFBF84);
	MakeDword	(0XFFFFBF86);
	MakeWord	(0XFFFFBF8A);
	MakeDword	(0XFFFFBFA4);
	MakeWord	(0XFFFFBFA8);
	MakeDword	(0XFFFFBFAA);
	MakeWord	(0XFFFFBFAE);
	MakeDword	(0XFFFFBFB0);
	MakeWord	(0XFFFFBFB4);
	MakeDword	(0XFFFFBFB6);
	MakeWord	(0XFFFFBFBA);
	MakeDword	(0XFFFFBFBC);
	MakeWord	(0XFFFFBFC0);
	MakeDword	(0XFFFFBFC2);
	MakeWord	(0XFFFFBFC6);
	MakeDword	(0XFFFFBFC8);
	MakeWord	(0XFFFFBFCC);
	MakeDword	(0XFFFFBFCE);
	MakeWord	(0XFFFFBFD2);
	MakeDword	(0XFFFFBFD4);
	MakeWord	(0XFFFFBFD8);
	MakeDword	(0XFFFFBFDA);
	MakeWord	(0XFFFFBFDE);
	MakeDword	(0XFFFFBFE0);
	MakeWord	(0XFFFFBFE4);
	MakeDword	(0XFFFFBFE6);
	MakeWord	(0XFFFFBFEA);
	MakeWord	(0XFFFFBFEC);
	MakeWord	(0XFFFFBFEE);
	MakeByte	(0XFFFFBFF0);
	MakeByte	(0XFFFFBFF1);
	MakeWord	(0XFFFFBFF2);
	MakeWord	(0XFFFFBFF4);
	MakeByte	(0XFFFFBFF6);
	MakeByte	(0XFFFFBFF7);
	MakeByte	(0XFFFFBFF8);
	MakeWord	(0XFFFFBFFA);
	MakeWord	(0XFFFFBFFC);
	MakeWord	(0XFFFFBFFE);
	MakeWord	(0XFFFFCAE8);
	MakeByte	(0XFFFFD000);
	MakeByte	(0XFFFFD001);
	MakeByte	(0XFFFFD002);
	MakeByte	(0XFFFFD003);
	MakeByte	(0XFFFFD004);
	MakeByte	(0XFFFFD005);
	MakeByte	(0XFFFFD006);
	MakeByte	(0XFFFFD007);
	MakeByte	(0XFFFFD008);
	MakeByte	(0XFFFFD009);
	MakeByte	(0XFFFFD00A);
	MakeByte	(0XFFFFD00B);
	MakeByte	(0XFFFFD00C);
	MakeByte	(0XFFFFD00D);
	MakeByte	(0XFFFFD00E);
	MakeByte	(0XFFFFD00F);
	MakeWord	(0XFFFFE000);
	MakeWord	(0XFFFFE01C);
	MakeWord	(0XFFFFE01E);
	MakeWord	(0XFFFFE030);
	MakeWord	(0XFFFFE032);
	MakeWord	(0XFFFFE034);
	MakeWord	(0XFFFFE03C);
	MakeWord	(0XFFFFE03E);
	MakeWord	(0XFFFFE040);
	MakeWord	(0XFFFFE05C);
	MakeWord	(0XFFFFE05E);
	MakeWord	(0XFFFFE060);
	MakeWord	(0XFFFFE07E);
	MakeWord	(0XFFFFE09C);
	MakeWord	(0XFFFFE09E);
	MakeWord	(0XFFFFE0A0);
	MakeWord	(0XFFFFE0A4);
	MakeWord	(0XFFFFE0A6);
	MakeWord	(0XFFFFE0AE);
	MakeWord	(0XFFFFE0B2);
	MakeWord	(0XFFFFE0B4);
	MakeWord	(0XFFFFE0B6);
	MakeWord	(0XFFFFE0B8);
	MakeWord	(0XFFFFE0BA);
	MakeWord	(0XFFFFE0BC);
	MakeWord	(0XFFFFE0C0);
	MakeWord	(0XFFFFE0C2);
	MakeWord	(0XFFFFE0C4);
	MakeWord	(0XFFFFE0C6);
	MakeWord	(0XFFFFE0C8);
	MakeWord	(0XFFFFE0CC);
	MakeWord	(0XFFFFE0CE);
	MakeWord	(0XFFFFE0D0);
	MakeWord	(0XFFFFE0D2);
	MakeWord	(0XFFFFE0D6);
	MakeWord	(0XFFFFE0E0);
	MakeDword	(0XFFFFE0FC);
	MakeWord	(0XFFFFE100);
	MakeWord	(0XFFFFE102);
	MakeWord	(0XFFFFE104);
	MakeWord	(0XFFFFE106);
	MakeWord	(0XFFFFE108);
	MakeWord	(0XFFFFE10A);
	MakeWord	(0XFFFFE10C);
	MakeWord	(0XFFFFE112);
	MakeWord	(0XFFFFE180);
	MakeWord	(0XFFFFE19C);
	MakeWord	(0XFFFFE1B0);
	MakeWord	(0XFFFFE1B2);
	MakeWord	(0XFFFFE1B4);
	MakeWord	(0XFFFFE1C2);
	MakeWord	(0XFFFFE1C8);
	MakeWord	(0XFFFFE1CA);
	MakeWord	(0XFFFFE1CC);
	MakeWord	(0XFFFFE1D8);
	MakeWord	(0XFFFFE1DA);
	MakeWord	(0XFFFFE1DE);
	MakeWord	(0XFFFFE1E0);
	MakeWord	(0XFFFFE1E2);
	MakeWord	(0XFFFFE1E4);
	MakeWord	(0XFFFFE1E6);
	MakeWord	(0XFFFFE1E8);
	MakeWord	(0XFFFFE1EA);
	MakeWord	(0XFFFFE1F0);
	MakeWord	(0XFFFFE1FA);
	MakeWord	(0XFFFFE218);
	MakeWord	(0XFFFFE21A);
	MakeWord	(0XFFFFE21C);
	MakeWord	(0XFFFFE222);
	MakeWord	(0XFFFFE236);
	MakeWord	(0XFFFFE238);
	MakeWord	(0XFFFFE2D0);
	MakeWord	(0XFFFFE2D2);
	MakeWord	(0XFFFFE2D4);
	MakeWord	(0XFFFFE2F4);
	MakeWord	(0XFFFFE2F8);
	MakeWord	(0XFFFFE2FA);
	MakeWord	(0XFFFFE2FC);
	MakeWord	(0XFFFFE2FE);
	MakeWord	(0XFFFFF200);
	MakeWord	(0XFFFFF208);
	MakeWord	(0XFFFFF20A);
	MakeWord	(0XFFFFF20C);
	MakeWord	(0XFFFFF20E);
	MakeWord	(0XFFFFF210);
	MakeWord	(0XFFFFF2B0);
	MakeWord	(0XFFFFF2B4);
	MakeWord	(0XFFFFF2BA);
	MakeWord	(0XFFFFF2BC);
	MakeWord	(0XFFFFF2BE);
	MakeWord	(0XFFFFF2C0);
	MakeWord	(0XFFFFF2C2);
	MakeWord	(0XFFFFF2C4);
	MakeWord	(0XFFFFF2CA);
	MakeWord	(0XFFFFF2D0);
	MakeWord	(0XFFFFF2D2);
	MakeWord	(0XFFFFF2D4);
	MakeWord	(0XFFFFF2D6);
	MakeWord	(0XFFFFF2DE);
	MakeWord	(0XFFFFF2E0);
	MakeWord	(0XFFFFF2E2);
	MakeWord	(0XFFFFF2E4);
	MakeWord	(0XFFFFF2E6);
	MakeWord	(0XFFFFF2E8);
	MakeWord	(0XFFFFF2EA);
	MakeWord	(0XFFFFF2EC);
	MakeWord	(0XFFFFF2EE);
	MakeWord	(0XFFFFF2F0);
	MakeWord	(0XFFFFF2F2);
	MakeWord	(0XFFFFF2F4);
	MakeWord	(0XFFFFF2F6);
	MakeWord	(0XFFFFF2F8);
	MakeWord	(0XFFFFF2FC);
	MakeWord	(0XFFFFF2FE);
	MakeWord	(0XFFFFF600);
	MakeByte	(0XFFFFF606);
	MakeByte	(0XFFFFF607);
	MakeWord	(0XFFFFF60C);
	MakeWord	(0XFFFFF60E);
	MakeWord	(0XFFFFFA00);
	MakeWord	(0XFFFFFA04);
	MakeByte	(0XFFFFFA07);
	MakeByte	(0XFFFFFA11);
	MakeByte	(0XFFFFFA15);
	MakeByte	(0XFFFFFA17);
	MakeByte	(0XFFFFFA19);
	MakeByte	(0XFFFFFA1D);
	MakeByte	(0XFFFFFA1F);
	MakeByte	(0XFFFFFA21);
	MakeWord	(0XFFFFFA22);
	MakeWord	(0XFFFFFA24);
	MakeByte	(0XFFFFFA27);
	MakeWord	(0XFFFFFA38);
	MakeByte	(0XFFFFFA41);
	MakeWord	(0XFFFFFA44);
	MakeWord	(0XFFFFFA46);
	MakeWord	(0XFFFFFA48);
	MakeWord	(0XFFFFFA4A);
	MakeWord	(0XFFFFFA4C);
	MakeWord	(0XFFFFFA4E);
	MakeWord	(0XFFFFFA50);
	MakeWord	(0XFFFFFA52);
	MakeWord	(0XFFFFFA54);
	MakeWord	(0XFFFFFA56);
	MakeWord	(0XFFFFFA58);
	MakeWord	(0XFFFFFA5A);
	MakeWord	(0XFFFFFA5C);
	MakeWord	(0XFFFFFA5E);
	MakeWord	(0XFFFFFA60);
	MakeWord	(0XFFFFFA62);
	MakeWord	(0XFFFFFA64);
	MakeWord	(0XFFFFFA66);
	MakeWord	(0XFFFFFA68);
	MakeWord	(0XFFFFFA6A);
	MakeWord	(0XFFFFFA6C);
	MakeWord	(0XFFFFFA6E);
	MakeWord	(0XFFFFFA70);
	MakeWord	(0XFFFFFA72);
	MakeWord	(0XFFFFFA74);
	MakeWord	(0XFFFFFA76);
	MakeWord	(0XFFFFFA80);
	MakeDword	(0XFFFFFA84);
	MakeWord	(0XFFFFFAC0);
	MakeDword	(0XFFFFFAC4);
	MakeWord	(0XFFFFFB00);
	MakeWord	(0XFFFFFB04);
	MakeWord	(0XFFFFFB40);
	MakeDword	(0XFFFFFB44);
	MakeWord	(0XFFFFFB80);
	MakeDword	(0XFFFFFB84);
	MakeWord	(0XFFFFFC00);
	MakeByte	(0XFFFFFC04);
	MakeByte	(0XFFFFFC05);
	MakeWord	(0XFFFFFC08);
	MakeWord	(0XFFFFFC0A);
	MakeByte	(0XFFFFFC15);
	MakeByte	(0XFFFFFC16);
	MakeByte	(0XFFFFFC17);
	MakeWord	(0XFFFFFC18);
	MakeWord	(0XFFFFFC1A);
	MakeWord	(0XFFFFFC1C);
	MakeByte	(0XFFFFFC1E);
	MakeByte	(0XFFFFFC1F);
	MakeWord	(0XFFFFFD00);
	MakeWord	(0XFFFFFD02);
	MakeWord	(0XFFFFFD04);
	MakeWord	(0XFFFFFD0A);
	MakeWord	(0XFFFFFD14);
	MakeWord	(0XFFFFFD20);
	MakeWord	(0XFFFFFD22);
	MakeWord	(0XFFFFFD24);
	MakeWord	(0XFFFFFD26);
	MakeWord	(0XFFFFFD28);
	MakeWord	(0XFFFFFD2A);
	MakeWord	(0XFFFFFD2C);
	MakeWord	(0XFFFFFD2E);
	MakeWord	(0XFFFFFD30);
	MakeWord	(0XFFFFFD32);
	MakeWord	(0XFFFFFD34);
	MakeWord	(0XFFFFFD36);
	MakeWord	(0XFFFFFD38);
	MakeWord	(0XFFFFFD3A);
	MakeWord	(0XFFFFFD3C);
	MakeByte	(0XFFFFFD40);
	MakeByte	(0XFFFFFD41);
	MakeByte	(0XFFFFFD42);
	MakeByte	(0XFFFFFD43);
	MakeByte	(0XFFFFFD44);
	MakeByte	(0XFFFFFD45);
	MakeByte	(0XFFFFFD46);
	MakeByte	(0XFFFFFD47);
	MakeByte	(0XFFFFFD48);
	MakeByte	(0XFFFFFD49);
	MakeByte	(0XFFFFFD4A);
	MakeByte	(0XFFFFFD4B);
	MakeByte	(0XFFFFFD4C);
	MakeByte	(0XFFFFFD4D);
	MakeByte	(0XFFFFFD4E);
	MakeWord	(0XFFFFFE00);
	MakeWord	(0XFFFFFE08);
	MakeWord	(0XFFFFFE0A);
	MakeDword	(0XFFFFFE0C);
	MakeDword	(0XFFFFFE10);
	MakeDword	(0XFFFFFE14);
	MakeDword	(0XFFFFFE18);
	MakeDword	(0XFFFFFE1C);
	MakeByte	(0XFFFFFE20);
	MakeByte	(0XFFFFFE21);
	MakeWord	(0XFFFFFF00);
	MakeWord	(0XFFFFFF06);
	MakeWord	(0XFFFFFF08);
	MakeWord	(0XFFFFFF10);
	MakeWord	(0XFFFFFF12);
	MakeWord	(0XFFFFFF16);
	MakeWord	(0XFFFFFF1A);
	MakeWord	(0XFFFFFF20);
	MakeWord	(0XFFFFFF22);
	MakeWord	(0XFFFFFF30);
	MakeWord	(0XFFFFFF32);
	MakeWord	(0XFFFFFF34);
	MakeWord	(0XFFFFFF36);
	MakeWord	(0XFFFFFF38);
	MakeDword	(0XFFFFFF40);
	MakeWord	(0XFFFFFF44);
	MakeWord	(0XFFFFFF46);
	MakeDword	(0XFFFFFF50);
	MakeWord	(0XFFFFFF54);
	MakeWord	(0XFFFFFF56);
	MakeWord	(0XFFFFFF60);
	MakeDword	(0XFFFFFF64);
	MakeWord	(0XFFFFFF6A);
	MakeWord	(0XFFFFFF70);
	MakeDword	(0XFFFFFF74);
	MakeWord	(0XFFFFFF7A);
	MakeWord	(0XFFFFFF80);
	MakeWord	(0XFFFFFF90);
	MakeWord	(0XFFFFFFA0);
	MakeDword	(0XFFFFFFA4);
	MakeWord	(0XFFFFFFB0);
	MakeDword	(0XFFFFFFB4);
	MakeWord	(0XFFFFFFC0);
	MakeWord	(0XFFFFFFD0);
	MakeDword	(0XFFFFFFD4);
	MakeWord	(0XFFFFFFE0);
	MakeWord	(0XFFFFFFE2);
	MakeWord	(0XFFFFFFE4);
	MakeDword	(0XFFFFFFE8);
	MakeDword	(0XFFFFFFEC);
	MakeWord	(0XFFFFFFF0);
	MakeWord	(0XFFFFFFF2);
	MakeWord	(0XFFFFFFF4);
	MakeDword	(0XFFFFFFF8);
}

static Functions_0(void) {

	MakeFunction    (0X54C,0X55C);
	SetFunctionFlags(0X54C,0x401);
	MakeFunction    (0X57E,0X596);
	SetFunctionFlags(0X57E,0x400);
	MakeFunction    (0X6D2,0X718);
	SetFunctionFlags(0X6D2,0x400);
	MakeFunction    (0X718,0X72A);
	SetFunctionFlags(0X718,0x400);
	MakeFunction    (0X72A,0X75A);
	SetFunctionFlags(0X72A,0x400);
	MakeFunction    (0X75A,0X76A);
	SetFunctionFlags(0X75A,0x400);
	MakeFunction    (0X76A,0X77A);
	SetFunctionFlags(0X76A,0x400);
	MakeFunction    (0X77A,0X794);
	SetFunctionFlags(0X77A,0x400);
	MakeFunction    (0X794,0X7B6);
	SetFunctionFlags(0X794,0x410);
	MakeFrame(0X794, 0X6, 4, 0);
	MakeFunction    (0X7B6,0X7D4);
	SetFunctionFlags(0X7B6,0x410);
	MakeFrame(0X7B6, 0X6, 4, 0);
	MakeFunction    (0X7D4,0X7E2);
	SetFunctionFlags(0X7D4,0x400);
	MakeFunction    (0X7E2,0X806);
	SetFunctionFlags(0X7E2,0x400);
	MakeFunction    (0X80E,0X848);
	SetFunctionFlags(0X80E,0x401);
	MakeFunction    (0X850,0XA52);
	SetFunctionFlags(0X850,0x411);
	MakeFrame(0X850, 0X41D0, 4, 0);
	MakeFunction    (0XA52,0XAA0);
	SetFunctionFlags(0XA52,0x400);
	MakeFunction    (0XAA0,0XD6E);
	SetFunctionFlags(0XAA0,0x410);
	MakeFrame(0XAA0, 0X1A, 4, 0);
	MakeFunction    (0XD6E,0XDEA);
	SetFunctionFlags(0XD6E,0x400);
	MakeFunction    (0XDEA,0XE04);
	SetFunctionFlags(0XDEA,0x400);
	MakeFunction    (0XE0C,0XE2C);
	SetFunctionFlags(0XE0C,0x400);
	MakeFunction    (0XE32,0XE52);
	SetFunctionFlags(0XE32,0x400);
	MakeFunction    (0XE52,0XEF4);
	SetFunctionFlags(0XE52,0x400);
	MakeFunction    (0XEF4,0XF1C);
	SetFunctionFlags(0XEF4,0x400);
	MakeFunction    (0XF1C,0XF90);
	SetFunctionFlags(0XF1C,0x400);
	MakeFunction    (0XFB8,0XFC0);
	SetFunctionFlags(0XFB8,0x400);
	MakeFunction    (0XFC0,0X1122);
	SetFunctionFlags(0XFC0,0x410);
	MakeFrame(0XFC0, 0XA, 4, 0);
	MakeFunction    (0X1122,0X1216);
	SetFunctionFlags(0X1122,0x400);
	MakeFunction    (0X1216,0X1258);
	SetFunctionFlags(0X1216,0x400);
	MakeFunction    (0X136A,0X138E);
	SetFunctionFlags(0X136A,0x400);
	MakeFunction    (0X138E,0X1626);
	SetFunctionFlags(0X138E,0x400);
	MakeFunction    (0X1626,0X1634);
	SetFunctionFlags(0X1626,0x400);
	MakeFunction    (0X1634,0X1642);
	SetFunctionFlags(0X1634,0x400);
	MakeFunction    (0X16D6,0X16FA);
	SetFunctionFlags(0X16D6,0x400);
	MakeFunction    (0X16FA,0X17FE);
	SetFunctionFlags(0X16FA,0x400);
	MakeFunction    (0X17FE,0X18B6);
	SetFunctionFlags(0X17FE,0x400);
	MakeFunction    (0X1958,0X1B9E);
	SetFunctionFlags(0X1958,0x410);
	MakeFrame(0X1958, 0XC, 4, 0);
	MakeFunction    (0X1B9E,0X1BAE);
	SetFunctionFlags(0X1B9E,0x400);
	MakeFunction    (0X1BB4,0X1BD4);
	SetFunctionFlags(0X1BB4,0x400);
	MakeFunction    (0X1BD4,0X1C26);
	SetFunctionFlags(0X1BD4,0x410);
	MakeFrame(0X1BD4, 0X14, 4, 0);
	MakeFunction    (0X1C26,0X1DEA);
	SetFunctionFlags(0X1C26,0x410);
	MakeFrame(0X1C26, 0X8, 4, 0);
	MakeFunction    (0X1EC8,0X1EFC);
	SetFunctionFlags(0X1EC8,0x400);
	MakeFunction    (0X1EFC,0X1F0E);
	SetFunctionFlags(0X1EFC,0x400);
	MakeFunction    (0X2178,0X22A4);
	SetFunctionFlags(0X2178,0x410);
	MakeFrame(0X2178, 0X7E4C, 4, 0);
	MakeFunction    (0X20000,0X2008A);
	SetFunctionFlags(0X20000,0x410);
	MakeFrame(0X20000, 0X6, 4, 0);
	MakeFunction    (0X2008A,0X200DE);
	SetFunctionFlags(0X2008A,0x400);
	MakeFunction    (0X200DE,0X20644);
	SetFunctionFlags(0X200DE,0x410);
	MakeFrame(0X200DE, 0X6, 4, 0);
	MakeFunction    (0X20644,0X206D4);
	SetFunctionFlags(0X20644,0x400);
	MakeFunction    (0X206D4,0X20718);
	SetFunctionFlags(0X206D4,0x400);
	MakeFunction    (0X20718,0X208D8);
	SetFunctionFlags(0X20718,0x400);
	MakeFunction    (0X208D8,0X20A3A);
	SetFunctionFlags(0X208D8,0x400);
	MakeFunction    (0X20A3A,0X20ACA);
	SetFunctionFlags(0X20A3A,0x400);
	MakeFunction    (0X20ACA,0X20B06);
	SetFunctionFlags(0X20ACA,0x400);
	MakeFunction    (0X20B06,0X20B50);
	SetFunctionFlags(0X20B06,0x400);
	MakeFunction    (0X20B50,0X20BC4);
	SetFunctionFlags(0X20B50,0x400);
	MakeFunction    (0X20BC4,0X20BEC);
	SetFunctionFlags(0X20BC4,0x400);
	MakeFunction    (0X20BEC,0X20C0C);
	SetFunctionFlags(0X20BEC,0x400);
	MakeFunction    (0X20C0C,0X20CB2);
	SetFunctionFlags(0X20C0C,0x400);
	MakeFunction    (0X20CB2,0X20D54);
	SetFunctionFlags(0X20CB2,0x400);
	MakeFrame(0X20CB2, 0X57EA, 0, 0);
	MakeFunction    (0X20D54,0X21094);
	SetFunctionFlags(0X20D54,0x400);
	MakeFunction    (0X21094,0X2132C);
	SetFunctionFlags(0X21094,0x400);
	MakeFunction    (0X2132C,0X21480);
	SetFunctionFlags(0X2132C,0x400);
	MakeFunction    (0X21480,0X214D6);
	SetFunctionFlags(0X21480,0x400);
	MakeFunction    (0X214D6,0X21508);
	SetFunctionFlags(0X214D6,0x400);
	MakeFunction    (0X21508,0X21546);
	SetFunctionFlags(0X21508,0x400);
	MakeFunction    (0X21546,0X21580);
	SetFunctionFlags(0X21546,0x400);
	MakeFunction    (0X21580,0X21662);
	SetFunctionFlags(0X21580,0x400);
	MakeFunction    (0X21662,0X216EE);
	SetFunctionFlags(0X21662,0x400);
	MakeFunction    (0X216EE,0X2180E);
	SetFunctionFlags(0X216EE,0x400);
	MakeFunction    (0X2180E,0X2192A);
	SetFunctionFlags(0X2180E,0x410);
	MakeFrame(0X2180E, 0X14, 4, 0);
	MakeFunction    (0X2192A,0X21930);
	SetFunctionFlags(0X2192A,0x400);
	MakeFunction    (0X21930,0X21C8A);
	SetFunctionFlags(0X21930,0x410);
	MakeFrame(0X21930, 0X6, 4, 0);
	MakeFunction    (0X21C8A,0X21CCA);
	SetFunctionFlags(0X21C8A,0x400);
	MakeFunction    (0X21CCA,0X21F2C);
	SetFunctionFlags(0X21CCA,0x400);
	MakeFunction    (0X21F2C,0X220F0);
	SetFunctionFlags(0X21F2C,0x400);
	MakeFunction    (0X220F0,0X222F6);
	SetFunctionFlags(0X220F0,0x400);
	MakeFunction    (0X222F6,0X22322);
	SetFunctionFlags(0X222F6,0x400);
	MakeFunction    (0X22322,0X223EA);
	SetFunctionFlags(0X22322,0x410);
	MakeFrame(0X22322, 0X20, 4, 0);
	MakeFunction    (0X223EA,0X229C4);
	SetFunctionFlags(0X223EA,0x410);
	MakeFrame(0X223EA, 0X50E8, 4, 0);
	MakeFunction    (0X229C4,0X229DE);
	SetFunctionFlags(0X229C4,0x400);
	MakeFunction    (0X229DE,0X22D9A);
	SetFunctionFlags(0X229DE,0x410);
	MakeFrame(0X229DE, 0X50C2, 4, 0);
	MakeFunction    (0X22D9A,0X22EB8);
	SetFunctionFlags(0X22D9A,0x400);
	MakeFrame(0X22D9A, 0X50B8, 0, 0);
	MakeFunction    (0X22EB8,0X22F02);
	SetFunctionFlags(0X22EB8,0x410);
	MakeFrame(0X22EB8, 0X6, 4, 0);
	MakeFunction    (0X22F02,0X22F40);
	SetFunctionFlags(0X22F02,0x400);
	MakeFunction    (0X22F40,0X22F92);
	SetFunctionFlags(0X22F40,0x400);
	MakeFunction    (0X22F92,0X2321E);
	SetFunctionFlags(0X22F92,0x410);
	MakeFrame(0X22F92, 0X8, 4, 0);
	MakeFunction    (0X2321E,0X23282);
	SetFunctionFlags(0X2321E,0x410);
	MakeFrame(0X2321E, 0X6, 4, 0);
	MakeFunction    (0X23282,0X23314);
	SetFunctionFlags(0X23282,0x400);
	MakeFunction    (0X23314,0X2340C);
	SetFunctionFlags(0X23314,0x410);
	MakeFrame(0X23314, 0X6, 4, 0);
	MakeFunction    (0X2340C,0X2407E);
	SetFunctionFlags(0X2340C,0x410);
	MakeFrame(0X2340C, 0XA, 4, 0);
	MakeLocal(0X2340C, 0X2407E, "d2", "d2_ThrottleSource");
	MakeLocal(0X2340C, 0X2407E, "d1", "d1_IdlePercentageNotClamped");
	MakeNameEx(0X23A7E, "DetermineIdleContribution", SN_LOCAL);
	MakeNameEx(0X23DBA, "IdleLearningAmount?", SN_LOCAL);
	MakeFunction    (0X2407E,0X24094);
	SetFunctionFlags(0X2407E,0x400);
	MakeFrame(0X2407E, 0, 0, 0);
	MakeFunction    (0X24094,0X24240);
	SetFunctionFlags(0X24094,0x410);
	MakeFrame(0X24094, 0X26, 4, 0);
	MakeFunction    (0X24240,0X242EE);
	SetFunctionFlags(0X24240,0x400);
	MakeFunction    (0X242EE,0X24338);
	SetFunctionFlags(0X242EE,0x400);
	MakeFunction    (0X24338,0X2437E);
	SetFunctionFlags(0X24338,0x400);
	MakeFrame(0X24338, 0X5046, 0, 0);
	MakeFunction    (0X2437E,0X243A0);
	SetFunctionFlags(0X2437E,0x400);
	MakeFunction    (0X243A0,0X243A8);
	SetFunctionFlags(0X243A0,0x400);
	MakeFunction    (0X243A8,0X2452C);
	SetFunctionFlags(0X243A8,0x410);
	MakeFrame(0X243A8, 0X5058, 4, 0);
	MakeFunction    (0X2452C,0X246E0);
	SetFunctionFlags(0X2452C,0x400);
	MakeFunction    (0X246E0,0X24716);
	SetFunctionFlags(0X246E0,0x410);
	MakeFrame(0X246E0, 0X8, 4, 0);
	MakeFunction    (0X24716,0X261CA);
	SetFunctionFlags(0X24716,0x410);
	MakeFrame(0X24716, 0X28, 4, 0);
	MakeFunction    (0X261CA,0X2637C);
	SetFunctionFlags(0X261CA,0x400);
	MakeFunction    (0X2637C,0X2639A);
	SetFunctionFlags(0X2637C,0x400);
	MakeFunction    (0X2639A,0X263A8);
	SetFunctionFlags(0X2639A,0x400);
	MakeFunction    (0X2653C,0X2654C);
	SetFunctionFlags(0X2653C,0x400);
	MakeFunction    (0X2654C,0X26578);
	SetFunctionFlags(0X2654C,0x400);
	MakeFunction    (0X26578,0X265AE);
	SetFunctionFlags(0X26578,0x400);
	MakeFunction    (0X265AE,0X265B4);
	SetFunctionFlags(0X265AE,0x400);
	MakeFunction    (0X265B4,0X265BA);
	SetFunctionFlags(0X265B4,0x400);
	MakeFunction    (0X265BA,0X26608);
	SetFunctionFlags(0X265BA,0x400);
	MakeFunction    (0X26608,0X2662E);
	SetFunctionFlags(0X26608,0x400);
	MakeFunction    (0X2663C,0X26664);
	SetFunctionFlags(0X2663C,0x400);
	MakeFunction    (0X26664,0X2666A);
	SetFunctionFlags(0X26664,0x400);
	MakeFunction    (0X2666C,0X26672);
	SetFunctionFlags(0X2666C,0x400);
	MakeFunction    (0X26672,0X266D2);
	SetFunctionFlags(0X26672,0x410);
	MakeFrame(0X26672, 0X6, 4, 0);
	MakeFunction    (0X266D2,0X26900);
	SetFunctionFlags(0X266D2,0x410);
	MakeFrame(0X266D2, 0XA, 4, 0);
	MakeFunction    (0X26900,0X26946);
	SetFunctionFlags(0X26900,0x400);
	MakeFunction    (0X26946,0X2696E);
	SetFunctionFlags(0X26946,0x400);
	MakeFunction    (0X2696E,0X26994);
	SetFunctionFlags(0X2696E,0x400);
	MakeFunction    (0X26994,0X269BA);
	SetFunctionFlags(0X26994,0x400);
	MakeFunction    (0X269BA,0X269C2);
	SetFunctionFlags(0X269BA,0x400);
	MakeFunction    (0X269C2,0X269DE);
	SetFunctionFlags(0X269C2,0x400);
	MakeFunction    (0X269DE,0X26B32);
	SetFunctionFlags(0X269DE,0x400);
	MakeFunction    (0X26B32,0X26CDE);
	SetFunctionFlags(0X26B32,0x410);
	MakeFrame(0X26B32, 0XC, 4, 0);
	MakeFunction    (0X26CDE,0X26DB8);
	SetFunctionFlags(0X26CDE,0x400);
	MakeFunction    (0X26DB8,0X26DFA);
	SetFunctionFlags(0X26DB8,0x410);
	MakeFrame(0X26DB8, 0X8, 4, 0);
	MakeFunction    (0X26DFA,0X27128);
	SetFunctionFlags(0X26DFA,0x410);
	MakeFrame(0X26DFA, 0X74A8, 4, 0);
	MakeFunction    (0X27128,0X27258);
	SetFunctionFlags(0X27128,0x410);
	MakeFrame(0X27128, 0X6, 4, 0);
	MakeFunction    (0X27258,0X27338);
	SetFunctionFlags(0X27258,0x400);
	MakeFunction    (0X27338,0X27436);
	SetFunctionFlags(0X27338,0x400);
	MakeFunction    (0X27436,0X2743C);
	SetFunctionFlags(0X27436,0x400);
	MakeFunction    (0X2743C,0X27442);
	SetFunctionFlags(0X2743C,0x400);
	MakeFunction    (0X27442,0X27482);
	SetFunctionFlags(0X27442,0x410);
	MakeFrame(0X27442, 0XA, 4, 0);
	MakeFunction    (0X27482,0X2749A);
	SetFunctionFlags(0X27482,0x400);
	MakeFunction    (0X2749A,0X274A0);
	SetFunctionFlags(0X2749A,0x400);
	MakeFunction    (0X274A0,0X274AE);
	SetFunctionFlags(0X274A0,0x400);
	MakeFunction    (0X274AE,0X274B4);
	SetFunctionFlags(0X274AE,0x400);
	MakeFunction    (0X274B4,0X274BA);
	SetFunctionFlags(0X274B4,0x400);
	MakeFunction    (0X274BA,0X274C0);
	SetFunctionFlags(0X274BA,0x400);
	MakeFunction    (0X274C0,0X274C6);
	SetFunctionFlags(0X274C0,0x400);
	MakeFunction    (0X274C6,0X274E4);
	SetFunctionFlags(0X274C6,0x400);
	MakeFunction    (0X274E4,0X27572);
	SetFunctionFlags(0X274E4,0x400);
	MakeFunction    (0X27572,0X27590);
	SetFunctionFlags(0X27572,0x400);
	MakeFunction    (0X27590,0X27622);
	SetFunctionFlags(0X27590,0x400);
	MakeFunction    (0X27622,0X27642);
	SetFunctionFlags(0X27622,0x400);
	MakeFunction    (0X27642,0X2767E);
	SetFunctionFlags(0X27642,0x400);
	MakeFunction    (0X2767E,0X276B4);
	SetFunctionFlags(0X2767E,0x400);
	MakeFunction    (0X276B4,0X276D4);
	SetFunctionFlags(0X276B4,0x400);
	MakeFunction    (0X276D4,0X276F4);
	SetFunctionFlags(0X276D4,0x400);
	MakeFunction    (0X276F4,0X27712);
	SetFunctionFlags(0X276F4,0x400);
	MakeFunction    (0X27712,0X27738);
	SetFunctionFlags(0X27712,0x400);
	MakeFunction    (0X27788,0X277CE);
	SetFunctionFlags(0X27788,0x400);
	MakeFunction    (0X277CE,0X27806);
	SetFunctionFlags(0X277CE,0x400);
	MakeFunction    (0X27806,0X27940);
	SetFunctionFlags(0X27806,0x410);
	MakeFrame(0X27806, 0XC, 4, 0);
	MakeFunction    (0X27966,0X27A50);
	SetFunctionFlags(0X27966,0x410);
	MakeFrame(0X27966, 0XE, 4, 0);
	MakeFunction    (0X27A50,0X27AA6);
	SetFunctionFlags(0X27A50,0x400);
	MakeFunction    (0X27AA6,0X27AD2);
	SetFunctionFlags(0X27AA6,0x400);
	MakeFunction    (0X27AD2,0X27B26);
	SetFunctionFlags(0X27AD2,0x400);
	MakeFunction    (0X27B26,0X27C78);
	SetFunctionFlags(0X27B26,0x410);
	MakeFrame(0X27B26, 0X8, 4, 0);
	MakeFunction    (0X27C78,0X280F8);
	SetFunctionFlags(0X27C78,0x400);
	MakeFunction    (0X280F8,0X2822A);
	SetFunctionFlags(0X280F8,0x400);
	MakeFunction    (0X2822A,0X2822C);
	SetFunctionFlags(0X2822A,0x400);
	MakeFunction    (0X2822C,0X28250);
	SetFunctionFlags(0X2822C,0x400);
	MakeFunction    (0X28250,0X28274);
	SetFunctionFlags(0X28250,0x400);
	MakeFunction    (0X28274,0X2828E);
	SetFunctionFlags(0X28274,0x400);
	MakeFunction    (0X2828E,0X282B2);
	SetFunctionFlags(0X2828E,0x400);
	MakeFunction    (0X282B2,0X282C4);
	SetFunctionFlags(0X282B2,0x400);
	MakeFunction    (0X282C4,0X286D2);
	SetFunctionFlags(0X282C4,0x410);
	MakeFrame(0X282C4, 0X7E66, 4, 0);
	MakeFunction    (0X286D2,0X286FA);
	SetFunctionFlags(0X286D2,0x400);
	MakeFunction    (0X286FA,0X2872A);
	SetFunctionFlags(0X286FA,0x401);
	MakeFunction    (0X28730,0X28750);
	SetFunctionFlags(0X28730,0x410);
	MakeFrame(0X28730, 0XA, 4, 0);
	MakeFunction    (0X292CE,0X29320);
	SetFunctionFlags(0X292CE,0x400);
	MakeFunction    (0X29320,0X29442);
	SetFunctionFlags(0X29320,0x400);
	MakeFunction    (0X29442,0X2971C);
	SetFunctionFlags(0X29442,0x410);
	MakeFrame(0X29442, 0X26, 4, 0);
	MakeFunction    (0X2971C,0X29744);
	SetFunctionFlags(0X2971C,0x400);
	MakeFrame(0X2971C, 0, 0, 0);
	MakeFunction    (0X29744,0X29746);
	SetFunctionFlags(0X29744,0x400);
	MakeFunction    (0X29746,0X29780);
	SetFunctionFlags(0X29746,0x401);
	MakeFunction    (0X29782,0X297D0);
	SetFunctionFlags(0X29782,0x400);
	MakeFunction    (0X297D0,0X29808);
	SetFunctionFlags(0X297D0,0x400);
	MakeFunction    (0X29808,0X2984E);
	SetFunctionFlags(0X29808,0x400);
	MakeFunction    (0X2984E,0X29880);
	SetFunctionFlags(0X2984E,0x400);
	MakeFunction    (0X29880,0X298CA);
	SetFunctionFlags(0X29880,0x400);
	MakeFunction    (0X298CA,0X298F8);
	SetFunctionFlags(0X298CA,0x400);
	MakeFunction    (0X298F8,0X29916);
	SetFunctionFlags(0X298F8,0x400);
	MakeFunction    (0X29916,0X29980);
	SetFunctionFlags(0X29916,0x400);
	MakeFunction    (0X29980,0X299AC);
	SetFunctionFlags(0X29980,0x400);
	MakeFunction    (0X299AC,0X29A74);
	SetFunctionFlags(0X299AC,0x410);
	MakeFrame(0X299AC, 0X6, 4, 0);
	MakeFunction    (0X29A74,0X29EC6);
	SetFunctionFlags(0X29A74,0x410);
	MakeFrame(0X29A74, 0X6, 4, 0);
	MakeFunction    (0X29EC6,0X2A252);
	SetFunctionFlags(0X29EC6,0x410);
	MakeFrame(0X29EC6, 0X5ADA, 4, 0);
	MakeFunction    (0X2A252,0X2A656);
	SetFunctionFlags(0X2A252,0x400);
	MakeFunction    (0X2A656,0X2A86C);
	SetFunctionFlags(0X2A656,0x400);
	MakeFrame(0X2A656, 0X59A8, 0, 0);
	MakeFunction    (0X2A86C,0X2AB38);
	SetFunctionFlags(0X2A86C,0x400);
	MakeFunction    (0X2AB38,0X2B13A);
	SetFunctionFlags(0X2AB38,0x410);
	MakeFrame(0X2AB38, 0X6366, 4, 0);
	MakeFunction    (0X2B13A,0X2B636);
	SetFunctionFlags(0X2B13A,0x410);
	MakeFrame(0X2B13A, 0X7F50, 4, 0);
	MakeFunction    (0X2B636,0X2B656);
	SetFunctionFlags(0X2B636,0x400);
	MakeFunction    (0X2B8B0,0X2BA18);
	SetFunctionFlags(0X2B8B0,0x400);
	MakeFunction    (0X2BA40,0X2C35A);
	SetFunctionFlags(0X2BA40,0x410);
	MakeFrame(0X2BA40, 0X8, 4, 0);
	MakeFunction    (0X2C35A,0X2C3C0);
	SetFunctionFlags(0X2C35A,0x410);
	MakeFrame(0X2C35A, 0X6, 4, 0);
	MakeFunction    (0X2C3C0,0X2C4F4);
	SetFunctionFlags(0X2C3C0,0x410);
	MakeFrame(0X2C3C0, 0X8, 4, 0);
	MakeFunction    (0X2C4F4,0X2C60E);
	SetFunctionFlags(0X2C4F4,0x400);
	MakeFunction    (0X2C60E,0X2C688);
	SetFunctionFlags(0X2C60E,0x400);
	MakeFunction    (0X2C688,0X2C6DE);
	SetFunctionFlags(0X2C688,0x400);
	MakeFunction    (0X2C6DE,0X2C70E);
	SetFunctionFlags(0X2C6DE,0x400);
	MakeFunction    (0X2C70E,0X2C71E);
	SetFunctionFlags(0X2C70E,0x400);
	MakeFunction    (0X2C7AC,0X2CB22);
	SetFunctionFlags(0X2C7AC,0x410);
	MakeFrame(0X2C7AC, 0XC, 4, 0);
	MakeFunction    (0X2CB22,0X2CB32);
	SetFunctionFlags(0X2CB22,0x400);
	MakeFunction    (0X2CB78,0X2CC1A);
	SetFunctionFlags(0X2CB78,0x400);
	MakeFunction    (0X2CC1A,0X2CC22);
	SetFunctionFlags(0X2CC1A,0x400);
	MakeFunction    (0X2CC22,0X2D1C4);
	SetFunctionFlags(0X2CC22,0x410);
	MakeFrame(0X2CC22, 0X8, 4, 0);
	MakeFunction    (0X2D1C4,0X2D4F2);
	SetFunctionFlags(0X2D1C4,0x400);
	MakeFunction    (0X2D4F2,0X2D620);
	SetFunctionFlags(0X2D4F2,0x410);
	MakeFrame(0X2D4F2, 0X8, 4, 0);
	MakeFunction    (0X2D620,0X2D6D2);
	SetFunctionFlags(0X2D620,0x400);
	MakeFunction    (0X2D6D2,0X2D6FA);
	SetFunctionFlags(0X2D6D2,0x400);
	MakeFunction    (0X2D6FA,0X2D722);
	SetFunctionFlags(0X2D6FA,0x400);
	MakeFunction    (0X2D722,0X2D76E);
	SetFunctionFlags(0X2D722,0x400);
	MakeFunction    (0X2D8D6,0X2D978);
	SetFunctionFlags(0X2D8D6,0x400);
	MakeFunction    (0X2D978,0X2D986);
	SetFunctionFlags(0X2D978,0x400);
	MakeFunction    (0X2D9E4,0X2DA2A);
	SetFunctionFlags(0X2D9E4,0x400);
	MakeFunction    (0X2DA2A,0X2DAA6);
	SetFunctionFlags(0X2DA2A,0x400);
	MakeFunction    (0X2DAA6,0X2DACE);
	SetFunctionFlags(0X2DAA6,0x400);
	MakeFunction    (0X2DACE,0X2DED8);
	SetFunctionFlags(0X2DACE,0x410);
	MakeFrame(0X2DACE, 0X6, 4, 0);
	MakeFunction    (0X2DED8,0X2E010);
	SetFunctionFlags(0X2DED8,0x400);
	MakeFunction    (0X2E010,0X2E27C);
	SetFunctionFlags(0X2E010,0x410);
	MakeFrame(0X2E010, 0X6, 4, 0);
	MakeFunction    (0X2E27C,0X2E438);
	SetFunctionFlags(0X2E27C,0x400);
	MakeFunction    (0X2E438,0X2E620);
	SetFunctionFlags(0X2E438,0x400);
	MakeFunction    (0X2E620,0X2E67E);
	SetFunctionFlags(0X2E620,0x400);
	MakeFunction    (0X2E67E,0X2E68C);
	SetFunctionFlags(0X2E67E,0x400);
	MakeFunction    (0X2E716,0X2E71E);
	SetFunctionFlags(0X2E716,0x400);
	MakeFunction    (0X2E71E,0X2E726);
	SetFunctionFlags(0X2E71E,0x400);
	MakeFunction    (0X2E726,0X2EA9A);
	SetFunctionFlags(0X2E726,0x410);
	MakeFrame(0X2E726, 0X6, 4, 0);
	MakeFunction    (0X2EA9A,0X2EBD6);
	SetFunctionFlags(0X2EA9A,0x410);
	MakeFrame(0X2EA9A, 0XA, 4, 0);
	MakeFunction    (0X2EBD6,0X2F19C);
	SetFunctionFlags(0X2EBD6,0x410);
	MakeFrame(0X2EBD6, 0X6, 4, 0);
	MakeFunction    (0X2F19C,0X2F1AC);
	SetFunctionFlags(0X2F19C,0x400);
	MakeFunction    (0X2F2FE,0X2F316);
	SetFunctionFlags(0X2F2FE,0x400);
	MakeFunction    (0X2F316,0X2F386);
	SetFunctionFlags(0X2F316,0x400);
	MakeFunction    (0X2F386,0X2F512);
	SetFunctionFlags(0X2F386,0x400);
	MakeFunction    (0X2F512,0X2F5BC);
	SetFunctionFlags(0X2F512,0x400);
	MakeFunction    (0X2F5BC,0X2F712);
	SetFunctionFlags(0X2F5BC,0x400);
	MakeFunction    (0X2F712,0X2F780);
	SetFunctionFlags(0X2F712,0x400);
	MakeFunction    (0X2F780,0X2FAFC);
	SetFunctionFlags(0X2F780,0x410);
	MakeFrame(0X2F780, 0XA, 4, 0);
	MakeFunction    (0X2FAFC,0X2FC1E);
	SetFunctionFlags(0X2FAFC,0x400);
	MakeFunction    (0X2FC1E,0X2FC30);
	SetFunctionFlags(0X2FC1E,0x400);
	MakeFunction    (0X2FC30,0X2FC3E);
	SetFunctionFlags(0X2FC30,0x400);
	MakeFunction    (0X2FC54,0X2FC92);
	SetFunctionFlags(0X2FC54,0x410);
	MakeFrame(0X2FC54, 0X6, 4, 0);
	MakeFunction    (0X2FC92,0X2FF9E);
	SetFunctionFlags(0X2FC92,0x400);
	MakeFunction    (0X2FF9E,0X2FFB0);
	SetFunctionFlags(0X2FF9E,0x400);
	MakeFunction    (0X30368,0X30566);
	SetFunctionFlags(0X30368,0x410);
	MakeFrame(0X30368, 0X6, 4, 0);
	MakeFunction    (0X30566,0X3068C);
	SetFunctionFlags(0X30566,0x400);
	MakeFunction    (0X3068C,0X307A4);
	SetFunctionFlags(0X3068C,0x410);
	MakeFrame(0X3068C, 0X6, 4, 0);
	MakeFunction    (0X307A4,0X307A6);
	SetFunctionFlags(0X307A4,0x400);
	MakeFunction    (0X307A6,0X308A8);
	SetFunctionFlags(0X307A6,0x400);
	MakeFunction    (0X308A8,0X3090C);
	SetFunctionFlags(0X308A8,0x400);
	MakeFunction    (0X3090C,0X30CA4);
	SetFunctionFlags(0X3090C,0x410);
	MakeFrame(0X3090C, 0X6, 4, 0);
	MakeFunction    (0X30CA4,0X30DA8);
	SetFunctionFlags(0X30CA4,0x400);
	MakeFunction    (0X30DA8,0X31318);
	SetFunctionFlags(0X30DA8,0x410);
	MakeFrame(0X30DA8, 0X5EF4, 4, 0);
	MakeFunction    (0X31318,0X313D8);
	SetFunctionFlags(0X31318,0x400);
	MakeFunction    (0X313D8,0X3140A);
	SetFunctionFlags(0X313D8,0x400);
	MakeFunction    (0X3140A,0X3141C);
	SetFunctionFlags(0X3140A,0x400);
	MakeFunction    (0X3158C,0X316E2);
	SetFunctionFlags(0X3158C,0x400);
	MakeFunction    (0X316E2,0X316EA);
	SetFunctionFlags(0X316E2,0x400);
	MakeFunction    (0X316EA,0X31AE0);
	SetFunctionFlags(0X316EA,0x410);
	MakeFrame(0X316EA, 0X6, 4, 0);
	MakeFunction    (0X31AE0,0X31AE2);
	SetFunctionFlags(0X31AE0,0x400);
	MakeFunction    (0X31AE2,0X31E86);
	SetFunctionFlags(0X31AE2,0x400);
	MakeFunction    (0X31E86,0X31F5C);
	SetFunctionFlags(0X31E86,0x400);
	MakeFunction    (0X31F5C,0X31FCA);
	SetFunctionFlags(0X31F5C,0x410);
	MakeFrame(0X31F5C, 0X6, 4, 0);
	MakeFunction    (0X31FCA,0X32164);
	SetFunctionFlags(0X31FCA,0x400);
	MakeFunction    (0X32164,0X321E2);
	SetFunctionFlags(0X32164,0x400);
	MakeFunction    (0X321E2,0X32262);
	SetFunctionFlags(0X321E2,0x400);
	MakeFunction    (0X32262,0X32324);
	SetFunctionFlags(0X32262,0x410);
	MakeFrame(0X32262, 0X6, 4, 0);
	MakeFunction    (0X32324,0X32510);
	SetFunctionFlags(0X32324,0x400);
	MakeFunction    (0X32510,0X32550);
	SetFunctionFlags(0X32510,0x400);
	MakeFunction    (0X32678,0X32738);
	SetFunctionFlags(0X32678,0x400);
	MakeFunction    (0X32738,0X327CA);
	SetFunctionFlags(0X32738,0x400);
	MakeFunction    (0X327CA,0X32828);
	SetFunctionFlags(0X327CA,0x410);
	MakeFrame(0X327CA, 0X6, 4, 0);
	MakeFunction    (0X32828,0X3284E);
	SetFunctionFlags(0X32828,0x400);
	MakeFrame(0X32828, 0X2000, 0, 0);
	MakeFunction    (0X3284E,0X3292C);
	SetFunctionFlags(0X3284E,0x410);
	MakeFrame(0X3284E, 0X6, 4, 0);
	MakeFunction    (0X3292C,0X32944);
	SetFunctionFlags(0X3292C,0x410);
	MakeFrame(0X3292C, 0X6, 4, 0);
	MakeFunction    (0X32944,0X32952);
	SetFunctionFlags(0X32944,0x400);
	MakeFunction    (0X3298C,0X32A0C);
	SetFunctionFlags(0X3298C,0x400);
	MakeFrame(0X3298C, 0X2004, 0, 0);
	MakeFunction    (0X32A0C,0X32DC6);
	SetFunctionFlags(0X32A0C,0x410);
	MakeFrame(0X32A0C, 0X2018, 4, 0);
	MakeFunction    (0X32DC6,0X32E6A);
	SetFunctionFlags(0X32DC6,0x400);
	MakeFrame(0X32DC6, 0X1E12, 0, 0);
	MakeFunction    (0X32E6A,0X32EAA);
	SetFunctionFlags(0X32E6A,0x400);
	MakeFunction    (0X32EAA,0X32F08);
	SetFunctionFlags(0X32EAA,0x400);
	MakeFrame(0X32EAA, 0X7D7A, 0, 0);
	MakeFunction    (0X32F08,0X32F54);
	SetFunctionFlags(0X32F08,0x400);
	MakeFunction    (0X32F54,0X334DE);
	SetFunctionFlags(0X32F54,0x410);
	MakeFrame(0X32F54, 0X7F2A, 4, 0);
	MakeFunction    (0X334DE,0X334E6);
	SetFunctionFlags(0X334DE,0x400);
	MakeFunction    (0X334E6,0X334F8);
	SetFunctionFlags(0X334E6,0x400);
	MakeFunction    (0X334F8,0X33930);
	SetFunctionFlags(0X334F8,0x400);
	MakeFunction    (0X33930,0X33942);
	SetFunctionFlags(0X33930,0x400);
	MakeFunction    (0X33B84,0X33B92);
	SetFunctionFlags(0X33B84,0x400);
	MakeFunction    (0X33CBE,0X33D02);
	SetFunctionFlags(0X33CBE,0x400);
	MakeFrame(0X33CBE, 0X60AE, 0, 0);
	MakeFunction    (0X33D02,0X33E7E);
	SetFunctionFlags(0X33D02,0x400);
	MakeFunction    (0X33E7E,0X33EC8);
	SetFunctionFlags(0X33E7E,0x400);
	MakeFunction    (0X33EC8,0X33F14);
	SetFunctionFlags(0X33EC8,0x400);
	MakeFrame(0X33EC8, 0X60AC, 0, 0);
	MakeFunction    (0X33F14,0X33FC6);
	SetFunctionFlags(0X33F14,0x400);
	MakeFrame(0X33F14, 0X60B0, 0, 0);
	MakeFunction    (0X33FC6,0X34180);
	SetFunctionFlags(0X33FC6,0x400);
	MakeFrame(0X33FC6, 0X7DF8, 0, 0);
	MakeFunction    (0X34180,0X3424A);
	SetFunctionFlags(0X34180,0x400);
	MakeFunction    (0X3424A,0X342EE);
	SetFunctionFlags(0X3424A,0x400);
	MakeFunction    (0X342EE,0X3442A);
	SetFunctionFlags(0X342EE,0x400);
	MakeFunction    (0X3442A,0X344B6);
	SetFunctionFlags(0X3442A,0x400);
	MakeFunction    (0X344B6,0X34550);
	SetFunctionFlags(0X344B6,0x410);
	MakeFrame(0X344B6, 0X6092, 4, 0);
	MakeFunction    (0X34550,0X345E6);
	SetFunctionFlags(0X34550,0x400);
	MakeFrame(0X34550, 0X4F26, 0, 0);
	MakeFunction    (0X345E6,0X34628);
	SetFunctionFlags(0X345E6,0x400);
	MakeFunction    (0X34628,0X34636);
	SetFunctionFlags(0X34628,0x400);
	MakeFunction    (0X34694,0X347DC);
	SetFunctionFlags(0X34694,0x400);
	MakeFunction    (0X347DC,0X34852);
	SetFunctionFlags(0X347DC,0x400);
	MakeFrame(0X347DC, 0X4F30, 0, 0);
	MakeFunction    (0X34852,0X34864);
	SetFunctionFlags(0X34852,0x400);
	MakeFunction    (0X348C6,0X349E2);
	SetFunctionFlags(0X348C6,0x410);
	MakeFrame(0X348C6, 0X8, 4, 0);
	MakeNameEx(0X349AC, "CheckFuelPrimingTimer", SN_LOCAL);
	MakeFunction    (0X349E2,0X349F0);
	SetFunctionFlags(0X349E2,0x400);
	MakeFunction    (0X34B00,0X35762);
	SetFunctionFlags(0X34B00,0x410);
	MakeFrame(0X34B00, 0X20, 4, 0);
	MakeFunction    (0X35762,0X3576A);
	SetFunctionFlags(0X35762,0x400);
	MakeFunction    (0X3576A,0X3577C);
	SetFunctionFlags(0X3576A,0x400);
	MakeFunction    (0X3577C,0X3578E);
	SetFunctionFlags(0X3577C,0x400);
	MakeFunction    (0X357CA,0X3580C);
	SetFunctionFlags(0X357CA,0x400);
	MakeFunction    (0X3580C,0X3591C);
	SetFunctionFlags(0X3580C,0x400);
	MakeFunction    (0X3591C,0X3593C);
	SetFunctionFlags(0X3591C,0x400);
	MakeFunction    (0X3593C,0X35A7A);
	SetFunctionFlags(0X3593C,0x400);
	MakeFunction    (0X35A7A,0X35B80);
	SetFunctionFlags(0X35A7A,0x400);
	MakeFunction    (0X35B80,0X35BE4);
	SetFunctionFlags(0X35B80,0x400);
	MakeFunction    (0X35BE4,0X35BEC);
	SetFunctionFlags(0X35BE4,0x400);
	MakeFunction    (0X35BEC,0X35C1A);
	SetFunctionFlags(0X35BEC,0x400);
	MakeFunction    (0X35C1A,0X35C22);
	SetFunctionFlags(0X35C1A,0x400);
	MakeFunction    (0X35C22,0X35C4E);
	SetFunctionFlags(0X35C22,0x400);
	MakeFunction    (0X35C4E,0X35C64);
	SetFunctionFlags(0X35C4E,0x400);
	MakeFunction    (0X35CC0,0X35CFC);
	SetFunctionFlags(0X35CC0,0x400);
	MakeFunction    (0X35CFC,0X35D1C);
	SetFunctionFlags(0X35CFC,0x400);
	MakeFunction    (0X35D1C,0X35FC0);
	SetFunctionFlags(0X35D1C,0x400);
	MakeFunction    (0X35FC0,0X3600A);
	SetFunctionFlags(0X35FC0,0x400);
	MakeFunction    (0X3600A,0X36066);
	SetFunctionFlags(0X3600A,0x400);
	MakeFunction    (0X36066,0X3622E);
	SetFunctionFlags(0X36066,0x400);
	MakeFunction    (0X3622E,0X3647C);
	SetFunctionFlags(0X3622E,0x410);
	MakeFrame(0X3622E, 0X8, 4, 0);
	MakeFunction    (0X3647C,0X364E2);
	SetFunctionFlags(0X3647C,0x400);
	MakeFunction    (0X364E2,0X366BE);
	SetFunctionFlags(0X364E2,0x400);
	MakeFunction    (0X366BE,0X366E4);
	SetFunctionFlags(0X366BE,0x400);
	MakeFunction    (0X366E4,0X36764);
	SetFunctionFlags(0X366E4,0x400);
	MakeFunction    (0X36764,0X36A8C);
	SetFunctionFlags(0X36764,0x410);
	MakeFrame(0X36764, 0X6, 4, 0);
	MakeFunction    (0X36A8C,0X36AAA);
	SetFunctionFlags(0X36A8C,0x400);
	MakeFunction    (0X36AAA,0X36BBA);
	SetFunctionFlags(0X36AAA,0x400);
	MakeFunction    (0X36BBA,0X36E5A);
	SetFunctionFlags(0X36BBA,0x410);
	MakeFrame(0X36BBA, 0X8, 4, 0);
	MakeNameEx(0X36CCC, "GetThrottleFollowerAirflow", SN_LOCAL);
	MakeNameEx(0X36DC8, "ThrottleFollowerDecay", SN_LOCAL);
	MakeNameEx(0X36E52, "Return", SN_LOCAL);
	MakeFunction    (0X36E5A,0X36EAE);
	SetFunctionFlags(0X36E5A,0x400);
	MakeFunction    (0X36EAE,0X36F1C);
	SetFunctionFlags(0X36EAE,0x400);
	MakeFunction    (0X36F1C,0X3714E);
	SetFunctionFlags(0X36F1C,0x400);
	MakeFunction    (0X3714E,0X37724);
	SetFunctionFlags(0X3714E,0x410);
	MakeFrame(0X3714E, 0X7ED0, 4, 0);
	MakeFunction    (0X37724,0X37746);
	SetFunctionFlags(0X37724,0x400);
	MakeFunction    (0X37746,0X3774E);
	SetFunctionFlags(0X37746,0x400);
	MakeFunction    (0X3774E,0X378C6);
	SetFunctionFlags(0X3774E,0x400);
	MakeFunction    (0X378C6,0X378D2);
	SetFunctionFlags(0X378C6,0x400);
	MakeFunction    (0X378D2,0X37906);
	SetFunctionFlags(0X378D2,0x400);
	MakeFunction    (0X37906,0X37912);
	SetFunctionFlags(0X37906,0x400);
	MakeFunction    (0X37912,0X3799E);
	SetFunctionFlags(0X37912,0x400);
	MakeFunction    (0X3799E,0X379B4);
	SetFunctionFlags(0X3799E,0x400);
	MakeFunction    (0X379B4,0X37A02);
	SetFunctionFlags(0X379B4,0x400);
	MakeFunction    (0X37A02,0X37A50);
	SetFunctionFlags(0X37A02,0x400);
	MakeFunction    (0X37A50,0X37C54);
	SetFunctionFlags(0X37A50,0x400);
	MakeFunction    (0X37C54,0X37C70);
	SetFunctionFlags(0X37C54,0x400);
	MakeFunction    (0X37C70,0X37CAE);
	SetFunctionFlags(0X37C70,0x400);
	MakeFunction    (0X37CAE,0X37D56);
	SetFunctionFlags(0X37CAE,0x400);
	MakeFunction    (0X37D56,0X37DB4);
	SetFunctionFlags(0X37D56,0x400);
	MakeFunction    (0X37DB4,0X37DCE);
	SetFunctionFlags(0X37DB4,0x400);
	MakeFunction    (0X37DCE,0X37DEE);
	SetFunctionFlags(0X37DCE,0x400);
	MakeFunction    (0X37DEE,0X37E94);
	SetFunctionFlags(0X37DEE,0x400);
	MakeFunction    (0X37E94,0X37EE6);
	SetFunctionFlags(0X37E94,0x400);
	MakeFunction    (0X37EE6,0X37F4A);
	SetFunctionFlags(0X37EE6,0x400);
	MakeFunction    (0X37F4A,0X37FAE);
	SetFunctionFlags(0X37F4A,0x400);
	MakeFunction    (0X37FAE,0X37FC2);
	SetFunctionFlags(0X37FAE,0x400);
	MakeFunction    (0X37FC2,0X38226);
	SetFunctionFlags(0X37FC2,0x410);
	MakeFrame(0X37FC2, 0X14, 4, 0);
	MakeFunction    (0X38226,0X38238);
	SetFunctionFlags(0X38226,0x410);
	MakeFrame(0X38226, 0X14, 4, 0);
	MakeFunction    (0X3832E,0X3846A);
	SetFunctionFlags(0X3832E,0x410);
	MakeFrame(0X3832E, 0X6, 4, 0);
	MakeFunction    (0X3846A,0X393DC);
	SetFunctionFlags(0X3846A,0x410);
	MakeFrame(0X3846A, 0X8, 4, 0);
	MakeNameEx(0X38558, "SallSaverTableLookup", SN_LOCAL);
	MakeNameEx(0X3856E, "CanWeDoSpeedMode", SN_LOCAL);
	MakeNameEx(0X38864, "HasStartupDelayExpiredForIdle", SN_LOCAL);
	MakeFunction    (0X393DC,0X3942C);
	SetFunctionFlags(0X393DC,0x400);
	MakeFunction    (0X3942C,0X3944C);
	SetFunctionFlags(0X3942C,0x400);
	MakeFunction    (0X3944C,0X3946C);
	SetFunctionFlags(0X3944C,0x400);
	MakeFunction    (0X3946C,0X39530);
	SetFunctionFlags(0X3946C,0x400);
	MakeFunction    (0X39530,0X39546);
	SetFunctionFlags(0X39530,0x400);
	MakeFunction    (0X39546,0X395D6);
	SetFunctionFlags(0X39546,0x400);
	MakeFunction    (0X395D6,0X395EC);
	SetFunctionFlags(0X395D6,0x400);
	MakeFunction    (0X395EC,0X39686);
	SetFunctionFlags(0X395EC,0x400);
	MakeFunction    (0X39686,0X3975A);
	SetFunctionFlags(0X39686,0x410);
	MakeFrame(0X39686, 0X8, 4, 0);
	MakeFunction    (0X3975A,0X39792);
	SetFunctionFlags(0X3975A,0x400);
	MakeFunction    (0X39792,0X397B0);
	SetFunctionFlags(0X39792,0x400);
	MakeFunction    (0X397B0,0X3984E);
	SetFunctionFlags(0X397B0,0x400);
	MakeFunction    (0X3984E,0X39A0E);
	SetFunctionFlags(0X3984E,0x410);
	MakeFrame(0X3984E, 0X6, 4, 0);
	MakeFunction    (0X39A0E,0X39A52);
	SetFunctionFlags(0X39A0E,0x400);
	MakeFunction    (0X39A52,0X39BFE);
	SetFunctionFlags(0X39A52,0x400);
	MakeFunction    (0X39BFE,0X39E12);
	SetFunctionFlags(0X39BFE,0x400);
	MakeFunction    (0X39E12,0X39F12);
	SetFunctionFlags(0X39E12,0x410);
	MakeFrame(0X39E12, 0X6, 4, 0);
	MakeFunction    (0X39F12,0X3A2A8);
	SetFunctionFlags(0X39F12,0x400);
	MakeFunction    (0X3A2A8,0X3A30C);
	SetFunctionFlags(0X3A2A8,0x400);
	MakeFunction    (0X3A30C,0X3A330);
	SetFunctionFlags(0X3A30C,0x400);
	MakeFunction    (0X3A330,0X3A436);
	SetFunctionFlags(0X3A330,0x410);
	MakeFrame(0X3A330, 0X6, 4, 0);
	MakeFunction    (0X3A436,0X3A4CE);
	SetFunctionFlags(0X3A436,0x400);
	MakeFunction    (0X3A4CE,0X3A5CE);
	SetFunctionFlags(0X3A4CE,0x400);
	MakeFunction    (0X3A5CE,0X3A63E);
	SetFunctionFlags(0X3A5CE,0x400);
	MakeFunction    (0X3A63E,0X3A6D0);
	SetFunctionFlags(0X3A63E,0x400);
	MakeFunction    (0X3A6D0,0X3A754);
	SetFunctionFlags(0X3A6D0,0x400);
	MakeFunction    (0X3A754,0X3A8A8);
	SetFunctionFlags(0X3A754,0x400);
	MakeFunction    (0X3AF0C,0X3B12A);
	SetFunctionFlags(0X3AF0C,0x400);
	MakeFunction    (0X3B12A,0X3B1A8);
	SetFunctionFlags(0X3B12A,0x400);
	MakeFunction    (0X3B1A8,0X3B38C);
	SetFunctionFlags(0X3B1A8,0x410);
	MakeFrame(0X3B1A8, 0X6, 4, 0);
	MakeFunction    (0X3B38C,0X3B3DA);
	SetFunctionFlags(0X3B38C,0x400);
	MakeFunction    (0X3B3DA,0X3B474);
	SetFunctionFlags(0X3B3DA,0x400);
	MakeFunction    (0X3B474,0X3B498);
	SetFunctionFlags(0X3B474,0x400);
	MakeFrame(0X3B474, 0X675E, 0, 0);
	MakeFunction    (0X3B498,0X3B4A8);
	SetFunctionFlags(0X3B498,0x400);
	MakeFunction    (0X3B710,0X3B75C);
	SetFunctionFlags(0X3B710,0x400);
	MakeFunction    (0X3B75C,0X3B78C);
	SetFunctionFlags(0X3B75C,0x400);
	MakeFunction    (0X3B78C,0X3B7F0);
	SetFunctionFlags(0X3B78C,0x400);
	MakeFunction    (0X3B7F0,0X3B82A);
	SetFunctionFlags(0X3B7F0,0x400);
	MakeFunction    (0X3B82A,0X3BA1E);
	SetFunctionFlags(0X3B82A,0x400);
	MakeFunction    (0X3BA1E,0X3BA86);
	SetFunctionFlags(0X3BA1E,0x400);
	MakeFunction    (0X3BA86,0X3BA94);
	SetFunctionFlags(0X3BA86,0x400);
	MakeFunction    (0X3BAB2,0X3BB66);
	SetFunctionFlags(0X3BAB2,0x400);
	MakeFunction    (0X3BB66,0X3BC68);
	SetFunctionFlags(0X3BB66,0x400);
	MakeFrame(0X3BB66, 0X629A, 0, 0);
	MakeFunction    (0X3BC68,0X3BC80);
	SetFunctionFlags(0X3BC68,0x400);
	MakeFunction    (0X3BC80,0X3BDC4);
	SetFunctionFlags(0X3BC80,0x400);
	MakeFrame(0X3BC80, 0X62D6, 0, 0);
	MakeFunction    (0X3BDC4,0X3C1CC);
	SetFunctionFlags(0X3BDC4,0x410);
	MakeFrame(0X3BDC4, 0X8, 4, 0);
	MakeFunction    (0X3C1CC,0X3C1EE);
	SetFunctionFlags(0X3C1CC,0x400);
	MakeFunction    (0X3C1EE,0X3C4AC);
	SetFunctionFlags(0X3C1EE,0x410);
	MakeFrame(0X3C1EE, 0X8, 4, 0);
	MakeFunction    (0X3C4AC,0X3C638);
	SetFunctionFlags(0X3C4AC,0x400);
	MakeFunction    (0X3C638,0X3C68C);
	SetFunctionFlags(0X3C638,0x400);
	MakeFunction    (0X3C68C,0X3C8BC);
	SetFunctionFlags(0X3C68C,0x410);
	MakeFrame(0X3C68C, 0X6, 4, 0);
	MakeFunction    (0X3C8BC,0X3C938);
	SetFunctionFlags(0X3C8BC,0x400);
	MakeFunction    (0X3C938,0X3CA2E);
	SetFunctionFlags(0X3C938,0x400);
	MakeFunction    (0X3CA2E,0X3CB4E);
	SetFunctionFlags(0X3CA2E,0x400);
	MakeFunction    (0X3CB4E,0X3CB70);
	SetFunctionFlags(0X3CB4E,0x400);
	MakeFunction    (0X3CB70,0X3CD16);
	SetFunctionFlags(0X3CB70,0x410);
	MakeFrame(0X3CB70, 0X62E2, 4, 0);
	MakeFunction    (0X3CD16,0X3CD78);
	SetFunctionFlags(0X3CD16,0x410);
	MakeFrame(0X3CD16, 0X4, 4, 0);
	MakeFunction    (0X3CD78,0X3D7B0);
	SetFunctionFlags(0X3CD78,0x400);
	MakeFunction    (0X3D7B0,0X3DD00);
	SetFunctionFlags(0X3D7B0,0x410);
	MakeFrame(0X3D7B0, 0X4, 4, 0);
	MakeFunction    (0X3DD00,0X3DD56);
	SetFunctionFlags(0X3DD00,0x400);
	MakeFunction    (0X3DD56,0X3DD8C);
	SetFunctionFlags(0X3DD56,0x400);
	MakeFunction    (0X3DD8C,0X3DDE4);
	SetFunctionFlags(0X3DD8C,0x400);
	MakeFunction    (0X3DDE4,0X3DE0C);
	SetFunctionFlags(0X3DDE4,0x400);
	MakeFunction    (0X3DE0C,0X3DE42);
	SetFunctionFlags(0X3DE0C,0x400);
	MakeFunction    (0X3DE42,0X3DE6E);
	SetFunctionFlags(0X3DE42,0x400);
	MakeFunction    (0X3DE6E,0X3DEA4);
	SetFunctionFlags(0X3DE6E,0x400);
	MakeFunction    (0X3DEA4,0X3DEE2);
	SetFunctionFlags(0X3DEA4,0x400);
	MakeFunction    (0X3DEE2,0X3DF16);
	SetFunctionFlags(0X3DEE2,0x400);
	MakeFunction    (0X3DF16,0X3DF86);
	SetFunctionFlags(0X3DF16,0x400);
	MakeFunction    (0X3DF86,0X3DF96);
	SetFunctionFlags(0X3DF86,0x400);
	MakeFunction    (0X3DF96,0X3DFBA);
	SetFunctionFlags(0X3DF96,0x400);
	MakeFunction    (0X3DFBA,0X3DFF8);
	SetFunctionFlags(0X3DFBA,0x400);
	MakeFunction    (0X3DFF8,0X3E040);
	SetFunctionFlags(0X3DFF8,0x400);
	MakeFunction    (0X3E040,0X3E12E);
	SetFunctionFlags(0X3E040,0x400);
	MakeFunction    (0X3E12E,0X3E1DC);
	SetFunctionFlags(0X3E12E,0x400);
	MakeFunction    (0X3E1DC,0X3E250);
	SetFunctionFlags(0X3E1DC,0x400);
	MakeFunction    (0X3E250,0X3E346);
	SetFunctionFlags(0X3E250,0x400);
	MakeFunction    (0X3E346,0X3E3D6);
	SetFunctionFlags(0X3E346,0x400);
	MakeFunction    (0X3E3D6,0X3E3FE);
	SetFunctionFlags(0X3E3D6,0x400);
	MakeFunction    (0X3E3FE,0X3E454);
	SetFunctionFlags(0X3E3FE,0x410);
	MakeFrame(0X3E3FE, 0X4, 4, 0);
	MakeFunction    (0X3E454,0X3E4B4);
	SetFunctionFlags(0X3E454,0x400);
	MakeFunction    (0X3E4B4,0X3E4CE);
	SetFunctionFlags(0X3E4B4,0x400);
	MakeFunction    (0X3E4CE,0X3E4F2);
	SetFunctionFlags(0X3E4CE,0x400);
	MakeFunction    (0X3E4F2,0X3E8A4);
	SetFunctionFlags(0X3E4F2,0x410);
	MakeFrame(0X3E4F2, 0X6, 4, 0);
	MakeFunction    (0X3E928,0X3E9B4);
	SetFunctionFlags(0X3E928,0x410);
	MakeFrame(0X3E928, 0X6, 4, 0);
	MakeFunction    (0X3E9B4,0X3EA02);
	SetFunctionFlags(0X3E9B4,0x410);
	MakeFrame(0X3E9B4, 0X6, 4, 0);
	MakeFunction    (0X3EA90,0X3F618);
	SetFunctionFlags(0X3EA90,0x410);
	MakeFrame(0X3EA90, 0X8, 4, 0);
	MakeFunction    (0X3F674,0X3F6CC);
	SetFunctionFlags(0X3F674,0x410);
	MakeFrame(0X3F674, 0X8, 4, 0);
	MakeFunction    (0X3F6FE,0X3F91E);
	SetFunctionFlags(0X3F6FE,0x410);
	MakeFrame(0X3F6FE, 0X8, 4, 0);
	MakeFunction    (0X3FC3E,0X3FCA8);
	SetFunctionFlags(0X3FC3E,0x400);
	MakeFunction    (0X3FCA8,0X3FD18);
	SetFunctionFlags(0X3FCA8,0x400);
	MakeFrame(0X3FCA8, 0X6584, 0, 0);
	MakeFunction    (0X40044,0X40078);
	SetFunctionFlags(0X40044,0x400);
	MakeFunction    (0X400FE,0X40160);
	SetFunctionFlags(0X400FE,0x400);
	MakeFunction    (0X40160,0X4019A);
	SetFunctionFlags(0X40160,0x400);
	MakeFunction    (0X40278,0X4039A);
	SetFunctionFlags(0X40278,0x400);
	MakeFunction    (0X4039A,0X403FA);
	SetFunctionFlags(0X4039A,0x400);
	MakeFrame(0X4039A, 0X50A8, 0, 0);
	MakeFunction    (0X403FA,0X40414);
	SetFunctionFlags(0X403FA,0x400);
	MakeFunction    (0X40414,0X404FA);
	SetFunctionFlags(0X40414,0x410);
	MakeFrame(0X40414, 0X8, 4, 0);
	MakeFunction    (0X40632,0X406B0);
	SetFunctionFlags(0X40632,0x400);
	MakeFunction    (0X40982,0X40AD6);
	SetFunctionFlags(0X40982,0x410);
	MakeFrame(0X40982, 0X6, 4, 0);
	MakeFunction    (0X40AD6,0X40F0E);
	SetFunctionFlags(0X40AD6,0x410);
	MakeFrame(0X40AD6, 0X65BC, 4, 0);
	MakeFunction    (0X41232,0X4150A);
	SetFunctionFlags(0X41232,0x410);
	MakeFrame(0X41232, 0X10, 4, 0);
	MakeFunction    (0X41D74,0X41D8C);
	SetFunctionFlags(0X41D74,0x400);
	MakeFunction    (0X41D8C,0X41DAA);
	SetFunctionFlags(0X41D8C,0x400);
	MakeFunction    (0X41DAA,0X41DDA);
	SetFunctionFlags(0X41DAA,0x400);
	MakeFunction    (0X41DDA,0X41DF6);
	SetFunctionFlags(0X41DDA,0x400);
	MakeFunction    (0X41DF6,0X41E0C);
	SetFunctionFlags(0X41DF6,0x400);
	MakeFunction    (0X41E0C,0X41E26);
	SetFunctionFlags(0X41E0C,0x400);
	MakeFunction    (0X41E26,0X41F2E);
	SetFunctionFlags(0X41E26,0x410);
	MakeFrame(0X41E26, 0X8, 4, 0);
	MakeFunction    (0X420E4,0X4210A);
	SetFunctionFlags(0X420E4,0x400);
	MakeFunction    (0X4210A,0X42130);
	SetFunctionFlags(0X4210A,0x400);
	MakeFunction    (0X42130,0X421AA);
	SetFunctionFlags(0X42130,0x410);
	MakeFrame(0X42130, 0X6, 4, 0);
	MakeFunction    (0X421AA,0X42224);
	SetFunctionFlags(0X421AA,0x410);
	MakeFrame(0X421AA, 0X6, 4, 0);
	MakeFunction    (0X42224,0X422AA);
	SetFunctionFlags(0X42224,0x410);
	MakeFrame(0X42224, 0X6, 4, 0);
	MakeFunction    (0X422AA,0X42330);
	SetFunctionFlags(0X422AA,0x410);
	MakeFrame(0X422AA, 0X6, 4, 0);
	MakeFunction    (0X42330,0X42438);
	SetFunctionFlags(0X42330,0x410);
	MakeFrame(0X42330, 0XC, 4, 0);
	MakeFunction    (0X42438,0X42540);
	SetFunctionFlags(0X42438,0x410);
	MakeFrame(0X42438, 0XC, 4, 0);
	MakeFunction    (0X42540,0X425EE);
	SetFunctionFlags(0X42540,0x410);
	MakeFrame(0X42540, 0X6, 4, 0);
	MakeFunction    (0X425EE,0X4269C);
	SetFunctionFlags(0X425EE,0x410);
	MakeFrame(0X425EE, 0X6, 4, 0);
	MakeFunction    (0X4269C,0X427E2);
	SetFunctionFlags(0X4269C,0x410);
	MakeFrame(0X4269C, 0XC, 4, 0);
	MakeFunction    (0X427E2,0X427F4);
	SetFunctionFlags(0X427E2,0x400);
	MakeFunction    (0X427F4,0X42802);
	SetFunctionFlags(0X427F4,0x400);
	MakeFunction    (0X42802,0X42896);
	SetFunctionFlags(0X42802,0x410);
	MakeFrame(0X42802, 0X4, 4, 0);
	MakeFunction    (0X42896,0X428E0);
	SetFunctionFlags(0X42896,0x410);
	MakeFrame(0X42896, 0X6, 4, 0);
	MakeFunction    (0X428E0,0X429F8);
	SetFunctionFlags(0X428E0,0x400);
	MakeFunction    (0X429F8,0X42AC0);
	SetFunctionFlags(0X429F8,0x400);
	MakeFunction    (0X42AC0,0X42BBC);
	SetFunctionFlags(0X42AC0,0x410);
	MakeFrame(0X42AC0, 0X8, 4, 0);
	MakeFunction    (0X42BBC,0X42E12);
	SetFunctionFlags(0X42BBC,0x410);
	MakeFrame(0X42BBC, 0X8, 4, 0);
	MakeFunction    (0X42E12,0X42E3C);
	SetFunctionFlags(0X42E12,0x400);
	MakeFunction    (0X42E3C,0X42EB2);
	SetFunctionFlags(0X42E3C,0x410);
	MakeFrame(0X42E3C, 0XA, 4, 0);
	MakeFunction    (0X42EB2,0X42F10);
	SetFunctionFlags(0X42EB2,0x400);
	MakeFunction    (0X42F10,0X42F76);
	SetFunctionFlags(0X42F10,0x400);
	MakeFunction    (0X44F6A,0X45138);
	SetFunctionFlags(0X44F6A,0x410);
	MakeFrame(0X44F6A, 0X10, 4, 0);
	MakeFunction    (0X45138,0X45152);
	SetFunctionFlags(0X45138,0x400);
	MakeFunction    (0X45152,0X4519E);
	SetFunctionFlags(0X45152,0x400);
	MakeFunction    (0X4519E,0X451EA);
	SetFunctionFlags(0X4519E,0x400);
	MakeFunction    (0X451EA,0X45878);
	SetFunctionFlags(0X451EA,0x410);
	MakeFrame(0X451EA, 0X14, 4, 0);
	MakeFunction    (0X45878,0X458E6);
	SetFunctionFlags(0X45878,0x410);
	MakeFrame(0X45878, 0X6, 4, 0);
	MakeFunction    (0X458E6,0X45A50);
	SetFunctionFlags(0X458E6,0x410);
	MakeFrame(0X458E6, 0X4, 4, 0);
	MakeFunction    (0X45A50,0X45ACC);
	SetFunctionFlags(0X45A50,0x400);
	MakeFunction    (0X45ACC,0X45AE8);
	SetFunctionFlags(0X45ACC,0x400);
	MakeFunction    (0X45AE8,0X45C02);
	SetFunctionFlags(0X45AE8,0x410);
	MakeFrame(0X45AE8, 0X6, 4, 0);
	MakeFunction    (0X45C02,0X45CA4);
	SetFunctionFlags(0X45C02,0x400);
	MakeFunction    (0X45CA4,0X45CCE);
	SetFunctionFlags(0X45CA4,0x400);
	MakeFrame(0X45CA4, 0X6348, 0, 0);
	MakeFunction    (0X45CCE,0X45F0A);
	SetFunctionFlags(0X45CCE,0x410);
	MakeFrame(0X45CCE, 0X573E, 4, 0);
	MakeFunction    (0X45F0A,0X45F3A);
	SetFunctionFlags(0X45F0A,0x400);
	MakeFunction    (0X45F3A,0X47AB4);
	SetFunctionFlags(0X45F3A,0x410);
	MakeFrame(0X45F3A, 0X8, 4, 0);
	MakeFunction    (0X47AB4,0X47B10);
	SetFunctionFlags(0X47AB4,0x400);
	MakeFunction    (0X47B10,0X47B5C);
	SetFunctionFlags(0X47B10,0x400);
	MakeFunction    (0X47B5C,0X47B78);
	SetFunctionFlags(0X47B5C,0x400);
	MakeFunction    (0X47B78,0X47DA2);
	SetFunctionFlags(0X47B78,0x400);
	MakeFunction    (0X47DA2,0X48A70);
	SetFunctionFlags(0X47DA2,0x410);
	MakeFrame(0X47DA2, 0X10, 4, 0);
	MakeFunction    (0X4930E,0X49356);
	SetFunctionFlags(0X4930E,0x400);
	MakeFunction    (0X49356,0X49382);
	SetFunctionFlags(0X49356,0x400);
	MakeFunction    (0X49382,0X494B8);
	SetFunctionFlags(0X49382,0x410);
	MakeFrame(0X49382, 0X14, 4, 0);
	MakeFunction    (0X494B8,0X49582);
	SetFunctionFlags(0X494B8,0x410);
	MakeFrame(0X494B8, 0X8, 4, 0);
	MakeFunction    (0X49582,0X495E8);
	SetFunctionFlags(0X49582,0x410);
	MakeFrame(0X49582, 0X8, 4, 0);
	MakeFunction    (0X4974A,0X497D4);
	SetFunctionFlags(0X4974A,0x400);
	MakeFunction    (0X497D4,0X4986E);
	SetFunctionFlags(0X497D4,0x410);
	MakeFrame(0X497D4, 0X4, 4, 0);
	MakeFunction    (0X49D2A,0X49D62);
	SetFunctionFlags(0X49D2A,0x400);
	MakeFunction    (0X49D62,0X49D6E);
	SetFunctionFlags(0X49D62,0x400);
	MakeFunction    (0X4A194,0X4A232);
	SetFunctionFlags(0X4A194,0x400);
	MakeFrame(0X4A194, 0X573C, 0, 0);
	MakeFunction    (0X4A232,0X4A3D6);
	SetFunctionFlags(0X4A232,0x410);
	MakeFrame(0X4A232, 0X6, 4, 0);
	MakeFunction    (0X4A3D6,0X4A432);
	SetFunctionFlags(0X4A3D6,0x400);
	MakeFunction    (0X4A51E,0X4A630);
	SetFunctionFlags(0X4A51E,0x410);
	MakeFrame(0X4A51E, 0X6, 4, 0);
	MakeFunction    (0X4A630,0X4A678);
	SetFunctionFlags(0X4A630,0x400);
	MakeFunction    (0X4A710,0X4A71A);
	SetFunctionFlags(0X4A710,0x400);
	MakeFunction    (0X4A71A,0X4A9E4);
	SetFunctionFlags(0X4A71A,0x410);
	MakeFrame(0X4A71A, 0XA, 4, 0);
	MakeFunction    (0X4A9E4,0X4A9F6);
	SetFunctionFlags(0X4A9E4,0x400);
	MakeFunction    (0X4AA18,0X4ABB2);
	SetFunctionFlags(0X4AA18,0x400);
	MakeFunction    (0X4ABB2,0X4ACCA);
	SetFunctionFlags(0X4ABB2,0x410);
	MakeFrame(0X4ABB2, 0X8, 4, 0);
	MakeFunction    (0X4ACCA,0X4AE3C);
	SetFunctionFlags(0X4ACCA,0x410);
	MakeFrame(0X4ACCA, 0X597E, 4, 0);
	MakeFunction    (0X4AE3C,0X4AE50);
	SetFunctionFlags(0X4AE3C,0x400);
	MakeFunction    (0X4AE50,0X4AEBE);
	SetFunctionFlags(0X4AE50,0x410);
	MakeFrame(0X4AE50, 0X6, 4, 0);
	MakeFunction    (0X4AEBE,0X4B012);
	SetFunctionFlags(0X4AEBE,0x410);
	MakeFrame(0X4AEBE, 0X5982, 4, 0);
	MakeFunction    (0X4B012,0X4B030);
	SetFunctionFlags(0X4B012,0x400);
	MakeFunction    (0X4B030,0X4B048);
	SetFunctionFlags(0X4B030,0x400);
	MakeFunction    (0X4B048,0X4B04E);
	SetFunctionFlags(0X4B048,0x400);
	MakeFunction    (0X4B04E,0X4B054);
	SetFunctionFlags(0X4B04E,0x400);
	MakeFunction    (0X4B054,0X4B18C);
	SetFunctionFlags(0X4B054,0x400);
	MakeFunction    (0X4B18C,0X4B192);
	SetFunctionFlags(0X4B18C,0x400);
	MakeFunction    (0X4B192,0X4B1C8);
	SetFunctionFlags(0X4B192,0x410);
	MakeFrame(0X4B192, 0X14, 4, 0);
	MakeFunction    (0X4B1C8,0X4B1E0);
	SetFunctionFlags(0X4B1C8,0x410);
	MakeFrame(0X4B1C8, 0X74, 4, 0);
	MakeFunction    (0X4B494,0X4B4C4);
	SetFunctionFlags(0X4B494,0x400);
	MakeFunction    (0X4B4C4,0X4B5C8);
	SetFunctionFlags(0X4B4C4,0x400);
	MakeFunction    (0X4B5C8,0X4B62A);
	SetFunctionFlags(0X4B5C8,0x410);
	MakeFrame(0X4B5C8, 0X8, 4, 0);
	MakeFunction    (0X4B62A,0X4B64E);
	SetFunctionFlags(0X4B62A,0x400);
	MakeFunction    (0X4B64E,0X4B68C);
	SetFunctionFlags(0X4B64E,0x410);
	MakeFrame(0X4B64E, 0X8, 4, 0);
	MakeFunction    (0X4B68C,0X4B780);
	SetFunctionFlags(0X4B68C,0x400);
	MakeFunction    (0X4B780,0X4B802);
	SetFunctionFlags(0X4B780,0x400);
	MakeFunction    (0X4B802,0X4B82A);
	SetFunctionFlags(0X4B802,0x400);
	MakeFunction    (0X4B82A,0X4B83A);
	SetFunctionFlags(0X4B82A,0x400);
	MakeFunction    (0X4B83A,0X4B858);
	SetFunctionFlags(0X4B83A,0x400);
	MakeFunction    (0X4B858,0X4B866);
	SetFunctionFlags(0X4B858,0x400);
	MakeFunction    (0X4B866,0X4B9B8);
	SetFunctionFlags(0X4B866,0x400);
	MakeFunction    (0X4B9B8,0X4B9CC);
	SetFunctionFlags(0X4B9B8,0x400);
	MakeFunction    (0X4BC2E,0X4BC94);
	SetFunctionFlags(0X4BC2E,0x400);
	MakeFunction    (0X4BC94,0X4BD8C);
	SetFunctionFlags(0X4BC94,0x400);
	MakeFunction    (0X4BD8C,0X4C296);
	SetFunctionFlags(0X4BD8C,0x400);
	MakeFunction    (0X4C296,0X4C30C);
	SetFunctionFlags(0X4C296,0x400);
	MakeFunction    (0X4C30C,0X4C4C6);
	SetFunctionFlags(0X4C30C,0x410);
	MakeFrame(0X4C30C, 0X4, 4, 0);
	MakeFunction    (0X4C4C6,0X4C4EA);
	SetFunctionFlags(0X4C4C6,0x400);
	MakeFunction    (0X4C4EA,0X4C50E);
	SetFunctionFlags(0X4C4EA,0x400);
	MakeFunction    (0X4C50E,0X4C570);
	SetFunctionFlags(0X4C50E,0x400);
	MakeFunction    (0X4C570,0X4C664);
	SetFunctionFlags(0X4C570,0x400);
	MakeFunction    (0X4C664,0X4CA06);
	SetFunctionFlags(0X4C664,0x400);
	MakeFunction    (0X4CA06,0X4CAB8);
	SetFunctionFlags(0X4CA06,0x400);
	MakeFunction    (0X4CAB8,0X4CB12);
	SetFunctionFlags(0X4CAB8,0x400);
	MakeFunction    (0X4CB12,0X4CB7A);
	SetFunctionFlags(0X4CB12,0x410);
	MakeFrame(0X4CB12, 0XA, 4, 0);
	MakeFunction    (0X4CB7A,0X4CCBC);
	SetFunctionFlags(0X4CB7A,0x400);
	MakeFunction    (0X4CCBC,0X4CD5E);
	SetFunctionFlags(0X4CCBC,0x410);
	MakeFrame(0X4CCBC, 0XA, 4, 0);
	MakeFunction    (0X4CD5E,0X4CFF8);
	SetFunctionFlags(0X4CD5E,0x410);
	MakeFrame(0X4CD5E, 0X8, 4, 0);
	MakeFunction    (0X4CFF8,0X4D13A);
	SetFunctionFlags(0X4CFF8,0x400);
	MakeFunction    (0X4D13A,0X4D774);
	SetFunctionFlags(0X4D13A,0x400);
	MakeFunction    (0X4D774,0X4D86E);
	SetFunctionFlags(0X4D774,0x400);
	MakeFunction    (0X4D86E,0X4D8A8);
	SetFunctionFlags(0X4D86E,0x400);
	MakeFunction    (0X4D8A8,0X4D918);
	SetFunctionFlags(0X4D8A8,0x400);
	MakeFunction    (0X4D918,0X4D97C);
	SetFunctionFlags(0X4D918,0x400);
	MakeFunction    (0X4D97C,0X4DB06);
	SetFunctionFlags(0X4D97C,0x400);
	MakeFunction    (0X4DB06,0X4DB5C);
	SetFunctionFlags(0X4DB06,0x400);
	MakeFunction    (0X4DB5C,0X4DC04);
	SetFunctionFlags(0X4DB5C,0x400);
	MakeFunction    (0X4DC04,0X4DCF2);
	SetFunctionFlags(0X4DC04,0x400);
	MakeFunction    (0X4DCF2,0X4DD5C);
	SetFunctionFlags(0X4DCF2,0x400);
	MakeFunction    (0X4DD5C,0X4ED50);
	SetFunctionFlags(0X4DD5C,0x400);
	MakeFrame(0X4DD5C, 0X640C, 0, 0);
	MakeFunction    (0X4ED50,0X4EE50);
	SetFunctionFlags(0X4ED50,0x400);
	MakeFunction    (0X4EE50,0X4EE7A);
	SetFunctionFlags(0X4EE50,0x400);
	MakeFunction    (0X4EE7A,0X4EEA0);
	SetFunctionFlags(0X4EE7A,0x400);
	MakeFunction    (0X4EEA0,0X4EEB4);
	SetFunctionFlags(0X4EEA0,0x400);
	MakeFunction    (0X4EEB4,0X4EFB8);
	SetFunctionFlags(0X4EEB4,0x410);
	MakeFrame(0X4EEB4, 0XC, 4, 0);
	MakeFunction    (0X4EFB8,0X4EFF2);
	SetFunctionFlags(0X4EFB8,0x400);
	MakeFunction    (0X4EFF2,0X4F5C2);
	SetFunctionFlags(0X4EFF2,0x400);
	MakeFrame(0X4EFF2, 0X56F0, 0, 0);
	MakeFunction    (0X4F5C2,0X4F5D0);
	SetFunctionFlags(0X4F5C2,0x400);
	MakeFunction    (0X4F5D0,0X4F726);
	SetFunctionFlags(0X4F5D0,0x400);
	MakeFunction    (0X4F726,0X4F896);
	SetFunctionFlags(0X4F726,0x400);
	MakeFunction    (0X4F896,0X4F8C0);
	SetFunctionFlags(0X4F896,0x400);
	MakeFunction    (0X4F8C0,0X4F8C8);
	SetFunctionFlags(0X4F8C0,0x400);
	MakeFunction    (0X4F8C8,0X4F9F4);
	SetFunctionFlags(0X4F8C8,0x400);
	MakeFunction    (0X4F9F4,0X4FB1A);
	SetFunctionFlags(0X4F9F4,0x400);
	MakeFunction    (0X4FB1A,0X4FC18);
	SetFunctionFlags(0X4FB1A,0x400);
	MakeFunction    (0X4FC18,0X4FCA2);
	SetFunctionFlags(0X4FC18,0x400);
	MakeFunction    (0X4FCA2,0X4FE9C);
	SetFunctionFlags(0X4FCA2,0x400);
	MakeFunction    (0X503CA,0X504FC);
	SetFunctionFlags(0X503CA,0x400);
	MakeFunction    (0X504FC,0X50514);
	SetFunctionFlags(0X504FC,0x400);
	MakeFunction    (0X50514,0X50576);
	SetFunctionFlags(0X50514,0x400);
	MakeFunction    (0X50576,0X505A4);
	SetFunctionFlags(0X50576,0x400);
	MakeFunction    (0X505A4,0X50618);
	SetFunctionFlags(0X505A4,0x400);
	MakeFrame(0X505A4, 0X72BA, 0, 0);
	MakeFunction    (0X50618,0X50628);
	SetFunctionFlags(0X50618,0x400);
	MakeFunction    (0X50628,0X50C1C);
	SetFunctionFlags(0X50628,0x400);
	MakeFunction    (0X50C1C,0X50EAA);
	SetFunctionFlags(0X50C1C,0x400);
	MakeFunction    (0X50EAA,0X50FB6);
	SetFunctionFlags(0X50EAA,0x400);
	MakeFunction    (0X50FB6,0X513C0);
	SetFunctionFlags(0X50FB6,0x400);
	MakeFunction    (0X513C0,0X51498);
	SetFunctionFlags(0X513C0,0x400);
	MakeFunction    (0X51498,0X5195C);
	SetFunctionFlags(0X51498,0x400);
	MakeFunction    (0X5195C,0X51C44);
	SetFunctionFlags(0X5195C,0x400);
	MakeFunction    (0X51C44,0X5285A);
	SetFunctionFlags(0X51C44,0x400);
	MakeFunction    (0X5285A,0X52BE8);
	SetFunctionFlags(0X5285A,0x400);
	MakeFunction    (0X52BE8,0X52CD6);
	SetFunctionFlags(0X52BE8,0x400);
	MakeFunction    (0X52CD6,0X52E44);
	SetFunctionFlags(0X52CD6,0x400);
	MakeFunction    (0X52E44,0X52E70);
	SetFunctionFlags(0X52E44,0x400);
	MakeFunction    (0X52E70,0X53008);
	SetFunctionFlags(0X52E70,0x400);
	MakeFunction    (0X53008,0X53174);
	SetFunctionFlags(0X53008,0x400);
	MakeFunction    (0X53174,0X53182);
	SetFunctionFlags(0X53174,0x400);
	MakeFunction    (0X53182,0X532C4);
	SetFunctionFlags(0X53182,0x400);
	MakeFunction    (0X532C4,0X5334E);
	SetFunctionFlags(0X532C4,0x400);
	MakeFunction    (0X5334E,0X5341E);
	SetFunctionFlags(0X5334E,0x400);
	MakeFunction    (0X5341E,0X53586);
	SetFunctionFlags(0X5341E,0x400);
	MakeFunction    (0X53586,0X537A8);
	SetFunctionFlags(0X53586,0x400);
	MakeFunction    (0X537A8,0X53B10);
	SetFunctionFlags(0X537A8,0x400);
	MakeFunction    (0X53B10,0X53BDC);
	SetFunctionFlags(0X53B10,0x400);
	MakeFunction    (0X53BDC,0X53DA0);
	SetFunctionFlags(0X53BDC,0x400);
	MakeFunction    (0X53DA0,0X53DDA);
	SetFunctionFlags(0X53DA0,0x400);
	MakeFunction    (0X53DDA,0X53F90);
	SetFunctionFlags(0X53DDA,0x400);
	MakeFunction    (0X53F90,0X54162);
	SetFunctionFlags(0X53F90,0x400);
	MakeFunction    (0X54162,0X5427A);
	SetFunctionFlags(0X54162,0x410);
	MakeFrame(0X54162, 0X6, 4, 0);
	MakeFunction    (0X5427A,0X5434C);
	SetFunctionFlags(0X5427A,0x400);
	MakeFunction    (0X5434C,0X5436E);
	SetFunctionFlags(0X5434C,0x400);
	MakeFunction    (0X5436E,0X54FAE);
	SetFunctionFlags(0X5436E,0x410);
	MakeFrame(0X5436E, 0XA, 4, 0);
	MakeFunction    (0X54FAE,0X54FDC);
	SetFunctionFlags(0X54FAE,0x400);
	MakeFunction    (0X54FDC,0X5546E);
	SetFunctionFlags(0X54FDC,0x400);
	MakeFunction    (0X5546E,0X554C6);
	SetFunctionFlags(0X5546E,0x400);
	MakeFunction    (0X554C6,0X55544);
	SetFunctionFlags(0X554C6,0x400);
	MakeFunction    (0X55544,0X555EA);
	SetFunctionFlags(0X55544,0x400);
	MakeFunction    (0X555EA,0X556FC);
	SetFunctionFlags(0X555EA,0x400);
	MakeFunction    (0X556FC,0X55730);
	SetFunctionFlags(0X556FC,0x400);
	MakeFunction    (0X55730,0X55796);
	SetFunctionFlags(0X55730,0x400);
	MakeFunction    (0X55796,0X558A2);
	SetFunctionFlags(0X55796,0x410);
	MakeFrame(0X55796, 0XA, 4, 0);
	MakeFunction    (0X558A2,0X558DA);
	SetFunctionFlags(0X558A2,0x400);
	MakeFunction    (0X558DA,0X55912);
	SetFunctionFlags(0X558DA,0x400);
	MakeFunction    (0X55912,0X559D6);
	SetFunctionFlags(0X55912,0x400);
	MakeFunction    (0X559D6,0X56A08);
	SetFunctionFlags(0X559D6,0x410);
	MakeFrame(0X559D6, 0X738E, 4, 0);
	MakeFunction    (0X56A08,0X56AE4);
	SetFunctionFlags(0X56A08,0x400);
	MakeFunction    (0X56AE4,0X56D72);
	SetFunctionFlags(0X56AE4,0x400);
	MakeFunction    (0X56D72,0X56EDC);
	SetFunctionFlags(0X56D72,0x400);
	MakeFunction    (0X56EDC,0X571CE);
	SetFunctionFlags(0X56EDC,0x400);
	MakeFunction    (0X571CE,0X574BE);
	SetFunctionFlags(0X571CE,0x400);
	MakeFrame(0X571CE, 0X5312, 0, 0);
	MakeFunction    (0X574BE,0X5752E);
	SetFunctionFlags(0X574BE,0x400);
	MakeFunction    (0X5752E,0X57562);
	SetFunctionFlags(0X5752E,0x400);
	MakeFunction    (0X57562,0X575C6);
	SetFunctionFlags(0X57562,0x400);
	MakeFunction    (0X575C6,0X5824A);
	SetFunctionFlags(0X575C6,0x400);
	MakeFrame(0X575C6, 0X73DE, 0, 0);
	MakeFunction    (0X5824A,0X582B0);
	SetFunctionFlags(0X5824A,0x400);
	MakeFunction    (0X582B0,0X5855C);
	SetFunctionFlags(0X582B0,0x400);
	MakeFunction    (0X5855C,0X585F4);
	SetFunctionFlags(0X5855C,0x400);
	MakeFunction    (0X585F4,0X58914);
	SetFunctionFlags(0X585F4,0x400);
	MakeFunction    (0X58914,0X58B52);
	SetFunctionFlags(0X58914,0x400);
	MakeFrame(0X58914, 0X4CFE, 0, 0);
	MakeFunction    (0X58B52,0X58C94);
	SetFunctionFlags(0X58B52,0x400);
	MakeFunction    (0X58C94,0X58CCE);
	SetFunctionFlags(0X58C94,0x400);
	MakeFunction    (0X58CCE,0X58D08);
	SetFunctionFlags(0X58CCE,0x400);
	MakeFunction    (0X58D08,0X58D18);
	SetFunctionFlags(0X58D08,0x400);
	MakeFunction    (0X58D18,0X58DCE);
	SetFunctionFlags(0X58D18,0x400);
	MakeFunction    (0X58DCE,0X58E0C);
	SetFunctionFlags(0X58DCE,0x400);
	MakeFunction    (0X58E0C,0X58E3A);
	SetFunctionFlags(0X58E0C,0x400);
	MakeFunction    (0X58E3A,0X58F32);
	SetFunctionFlags(0X58E3A,0x410);
	MakeFrame(0X58E3A, 0X8, 4, 0);
	MakeFunction    (0X58F32,0X58F4A);
	SetFunctionFlags(0X58F32,0x400);
	MakeFunction    (0X58F4A,0X58F64);
	SetFunctionFlags(0X58F4A,0x400);
	MakeFunction    (0X58F64,0X5903E);
	SetFunctionFlags(0X58F64,0x400);
	MakeFrame(0X58F64, 0X4E80, 0, 0);
	MakeFunction    (0X5903E,0X59064);
	SetFunctionFlags(0X5903E,0x400);
	MakeFunction    (0X59064,0X5923E);
	SetFunctionFlags(0X59064,0x410);
	MakeFrame(0X59064, 0X7458, 4, 0);
	MakeFunction    (0X5923E,0X592A4);
	SetFunctionFlags(0X5923E,0x400);
	MakeFunction    (0X592A4,0X592EA);
	SetFunctionFlags(0X592A4,0x400);
	MakeFunction    (0X592EA,0X59332);
	SetFunctionFlags(0X592EA,0x400);
	MakeFunction    (0X59332,0X59368);
	SetFunctionFlags(0X59332,0x400);
	MakeFunction    (0X59368,0X594F4);
	SetFunctionFlags(0X59368,0x400);
	MakeFunction    (0X594F4,0X5955E);
	SetFunctionFlags(0X594F4,0x400);
	MakeFunction    (0X5955E,0X595C0);
	SetFunctionFlags(0X5955E,0x400);
	MakeFunction    (0X595C0,0X59626);
	SetFunctionFlags(0X595C0,0x400);
	MakeFunction    (0X59626,0X596F0);
	SetFunctionFlags(0X59626,0x400);
	MakeFunction    (0X596F0,0X59700);
	SetFunctionFlags(0X596F0,0x400);
	MakeFunction    (0X59700,0X5973C);
	SetFunctionFlags(0X59700,0x400);
	MakeFunction    (0X5973C,0X5980C);
	SetFunctionFlags(0X5973C,0x400);
	MakeFunction    (0X5980C,0X5983E);
	SetFunctionFlags(0X5980C,0x410);
	MakeFrame(0X5980C, 0X6, 4, 0);
	MakeFunction    (0X5983E,0X59870);
	SetFunctionFlags(0X5983E,0x410);
	MakeFrame(0X5983E, 0X6, 4, 0);
	MakeFunction    (0X59870,0X598A2);
	SetFunctionFlags(0X59870,0x410);
	MakeFrame(0X59870, 0X6, 4, 0);
	MakeFunction    (0X598A2,0X598D4);
	SetFunctionFlags(0X598A2,0x410);
	MakeFrame(0X598A2, 0X6, 4, 0);
	MakeFunction    (0X598D4,0X59B02);
	SetFunctionFlags(0X598D4,0x410);
	MakeFrame(0X598D4, 0XC, 4, 0);
	MakeFunction    (0X59B02,0X59C84);
	SetFunctionFlags(0X59B02,0x410);
	MakeFrame(0X59B02, 0XC, 4, 0);
	MakeFunction    (0X59C84,0X59CD8);
	SetFunctionFlags(0X59C84,0x410);
	MakeFrame(0X59C84, 0XA, 4, 0);
	MakeFunction    (0X59CD8,0X59D9E);
	SetFunctionFlags(0X59CD8,0x410);
	MakeFrame(0X59CD8, 0X8, 4, 0);
	MakeFunction    (0X59D9E,0X59E04);
	SetFunctionFlags(0X59D9E,0x410);
	MakeFrame(0X59D9E, 0X8, 4, 0);
	MakeFunction    (0X59E04,0X59E38);
	SetFunctionFlags(0X59E04,0x400);
	MakeFunction    (0X59E38,0X59F72);
	SetFunctionFlags(0X59E38,0x400);
	MakeFunction    (0X59F72,0X5A12E);
	SetFunctionFlags(0X59F72,0x400);
	MakeFrame(0X59F72, 0X734A, 0, 0);
	MakeFunction    (0X5A12E,0X5A25C);
	SetFunctionFlags(0X5A12E,0x400);
	MakeFunction    (0X5A25C,0X5A270);
	SetFunctionFlags(0X5A25C,0x400);
	MakeFunction    (0X5A270,0X5A294);
	SetFunctionFlags(0X5A270,0x400);
	MakeFunction    (0X5A294,0X5A2C0);
	SetFunctionFlags(0X5A294,0x400);
	MakeFunction    (0X5A2C0,0X5A2F2);
	SetFunctionFlags(0X5A2C0,0x400);
	MakeFunction    (0X5A2F2,0X5A336);
	SetFunctionFlags(0X5A2F2,0x400);
	MakeFunction    (0X5A336,0X5A53C);
	SetFunctionFlags(0X5A336,0x400);
	MakeFunction    (0X5A53C,0X5A582);
	SetFunctionFlags(0X5A53C,0x400);
	MakeFunction    (0X5A582,0X5A6A0);
	SetFunctionFlags(0X5A582,0x400);
	MakeFunction    (0X5A6A0,0X5AB46);
	SetFunctionFlags(0X5A6A0,0x400);
	MakeFunction    (0X5AB46,0X5AB84);
	SetFunctionFlags(0X5AB46,0x400);
	MakeFunction    (0X5AB84,0X5B062);
	SetFunctionFlags(0X5AB84,0x410);
	MakeFrame(0X5AB84, 0X8, 4, 0);
	MakeFunction    (0X5B062,0X5B12A);
	SetFunctionFlags(0X5B062,0x400);
	MakeFunction    (0X5B12A,0X5B14C);
	SetFunctionFlags(0X5B12A,0x400);
	MakeFunction    (0X5B14C,0X5B1D0);
	SetFunctionFlags(0X5B14C,0x400);
	MakeFunction    (0X5B1D0,0X5B246);
	SetFunctionFlags(0X5B1D0,0x400);
	MakeFunction    (0X5B246,0X5B2B6);
	SetFunctionFlags(0X5B246,0x400);
	MakeFunction    (0X5B2B6,0X5B2CA);
	SetFunctionFlags(0X5B2B6,0x400);
	MakeFunction    (0X5B2CA,0X5B3B2);
	SetFunctionFlags(0X5B2CA,0x400);
	MakeFunction    (0X5B3B2,0X5B3F8);
	SetFunctionFlags(0X5B3B2,0x400);
	MakeFunction    (0X5B3F8,0X5B426);
	SetFunctionFlags(0X5B3F8,0x400);
	MakeFunction    (0X5B472,0X5B4C8);
	SetFunctionFlags(0X5B472,0x400);
	MakeFunction    (0X5B4C8,0X5B4EE);
	SetFunctionFlags(0X5B4C8,0x400);
	MakeFunction    (0X5B4EE,0X5B542);
	SetFunctionFlags(0X5B4EE,0x400);
	MakeFunction    (0X5B542,0X5B744);
	SetFunctionFlags(0X5B542,0x400);
	MakeFunction    (0X5B744,0X5B874);
	SetFunctionFlags(0X5B744,0x400);
	MakeFunction    (0X5B874,0X5BA2E);
	SetFunctionFlags(0X5B874,0x400);
	MakeFunction    (0X5BA2E,0X5BDC8);
	SetFunctionFlags(0X5BA2E,0x400);
	MakeFunction    (0X5BDC8,0X5C1FE);
	SetFunctionFlags(0X5BDC8,0x410);
	MakeFrame(0X5BDC8, 0X6, 4, 0);
	MakeFunction    (0X5C1FE,0X5C340);
	SetFunctionFlags(0X5C1FE,0x400);
	MakeFunction    (0X5C340,0X5C4CC);
	SetFunctionFlags(0X5C340,0x400);
	MakeFunction    (0X5C4CC,0X5C510);
	SetFunctionFlags(0X5C4CC,0x400);
	MakeFunction    (0X5C510,0X5C78E);
	SetFunctionFlags(0X5C510,0x400);
	MakeFunction    (0X5C78E,0X5C7B4);
	SetFunctionFlags(0X5C78E,0x400);
	MakeFunction    (0X5C7B4,0X5C900);
	SetFunctionFlags(0X5C7B4,0x400);
	MakeFunction    (0X5C900,0X5CA68);
	SetFunctionFlags(0X5C900,0x400);
	MakeFunction    (0X5CA68,0X5CA7C);
	SetFunctionFlags(0X5CA68,0x400);
	MakeFunction    (0X5CA7C,0X5CC7E);
	SetFunctionFlags(0X5CA7C,0x400);
	MakeFrame(0X5CA7C, 0X738C, 0, 0);
	MakeFunction    (0X5CC7E,0X5CDBC);
	SetFunctionFlags(0X5CC7E,0x400);
	MakeFrame(0X5CC7E, 0X7398, 0, 0);
	MakeFunction    (0X5CDBC,0X5CE2E);
	SetFunctionFlags(0X5CDBC,0x400);
	MakeFunction    (0X5CE2E,0X5CE76);
	SetFunctionFlags(0X5CE2E,0x400);
	MakeFunction    (0X5CE76,0X5CEB4);
	SetFunctionFlags(0X5CE76,0x400);
	MakeFunction    (0X5CEB4,0X5D15C);
	SetFunctionFlags(0X5CEB4,0x410);
	MakeFrame(0X5CEB4, 0X18, 4, 0);
	MakeFunction    (0X5D15C,0X5D20C);
	SetFunctionFlags(0X5D15C,0x400);
	MakeFunction    (0X5D20C,0X5D22A);
	SetFunctionFlags(0X5D20C,0x400);
	MakeFunction    (0X5D22A,0X5D252);
	SetFunctionFlags(0X5D22A,0x400);
	MakeFrame(0X5D22A, 0X5104, 0, 0);
	MakeFunction    (0X5D252,0X5D45C);
	SetFunctionFlags(0X5D252,0x400);
	MakeFunction    (0X5D45C,0X5D7F6);
	SetFunctionFlags(0X5D45C,0x400);
	MakeFrame(0X5D45C, 0X7498, 0, 0);
	MakeFunction    (0X5D7F6,0X5D82A);
	SetFunctionFlags(0X5D7F6,0x400);
	MakeFunction    (0X5D82A,0X5D87C);
	SetFunctionFlags(0X5D82A,0x410);
	MakeFrame(0X5D82A, 0X3A, 4, 0);
	MakeFunction    (0X5D87C,0X5D8BC);
	SetFunctionFlags(0X5D87C,0x400);
	MakeFunction    (0X5D8BC,0X5D8C4);
	SetFunctionFlags(0X5D8BC,0x400);
	MakeFunction    (0X5D8C4,0X5DA34);
	SetFunctionFlags(0X5D8C4,0x400);
	MakeFrame(0X5D8C4, 0X4BFC, 0, 0);
	MakeFunction    (0X5DA34,0X5DB98);
	SetFunctionFlags(0X5DA34,0x400);
	MakeFrame(0X5DA34, 0X4C56, 0, 0);
	MakeFunction    (0X5DB98,0X5DBA0);
	SetFunctionFlags(0X5DB98,0x400);
	MakeFunction    (0X5DBA0,0X5DC70);
	SetFunctionFlags(0X5DBA0,0x400);
	MakeFunction    (0X5DC70,0X5DD8A);
	SetFunctionFlags(0X5DC70,0x400);
	MakeFunction    (0X5DD8A,0X5DE36);
	SetFunctionFlags(0X5DD8A,0x400);
	MakeFunction    (0X5DE36,0X5DFBC);
	SetFunctionFlags(0X5DE36,0x410);
	MakeFrame(0X5DE36, 0X795A, 4, 0);
	MakeFunction    (0X5DFBC,0X5DFDC);
	SetFunctionFlags(0X5DFBC,0x400);
	MakeFunction    (0X5DFDC,0X5E08A);
	SetFunctionFlags(0X5DFDC,0x400);
	MakeFunction    (0X5E08A,0X5E1A4);
	SetFunctionFlags(0X5E08A,0x400);
	MakeFunction    (0X5E1A4,0X5E37C);
	SetFunctionFlags(0X5E1A4,0x410);
	MakeFrame(0X5E1A4, 0X6, 4, 0);
	MakeFunction    (0X5E37C,0X5E37E);
	SetFunctionFlags(0X5E37C,0x400);
	MakeFunction    (0X5E37E,0X5E9AE);
	SetFunctionFlags(0X5E37E,0x400);
	MakeFrame(0X5E37E, 0X794E, 0, 0);
	MakeFunction    (0X5E9AE,0X5EA4A);
	SetFunctionFlags(0X5E9AE,0x400);
	MakeFrame(0X5E9AE, 0X793C, 0, 0);
	MakeFunction    (0X5EA4A,0X5ED42);
	SetFunctionFlags(0X5EA4A,0x400);
	MakeFunction    (0X5ED42,0X5EDDA);
	SetFunctionFlags(0X5ED42,0x400);
	MakeFrame(0X5ED42, 0X793C, 0, 0);
	MakeFunction    (0X5EDDA,0X5EE7E);
	SetFunctionFlags(0X5EDDA,0x410);
	MakeFrame(0X5EDDA, 0X8, 4, 0);
	MakeFunction    (0X5EE7E,0X5EF12);
	SetFunctionFlags(0X5EE7E,0x410);
	MakeFrame(0X5EE7E, 0X6, 4, 0);
	MakeFunction    (0X5EF12,0X5EFCC);
	SetFunctionFlags(0X5EF12,0x400);
	MakeFunction    (0X5EFCC,0X5F0BE);
	SetFunctionFlags(0X5EFCC,0x410);
	MakeFrame(0X5EFCC, 0X8, 4, 0);
	MakeFunction    (0X5F0BE,0X5F110);
	SetFunctionFlags(0X5F0BE,0x400);
	MakeFunction    (0X5F110,0X5F180);
	SetFunctionFlags(0X5F110,0x400);
	MakeFunction    (0X5F180,0X5F1BE);
	SetFunctionFlags(0X5F180,0x400);
	MakeFunction    (0X5F1BE,0X5F22C);
	SetFunctionFlags(0X5F1BE,0x400);
	MakeFunction    (0X5F22C,0X5F2CC);
	SetFunctionFlags(0X5F22C,0x410);
	MakeFrame(0X5F22C, 0X8, 4, 0);
	MakeFunction    (0X5F2CC,0X5F2D8);
	SetFunctionFlags(0X5F2CC,0x400);
	MakeFunction    (0X5F2D8,0X5F2EC);
	SetFunctionFlags(0X5F2D8,0x400);
	MakeFunction    (0X5F2EC,0X5F380);
	SetFunctionFlags(0X5F2EC,0x410);
	MakeFrame(0X5F2EC, 0X6, 4, 0);
	MakeFunction    (0X5F380,0X5F3CC);
	SetFunctionFlags(0X5F380,0x410);
	MakeFrame(0X5F380, 0XE, 4, 0);
	MakeFunction    (0X5F3CC,0X5F3D2);
	SetFunctionFlags(0X5F3CC,0x400);
	MakeFunction    (0X5F3D2,0X5F3EC);
	SetFunctionFlags(0X5F3D2,0x400);
	MakeFunction    (0X5F3EC,0X5F402);
	SetFunctionFlags(0X5F3EC,0x400);
	MakeFunction    (0X5F4A6,0X5F566);
	SetFunctionFlags(0X5F4A6,0x400);
	MakeFunction    (0X5F566,0X5F6AC);
	SetFunctionFlags(0X5F566,0x400);
	MakeFunction    (0X5F6AC,0X5F6BC);
	SetFunctionFlags(0X5F6AC,0x400);
	MakeFunction    (0X5F6BC,0X5F79C);
	SetFunctionFlags(0X5F6BC,0x400);
	MakeFrame(0X5F6BC, 0X55B8, 0, 0);
	MakeFunction    (0X600A8,0X6010A);
	SetFunctionFlags(0X600A8,0x400);
	MakeFunction    (0X6010A,0X6015A);
	SetFunctionFlags(0X6010A,0x400);
	MakeFrame(0X6010A, 0X54CE, 0, 0);
	MakeFunction    (0X6015A,0X60178);
	SetFunctionFlags(0X6015A,0x400);
	MakeFunction    (0X60178,0X607C2);
	SetFunctionFlags(0X60178,0x410);
	MakeFrame(0X60178, 0X54F2, 4, 0);
	MakeFunction    (0X607C2,0X6080C);
	SetFunctionFlags(0X607C2,0x400);
	MakeFunction    (0X6080C,0X60880);
	SetFunctionFlags(0X6080C,0x400);
	MakeFunction    (0X60880,0X60BE2);
	SetFunctionFlags(0X60880,0x410);
	MakeFrame(0X60880, 0X6, 4, 0);
	MakeFunction    (0X60BE2,0X60E42);
	SetFunctionFlags(0X60BE2,0x410);
	MakeFrame(0X60BE2, 0XE, 4, 0);
	MakeFunction    (0X60E42,0X60FA6);
	SetFunctionFlags(0X60E42,0x400);
	MakeFunction    (0X60FA6,0X60FEC);
	SetFunctionFlags(0X60FA6,0x410);
	MakeFrame(0X60FA6, 0XC, 4, 0);
	MakeFunction    (0X60FEC,0X61088);
	SetFunctionFlags(0X60FEC,0x410);
	MakeFrame(0X60FEC, 0X5954, 4, 0);
	MakeFunction    (0X61088,0X612C2);
	SetFunctionFlags(0X61088,0x400);
	MakeFrame(0X61088, 0X5974, 0, 0);
	MakeFunction    (0X612C2,0X612D8);
	SetFunctionFlags(0X612C2,0x400);
	MakeFunction    (0X612D8,0X61460);
	SetFunctionFlags(0X612D8,0x410);
	MakeFrame(0X612D8, 0X5956, 4, 0);
	MakeFunction    (0X61460,0X61502);
	SetFunctionFlags(0X61460,0x410);
	MakeFrame(0X61460, 0X14, 4, 0);
	MakeFunction    (0X61502,0X615BC);
	SetFunctionFlags(0X61502,0x410);
	MakeFrame(0X61502, 0X72F2, 4, 0);
	MakeFunction    (0X615BC,0X6163A);
	SetFunctionFlags(0X615BC,0x410);
	MakeFrame(0X615BC, 0X4, 4, 0);
	MakeFunction    (0X6163A,0X616D8);
	SetFunctionFlags(0X6163A,0x400);
	MakeFunction    (0X616D8,0X617FE);
	SetFunctionFlags(0X616D8,0x400);
	MakeFunction    (0X617FE,0X6183E);
	SetFunctionFlags(0X617FE,0x410);
	MakeFrame(0X617FE, 0X14, 4, 0);
	MakeFunction    (0X6183E,0X61962);
	SetFunctionFlags(0X6183E,0x410);
	MakeFrame(0X6183E, 0X14, 4, 0);
	MakeFunction    (0X61962,0X61976);
	SetFunctionFlags(0X61962,0x410);
	MakeFrame(0X61962, 0X14, 4, 0);
	MakeFunction    (0X619FE,0X61A3E);
	SetFunctionFlags(0X619FE,0x400);
	MakeFunction    (0X61A3E,0X61E4C);
	SetFunctionFlags(0X61A3E,0x410);
	MakeFrame(0X61A3E, 0X7348, 4, 0);
	MakeFunction    (0X61E4C,0X61EC8);
	SetFunctionFlags(0X61E4C,0x400);
	MakeFunction    (0X61EC8,0X61ECE);
	SetFunctionFlags(0X61EC8,0x400);
	MakeFunction    (0X61ECE,0X61F02);
	SetFunctionFlags(0X61ECE,0x400);
	MakeFrame(0X61ECE, 0X4D60, 0, 0);
	MakeFunction    (0X61F02,0X621D6);
	SetFunctionFlags(0X61F02,0x400);
	MakeFunction    (0X621D6,0X62228);
	SetFunctionFlags(0X621D6,0x400);
	MakeFunction    (0X62228,0X622DE);
	SetFunctionFlags(0X62228,0x400);
	MakeFunction    (0X622DE,0X622E6);
	SetFunctionFlags(0X622DE,0x400);
	MakeFunction    (0X622E6,0X622EE);
	SetFunctionFlags(0X622E6,0x400);
	MakeFunction    (0X622EE,0X62B70);
	SetFunctionFlags(0X622EE,0x410);
	MakeFrame(0X622EE, 0X8, 4, 0);
	MakeFunction    (0X62B70,0X62EFE);
	SetFunctionFlags(0X62B70,0x400);
	MakeFunction    (0X62EFE,0X62F92);
	SetFunctionFlags(0X62EFE,0x400);
	MakeFunction    (0X62F92,0X6301E);
	SetFunctionFlags(0X62F92,0x400);
	MakeFunction    (0X6301E,0X63038);
	SetFunctionFlags(0X6301E,0x400);
	MakeFunction    (0X63038,0X63046);
	SetFunctionFlags(0X63038,0x400);
	MakeFunction    (0X63046,0X63056);
	SetFunctionFlags(0X63046,0x400);
	MakeFunction    (0X63056,0X63154);
	SetFunctionFlags(0X63056,0x400);
	MakeFunction    (0X63154,0X63172);
	SetFunctionFlags(0X63154,0x400);
	MakeFunction    (0X63172,0X63274);
	SetFunctionFlags(0X63172,0x410);
	MakeFrame(0X63172, 0X8, 4, 0);
	MakeFunction    (0X63E1C,0X63E2E);
	SetFunctionFlags(0X63E1C,0x400);
	MakeFunction    (0X63E2E,0X63E4A);
	SetFunctionFlags(0X63E2E,0x400);
	MakeFunction    (0X63E4A,0X63E6C);
	SetFunctionFlags(0X63E4A,0x400);
	MakeFunction    (0X63E6C,0X63E7A);
	SetFunctionFlags(0X63E6C,0x400);
	MakeFunction    (0X63E7A,0X63E94);
	SetFunctionFlags(0X63E7A,0x400);
	MakeFunction    (0X63E94,0X64058);
	SetFunctionFlags(0X63E94,0x410);
	MakeFrame(0X63E94, 0X14, 4, 0);
	MakeFunction    (0X64058,0X641DA);
	SetFunctionFlags(0X64058,0x400);
	MakeFunction    (0X641DA,0X64216);
	SetFunctionFlags(0X641DA,0x400);
	MakeFunction    (0X64216,0X64276);
	SetFunctionFlags(0X64216,0x410);
	MakeFrame(0X64216, 0X6, 4, 0);
	MakeFunction    (0X64276,0X643EE);
	SetFunctionFlags(0X64276,0x400);
	MakeFunction    (0X643EE,0X644B0);
	SetFunctionFlags(0X643EE,0x400);
	MakeFunction    (0X644B0,0X6457C);
	SetFunctionFlags(0X644B0,0x400);
	MakeFunction    (0X6457C,0X645B0);
	SetFunctionFlags(0X6457C,0x400);
	MakeFunction    (0X645B0,0X64642);
	SetFunctionFlags(0X645B0,0x410);
	MakeFrame(0X645B0, 0X6, 4, 0);
	MakeFunction    (0X64642,0X646DE);
	SetFunctionFlags(0X64642,0x410);
	MakeFrame(0X64642, 0X6, 4, 0);
	MakeFunction    (0X646DE,0X646F6);
	SetFunctionFlags(0X646DE,0x400);
	MakeFunction    (0X646F6,0X64762);
	SetFunctionFlags(0X646F6,0x400);
	MakeFunction    (0X64762,0X647EE);
	SetFunctionFlags(0X64762,0x400);
	MakeFunction    (0X647EE,0X648CC);
	SetFunctionFlags(0X647EE,0x400);
	MakeFunction    (0X648CC,0X64914);
	SetFunctionFlags(0X648CC,0x400);
	MakeFunction    (0X64914,0X64B3E);
	SetFunctionFlags(0X64914,0x400);
	MakeFunction    (0X64B3E,0X64B9E);
	SetFunctionFlags(0X64B3E,0x400);
	MakeFunction    (0X64B9E,0X64BF6);
	SetFunctionFlags(0X64B9E,0x400);
	MakeFunction    (0X64BF6,0X64BF8);
	SetFunctionFlags(0X64BF6,0x400);
	MakeFunction    (0X64BF8,0X64C06);
	SetFunctionFlags(0X64BF8,0x400);
	MakeFunction    (0X64C06,0X64C14);
	SetFunctionFlags(0X64C06,0x400);
	MakeFunction    (0X64C14,0X64C1C);
	SetFunctionFlags(0X64C14,0x400);
	MakeFunction    (0X64C1C,0X64C70);
	SetFunctionFlags(0X64C1C,0x400);
	MakeFunction    (0X64C70,0X64CDE);
	SetFunctionFlags(0X64C70,0x400);
	MakeFunction    (0X64CDE,0X64CEC);
	SetFunctionFlags(0X64CDE,0x400);
	MakeFunction    (0X64D6C,0X64DBA);
	SetFunctionFlags(0X64D6C,0x400);
	MakeFunction    (0X64DBA,0X64EC8);
	SetFunctionFlags(0X64DBA,0x400);
	MakeFunction    (0X64EC8,0X64EFC);
	SetFunctionFlags(0X64EC8,0x400);
	MakeFunction    (0X64EFC,0X66414);
	SetFunctionFlags(0X64EFC,0x400);
	MakeFunction    (0X66414,0X664A0);
	SetFunctionFlags(0X66414,0x400);
	MakeFunction    (0X664A0,0X6653A);
	SetFunctionFlags(0X664A0,0x400);
	MakeFunction    (0X6653A,0X66C78);
	SetFunctionFlags(0X6653A,0x410);
	MakeFrame(0X6653A, 0X14, 4, 0);
	MakeFunction    (0X66C78,0X66E48);
	SetFunctionFlags(0X66C78,0x400);
	MakeFunction    (0X66E48,0X66E70);
	SetFunctionFlags(0X66E48,0x400);
	MakeFunction    (0X66E70,0X66E8A);
	SetFunctionFlags(0X66E70,0x400);
	MakeFunction    (0X66E8A,0X66E98);
	SetFunctionFlags(0X66E8A,0x400);
	MakeFunction    (0X66E98,0X66EB2);
	SetFunctionFlags(0X66E98,0x400);
	MakeFunction    (0X66EB2,0X66ED2);
	SetFunctionFlags(0X66EB2,0x400);
	MakeFunction    (0X66ED2,0X66F48);
	SetFunctionFlags(0X66ED2,0x400);
	MakeFunction    (0X66F48,0X67010);
	SetFunctionFlags(0X66F48,0x410);
	MakeFrame(0X66F48, 0X8, 4, 0);
	MakeFunction    (0X67010,0X670C2);
	SetFunctionFlags(0X67010,0x400);
	MakeFunction    (0X670C2,0X6716E);
	SetFunctionFlags(0X670C2,0x400);
	MakeFunction    (0X6716E,0X6720E);
	SetFunctionFlags(0X6716E,0x400);
	MakeFunction    (0X6720E,0X67360);
	SetFunctionFlags(0X6720E,0x400);
	MakeFunction    (0X67360,0X67410);
	SetFunctionFlags(0X67360,0x400);
	MakeFrame(0X67360, 0X6CEA, 0, 0);
	MakeFunction    (0X67410,0X691DA);
	SetFunctionFlags(0X67410,0x410);
	MakeFrame(0X67410, 0X6D1A, 4, 0);
	MakeFunction    (0X691DA,0X692E0);
	SetFunctionFlags(0X691DA,0x400);
	MakeFunction    (0X692E0,0X69490);
	SetFunctionFlags(0X692E0,0x400);
	MakeFrame(0X692E0, 0X4DF6, 0, 0);
	MakeFunction    (0X69490,0X694D2);
	SetFunctionFlags(0X69490,0x400);
	MakeFunction    (0X694D2,0X694F4);
	SetFunctionFlags(0X694D2,0x400);
	MakeFunction    (0X694F4,0X6953A);
	SetFunctionFlags(0X694F4,0x400);
	MakeFunction    (0X6953A,0X6954C);
	SetFunctionFlags(0X6953A,0x400);
	MakeFunction    (0X6954C,0X6955E);
	SetFunctionFlags(0X6954C,0x400);
	MakeFunction    (0X6955E,0X695C0);
	SetFunctionFlags(0X6955E,0x400);
	MakeFunction    (0X695C0,0X69622);
	SetFunctionFlags(0X695C0,0x400);
	MakeFunction    (0X69622,0X69682);
	SetFunctionFlags(0X69622,0x400);
	MakeFunction    (0X69682,0X696E2);
	SetFunctionFlags(0X69682,0x400);
	MakeFunction    (0X696E2,0X697CC);
	SetFunctionFlags(0X696E2,0x400);
	MakeFunction    (0X697CC,0X69814);
	SetFunctionFlags(0X697CC,0x400);
	MakeFunction    (0X69814,0X6983E);
	SetFunctionFlags(0X69814,0x400);
	MakeFunction    (0X6983E,0X69A24);
	SetFunctionFlags(0X6983E,0x400);
	MakeFunction    (0X69A24,0X69A58);
	SetFunctionFlags(0X69A24,0x400);
	MakeFunction    (0X69A58,0X69A62);
	SetFunctionFlags(0X69A58,0x400);
	MakeFunction    (0X69A62,0X69B0A);
	SetFunctionFlags(0X69A62,0x400);
	MakeFrame(0X69A62, 0X5194, 0, 0);
	MakeFunction    (0X69B0A,0X69B2A);
	SetFunctionFlags(0X69B0A,0x400);
	MakeFunction    (0X6A162,0X6A16A);
	SetFunctionFlags(0X6A162,0x400);
	MakeFunction    (0X6A16A,0X6A172);
	SetFunctionFlags(0X6A16A,0x400);
	MakeFunction    (0X6A172,0X6A1F6);
	SetFunctionFlags(0X6A172,0x400);
	MakeFunction    (0X6A1F6,0X6A21C);
	SetFunctionFlags(0X6A1F6,0x400);
	MakeFunction    (0X6A21C,0X6A252);
	SetFunctionFlags(0X6A21C,0x400);
	MakeFunction    (0X6A252,0X6A296);
	SetFunctionFlags(0X6A252,0x400);
	MakeFunction    (0X6A296,0X6A2AE);
	SetFunctionFlags(0X6A296,0x400);
	MakeFunction    (0X6A2AE,0X6A2E8);
	SetFunctionFlags(0X6A2AE,0x400);
	MakeFunction    (0X6A2E8,0X6A3EC);
	SetFunctionFlags(0X6A2E8,0x400);
	MakeFrame(0X6A2E8, 0X5FBA, 0, 0);
	MakeFunction    (0X6A3EC,0X6A418);
	SetFunctionFlags(0X6A3EC,0x400);
	MakeFunction    (0X6A418,0X6A442);
	SetFunctionFlags(0X6A418,0x400);
	MakeFunction    (0X6A442,0X6A556);
	SetFunctionFlags(0X6A442,0x400);
	MakeFunction    (0X6A556,0X6A576);
	SetFunctionFlags(0X6A556,0x400);
	MakeFunction    (0X6A576,0X6A5D2);
	SetFunctionFlags(0X6A576,0x400);
	MakeFunction    (0X6A5D2,0X6A694);
	SetFunctionFlags(0X6A5D2,0x400);
	MakeFunction    (0X6A694,0X6AA44);
	SetFunctionFlags(0X6A694,0x410);
	MakeFrame(0X6A694, 0X5FA2, 4, 0);
	MakeFunction    (0X6AA44,0X6AA60);
	SetFunctionFlags(0X6AA44,0x400);
	MakeFunction    (0X6AA60,0X6AAE4);
	SetFunctionFlags(0X6AA60,0x400);
	MakeFunction    (0X6AAE4,0X6AB0C);
	SetFunctionFlags(0X6AAE4,0x400);
	MakeFunction    (0X6AB0C,0X6ABB0);
	SetFunctionFlags(0X6AB0C,0x400);
	MakeFunction    (0X6ABB0,0X6ABC2);
	SetFunctionFlags(0X6ABB0,0x400);
	MakeFunction    (0X6ABC2,0X6ABD4);
	SetFunctionFlags(0X6ABC2,0x400);
	MakeFunction    (0X6ABD4,0X6ABEA);
	SetFunctionFlags(0X6ABD4,0x400);
	MakeFunction    (0X6ABEA,0X6AC4C);
	SetFunctionFlags(0X6ABEA,0x400);
	MakeFunction    (0X6AC4C,0X6AC86);
	SetFunctionFlags(0X6AC4C,0x400);
	MakeFunction    (0X6AC86,0X6AF3E);
	SetFunctionFlags(0X6AC86,0x400);
	MakeFunction    (0X6AF3E,0X6AF7C);
	SetFunctionFlags(0X6AF3E,0x400);
	MakeFunction    (0X6AF7C,0X6B052);
	SetFunctionFlags(0X6AF7C,0x400);
	MakeFunction    (0X6B052,0X6B05C);
	SetFunctionFlags(0X6B052,0x400);
	MakeFunction    (0X6B05C,0X6B084);
	SetFunctionFlags(0X6B05C,0x400);
	MakeFunction    (0X6B084,0X6B156);
	SetFunctionFlags(0X6B084,0x400);
	MakeFrame(0X6B084, 0X734C, 0, 0);
	MakeFunction    (0X6B156,0X6B602);
	SetFunctionFlags(0X6B156,0x410);
	MakeFrame(0X6B156, 0X7372, 4, 0);
	MakeFunction    (0X6B602,0X6BA78);
	SetFunctionFlags(0X6B602,0x410);
	MakeFrame(0X6B602, 0X7366, 4, 0);
	MakeFunction    (0X6BA78,0X6BAAC);
	SetFunctionFlags(0X6BA78,0x410);
	MakeFrame(0X6BA78, 0X4, 4, 0);
	MakeFunction    (0X6BAAC,0X6BB44);
	SetFunctionFlags(0X6BAAC,0x400);
	MakeFunction    (0X6BB44,0X6BB68);
	SetFunctionFlags(0X6BB44,0x400);
	MakeFunction    (0X6BB68,0X6BB84);
	SetFunctionFlags(0X6BB68,0x400);
	MakeFunction    (0X6BB84,0X6BC6C);
	SetFunctionFlags(0X6BB84,0x400);
	MakeFrame(0X6BB84, 0X5C66, 0, 0);
	MakeFunction    (0X6BC6C,0X6BDFE);
	SetFunctionFlags(0X6BC6C,0x410);
	MakeFrame(0X6BC6C, 0X5CBA, 4, 0);
	MakeFunction    (0X6BDFE,0X6BF36);
	SetFunctionFlags(0X6BDFE,0x400);
	MakeFrame(0X6BDFE, 0X5CAC, 0, 0);
	MakeFunction    (0X6BF36,0X6BF68);
	SetFunctionFlags(0X6BF36,0x400);
	MakeFunction    (0X6BF68,0X6C236);
	SetFunctionFlags(0X6BF68,0x400);
	MakeFunction    (0X6C236,0X6C362);
	SetFunctionFlags(0X6C236,0x400);
	MakeFunction    (0X6C362,0X6C700);
	SetFunctionFlags(0X6C362,0x400);
	MakeFrame(0X6C362, 0X5CB0, 0, 0);
	MakeFunction    (0X6C700,0X6C7C0);
	SetFunctionFlags(0X6C700,0x400);
	MakeFunction    (0X6C7C0,0X6C870);
	SetFunctionFlags(0X6C7C0,0x400);
	MakeFunction    (0X6C870,0X6C8AE);
	SetFunctionFlags(0X6C870,0x400);
	MakeFunction    (0X6C8AE,0X6C9C0);
	SetFunctionFlags(0X6C8AE,0x400);
	MakeFunction    (0X6C9C0,0X6CA9E);
	SetFunctionFlags(0X6C9C0,0x400);
	MakeFunction    (0X6CA9E,0X6CB04);
	SetFunctionFlags(0X6CA9E,0x400);
	MakeFunction    (0X6CB04,0X6CC26);
	SetFunctionFlags(0X6CB04,0x400);
	MakeFunction    (0X6CC26,0X6CC3C);
	SetFunctionFlags(0X6CC26,0x400);
	MakeFunction    (0X6CC3C,0X6CD00);
	SetFunctionFlags(0X6CC3C,0x400);
	MakeFunction    (0X6CD00,0X6CD74);
	SetFunctionFlags(0X6CD00,0x410);
	MakeFrame(0X6CD00, 0X8, 4, 0);
	MakeFunction    (0X6CD74,0X6CD76);
	SetFunctionFlags(0X6CD74,0x400);
	MakeFunction    (0X6CD76,0X6CD94);
	SetFunctionFlags(0X6CD76,0x400);
	MakeFunction    (0X6CD94,0X6CDBA);
	SetFunctionFlags(0X6CD94,0x400);
	MakeFunction    (0X6CDBA,0X6CE22);
	SetFunctionFlags(0X6CDBA,0x410);
	MakeFrame(0X6CDBA, 0X6, 4, 0);
	MakeFunction    (0X6CE22,0X6CF1E);
	SetFunctionFlags(0X6CE22,0x400);
	MakeFunction    (0X6CF1E,0X6D042);
	SetFunctionFlags(0X6CF1E,0x410);
	MakeFrame(0X6CF1E, 0X12, 4, 0);
	MakeFunction    (0X6D042,0X6D0DE);
	SetFunctionFlags(0X6D042,0x410);
	MakeFrame(0X6D042, 0X4F6A, 4, 0);
	MakeFunction    (0X6D0DE,0X6D110);
	SetFunctionFlags(0X6D0DE,0x400);
	MakeFunction    (0X6D110,0X6D1F0);
	SetFunctionFlags(0X6D110,0x400);
	MakeFunction    (0X6D1F0,0X6D202);
	SetFunctionFlags(0X6D1F0,0x400);
	MakeFunction    (0X6D202,0X6D216);
	SetFunctionFlags(0X6D202,0x400);
	MakeFunction    (0X6D216,0X6D22A);
	SetFunctionFlags(0X6D216,0x400);
	MakeFunction    (0X6D22A,0X6D232);
	SetFunctionFlags(0X6D22A,0x400);
	MakeFunction    (0X6D232,0X6D244);
	SetFunctionFlags(0X6D232,0x400);
	MakeFunction    (0X6D244,0X6D29E);
	SetFunctionFlags(0X6D244,0x400);
	MakeFunction    (0X6D29E,0X6D2DE);
	SetFunctionFlags(0X6D29E,0x400);
	MakeFunction    (0X6D2DE,0X6D2FE);
	SetFunctionFlags(0X6D2DE,0x400);
	MakeFunction    (0X6D2FE,0X6D316);
	SetFunctionFlags(0X6D2FE,0x400);
	MakeFunction    (0X6D316,0X6D636);
	SetFunctionFlags(0X6D316,0x400);
	MakeFunction    (0X6D636,0X6D73A);
	SetFunctionFlags(0X6D636,0x400);
	MakeFunction    (0X6D73A,0X6D756);
	SetFunctionFlags(0X6D73A,0x400);
	MakeFunction    (0X6D756,0X6D798);
	SetFunctionFlags(0X6D756,0x400);
	MakeFunction    (0X6D798,0X6D7B6);
	SetFunctionFlags(0X6D798,0x400);
	MakeFunction    (0X6D7B6,0X6D7D0);
	SetFunctionFlags(0X6D7B6,0x400);
	MakeFunction    (0X6D7D0,0X6D7D8);
	SetFunctionFlags(0X6D7D0,0x400);
	MakeFunction    (0X6D7D8,0X6D7E6);
	SetFunctionFlags(0X6D7D8,0x400);
	MakeFunction    (0X6D7E6,0X6D7FC);
	SetFunctionFlags(0X6D7E6,0x400);
	MakeFunction    (0X6D7FC,0X6D88A);
	SetFunctionFlags(0X6D7FC,0x400);
	MakeFunction    (0X6D88A,0X6D944);
	SetFunctionFlags(0X6D88A,0x400);
	MakeFunction    (0X6D944,0X6D9F2);
	SetFunctionFlags(0X6D944,0x400);
	MakeFunction    (0X6D9F2,0X6DA1A);
	SetFunctionFlags(0X6D9F2,0x400);
	MakeFunction    (0X6DA1A,0X6DC40);
	SetFunctionFlags(0X6DA1A,0x410);
	MakeFrame(0X6DA1A, 0X6, 4, 0);
	MakeFunction    (0X6DC40,0X6DCD4);
	SetFunctionFlags(0X6DC40,0x410);
	MakeFrame(0X6DC40, 0X8, 4, 0);
	MakeFunction    (0X6DCD4,0X6DCEE);
	SetFunctionFlags(0X6DCD4,0x400);
	MakeFunction    (0X6DCEE,0X6DD26);
	SetFunctionFlags(0X6DCEE,0x400);
	MakeFunction    (0X6DD26,0X6DD54);
	SetFunctionFlags(0X6DD26,0x400);
	MakeFunction    (0X6DD54,0X6DD7A);
	SetFunctionFlags(0X6DD54,0x400);
	MakeFunction    (0X6DD7A,0X6DEDA);
	SetFunctionFlags(0X6DD7A,0x400);
	MakeFunction    (0X6DEDA,0X6E1FA);
	SetFunctionFlags(0X6DEDA,0x400);
	MakeFunction    (0X6E1FA,0X6E41E);
	SetFunctionFlags(0X6E1FA,0x400);
	MakeFunction    (0X6E41E,0X6E4FE);
	SetFunctionFlags(0X6E41E,0x400);
	MakeFunction    (0X6E4FE,0X6E556);
	SetFunctionFlags(0X6E4FE,0x400);
	MakeFunction    (0X6E556,0X6E588);
	SetFunctionFlags(0X6E556,0x400);
	MakeFunction    (0X6E588,0X6E5C0);
	SetFunctionFlags(0X6E588,0x400);
	MakeFunction    (0X6E5C0,0X6E5D0);
	SetFunctionFlags(0X6E5C0,0x400);
	MakeFunction    (0X6E5D0,0X6E742);
	SetFunctionFlags(0X6E5D0,0x400);
	MakeFunction    (0X6E742,0X6E81E);
	SetFunctionFlags(0X6E742,0x400);
	MakeFunction    (0X6E81E,0X6EB10);
	SetFunctionFlags(0X6E81E,0x400);
	MakeFunction    (0X6EB10,0X6EB4A);
	SetFunctionFlags(0X6EB10,0x400);
	MakeFunction    (0X6EB4A,0X6EE46);
	SetFunctionFlags(0X6EB4A,0x400);
	MakeFunction    (0X6EE46,0X6EE6A);
	SetFunctionFlags(0X6EE46,0x400);
	MakeFunction    (0X6EE6A,0X6EEC8);
	SetFunctionFlags(0X6EE6A,0x400);
	MakeFunction    (0X6EEC8,0X6EF00);
	SetFunctionFlags(0X6EEC8,0x400);
	MakeFunction    (0X6EF00,0X6F126);
	SetFunctionFlags(0X6EF00,0x410);
	MakeFrame(0X6EF00, 0X6932, 4, 0);
	MakeFunction    (0X6F126,0X6F206);
	SetFunctionFlags(0X6F126,0x400);
	MakeFunction    (0X6F206,0X6F260);
	SetFunctionFlags(0X6F206,0x400);
	MakeFunction    (0X6F260,0X6F29A);
	SetFunctionFlags(0X6F260,0x400);
	MakeFunction    (0X6F29A,0X70138);
	SetFunctionFlags(0X6F29A,0x410);
	MakeFrame(0X6F29A, 0X565E, 4, 0);
	MakeFunction    (0X70138,0X701F0);
	SetFunctionFlags(0X70138,0x400);
	MakeFunction    (0X701F0,0X702A6);
	SetFunctionFlags(0X701F0,0x400);
	MakeFunction    (0X702A6,0X70CF2);
	SetFunctionFlags(0X702A6,0x410);
	MakeFrame(0X702A6, 0X742A, 4, 0);
	MakeFunction    (0X70CF2,0X70ECE);
	SetFunctionFlags(0X70CF2,0x400);
	MakeFrame(0X70CF2, 0X74CA, 0, 0);
	MakeFunction    (0X70ECE,0X7100A);
	SetFunctionFlags(0X70ECE,0x400);
	MakeFrame(0X70ECE, 0X74CA, 0, 0);
	MakeFunction    (0X7100A,0X71122);
	SetFunctionFlags(0X7100A,0x400);
	MakeFrame(0X7100A, 0X686C, 0, 0);
	MakeFunction    (0X71122,0X714E0);
	SetFunctionFlags(0X71122,0x400);
	MakeFrame(0X71122, 0X688E, 0, 0);
	MakeFunction    (0X714E0,0X71DC2);
	SetFunctionFlags(0X714E0,0x400);
	MakeFrame(0X714E0, 0X7532, 0, 0);
	MakeFunction    (0X71DC2,0X72604);
	SetFunctionFlags(0X71DC2,0x410);
	MakeFrame(0X71DC2, 0X7532, 4, 0);
	MakeFunction    (0X72604,0X72624);
	SetFunctionFlags(0X72604,0x400);
	MakeFunction    (0X72624,0X72656);
	SetFunctionFlags(0X72624,0x400);
	MakeFunction    (0X72656,0X72688);
	SetFunctionFlags(0X72656,0x400);
	MakeFunction    (0X72688,0X72748);
	SetFunctionFlags(0X72688,0x400);
	MakeFunction    (0X72748,0X7289A);
	SetFunctionFlags(0X72748,0x400);
	MakeFunction    (0X7289A,0X728E0);
	SetFunctionFlags(0X7289A,0x400);
	MakeFunction    (0X728E0,0X72926);
	SetFunctionFlags(0X728E0,0x400);
	MakeFunction    (0X72926,0X729F4);
	SetFunctionFlags(0X72926,0x410);
	MakeFrame(0X72926, 0X63C4, 4, 0);
	MakeFunction    (0X729F4,0X72B06);
	SetFunctionFlags(0X729F4,0x400);
	MakeFunction    (0X72B06,0X72B0E);
	SetFunctionFlags(0X72B06,0x400);
	MakeFunction    (0X72B0E,0X73106);
	SetFunctionFlags(0X72B0E,0x410);
	MakeFrame(0X72B0E, 0X63E0, 4, 0);
	MakeFunction    (0X73106,0X733E0);
	SetFunctionFlags(0X73106,0x410);
	MakeFrame(0X73106, 0X7DBE, 4, 0);
	MakeFunction    (0X733E0,0X73466);
	SetFunctionFlags(0X733E0,0x400);
	MakeFunction    (0X73466,0X7350C);
	SetFunctionFlags(0X73466,0x400);
	MakeFunction    (0X7350C,0X7353C);
	SetFunctionFlags(0X7350C,0x400);
	MakeFunction    (0X7353C,0X7356E);
	SetFunctionFlags(0X7353C,0x400);
	MakeFunction    (0X7356E,0X7359E);
	SetFunctionFlags(0X7356E,0x400);
	MakeFunction    (0X7359E,0X735CE);
	SetFunctionFlags(0X7359E,0x400);
	MakeFunction    (0X735CE,0X735FE);
	SetFunctionFlags(0X735CE,0x400);
	MakeFunction    (0X735FE,0X73608);
	SetFunctionFlags(0X735FE,0x400);
	MakeFunction    (0X73608,0X73688);
	SetFunctionFlags(0X73608,0x400);
	MakeFunction    (0X73688,0X73698);
	SetFunctionFlags(0X73688,0x400);
	MakeFunction    (0X73826,0X73932);
	SetFunctionFlags(0X73826,0x400);
	MakeFunction    (0X73932,0X73A3E);
	SetFunctionFlags(0X73932,0x400);
	MakeFunction    (0X73A3E,0X7401A);
	SetFunctionFlags(0X73A3E,0x410);
	MakeFrame(0X73A3E, 0X8, 4, 0);
	MakeFunction    (0X7401A,0X740E0);
	SetFunctionFlags(0X7401A,0x400);
	MakeFunction    (0X740E0,0X741A4);
	SetFunctionFlags(0X740E0,0x410);
	MakeFrame(0X740E0, 0X6, 4, 0);
	MakeFunction    (0X741A4,0X741EC);
	SetFunctionFlags(0X741A4,0x400);
	MakeFunction    (0X741EC,0X74206);
	SetFunctionFlags(0X741EC,0x400);
	MakeFunction    (0X74206,0X7422C);
	SetFunctionFlags(0X74206,0x400);
	MakeFrame(0X74206, 0X4CD6, 0, 0);
	MakeFunction    (0X7422C,0X7424A);
	SetFunctionFlags(0X7422C,0x400);
	MakeFunction    (0X7424A,0X742A6);
	SetFunctionFlags(0X7424A,0x400);
	MakeFrame(0X7424A, 0X4CD6, 0, 0);
	MakeFunction    (0X742A6,0X7468C);
	SetFunctionFlags(0X742A6,0x400);
	MakeFrame(0X742A6, 0X7E48, 0, 0);
	MakeFunction    (0X7468C,0X748D0);
	SetFunctionFlags(0X7468C,0x400);
	MakeFunction    (0X748D0,0X74B7C);
	SetFunctionFlags(0X748D0,0x400);
	MakeFrame(0X748D0, 0X4FA6, 0, 0);
	MakeFunction    (0X74B7C,0X74BBC);
	SetFunctionFlags(0X74B7C,0x400);
	MakeFunction    (0X74BBC,0X74BE4);
	SetFunctionFlags(0X74BBC,0x400);
	MakeFunction    (0X74BE4,0X74C5A);
	SetFunctionFlags(0X74BE4,0x400);
	MakeFunction    (0X74C5A,0X74C8A);
	SetFunctionFlags(0X74C5A,0x400);
	MakeFunction    (0X74C8A,0X74C92);
	SetFunctionFlags(0X74C8A,0x400);
	MakeFunction    (0X74C92,0X74CA0);
	SetFunctionFlags(0X74C92,0x400);
	MakeFunction    (0X74CA0,0X74CBE);
	SetFunctionFlags(0X74CA0,0x400);
	MakeFunction    (0X74CBE,0X74E74);
	SetFunctionFlags(0X74CBE,0x400);
	MakeFunction    (0X74E74,0X75086);
	SetFunctionFlags(0X74E74,0x400);
	MakeFunction    (0X75086,0X750C8);
	SetFunctionFlags(0X75086,0x400);
	MakeFunction    (0X750C8,0X750E2);
	SetFunctionFlags(0X750C8,0x400);
	MakeFunction    (0X750E2,0X75174);
	SetFunctionFlags(0X750E2,0x400);
	MakeFunction    (0X75174,0X7519C);
	SetFunctionFlags(0X75174,0x400);
	MakeFunction    (0X7519C,0X751B4);
	SetFunctionFlags(0X7519C,0x400);
	MakeFunction    (0X751B4,0X751F8);
	SetFunctionFlags(0X751B4,0x400);
	MakeFunction    (0X751F8,0X7523C);
	SetFunctionFlags(0X751F8,0x400);
	MakeFunction    (0X7523C,0X75322);
	SetFunctionFlags(0X7523C,0x400);
	MakeFunction    (0X75322,0X75362);
	SetFunctionFlags(0X75322,0x400);
	MakeFunction    (0X75362,0X75370);
	SetFunctionFlags(0X75362,0x400);
	MakeFunction    (0X75370,0X755FA);
	SetFunctionFlags(0X75370,0x400);
	MakeFrame(0X75370, 0X50AC, 0, 0);
	MakeFunction    (0X755FA,0X757C0);
	SetFunctionFlags(0X755FA,0x400);
	MakeFunction    (0X757C0,0X758A6);
	SetFunctionFlags(0X757C0,0x400);
	MakeFunction    (0X758A6,0X758B4);
	SetFunctionFlags(0X758A6,0x400);
	MakeFunction    (0X758D8,0X759C6);
	SetFunctionFlags(0X758D8,0x400);
	MakeFunction    (0X759C6,0X75A54);
	SetFunctionFlags(0X759C6,0x400);
	MakeFunction    (0X75A54,0X75A66);
	SetFunctionFlags(0X75A54,0x400);
	MakeFunction    (0X75A66,0X75B80);
	SetFunctionFlags(0X75A66,0x400);
	MakeFunction    (0X75B80,0X75BC0);
	SetFunctionFlags(0X75B80,0x400);
	MakeFunction    (0X75BC0,0X75C8C);
	SetFunctionFlags(0X75BC0,0x400);
	MakeFunction    (0X75C8C,0X75CAC);
	SetFunctionFlags(0X75C8C,0x400);
	MakeFunction    (0X75CAC,0X75CD6);
	SetFunctionFlags(0X75CAC,0x400);
	MakeFunction    (0X75CD6,0X75D26);
	SetFunctionFlags(0X75CD6,0x400);
	MakeFunction    (0X75D26,0X75D50);
	SetFunctionFlags(0X75D26,0x400);
	MakeFunction    (0X75D50,0X75DA0);
	SetFunctionFlags(0X75D50,0x400);
	MakeFunction    (0X75DA0,0X75DAE);
	SetFunctionFlags(0X75DA0,0x400);
	MakeFunction    (0X75DAE,0X75DBC);
	SetFunctionFlags(0X75DAE,0x400);
	MakeFunction    (0X75DDC,0X75E94);
	SetFunctionFlags(0X75DDC,0x410);
	MakeFrame(0X75DDC, 0X8, 4, 0);
	MakeFunction    (0X75E94,0X75EA6);
	SetFunctionFlags(0X75E94,0x400);
	MakeFunction    (0X75EA6,0X75EEE);
	SetFunctionFlags(0X75EA6,0x400);
	MakeFunction    (0X75EEE,0X75F38);
	SetFunctionFlags(0X75EEE,0x400);
	MakeFunction    (0X75F38,0X75F80);
	SetFunctionFlags(0X75F38,0x400);
	MakeFunction    (0X75F80,0X75FCA);
	SetFunctionFlags(0X75F80,0x400);
	MakeFunction    (0X75FCA,0X76516);
	SetFunctionFlags(0X75FCA,0x410);
	MakeFrame(0X75FCA, 0X8, 4, 0);
	MakeFunction    (0X76516,0X76844);
	SetFunctionFlags(0X76516,0x400);
	MakeFunction    (0X76844,0X768D0);
	SetFunctionFlags(0X76844,0x400);
	MakeFrame(0X76844, 0X7D72, 0, 0);
	MakeFunction    (0X768D0,0X768DE);
	SetFunctionFlags(0X768D0,0x400);
	MakeFunction    (0X7695E,0X76A4E);
	SetFunctionFlags(0X7695E,0x400);
	MakeFunction    (0X76A4E,0X77246);
	SetFunctionFlags(0X76A4E,0x410);
	MakeFrame(0X76A4E, 0X8, 4, 0);
	MakeFunction    (0X77246,0X773EA);
	SetFunctionFlags(0X77246,0x400);
	MakeFunction    (0X773EA,0X773FC);
	SetFunctionFlags(0X773EA,0x410);
	MakeFrame(0X773EA, 0X8, 4, 0);
	MakeFunction    (0X77472,0X77658);
	SetFunctionFlags(0X77472,0x410);
	MakeFrame(0X77472, 0XA, 4, 0);
	MakeFunction    (0X77658,0X7766A);
	SetFunctionFlags(0X77658,0x400);
	MakeFunction    (0X7766A,0X7769A);
	SetFunctionFlags(0X7766A,0x400);
	MakeFunction    (0X7769A,0X776C6);
	SetFunctionFlags(0X7769A,0x400);
	MakeFunction    (0X776C6,0X7777E);
	SetFunctionFlags(0X776C6,0x410);
	MakeFrame(0X776C6, 0X14, 4, 0);
	MakeFunction    (0X7777E,0X777B4);
	SetFunctionFlags(0X7777E,0x400);
	MakeFunction    (0X777B4,0X777EA);
	SetFunctionFlags(0X777B4,0x400);
	MakeFunction    (0X777EA,0X77816);
	SetFunctionFlags(0X777EA,0x400);
	MakeFunction    (0X77816,0X77860);
	SetFunctionFlags(0X77816,0x400);
	MakeFunction    (0X77860,0X778D0);
	SetFunctionFlags(0X77860,0x410);
	MakeFrame(0X77860, 0X8, 4, 0);
	MakeFunction    (0X778D0,0X7792C);
	SetFunctionFlags(0X778D0,0x410);
	MakeFrame(0X778D0, 0X8, 4, 0);
	MakeFunction    (0X7792C,0X77C12);
	SetFunctionFlags(0X7792C,0x410);
	MakeFrame(0X7792C, 0X16, 4, 0);
	MakeFunction    (0X77C12,0X77C46);
	SetFunctionFlags(0X77C12,0x410);
	MakeFrame(0X77C12, 0X8, 4, 0);
	MakeFunction    (0X77C46,0X77CBC);
	SetFunctionFlags(0X77C46,0x410);
	MakeFrame(0X77C46, 0X8, 4, 0);
	MakeFunction    (0X77CBC,0X77CFC);
	SetFunctionFlags(0X77CBC,0x410);
	MakeFrame(0X77CBC, 0X8, 4, 0);
	MakeFunction    (0X77CFC,0X77D3E);
	SetFunctionFlags(0X77CFC,0x410);
	MakeFrame(0X77CFC, 0X4, 4, 0);
	MakeFunction    (0X77D3E,0X77D80);
	SetFunctionFlags(0X77D3E,0x410);
	MakeFrame(0X77D3E, 0X4, 4, 0);
	MakeFunction    (0X77D80,0X77DB2);
	SetFunctionFlags(0X77D80,0x410);
	MakeFrame(0X77D80, 0X4, 4, 0);
	MakeFunction    (0X77DB2,0X77DD8);
	SetFunctionFlags(0X77DB2,0x400);
	MakeFunction    (0X77DD8,0X77E14);
	SetFunctionFlags(0X77DD8,0x410);
	MakeFrame(0X77DD8, 0X6, 4, 0);
	MakeFunction    (0X77E14,0X77EA6);
	SetFunctionFlags(0X77E14,0x410);
	MakeFrame(0X77E14, 0X4, 4, 0);
	MakeFunction    (0X77EA6,0X77F0A);
	SetFunctionFlags(0X77EA6,0x400);
	MakeFunction    (0X77F3E,0X77F8E);
	SetFunctionFlags(0X77F3E,0x400);
	MakeFunction    (0X77FEA,0X7803A);
	SetFunctionFlags(0X77FEA,0x400);
	MakeFunction    (0X78090,0X780F0);
	SetFunctionFlags(0X78090,0x400);
	MakeFunction    (0X78150,0X781B0);
	SetFunctionFlags(0X78150,0x400);
	MakeFunction    (0X78220,0X78242);
	SetFunctionFlags(0X78220,0x410);
	MakeFrame(0X78220, 0XA, 4, 0);
	MakeFunction    (0X78242,0X782A6);
	SetFunctionFlags(0X78242,0x400);
	MakeFunction    (0X782A6,0X782E4);
	SetFunctionFlags(0X782A6,0x410);
	MakeFrame(0X782A6, 0X10, 4, 0);
	MakeFunction    (0X782E4,0X78394);
	SetFunctionFlags(0X782E4,0x400);
	MakeFunction    (0X78394,0X783CE);
	SetFunctionFlags(0X78394,0x410);
	MakeFrame(0X78394, 0XA, 4, 0);
	MakeFunction    (0X783CE,0X7840E);
	SetFunctionFlags(0X783CE,0x400);
	MakeFunction    (0X7840E,0X7841E);
	SetFunctionFlags(0X7840E,0x400);
	MakeFunction    (0X78472,0X78484);
	SetFunctionFlags(0X78472,0x400);
	MakeFunction    (0X78484,0X784B2);
	SetFunctionFlags(0X78484,0x400);
	MakeFunction    (0X784B2,0X785F4);
	SetFunctionFlags(0X784B2,0x410);
	MakeFrame(0X784B2, 0X6, 4, 0);
	MakeFunction    (0X785F4,0X786B2);
	SetFunctionFlags(0X785F4,0x400);
	MakeFunction    (0X786B2,0X786EC);
	SetFunctionFlags(0X786B2,0x410);
	MakeFrame(0X786B2, 0X8, 4, 0);
	MakeFunction    (0X786EC,0X7877E);
	SetFunctionFlags(0X786EC,0x400);
	MakeFunction    (0X7877E,0X787DA);
	SetFunctionFlags(0X7877E,0x400);
	MakeFunction    (0X787DA,0X7885E);
	SetFunctionFlags(0X787DA,0x400);
	MakeFunction    (0X7885E,0X7886A);
	SetFunctionFlags(0X7885E,0x400);
	MakeFunction    (0X7886A,0X7889E);
	SetFunctionFlags(0X7886A,0x400);
	MakeFunction    (0X7889E,0X78946);
	SetFunctionFlags(0X7889E,0x410);
	MakeFrame(0X7889E, 0XA, 4, 0);
	MakeFunction    (0X78946,0X789D2);
	SetFunctionFlags(0X78946,0x410);
	MakeFrame(0X78946, 0X8, 4, 0);
	MakeFunction    (0X789D2,0X78A52);
	SetFunctionFlags(0X789D2,0x410);
	MakeFrame(0X789D2, 0X6, 4, 0);
	MakeFunction    (0X78A52,0X78AAC);
	SetFunctionFlags(0X78A52,0x400);
	MakeFunction    (0X78AAC,0X78B48);
	SetFunctionFlags(0X78AAC,0x410);
	MakeFrame(0X78AAC, 0XA, 4, 0);
	MakeFunction    (0X78B48,0X78BBE);
	SetFunctionFlags(0X78B48,0x400);
	MakeFunction    (0X78BBE,0X78CDE);
	SetFunctionFlags(0X78BBE,0x400);
	MakeFunction    (0X78CDE,0X78D2E);
	SetFunctionFlags(0X78CDE,0x400);
	MakeFunction    (0X78D2E,0X78D3E);
	SetFunctionFlags(0X78D2E,0x400);
	MakeFunction    (0X78D3E,0X78D62);
	SetFunctionFlags(0X78D3E,0x400);
	MakeFunction    (0X78D62,0X78D6A);
	SetFunctionFlags(0X78D62,0x400);
	MakeFunction    (0X78D6A,0X78DDE);
	SetFunctionFlags(0X78D6A,0x410);
	MakeFrame(0X78D6A, 0X6, 4, 0);
	MakeFunction    (0X78DDE,0X78DFE);
	SetFunctionFlags(0X78DDE,0x400);
	MakeFunction    (0X78DFE,0X78E04);
	SetFunctionFlags(0X78DFE,0x400);
	MakeFunction    (0X78E04,0X78E56);
	SetFunctionFlags(0X78E04,0x410);
	MakeFrame(0X78E04, 0X14, 4, 0);
	MakeFunction    (0X78E56,0X79254);
	SetFunctionFlags(0X78E56,0x400);
	MakeFunction    (0X79254,0X79266);
	SetFunctionFlags(0X79254,0x400);
	MakeFunction    (0X79266,0X792AE);
	SetFunctionFlags(0X79266,0x400);
	MakeFunction    (0X792AE,0X794E0);
	SetFunctionFlags(0X792AE,0x400);
	MakeFunction    (0X79644,0X79668);
	SetFunctionFlags(0X79644,0x400);
	MakeFunction    (0X79668,0X79708);
	SetFunctionFlags(0X79668,0x400);
	MakeFunction    (0X79708,0X7972E);
	SetFunctionFlags(0X79708,0x400);
	MakeFunction    (0X7972E,0X79750);
	SetFunctionFlags(0X7972E,0x410);
	MakeFrame(0X7972E, 0X6, 4, 0);
	MakeFunction    (0X79750,0X79772);
	SetFunctionFlags(0X79750,0x410);
	MakeFrame(0X79750, 0X6, 4, 0);
	MakeFunction    (0X79772,0X7979C);
	SetFunctionFlags(0X79772,0x410);
	MakeFrame(0X79772, 0X6, 4, 0);
	MakeFunction    (0X7979C,0X797D2);
	SetFunctionFlags(0X7979C,0x410);
	MakeFrame(0X7979C, 0X6, 4, 0);
	MakeFunction    (0X797D2,0X797F4);
	SetFunctionFlags(0X797D2,0x410);
	MakeFrame(0X797D2, 0X6, 4, 0);
	MakeFunction    (0X797F4,0X79826);
	SetFunctionFlags(0X797F4,0x400);
	MakeFunction    (0X79826,0X7985C);
	SetFunctionFlags(0X79826,0x400);
	MakeFunction    (0X7985C,0X7989E);
	SetFunctionFlags(0X7985C,0x410);
	MakeFrame(0X7985C, 0X4, 4, 0);
	MakeFunction    (0X7989E,0X7990A);
	SetFunctionFlags(0X7989E,0x410);
	MakeFrame(0X7989E, 0X6, 4, 0);
	MakeFunction    (0X7990A,0X79960);
	SetFunctionFlags(0X7990A,0x400);
	MakeFunction    (0X79960,0X7998E);
	SetFunctionFlags(0X79960,0x410);
	MakeFrame(0X79960, 0X6, 4, 0);
	MakeFunction    (0X7998E,0X799BC);
	SetFunctionFlags(0X7998E,0x410);
	MakeFrame(0X7998E, 0X6, 4, 0);
	MakeFunction    (0X799BC,0X79A3E);
	SetFunctionFlags(0X799BC,0x400);
	MakeFunction    (0X79A3E,0X79A9E);
	SetFunctionFlags(0X79A3E,0x410);
	MakeFrame(0X79A3E, 0X8, 4, 0);
	MakeFunction    (0X79A9E,0X79AB0);
	SetFunctionFlags(0X79A9E,0x400);
	MakeFunction    (0X79AB0,0X79B10);
	SetFunctionFlags(0X79AB0,0x400);
	MakeFunction    (0X79B10,0X7A4A8);
	SetFunctionFlags(0X79B10,0x410);
	MakeFrame(0X79B10, 0X12, 4, 0);
	MakeFunction    (0X7A4A8,0X7A568);
	SetFunctionFlags(0X7A4A8,0x400);
	MakeFunction    (0X7A568,0X7A60C);
	SetFunctionFlags(0X7A568,0x410);
	MakeFrame(0X7A568, 0X8, 4, 0);
	MakeFunction    (0X7A60C,0X7A65A);
	SetFunctionFlags(0X7A60C,0x400);
	MakeFunction    (0X7A65A,0X7A812);
	SetFunctionFlags(0X7A65A,0x410);
	MakeFrame(0X7A65A, 0X8, 4, 0);
	MakeFunction    (0X7A812,0X7A886);
	SetFunctionFlags(0X7A812,0x410);
	MakeFrame(0X7A812, 0X4, 4, 0);
	MakeFunction    (0X7A886,0X7A89E);
	SetFunctionFlags(0X7A886,0x400);
	MakeFunction    (0X7A89E,0X7A99E);
	SetFunctionFlags(0X7A89E,0x400);
	MakeFunction    (0X7A99E,0X7AA26);
	SetFunctionFlags(0X7A99E,0x400);
	MakeFunction    (0X7AA26,0X7AAA8);
	SetFunctionFlags(0X7AA26,0x410);
	MakeFrame(0X7AA26, 0X8, 4, 0);
	MakeFunction    (0X7AAA8,0X7AB4C);
	SetFunctionFlags(0X7AAA8,0x400);
	MakeFunction    (0X7AB4C,0X7AB5A);
	SetFunctionFlags(0X7AB4C,0x400);
	MakeFunction    (0X7AC3C,0X7AD24);
	SetFunctionFlags(0X7AC3C,0x410);
	MakeFrame(0X7AC3C, 0X8, 4, 0);
	MakeFunction    (0X7AD24,0X7AD7E);
	SetFunctionFlags(0X7AD24,0x400);
	MakeFunction    (0X7AD7E,0X7AF40);
	SetFunctionFlags(0X7AD7E,0x410);
	MakeFrame(0X7AD7E, 0X6, 4, 0);
	MakeFunction    (0X7AF40,0X7AFBE);
	SetFunctionFlags(0X7AF40,0x400);
	MakeFunction    (0X7AFBE,0X7B248);
	SetFunctionFlags(0X7AFBE,0x400);
	MakeFunction    (0X7B248,0X7B2B2);
	SetFunctionFlags(0X7B248,0x400);
	MakeFunction    (0X7B2B2,0X7B33A);
	SetFunctionFlags(0X7B2B2,0x410);
	MakeFrame(0X7B2B2, 0X6, 4, 0);
	MakeFunction    (0X7B33A,0X7B6F8);
	SetFunctionFlags(0X7B33A,0x400);
	MakeFunction    (0X7B6F8,0X7B73E);
	SetFunctionFlags(0X7B6F8,0x410);
	MakeFrame(0X7B6F8, 0X8, 4, 0);
	MakeFunction    (0X7B73E,0X7B74C);
	SetFunctionFlags(0X7B73E,0x400);
	MakeFunction    (0X7B7B8,0X7B7CA);
	SetFunctionFlags(0X7B7B8,0x400);
	MakeFunction    (0X7B902,0X7BA28);
	SetFunctionFlags(0X7B902,0x400);
	MakeFunction    (0X7BA28,0X7BA36);
	SetFunctionFlags(0X7BA28,0x400);
	MakeFunction    (0X7BA62,0X7BC70);
	SetFunctionFlags(0X7BA62,0x410);
	MakeFrame(0X7BA62, 0X6, 4, 0);
	MakeFunction    (0X7BC70,0X7C23C);
	SetFunctionFlags(0X7BC70,0x410);
	MakeFrame(0X7BC70, 0XE, 4, 0);
	MakeFunction    (0X7C23C,0X7C24E);
	SetFunctionFlags(0X7C23C,0x400);
	MakeFunction    (0X7C2F0,0X7C358);
	SetFunctionFlags(0X7C2F0,0x410);
	MakeFrame(0X7C2F0, 0X6, 4, 0);
	MakeFunction    (0X7C358,0X7C3FE);
	SetFunctionFlags(0X7C358,0x410);
	MakeFrame(0X7C358, 0X14, 4, 0);
	MakeFunction    (0X7C3FE,0X7C482);
	SetFunctionFlags(0X7C3FE,0x400);
	MakeFunction    (0X7C482,0X7C4FC);
	SetFunctionFlags(0X7C482,0x400);
	MakeFunction    (0X7C4FC,0X7C59E);
	SetFunctionFlags(0X7C4FC,0x410);
	MakeFrame(0X7C4FC, 0X6, 4, 0);
	MakeFunction    (0X7C59E,0X7C71C);
	SetFunctionFlags(0X7C59E,0x410);
	MakeFrame(0X7C59E, 0XC, 4, 0);
	MakeFunction    (0X7C71C,0X7C79A);
	SetFunctionFlags(0X7C71C,0x400);
	MakeFunction    (0X7C79A,0X7C7E8);
	SetFunctionFlags(0X7C79A,0x400);
	MakeFunction    (0X7C7E8,0X7C822);
	SetFunctionFlags(0X7C7E8,0x400);
	MakeFunction    (0X7C822,0X7C832);
	SetFunctionFlags(0X7C822,0x400);
	MakeFunction    (0X7C832,0X7C840);
	SetFunctionFlags(0X7C832,0x400);
	MakeFunction    (0X7C8A2,0X7CAD2);
	SetFunctionFlags(0X7C8A2,0x400);
	MakeFunction    (0X7CAD2,0X7CAE0);
	SetFunctionFlags(0X7CAD2,0x400);
	MakeFunction    (0X7CAF4,0X7CB02);
	SetFunctionFlags(0X7CAF4,0x400);
	MakeFunction    (0X7CCBC,0X7CDD2);
	SetFunctionFlags(0X7CCBC,0x400);
	MakeFunction    (0X7CDD2,0X7CDE0);
	SetFunctionFlags(0X7CDD2,0x400);
	MakeFunction    (0X7CDE0,0X7CE90);
	SetFunctionFlags(0X7CDE0,0x400);
	MakeFunction    (0X7CE90,0X7CEB6);
	SetFunctionFlags(0X7CE90,0x400);
	MakeFunction    (0X7CEB6,0X7CFF8);
	SetFunctionFlags(0X7CEB6,0x410);
	MakeFrame(0X7CEB6, 0XC, 4, 0);
	MakeFunction    (0X7CFF8,0X7D082);
	SetFunctionFlags(0X7CFF8,0x400);
	MakeFunction    (0X7D082,0X7D0BE);
	SetFunctionFlags(0X7D082,0x400);
	MakeFunction    (0X7D0BE,0X7D262);
	SetFunctionFlags(0X7D0BE,0x400);
	MakeFunction    (0X7D262,0X7D332);
	SetFunctionFlags(0X7D262,0x400);
	MakeFunction    (0X7D332,0X7D368);
	SetFunctionFlags(0X7D332,0x400);
	MakeFunction    (0X7D368,0X7D478);
	SetFunctionFlags(0X7D368,0x400);
	MakeFunction    (0X7D478,0X7D490);
	SetFunctionFlags(0X7D478,0x400);
	MakeFunction    (0X7D490,0X7D508);
	SetFunctionFlags(0X7D490,0x410);
	MakeFrame(0X7D490, 0X6, 4, 0);
	MakeFunction    (0X7D508,0X7D5EA);
	SetFunctionFlags(0X7D508,0x410);
	MakeFrame(0X7D508, 0X6, 4, 0);
	MakeFunction    (0X7D5EA,0X7D66C);
	SetFunctionFlags(0X7D5EA,0x400);
	MakeFunction    (0X7D66C,0X7D67A);
	SetFunctionFlags(0X7D66C,0x400);
	MakeFunction    (0X7D7AA,0X7D8E0);
	SetFunctionFlags(0X7D7AA,0x400);
	MakeFunction    (0X7D8E0,0X7DB64);
	SetFunctionFlags(0X7D8E0,0x400);
	MakeFunction    (0X7DB64,0X7DCB4);
	SetFunctionFlags(0X7DB64,0x410);
	MakeFrame(0X7DB64, 0X6, 4, 0);
	MakeFunction    (0X7DCB4,0X7DCEE);
	SetFunctionFlags(0X7DCB4,0x400);
	MakeFunction    (0X7DCEE,0X7DD88);
	SetFunctionFlags(0X7DCEE,0x410);
	MakeFrame(0X7DCEE, 0X6, 4, 0);
	MakeFunction    (0X7DD88,0X7DDFA);
	SetFunctionFlags(0X7DD88,0x400);
	MakeFunction    (0X7DDFA,0X7DE52);
	SetFunctionFlags(0X7DDFA,0x400);
	MakeFunction    (0X7DE52,0X7DF6E);
	SetFunctionFlags(0X7DE52,0x400);
	MakeFunction    (0X7DF6E,0X7DF90);
	SetFunctionFlags(0X7DF6E,0x400);
	MakeFrame(0X7DF6E, 0X5A9A, 0, 0);
	MakeFunction    (0X7DF90,0X7DFBA);
	SetFunctionFlags(0X7DF90,0x400);
	MakeFunction    (0X7DFBA,0X7E000);
	SetFunctionFlags(0X7DFBA,0x400);
	MakeFunction    (0X7E000,0X7E04C);
	SetFunctionFlags(0X7E000,0x400);
	MakeFunction    (0X7E04C,0X7E0BC);
	SetFunctionFlags(0X7E04C,0x400);
	MakeFunction    (0X7E0BC,0X7E780);
	SetFunctionFlags(0X7E0BC,0x410);
	MakeFrame(0X7E0BC, 0X61B6, 4, 0);
	MakeFunction    (0X7EFC4,0X7F000);
	SetFunctionFlags(0X7EFC4,0x400);
	MakeFunction    (0X7F000,0X7F15A);
	SetFunctionFlags(0X7F000,0x400);
	MakeFunction    (0X7F15A,0X7F170);
	SetFunctionFlags(0X7F15A,0x410);
	MakeFrame(0X7F15A, 0X8, 4, 0);
	MakeFunction    (0X7F36C,0X7F4CA);
	SetFunctionFlags(0X7F36C,0x410);
	MakeFrame(0X7F36C, 0X8, 4, 0);
	MakeFunction    (0X7F4CA,0X7F616);
	SetFunctionFlags(0X7F4CA,0x400);
	MakeFunction    (0X7F616,0X7F61E);
	SetFunctionFlags(0X7F616,0x400);
	MakeFunction    (0X7F61E,0X7FD1C);
	SetFunctionFlags(0X7F61E,0x410);
	MakeFrame(0X7F61E, 0X6, 4, 0);
	MakeFunction    (0X7FD1C,0X7FE4C);
	SetFunctionFlags(0X7FD1C,0x400);
	MakeFunction    (0X7FE4C,0X7FEA2);
	SetFunctionFlags(0X7FE4C,0x400);
	MakeFunction    (0X7FEA2,0X7FEDC);
	SetFunctionFlags(0X7FEA2,0x400);
	MakeFunction    (0X7FEDC,0X7FF68);
	SetFunctionFlags(0X7FEDC,0x400);
	MakeFunction    (0X8003E,0X8006A);
	SetFunctionFlags(0X8003E,0x400);
	MakeFunction    (0X8006A,0X8016C);
	SetFunctionFlags(0X8006A,0x410);
	MakeFrame(0X8006A, 0X8, 4, 0);
	MakeFunction    (0X8016C,0X8020E);
	SetFunctionFlags(0X8016C,0x410);
	MakeFrame(0X8016C, 0X8, 4, 0);
	MakeFunction    (0X8020E,0X802BE);
	SetFunctionFlags(0X8020E,0x410);
	MakeFrame(0X8020E, 0X8, 4, 0);
	MakeFunction    (0X802BE,0X80338);
	SetFunctionFlags(0X802BE,0x400);
	MakeFunction    (0X80338,0X80362);
	SetFunctionFlags(0X80338,0x400);
	MakeFunction    (0X80362,0X803A4);
	SetFunctionFlags(0X80362,0x400);
	MakeFunction    (0X803A4,0X80770);
	SetFunctionFlags(0X803A4,0x400);
	MakeFunction    (0X80770,0X807E0);
	SetFunctionFlags(0X80770,0x400);
	MakeFunction    (0X807E0,0X8093C);
	SetFunctionFlags(0X807E0,0x400);
	MakeFunction    (0X8093C,0X809E4);
	SetFunctionFlags(0X8093C,0x400);
	MakeFunction    (0X809E4,0X80A78);
	SetFunctionFlags(0X809E4,0x400);
	MakeFunction    (0X80A78,0X80B1C);
	SetFunctionFlags(0X80A78,0x410);
	MakeFrame(0X80A78, 0X14, 4, 0);
	MakeFunction    (0X80B1C,0X80B94);
	SetFunctionFlags(0X80B1C,0x410);
	MakeFrame(0X80B1C, 0X14, 4, 0);
	MakeFunction    (0X80B94,0X81060);
	SetFunctionFlags(0X80B94,0x410);
	MakeFrame(0X80B94, 0X6, 4, 0);
	MakeFunction    (0X81060,0X8120A);
	SetFunctionFlags(0X81060,0x410);
	MakeFrame(0X81060, 0X6, 4, 0);
	MakeFunction    (0X8120A,0X81218);
	SetFunctionFlags(0X8120A,0x400);
	MakeFunction    (0X81344,0X81356);
	SetFunctionFlags(0X81344,0x400);
	MakeFunction    (0X81470,0X816D0);
	SetFunctionFlags(0X81470,0x410);
	MakeFrame(0X81470, 0X7E30, 4, 0);
	MakeFunction    (0X816D0,0X817BC);
	SetFunctionFlags(0X816D0,0x410);
	MakeFrame(0X816D0, 0XC, 4, 0);
	MakeFunction    (0X817BC,0X818F0);
	SetFunctionFlags(0X817BC,0x400);
	MakeFrame(0X817BC, 0X6120, 0, 0);
	MakeFunction    (0X818F0,0X819C2);
	SetFunctionFlags(0X818F0,0x400);
	MakeFrame(0X818F0, 0X6116, 0, 0);
	MakeFunction    (0X819C2,0X81A56);
	SetFunctionFlags(0X819C2,0x400);
	MakeFunction    (0X81A56,0X81AFA);
	SetFunctionFlags(0X81A56,0x400);
	MakeFunction    (0X81AFA,0X81B3C);
	SetFunctionFlags(0X81AFA,0x400);
	MakeFunction    (0X81B3C,0X81BC2);
	SetFunctionFlags(0X81B3C,0x400);
	MakeFunction    (0X81BC2,0X81E20);
	SetFunctionFlags(0X81BC2,0x410);
	MakeFrame(0X81BC2, 0XA, 4, 0);
	MakeFunction    (0X81E20,0X81F74);
	SetFunctionFlags(0X81E20,0x410);
	MakeFrame(0X81E20, 0X14, 4, 0);
	MakeFunction    (0X81F74,0X81FBC);
	SetFunctionFlags(0X81F74,0x400);
	MakeFunction    (0X81FBC,0X81FCE);
	SetFunctionFlags(0X81FBC,0x400);
	MakeFunction    (0X81FCE,0X8201A);
	SetFunctionFlags(0X81FCE,0x400);
	MakeFunction    (0X8201A,0X82046);
	SetFunctionFlags(0X8201A,0x400);
	MakeFunction    (0X82046,0X8208A);
	SetFunctionFlags(0X82046,0x400);
	MakeFunction    (0X8208A,0X820CE);
	SetFunctionFlags(0X8208A,0x410);
	MakeFrame(0X8208A, 0XC, 4, 0);
	MakeFunction    (0X820CE,0X8212A);
	SetFunctionFlags(0X820CE,0x410);
	MakeFrame(0X820CE, 0XC, 4, 0);
	MakeFunction    (0X8212A,0X82178);
	SetFunctionFlags(0X8212A,0x410);
	MakeFrame(0X8212A, 0XC, 4, 0);
	MakeFunction    (0X82178,0X822F0);
	SetFunctionFlags(0X82178,0x410);
	MakeFrame(0X82178, 0X2C, 4, 0);
	MakeFunction    (0X822F0,0X8233A);
	SetFunctionFlags(0X822F0,0x410);
	MakeFrame(0X822F0, 0XC, 4, 0);
	MakeFunction    (0X8233A,0X823CE);
	SetFunctionFlags(0X8233A,0x410);
	MakeFrame(0X8233A, 0XC, 4, 0);
	MakeFunction    (0X823CE,0X82442);
	SetFunctionFlags(0X823CE,0x410);
	MakeFrame(0X823CE, 0XC, 4, 0);
	MakeFunction    (0X82442,0X82534);
	SetFunctionFlags(0X82442,0x410);
	MakeFrame(0X82442, 0X40A8, 4, 0);
	MakeFunction    (0X82534,0X8260C);
	SetFunctionFlags(0X82534,0x410);
	MakeFrame(0X82534, 0X8, 4, 0);
	MakeFunction    (0X8260C,0X82706);
	SetFunctionFlags(0X8260C,0x410);
	MakeFrame(0X8260C, 0X4, 4, 0);
	MakeFunction    (0X82706,0X82766);
	SetFunctionFlags(0X82706,0x410);
	MakeFrame(0X82706, 0X6, 4, 0);
	MakeFunction    (0X82766,0X8291C);
	SetFunctionFlags(0X82766,0x410);
	MakeFrame(0X82766, 0X55A4, 4, 0);
	MakeFunction    (0X8291C,0X82954);
	SetFunctionFlags(0X8291C,0x400);
	MakeFunction    (0X82954,0X829FA);
	SetFunctionFlags(0X82954,0x400);
	MakeFunction    (0X829FA,0X8315E);
	SetFunctionFlags(0X829FA,0x400);
	MakeFunction    (0X8315E,0X8316C);
	SetFunctionFlags(0X8315E,0x400);
	MakeFunction    (0X831BA,0X8336E);
	SetFunctionFlags(0X831BA,0x410);
	MakeFrame(0X831BA, 0XA, 4, 0);
	MakeFunction    (0X8336E,0X833C4);
	SetFunctionFlags(0X8336E,0x410);
	MakeFrame(0X8336E, 0X6, 4, 0);
	MakeFunction    (0X833C4,0X833EC);
	SetFunctionFlags(0X833C4,0x400);
	MakeFunction    (0X833EC,0X8345E);
	SetFunctionFlags(0X833EC,0x410);
	MakeFrame(0X833EC, 0X6, 4, 0);
	MakeFunction    (0X8345E,0X8347E);
	SetFunctionFlags(0X8345E,0x400);
	MakeFunction    (0X8347E,0X8349C);
	SetFunctionFlags(0X8347E,0x400);
	MakeFunction    (0X8349C,0X834AA);
	SetFunctionFlags(0X8349C,0x400);
	MakeFunction    (0X83562,0X83570);
	SetFunctionFlags(0X83562,0x400);
	MakeFunction    (0X835B2,0X83736);
	SetFunctionFlags(0X835B2,0x410);
	MakeFrame(0X835B2, 0X8, 4, 0);
	MakeFunction    (0X83736,0X83754);
	SetFunctionFlags(0X83736,0x400);
	MakeFrame(0X83736, 0X54AE, 0, 0);
	MakeFunction    (0X83754,0X8386E);
	SetFunctionFlags(0X83754,0x400);
	MakeFunction    (0X8386E,0X838BA);
	SetFunctionFlags(0X8386E,0x400);
	MakeFunction    (0X838BA,0X838CA);
	SetFunctionFlags(0X838BA,0x400);
	MakeFunction    (0X838CA,0X838FE);
	SetFunctionFlags(0X838CA,0x400);
	MakeFunction    (0X838FE,0X83986);
	SetFunctionFlags(0X838FE,0x410);
	MakeFrame(0X838FE, 0X8, 4, 0);
	MakeFunction    (0X83986,0X840B4);
	SetFunctionFlags(0X83986,0x410);
	MakeFrame(0X83986, 0X30, 4, 0);
	MakeFunction    (0X840B4,0X842B2);
	SetFunctionFlags(0X840B4,0x410);
	MakeFrame(0X840B4, 0XA, 4, 0);
	MakeFunction    (0X842B2,0X8443E);
	SetFunctionFlags(0X842B2,0x400);
	MakeFunction    (0X8443E,0X8465C);
	SetFunctionFlags(0X8443E,0x410);
	MakeFrame(0X8443E, 0X6, 4, 0);
	MakeFunction    (0X8465C,0X84692);
	SetFunctionFlags(0X8465C,0x400);
	MakeFunction    (0X84692,0X846A4);
	SetFunctionFlags(0X84692,0x400);
	MakeFunction    (0X84854,0X848A8);
	SetFunctionFlags(0X84854,0x410);
	MakeFrame(0X84854, 0X8, 4, 0);
	MakeFunction    (0X848A8,0X84A9E);
	SetFunctionFlags(0X848A8,0x410);
	MakeFrame(0X848A8, 0XC, 4, 0);
	MakeFunction    (0X84A9E,0X84AB0);
	SetFunctionFlags(0X84A9E,0x400);
	MakeFunction    (0X84AB0,0X8515E);
	SetFunctionFlags(0X84AB0,0x410);
	MakeFrame(0X84AB0, 0X8, 4, 0);
	MakeFunction    (0X8515E,0X8522E);
	SetFunctionFlags(0X8515E,0x400);
	MakeFunction    (0X8522E,0X8523A);
	SetFunctionFlags(0X8522E,0x400);
	MakeFunction    (0X8523A,0X85316);
	SetFunctionFlags(0X8523A,0x400);
	MakeFunction    (0X85316,0X85326);
	SetFunctionFlags(0X85316,0x400);
	MakeFunction    (0X85326,0X85342);
	SetFunctionFlags(0X85326,0x400);
	MakeFunction    (0X85342,0X853A2);
	SetFunctionFlags(0X85342,0x400);
	MakeFunction    (0X853A2,0X859CC);
	SetFunctionFlags(0X853A2,0x400);
	MakeFunction    (0X859CC,0X85D6E);
	SetFunctionFlags(0X859CC,0x410);
	MakeFrame(0X859CC, 0X8, 4, 0);
	MakeFunction    (0X85D6E,0X8600A);
	SetFunctionFlags(0X85D6E,0x400);
	MakeFrame(0X85D6E, 0X6364, 0, 0);
	MakeFunction    (0X8600A,0X86230);
	SetFunctionFlags(0X8600A,0x400);
	MakeFunction    (0X86230,0X8640C);
	SetFunctionFlags(0X86230,0x410);
	MakeFrame(0X86230, 0X1A, 4, 0);
	MakeFunction    (0X8640C,0X865A6);
	SetFunctionFlags(0X8640C,0x400);
	MakeFunction    (0X865A6,0X8671C);
	SetFunctionFlags(0X865A6,0x400);
	MakeFunction    (0X8671C,0X8688E);
	SetFunctionFlags(0X8671C,0x410);
	MakeFrame(0X8671C, 0XA, 4, 0);
	MakeFunction    (0X8688E,0X869C0);
	SetFunctionFlags(0X8688E,0x410);
	MakeFrame(0X8688E, 0XA, 4, 0);
	MakeFunction    (0X869C0,0X86AC4);
	SetFunctionFlags(0X869C0,0x410);
	MakeFrame(0X869C0, 0X5E82, 4, 0);
	MakeFunction    (0X86AC4,0X86BC4);
	SetFunctionFlags(0X86AC4,0x400);
	MakeFunction    (0X86BC4,0X86BE4);
	SetFunctionFlags(0X86BC4,0x400);
	MakeFunction    (0X86CBE,0X86D9C);
	SetFunctionFlags(0X86CBE,0x400);
	MakeFunction    (0X86D9C,0X86E58);
	SetFunctionFlags(0X86D9C,0x410);
	MakeFrame(0X86D9C, 0X6, 4, 0);
	MakeFunction    (0X86E58,0X86F0A);
	SetFunctionFlags(0X86E58,0x400);
	MakeFunction    (0X86F0A,0X86FAA);
	SetFunctionFlags(0X86F0A,0x400);
	MakeFunction    (0X86FAA,0X8704A);
	SetFunctionFlags(0X86FAA,0x400);
	MakeFunction    (0X8704A,0X870D8);
	SetFunctionFlags(0X8704A,0x400);
	MakeFunction    (0X870D8,0X870E6);
	SetFunctionFlags(0X870D8,0x400);
	MakeFunction    (0X87166,0X871EC);
	SetFunctionFlags(0X87166,0x410);
	MakeFrame(0X87166, 0X6, 4, 0);
	MakeFunction    (0X871EC,0X87270);
	SetFunctionFlags(0X871EC,0x400);
	MakeFunction    (0X87270,0X872F2);
	SetFunctionFlags(0X87270,0x410);
	MakeFrame(0X87270, 0X16, 4, 0);
	MakeFunction    (0X87374,0X873EA);
	SetFunctionFlags(0X87374,0x400);
	MakeFunction    (0X873EA,0X8745E);
	SetFunctionFlags(0X873EA,0x400);
	MakeFunction    (0X8745E,0X874C0);
	SetFunctionFlags(0X8745E,0x400);
	MakeFrame(0X8745E, 0XDD0, 0, 0);
	MakeFunction    (0X874C0,0X8751A);
	SetFunctionFlags(0X874C0,0x400);
	MakeFunction    (0X8751A,0X8756A);
	SetFunctionFlags(0X8751A,0x400);
	MakeFunction    (0X8756A,0X87578);
	SetFunctionFlags(0X8756A,0x400);
	MakeFunction    (0X875BA,0X87606);
	SetFunctionFlags(0X875BA,0x400);
	MakeFunction    (0X87606,0X87650);
	SetFunctionFlags(0X87606,0x400);
	MakeFunction    (0X87650,0X87698);
	SetFunctionFlags(0X87650,0x400);
	MakeFunction    (0X87698,0X876D6);
	SetFunctionFlags(0X87698,0x400);
	MakeFunction    (0X876D6,0X87710);
	SetFunctionFlags(0X876D6,0x400);
	MakeFunction    (0X87710,0X8774A);
	SetFunctionFlags(0X87710,0x400);
	MakeFunction    (0X8774A,0X87784);
	SetFunctionFlags(0X8774A,0x400);
	MakeFunction    (0X87784,0X877BE);
	SetFunctionFlags(0X87784,0x400);
	MakeFunction    (0X877BE,0X877F8);
	SetFunctionFlags(0X877BE,0x400);
	MakeFunction    (0X877F8,0X87832);
	SetFunctionFlags(0X877F8,0x400);
	MakeFunction    (0X87832,0X87868);
	SetFunctionFlags(0X87832,0x400);
	MakeFunction    (0X87868,0X8789E);
	SetFunctionFlags(0X87868,0x400);
	MakeFunction    (0X878CE,0X878FA);
	SetFunctionFlags(0X878CE,0x400);
	MakeFunction    (0X878FA,0X8791E);
	SetFunctionFlags(0X878FA,0x400);
	MakeFunction    (0X8791E,0X87940);
	SetFunctionFlags(0X8791E,0x400);
	MakeFunction    (0X87940,0X87962);
	SetFunctionFlags(0X87940,0x400);
	MakeFunction    (0X87962,0X8797C);
	SetFunctionFlags(0X87962,0x400);
	MakeFunction    (0X8797C,0X87992);
	SetFunctionFlags(0X8797C,0x400);
	MakeFunction    (0X879A8,0X879B4);
	SetFunctionFlags(0X879A8,0x400);
	MakeFunction    (0X879B4,0X879BC);
	SetFunctionFlags(0X879B4,0x400);
}


static Functions(void) {

	Functions_0();
}


static SegRegs(void) {
}


static Patches(void) {
}


static Bytes(void) {
	Bytes_0();
	Bytes_1();
	Bytes_2();
	Bytes_3();
	Bytes_4();
	Bytes_5();
	Bytes_6();
	Bytes_7();
	Bytes_8();
	Bytes_9();
	Bytes_10();
	Bytes_11();
	Bytes_12();
	Bytes_13();
	Bytes_14();
	Bytes_15();
	Bytes_16();
	Bytes_17();
        EndTypeUpdating(UTP_STRUCT);
}


